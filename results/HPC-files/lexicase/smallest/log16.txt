Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-58 -59 -59 -59] -59] [[89 89 47 89] 47] [[-19 61 -19 -19] -19] [[-38 -38 -30 -38] -38] [[-48 -48 -40 -48] -48] [[-20 -20 -20 84] -20] [[-54 -54 55 -54] -54] [[-97 -97 -97 94] -97] [[-81 -81 -81 -88] -88] [[98 -25 -25 -25] -25] [(-73 -73 -73 -73) -73] [(18 18 18 18) 18] [(-46 -46 -46 -46) -46] [(35 35 35 35) 35] [(3 3 3 3) 3] [(42 46 71 76) 42] [(41 9 48 48) 9] [(30 97 1 9) 1] [(65 9 11 40) 9] [(69 32 93 93) 32] [(40 92 39 99) 39] [(8 87 88 63) 8] [(12 18 0 38) 0] [(24 42 42 94) 24] [(36 50 46 62) 36] [(96 80 89 49) 49] [(85 4 66 73) 4] [(0 22 60 19) 0] [(87 51 70 99) 51] [(3 61 10 50) 3] [(45 18 86 98) 18] [(37 53 19 88) 19] [(50 66 13 39) 13] [(79 62 16 76) 16] [(7 60 50 49) 7] [(30 -40 37 -93) -93] [(-96 -17 -37 -91) -96] [(-39 42 27 -97) -97] [(-85 16 85 46) -85] [(21 -79 73 -55) -79] [(66 -18 14 -100) -100] [(-64 -67 -3 91) -67] [(19 -27 -99 -38) -99] [(-90 -83 -22 59) -90] [(13 -68 28 -17) -68] [(-16 -71 69 60) -71] [(62 -51 13 47) -51] [(-2 -95 -10 -21) -95] [(39 -85 -76 -61) -85] [(-19 17 69 29) -19] [(23 -78 91 27) -78] [(-95 -70 27 4) -95] [(-8 79 -69 94) -69] [(-98 21 2 -24) -98] [(-41 17 28 -69) -69] [(-64 26 28 -58) -64] [(-18 -74 24 54) -74] [(70 90 52 -84) -84] [(-64 -88 -59 49) -88] [(-21 6 14 1) -21] [(-47 27 -9 4) -47] [(-92 9 57 -45) -92] [(81 -88 0 -87) -88] [(32 -100 -55 88) -100] [(-1 86 -35 28) -35] [(-50 -4 -36 -26) -50] [(-89 57 15 26) -89] [(2 9 77 91) 2] [(-62 1 -2 80) -62] [(-67 -57 90 -96) -96] [(-59 54 -1 -50) -59] [(-74 85 92 46) -74] [(31 -44 44 33) -44] [(-47 9 -97 6) -97] [(25 -59 45 -95) -95] [(-67 47 -47 36) -67] [(94 83 17 96) 17] [(5 -19 -44 2) -44] [(21 -18 12 -33) -33] [(-10 28 77 -12) -12] [(52 -53 51 15) -53] [(43 -3 -70 99) -70] [(-83 20 40 -59) -83] [(-94 68 -67 49) -94] [(33 -49 100 -30) -49] [(60 -40 59 -33) -40] [(70 -12 50 26) -12] [(-76 -29 -84 38) -84] [(2 -74 48 61) -74] [(2 24 28 1) 1] [(75 57 89 16) 16] [(96 -11 -98 17) -98] [(58 97 30 55) 30] [(-53 -48 -25 -69) -69] [(88 97 94 -18) -18])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-58 -59 -59 -59] -59]
Train Case:   6 | Input/Output: [[89 89 47 89] 47]
Train Case:   7 | Input/Output: [[-19 61 -19 -19] -19]
Train Case:   8 | Input/Output: [[-38 -38 -30 -38] -38]
Train Case:   9 | Input/Output: [[-48 -48 -40 -48] -48]
Train Case:  10 | Input/Output: [[-20 -20 -20 84] -20]
Train Case:  11 | Input/Output: [[-54 -54 55 -54] -54]
Train Case:  12 | Input/Output: [[-97 -97 -97 94] -97]
Train Case:  13 | Input/Output: [[-81 -81 -81 -88] -88]
Train Case:  14 | Input/Output: [[98 -25 -25 -25] -25]
Train Case:  15 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  16 | Input/Output: [(18 18 18 18) 18]
Train Case:  17 | Input/Output: [(-46 -46 -46 -46) -46]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(3 3 3 3) 3]
Train Case:  20 | Input/Output: [(42 46 71 76) 42]
Train Case:  21 | Input/Output: [(41 9 48 48) 9]
Train Case:  22 | Input/Output: [(30 97 1 9) 1]
Train Case:  23 | Input/Output: [(65 9 11 40) 9]
Train Case:  24 | Input/Output: [(69 32 93 93) 32]
Train Case:  25 | Input/Output: [(40 92 39 99) 39]
Train Case:  26 | Input/Output: [(8 87 88 63) 8]
Train Case:  27 | Input/Output: [(12 18 0 38) 0]
Train Case:  28 | Input/Output: [(24 42 42 94) 24]
Train Case:  29 | Input/Output: [(36 50 46 62) 36]
Train Case:  30 | Input/Output: [(96 80 89 49) 49]
Train Case:  31 | Input/Output: [(85 4 66 73) 4]
Train Case:  32 | Input/Output: [(0 22 60 19) 0]
Train Case:  33 | Input/Output: [(87 51 70 99) 51]
Train Case:  34 | Input/Output: [(3 61 10 50) 3]
Train Case:  35 | Input/Output: [(45 18 86 98) 18]
Train Case:  36 | Input/Output: [(37 53 19 88) 19]
Train Case:  37 | Input/Output: [(50 66 13 39) 13]
Train Case:  38 | Input/Output: [(79 62 16 76) 16]
Train Case:  39 | Input/Output: [(7 60 50 49) 7]
Train Case:  40 | Input/Output: [(30 -40 37 -93) -93]
Train Case:  41 | Input/Output: [(-96 -17 -37 -91) -96]
Train Case:  42 | Input/Output: [(-39 42 27 -97) -97]
Train Case:  43 | Input/Output: [(-85 16 85 46) -85]
Train Case:  44 | Input/Output: [(21 -79 73 -55) -79]
Train Case:  45 | Input/Output: [(66 -18 14 -100) -100]
Train Case:  46 | Input/Output: [(-64 -67 -3 91) -67]
Train Case:  47 | Input/Output: [(19 -27 -99 -38) -99]
Train Case:  48 | Input/Output: [(-90 -83 -22 59) -90]
Train Case:  49 | Input/Output: [(13 -68 28 -17) -68]
Train Case:  50 | Input/Output: [(-16 -71 69 60) -71]
Train Case:  51 | Input/Output: [(62 -51 13 47) -51]
Train Case:  52 | Input/Output: [(-2 -95 -10 -21) -95]
Train Case:  53 | Input/Output: [(39 -85 -76 -61) -85]
Train Case:  54 | Input/Output: [(-19 17 69 29) -19]
Train Case:  55 | Input/Output: [(23 -78 91 27) -78]
Train Case:  56 | Input/Output: [(-95 -70 27 4) -95]
Train Case:  57 | Input/Output: [(-8 79 -69 94) -69]
Train Case:  58 | Input/Output: [(-98 21 2 -24) -98]
Train Case:  59 | Input/Output: [(-41 17 28 -69) -69]
Train Case:  60 | Input/Output: [(-64 26 28 -58) -64]
Train Case:  61 | Input/Output: [(-18 -74 24 54) -74]
Train Case:  62 | Input/Output: [(70 90 52 -84) -84]
Train Case:  63 | Input/Output: [(-64 -88 -59 49) -88]
Train Case:  64 | Input/Output: [(-21 6 14 1) -21]
Train Case:  65 | Input/Output: [(-47 27 -9 4) -47]
Train Case:  66 | Input/Output: [(-92 9 57 -45) -92]
Train Case:  67 | Input/Output: [(81 -88 0 -87) -88]
Train Case:  68 | Input/Output: [(32 -100 -55 88) -100]
Train Case:  69 | Input/Output: [(-1 86 -35 28) -35]
Train Case:  70 | Input/Output: [(-50 -4 -36 -26) -50]
Train Case:  71 | Input/Output: [(-89 57 15 26) -89]
Train Case:  72 | Input/Output: [(2 9 77 91) 2]
Train Case:  73 | Input/Output: [(-62 1 -2 80) -62]
Train Case:  74 | Input/Output: [(-67 -57 90 -96) -96]
Train Case:  75 | Input/Output: [(-59 54 -1 -50) -59]
Train Case:  76 | Input/Output: [(-74 85 92 46) -74]
Train Case:  77 | Input/Output: [(31 -44 44 33) -44]
Train Case:  78 | Input/Output: [(-47 9 -97 6) -97]
Train Case:  79 | Input/Output: [(25 -59 45 -95) -95]
Train Case:  80 | Input/Output: [(-67 47 -47 36) -67]
Train Case:  81 | Input/Output: [(94 83 17 96) 17]
Train Case:  82 | Input/Output: [(5 -19 -44 2) -44]
Train Case:  83 | Input/Output: [(21 -18 12 -33) -33]
Train Case:  84 | Input/Output: [(-10 28 77 -12) -12]
Train Case:  85 | Input/Output: [(52 -53 51 15) -53]
Train Case:  86 | Input/Output: [(43 -3 -70 99) -70]
Train Case:  87 | Input/Output: [(-83 20 40 -59) -83]
Train Case:  88 | Input/Output: [(-94 68 -67 49) -94]
Train Case:  89 | Input/Output: [(33 -49 100 -30) -49]
Train Case:  90 | Input/Output: [(60 -40 59 -33) -40]
Train Case:  91 | Input/Output: [(70 -12 50 26) -12]
Train Case:  92 | Input/Output: [(-76 -29 -84 38) -84]
Train Case:  93 | Input/Output: [(2 -74 48 61) -74]
Train Case:  94 | Input/Output: [(2 24 28 1) 1]
Train Case:  95 | Input/Output: [(75 57 89 16) 16]
Train Case:  96 | Input/Output: [(96 -11 -98 17) -98]
Train Case:  97 | Input/Output: [(58 97 30 55) 30]
Train Case:  98 | Input/Output: [(-53 -48 -25 -69) -69]
Train Case:  99 | Input/Output: [(88 97 94 -18) -18]
Test Case:   0 | Input/Output: [[-53 -73 -53 -53] -73]
Test Case:   1 | Input/Output: [[-33 -33 -1 -33] -33]
Test Case:   2 | Input/Output: [[-38 -58 -38 -38] -58]
Test Case:   3 | Input/Output: [[100 -57 -57 -57] -57]
Test Case:   4 | Input/Output: [[-66 -66 -47 -66] -66]
Test Case:   5 | Input/Output: [[73 21 21 21] 21]
Test Case:   6 | Input/Output: [[-86 34 34 34] -86]
Test Case:   7 | Input/Output: [[45 -37 45 45] -37]
Test Case:   8 | Input/Output: [[-24 -24 -24 -92] -92]
Test Case:   9 | Input/Output: [[85 85 85 -27] -27]
Test Case:  10 | Input/Output: [[-16 -16 -43 -16] -43]
Test Case:  11 | Input/Output: [[-58 79 -58 -58] -58]
Test Case:  12 | Input/Output: [[-23 -60 -23 -23] -60]
Test Case:  13 | Input/Output: [[42 -99 42 42] -99]
Test Case:  14 | Input/Output: [[24 -46 -46 -46] -46]
Test Case:  15 | Input/Output: [[93 -52 93 93] -52]
Test Case:  16 | Input/Output: [[-99 36 36 36] -99]
Test Case:  17 | Input/Output: [[-38 -38 -38 -1] -38]
Test Case:  18 | Input/Output: [[-64 -93 -93 -93] -93]
Test Case:  19 | Input/Output: [[-28 5 5 5] -28]
Test Case:  20 | Input/Output: [[-39 49 49 49] -39]
Test Case:  21 | Input/Output: [[-54 -54 -37 -54] -54]
Test Case:  22 | Input/Output: [[-59 -59 -59 66] -59]
Test Case:  23 | Input/Output: [[50 50 50 71] 50]
Test Case:  24 | Input/Output: [[-18 99 99 99] -18]
Test Case:  25 | Input/Output: [[-65 -92 -65 -65] -92]
Test Case:  26 | Input/Output: [[64 64 -21 64] -21]
Test Case:  27 | Input/Output: [[87 81 81 81] 81]
Test Case:  28 | Input/Output: [[-72 34 -72 -72] -72]
Test Case:  29 | Input/Output: [[-4 -4 34 -4] -4]
Test Case:  30 | Input/Output: [[55 -3 -3 -3] -3]
Test Case:  31 | Input/Output: [[41 41 -56 41] -56]
Test Case:  32 | Input/Output: [[99 63 99 99] 63]
Test Case:  33 | Input/Output: [[-11 -11 -45 -11] -45]
Test Case:  34 | Input/Output: [[80 80 80 14] 14]
Test Case:  35 | Input/Output: [[-11 59 -11 -11] -11]
Test Case:  36 | Input/Output: [[-78 51 51 51] -78]
Test Case:  37 | Input/Output: [[-29 -87 -87 -87] -87]
Test Case:  38 | Input/Output: [[26 -99 26 26] -99]
Test Case:  39 | Input/Output: [[-17 -17 -17 33] -17]
Test Case:  40 | Input/Output: [[69 69 69 -23] -23]
Test Case:  41 | Input/Output: [[4 4 95 4] 4]
Test Case:  42 | Input/Output: [[29 29 50 29] 29]
Test Case:  43 | Input/Output: [[-43 -43 -43 -59] -59]
Test Case:  44 | Input/Output: [[61 61 61 -34] -34]
Test Case:  45 | Input/Output: [[77 -76 -76 -76] -76]
Test Case:  46 | Input/Output: [[39 39 -80 39] -80]
Test Case:  47 | Input/Output: [[-12 -29 -12 -12] -29]
Test Case:  48 | Input/Output: [[-69 18 -69 -69] -69]
Test Case:  49 | Input/Output: [[5 38 5 5] 5]
Test Case:  50 | Input/Output: [[85 20 85 85] 20]
Test Case:  51 | Input/Output: [[82 82 73 82] 73]
Test Case:  52 | Input/Output: [[-59 -7 -59 -59] -59]
Test Case:  53 | Input/Output: [[98 54 98 98] 54]
Test Case:  54 | Input/Output: [[19 85 85 85] 19]
Test Case:  55 | Input/Output: [[3 4 3 3] 3]
Test Case:  56 | Input/Output: [[-49 20 -49 -49] -49]
Test Case:  57 | Input/Output: [[63 98 63 63] 63]
Test Case:  58 | Input/Output: [[-4 -30 -4 -4] -30]
Test Case:  59 | Input/Output: [[-4 -4 -4 -93] -93]
Test Case:  60 | Input/Output: [[-67 -67 -93 -67] -93]
Test Case:  61 | Input/Output: [[14 14 14 -87] -87]
Test Case:  62 | Input/Output: [[-4 -4 72 -4] -4]
Test Case:  63 | Input/Output: [[34 34 34 -61] -61]
Test Case:  64 | Input/Output: [[46 -30 -30 -30] -30]
Test Case:  65 | Input/Output: [[43 43 -67 43] -67]
Test Case:  66 | Input/Output: [[48 -68 -68 -68] -68]
Test Case:  67 | Input/Output: [[7 6 7 7] 6]
Test Case:  68 | Input/Output: [[93 93 93 -30] -30]
Test Case:  69 | Input/Output: [[-73 48 48 48] -73]
Test Case:  70 | Input/Output: [[-81 78 78 78] -81]
Test Case:  71 | Input/Output: [[13 -47 -47 -47] -47]
Test Case:  72 | Input/Output: [[45 45 45 -57] -57]
Test Case:  73 | Input/Output: [[4 4 4 -52] -52]
Test Case:  74 | Input/Output: [[-25 1 1 1] -25]
Test Case:  75 | Input/Output: [[-19 95 95 95] -19]
Test Case:  76 | Input/Output: [[68 68 -19 68] -19]
Test Case:  77 | Input/Output: [[-98 39 -98 -98] -98]
Test Case:  78 | Input/Output: [[58 -67 -67 -67] -67]
Test Case:  79 | Input/Output: [[-72 -72 48 -72] -72]
Test Case:  80 | Input/Output: [[-28 -28 -14 -28] -28]
Test Case:  81 | Input/Output: [[19 19 19 -37] -37]
Test Case:  82 | Input/Output: [[-6 -67 -6 -6] -67]
Test Case:  83 | Input/Output: [[18 18 18 -50] -50]
Test Case:  84 | Input/Output: [[0 -50 0 0] -50]
Test Case:  85 | Input/Output: [[38 -60 38 38] -60]
Test Case:  86 | Input/Output: [[-59 -12 -59 -59] -59]
Test Case:  87 | Input/Output: [[68 87 68 68] 68]
Test Case:  88 | Input/Output: [[-26 -26 20 -26] -26]
Test Case:  89 | Input/Output: [[26 26 26 -13] -13]
Test Case:  90 | Input/Output: [[57 57 -75 57] -75]
Test Case:  91 | Input/Output: [[29 38 38 38] 29]
Test Case:  92 | Input/Output: [[-3 -3 -3 -27] -27]
Test Case:  93 | Input/Output: [[-36 -36 55 -36] -36]
Test Case:  94 | Input/Output: [[-76 -76 -76 93] -76]
Test Case:  95 | Input/Output: [[41 -88 -88 -88] -88]
Test Case:  96 | Input/Output: [[45 45 95 45] 45]
Test Case:  97 | Input/Output: [[13 13 13 13] 13]
Test Case:  98 | Input/Output: [[-64 83 83 83] -64]
Test Case:  99 | Input/Output: [[-84 -84 -84 -71] -84]
Test Case: 100 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 101 | Input/Output: [(54 54 54 54) 54]
Test Case: 102 | Input/Output: [(100 100 100 100) 100]
Test Case: 103 | Input/Output: [(18 18 18 18) 18]
Test Case: 104 | Input/Output: [(95 95 95 95) 95]
Test Case: 105 | Input/Output: [(23 23 23 23) 23]
Test Case: 106 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 107 | Input/Output: [(96 96 96 96) 96]
Test Case: 108 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 109 | Input/Output: [(84 84 84 84) 84]
Test Case: 110 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 111 | Input/Output: [(68 68 68 68) 68]
Test Case: 112 | Input/Output: [(75 75 75 75) 75]
Test Case: 113 | Input/Output: [(12 12 12 12) 12]
Test Case: 114 | Input/Output: [(79 79 79 79) 79]
Test Case: 115 | Input/Output: [(84 84 84 84) 84]
Test Case: 116 | Input/Output: [(24 24 24 24) 24]
Test Case: 117 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 118 | Input/Output: [(96 96 96 96) 96]
Test Case: 119 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 120 | Input/Output: [(97 97 97 97) 97]
Test Case: 121 | Input/Output: [(8 8 8 8) 8]
Test Case: 122 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 123 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 124 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 125 | Input/Output: [(75 75 75 75) 75]
Test Case: 126 | Input/Output: [(16 16 16 16) 16]
Test Case: 127 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 128 | Input/Output: [(48 48 48 48) 48]
Test Case: 129 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 130 | Input/Output: [(60 60 60 60) 60]
Test Case: 131 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 132 | Input/Output: [(95 95 95 95) 95]
Test Case: 133 | Input/Output: [(49 49 49 49) 49]
Test Case: 134 | Input/Output: [(27 27 27 27) 27]
Test Case: 135 | Input/Output: [(54 54 54 54) 54]
Test Case: 136 | Input/Output: [(55 55 55 55) 55]
Test Case: 137 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 138 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 139 | Input/Output: [(54 54 54 54) 54]
Test Case: 140 | Input/Output: [(98 98 98 98) 98]
Test Case: 141 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 142 | Input/Output: [(12 12 12 12) 12]
Test Case: 143 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 144 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 145 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 146 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 147 | Input/Output: [(14 14 14 14) 14]
Test Case: 148 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 149 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 150 | Input/Output: [(12 12 12 12) 12]
Test Case: 151 | Input/Output: [(91 91 91 91) 91]
Test Case: 152 | Input/Output: [(88 88 88 88) 88]
Test Case: 153 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 154 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 155 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 156 | Input/Output: [(77 77 77 77) 77]
Test Case: 157 | Input/Output: [(53 53 53 53) 53]
Test Case: 158 | Input/Output: [(47 47 47 47) 47]
Test Case: 159 | Input/Output: [(18 18 18 18) 18]
Test Case: 160 | Input/Output: [(1 1 1 1) 1]
Test Case: 161 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 162 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 163 | Input/Output: [(94 94 94 94) 94]
Test Case: 164 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 165 | Input/Output: [(69 69 69 69) 69]
Test Case: 166 | Input/Output: [(89 89 89 89) 89]
Test Case: 167 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 168 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 169 | Input/Output: [(37 37 37 37) 37]
Test Case: 170 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 171 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 172 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 173 | Input/Output: [(53 53 53 53) 53]
Test Case: 174 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 175 | Input/Output: [(72 72 72 72) 72]
Test Case: 176 | Input/Output: [(96 96 96 96) 96]
Test Case: 177 | Input/Output: [(72 72 72 72) 72]
Test Case: 178 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 179 | Input/Output: [(99 99 99 99) 99]
Test Case: 180 | Input/Output: [(74 74 74 74) 74]
Test Case: 181 | Input/Output: [(7 7 7 7) 7]
Test Case: 182 | Input/Output: [(7 7 7 7) 7]
Test Case: 183 | Input/Output: [(98 98 98 98) 98]
Test Case: 184 | Input/Output: [(71 71 71 71) 71]
Test Case: 185 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 186 | Input/Output: [(86 86 86 86) 86]
Test Case: 187 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 188 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 189 | Input/Output: [(95 95 95 95) 95]
Test Case: 190 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 191 | Input/Output: [(71 71 71 71) 71]
Test Case: 192 | Input/Output: [(69 69 69 69) 69]
Test Case: 193 | Input/Output: [(17 17 17 17) 17]
Test Case: 194 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 195 | Input/Output: [(45 45 45 45) 45]
Test Case: 196 | Input/Output: [(58 58 58 58) 58]
Test Case: 197 | Input/Output: [(29 29 29 29) 29]
Test Case: 198 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 199 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 200 | Input/Output: [(15 61 47 76) 15]
Test Case: 201 | Input/Output: [(75 79 1 53) 1]
Test Case: 202 | Input/Output: [(35 74 72 18) 18]
Test Case: 203 | Input/Output: [(30 47 12 72) 12]
Test Case: 204 | Input/Output: [(21 63 7 29) 7]
Test Case: 205 | Input/Output: [(68 77 80 24) 24]
Test Case: 206 | Input/Output: [(10 91 87 72) 10]
Test Case: 207 | Input/Output: [(20 53 86 27) 20]
Test Case: 208 | Input/Output: [(2 1 50 72) 1]
Test Case: 209 | Input/Output: [(28 64 27 71) 27]
Test Case: 210 | Input/Output: [(52 24 38 88) 24]
Test Case: 211 | Input/Output: [(85 83 84 17) 17]
Test Case: 212 | Input/Output: [(83 41 31 5) 5]
Test Case: 213 | Input/Output: [(17 42 93 82) 17]
Test Case: 214 | Input/Output: [(76 48 22 60) 22]
Test Case: 215 | Input/Output: [(42 42 28 45) 28]
Test Case: 216 | Input/Output: [(100 52 67 29) 29]
Test Case: 217 | Input/Output: [(23 32 27 33) 23]
Test Case: 218 | Input/Output: [(67 53 72 77) 53]
Test Case: 219 | Input/Output: [(7 86 50 17) 7]
Test Case: 220 | Input/Output: [(98 44 69 38) 38]
Test Case: 221 | Input/Output: [(41 26 81 66) 26]
Test Case: 222 | Input/Output: [(40 56 22 92) 22]
Test Case: 223 | Input/Output: [(96 24 67 36) 24]
Test Case: 224 | Input/Output: [(28 96 37 32) 28]
Test Case: 225 | Input/Output: [(65 32 7 13) 7]
Test Case: 226 | Input/Output: [(19 21 15 0) 0]
Test Case: 227 | Input/Output: [(75 69 45 13) 13]
Test Case: 228 | Input/Output: [(39 64 20 41) 20]
Test Case: 229 | Input/Output: [(64 95 72 39) 39]
Test Case: 230 | Input/Output: [(79 62 36 56) 36]
Test Case: 231 | Input/Output: [(95 15 26 23) 15]
Test Case: 232 | Input/Output: [(12 29 53 19) 12]
Test Case: 233 | Input/Output: [(85 70 12 78) 12]
Test Case: 234 | Input/Output: [(66 72 97 12) 12]
Test Case: 235 | Input/Output: [(63 15 41 60) 15]
Test Case: 236 | Input/Output: [(84 24 4 4) 4]
Test Case: 237 | Input/Output: [(57 86 10 58) 10]
Test Case: 238 | Input/Output: [(20 66 25 5) 5]
Test Case: 239 | Input/Output: [(6 95 2 41) 2]
Test Case: 240 | Input/Output: [(92 84 6 46) 6]
Test Case: 241 | Input/Output: [(91 39 75 32) 32]
Test Case: 242 | Input/Output: [(1 73 5 92) 1]
Test Case: 243 | Input/Output: [(4 92 86 98) 4]
Test Case: 244 | Input/Output: [(65 11 74 93) 11]
Test Case: 245 | Input/Output: [(87 1 83 13) 1]
Test Case: 246 | Input/Output: [(9 46 66 26) 9]
Test Case: 247 | Input/Output: [(16 18 3 97) 3]
Test Case: 248 | Input/Output: [(79 38 9 72) 9]
Test Case: 249 | Input/Output: [(35 58 93 100) 35]
Test Case: 250 | Input/Output: [(6 68 48 13) 6]
Test Case: 251 | Input/Output: [(27 100 76 13) 13]
Test Case: 252 | Input/Output: [(59 5 65 40) 5]
Test Case: 253 | Input/Output: [(23 31 61 69) 23]
Test Case: 254 | Input/Output: [(2 84 99 72) 2]
Test Case: 255 | Input/Output: [(94 52 32 35) 32]
Test Case: 256 | Input/Output: [(51 78 48 33) 33]
Test Case: 257 | Input/Output: [(74 27 54 40) 27]
Test Case: 258 | Input/Output: [(40 96 28 14) 14]
Test Case: 259 | Input/Output: [(71 82 4 42) 4]
Test Case: 260 | Input/Output: [(49 70 90 97) 49]
Test Case: 261 | Input/Output: [(32 87 35 40) 32]
Test Case: 262 | Input/Output: [(74 17 97 84) 17]
Test Case: 263 | Input/Output: [(92 34 0 47) 0]
Test Case: 264 | Input/Output: [(3 31 87 3) 3]
Test Case: 265 | Input/Output: [(3 0 100 41) 0]
Test Case: 266 | Input/Output: [(80 94 71 99) 71]
Test Case: 267 | Input/Output: [(87 51 61 76) 51]
Test Case: 268 | Input/Output: [(49 74 53 76) 49]
Test Case: 269 | Input/Output: [(68 44 87 4) 4]
Test Case: 270 | Input/Output: [(30 100 72 95) 30]
Test Case: 271 | Input/Output: [(52 78 12 1) 1]
Test Case: 272 | Input/Output: [(82 32 53 19) 19]
Test Case: 273 | Input/Output: [(98 48 9 84) 9]
Test Case: 274 | Input/Output: [(66 92 57 12) 12]
Test Case: 275 | Input/Output: [(96 37 90 82) 37]
Test Case: 276 | Input/Output: [(98 47 25 14) 14]
Test Case: 277 | Input/Output: [(59 74 91 95) 59]
Test Case: 278 | Input/Output: [(91 31 88 64) 31]
Test Case: 279 | Input/Output: [(52 47 60 1) 1]
Test Case: 280 | Input/Output: [(41 60 20 45) 20]
Test Case: 281 | Input/Output: [(54 25 47 56) 25]
Test Case: 282 | Input/Output: [(33 19 55 96) 19]
Test Case: 283 | Input/Output: [(20 85 99 64) 20]
Test Case: 284 | Input/Output: [(22 34 1 86) 1]
Test Case: 285 | Input/Output: [(42 56 85 99) 42]
Test Case: 286 | Input/Output: [(12 27 94 67) 12]
Test Case: 287 | Input/Output: [(84 26 93 9) 9]
Test Case: 288 | Input/Output: [(77 32 78 88) 32]
Test Case: 289 | Input/Output: [(43 59 35 91) 35]
Test Case: 290 | Input/Output: [(47 79 6 30) 6]
Test Case: 291 | Input/Output: [(99 32 72 89) 32]
Test Case: 292 | Input/Output: [(5 6 86 84) 5]
Test Case: 293 | Input/Output: [(8 78 18 70) 8]
Test Case: 294 | Input/Output: [(64 38 27 92) 27]
Test Case: 295 | Input/Output: [(5 13 66 22) 5]
Test Case: 296 | Input/Output: [(65 41 87 95) 41]
Test Case: 297 | Input/Output: [(45 2 64 67) 2]
Test Case: 298 | Input/Output: [(77 55 47 29) 29]
Test Case: 299 | Input/Output: [(82 60 89 12) 12]
Test Case: 300 | Input/Output: [(22 56 52 21) 21]
Test Case: 301 | Input/Output: [(88 62 74 15) 15]
Test Case: 302 | Input/Output: [(76 13 90 54) 13]
Test Case: 303 | Input/Output: [(8 45 33 33) 8]
Test Case: 304 | Input/Output: [(59 65 56 88) 56]
Test Case: 305 | Input/Output: [(18 53 65 4) 4]
Test Case: 306 | Input/Output: [(39 67 45 86) 39]
Test Case: 307 | Input/Output: [(36 37 1 79) 1]
Test Case: 308 | Input/Output: [(32 61 44 29) 29]
Test Case: 309 | Input/Output: [(24 0 60 81) 0]
Test Case: 310 | Input/Output: [(74 6 4 96) 4]
Test Case: 311 | Input/Output: [(21 96 22 34) 21]
Test Case: 312 | Input/Output: [(89 85 100 28) 28]
Test Case: 313 | Input/Output: [(72 75 26 62) 26]
Test Case: 314 | Input/Output: [(49 82 88 53) 49]
Test Case: 315 | Input/Output: [(18 50 57 48) 18]
Test Case: 316 | Input/Output: [(47 86 46 83) 46]
Test Case: 317 | Input/Output: [(0 20 25 56) 0]
Test Case: 318 | Input/Output: [(57 92 71 41) 41]
Test Case: 319 | Input/Output: [(72 36 49 25) 25]
Test Case: 320 | Input/Output: [(17 20 85 32) 17]
Test Case: 321 | Input/Output: [(82 97 66 97) 66]
Test Case: 322 | Input/Output: [(83 8 74 32) 8]
Test Case: 323 | Input/Output: [(73 74 92 88) 73]
Test Case: 324 | Input/Output: [(82 30 26 20) 20]
Test Case: 325 | Input/Output: [(83 84 4 41) 4]
Test Case: 326 | Input/Output: [(3 89 37 48) 3]
Test Case: 327 | Input/Output: [(32 54 87 62) 32]
Test Case: 328 | Input/Output: [(88 39 86 37) 37]
Test Case: 329 | Input/Output: [(91 23 79 7) 7]
Test Case: 330 | Input/Output: [(94 48 6 15) 6]
Test Case: 331 | Input/Output: [(17 8 61 86) 8]
Test Case: 332 | Input/Output: [(36 80 90 67) 36]
Test Case: 333 | Input/Output: [(68 81 9 74) 9]
Test Case: 334 | Input/Output: [(63 21 92 35) 21]
Test Case: 335 | Input/Output: [(21 88 25 49) 21]
Test Case: 336 | Input/Output: [(60 54 7 17) 7]
Test Case: 337 | Input/Output: [(61 39 64 14) 14]
Test Case: 338 | Input/Output: [(24 76 77 81) 24]
Test Case: 339 | Input/Output: [(39 10 25 46) 10]
Test Case: 340 | Input/Output: [(23 86 5 78) 5]
Test Case: 341 | Input/Output: [(25 1 43 68) 1]
Test Case: 342 | Input/Output: [(88 98 25 32) 25]
Test Case: 343 | Input/Output: [(47 3 12 64) 3]
Test Case: 344 | Input/Output: [(44 26 22 88) 22]
Test Case: 345 | Input/Output: [(69 56 33 46) 33]
Test Case: 346 | Input/Output: [(75 63 46 95) 46]
Test Case: 347 | Input/Output: [(40 19 31 64) 19]
Test Case: 348 | Input/Output: [(62 70 60 87) 60]
Test Case: 349 | Input/Output: [(55 49 20 4) 4]
Test Case: 350 | Input/Output: [(49 98 43 22) 22]
Test Case: 351 | Input/Output: [(69 79 0 18) 0]
Test Case: 352 | Input/Output: [(1 96 60 32) 1]
Test Case: 353 | Input/Output: [(61 70 64 50) 50]
Test Case: 354 | Input/Output: [(58 53 81 55) 53]
Test Case: 355 | Input/Output: [(1 26 32 2) 1]
Test Case: 356 | Input/Output: [(38 61 22 61) 22]
Test Case: 357 | Input/Output: [(23 99 74 37) 23]
Test Case: 358 | Input/Output: [(73 81 80 54) 54]
Test Case: 359 | Input/Output: [(4 42 24 58) 4]
Test Case: 360 | Input/Output: [(25 88 30 62) 25]
Test Case: 361 | Input/Output: [(82 11 56 39) 11]
Test Case: 362 | Input/Output: [(18 42 45 70) 18]
Test Case: 363 | Input/Output: [(66 15 47 13) 13]
Test Case: 364 | Input/Output: [(98 66 69 20) 20]
Test Case: 365 | Input/Output: [(36 80 92 61) 36]
Test Case: 366 | Input/Output: [(77 12 90 69) 12]
Test Case: 367 | Input/Output: [(40 97 17 44) 17]
Test Case: 368 | Input/Output: [(22 17 70 98) 17]
Test Case: 369 | Input/Output: [(1 26 97 99) 1]
Test Case: 370 | Input/Output: [(31 30 41 98) 30]
Test Case: 371 | Input/Output: [(15 7 55 32) 7]
Test Case: 372 | Input/Output: [(84 14 36 40) 14]
Test Case: 373 | Input/Output: [(8 34 26 93) 8]
Test Case: 374 | Input/Output: [(88 7 82 49) 7]
Test Case: 375 | Input/Output: [(100 8 13 55) 8]
Test Case: 376 | Input/Output: [(85 45 67 68) 45]
Test Case: 377 | Input/Output: [(27 61 6 57) 6]
Test Case: 378 | Input/Output: [(11 80 95 78) 11]
Test Case: 379 | Input/Output: [(63 66 27 71) 27]
Test Case: 380 | Input/Output: [(69 75 25 23) 23]
Test Case: 381 | Input/Output: [(23 61 33 1) 1]
Test Case: 382 | Input/Output: [(43 13 30 8) 8]
Test Case: 383 | Input/Output: [(75 86 20 1) 1]
Test Case: 384 | Input/Output: [(9 82 52 98) 9]
Test Case: 385 | Input/Output: [(85 85 59 34) 34]
Test Case: 386 | Input/Output: [(41 77 45 54) 41]
Test Case: 387 | Input/Output: [(5 64 6 97) 5]
Test Case: 388 | Input/Output: [(18 21 49 0) 0]
Test Case: 389 | Input/Output: [(41 98 89 12) 12]
Test Case: 390 | Input/Output: [(36 16 12 60) 12]
Test Case: 391 | Input/Output: [(73 47 34 26) 26]
Test Case: 392 | Input/Output: [(98 30 54 26) 26]
Test Case: 393 | Input/Output: [(77 96 30 71) 30]
Test Case: 394 | Input/Output: [(41 46 68 78) 41]
Test Case: 395 | Input/Output: [(93 17 70 27) 17]
Test Case: 396 | Input/Output: [(31 23 86 60) 23]
Test Case: 397 | Input/Output: [(77 89 72 20) 20]
Test Case: 398 | Input/Output: [(14 79 61 10) 10]
Test Case: 399 | Input/Output: [(92 51 24 43) 24]
Test Case: 400 | Input/Output: [(-93 65 27 -55) -93]
Test Case: 401 | Input/Output: [(-90 -79 -16 45) -90]
Test Case: 402 | Input/Output: [(7 -51 57 -88) -88]
Test Case: 403 | Input/Output: [(-41 42 27 26) -41]
Test Case: 404 | Input/Output: [(-51 -55 -75 -36) -75]
Test Case: 405 | Input/Output: [(73 -53 -86 -68) -86]
Test Case: 406 | Input/Output: [(5 38 37 -78) -78]
Test Case: 407 | Input/Output: [(-12 71 -22 -90) -90]
Test Case: 408 | Input/Output: [(43 70 -91 17) -91]
Test Case: 409 | Input/Output: [(85 65 -39 18) -39]
Test Case: 410 | Input/Output: [(100 85 16 -90) -90]
Test Case: 411 | Input/Output: [(4 -37 40 -63) -63]
Test Case: 412 | Input/Output: [(96 -82 -68 2) -82]
Test Case: 413 | Input/Output: [(-26 57 -3 -76) -76]
Test Case: 414 | Input/Output: [(19 -65 26 -10) -65]
Test Case: 415 | Input/Output: [(33 -70 36 39) -70]
Test Case: 416 | Input/Output: [(35 -76 -61 51) -76]
Test Case: 417 | Input/Output: [(25 -98 63 -27) -98]
Test Case: 418 | Input/Output: [(-69 -71 56 75) -71]
Test Case: 419 | Input/Output: [(-67 88 5 -5) -67]
Test Case: 420 | Input/Output: [(-100 -22 -12 -72) -100]
Test Case: 421 | Input/Output: [(-93 18 -67 -57) -93]
Test Case: 422 | Input/Output: [(-39 66 74 73) -39]
Test Case: 423 | Input/Output: [(11 0 88 -38) -38]
Test Case: 424 | Input/Output: [(-68 42 -28 -8) -68]
Test Case: 425 | Input/Output: [(35 -92 91 83) -92]
Test Case: 426 | Input/Output: [(-86 -48 -56 -10) -86]
Test Case: 427 | Input/Output: [(-43 89 12 25) -43]
Test Case: 428 | Input/Output: [(-91 -65 83 23) -91]
Test Case: 429 | Input/Output: [(-32 98 9 15) -32]
Test Case: 430 | Input/Output: [(-34 -34 -66 -80) -80]
Test Case: 431 | Input/Output: [(-19 -81 38 65) -81]
Test Case: 432 | Input/Output: [(-47 32 63 83) -47]
Test Case: 433 | Input/Output: [(10 -68 43 21) -68]
Test Case: 434 | Input/Output: [(63 35 -94 59) -94]
Test Case: 435 | Input/Output: [(-69 29 -12 -79) -79]
Test Case: 436 | Input/Output: [(-58 -72 -6 -15) -72]
Test Case: 437 | Input/Output: [(-44 27 87 -74) -74]
Test Case: 438 | Input/Output: [(82 -94 9 42) -94]
Test Case: 439 | Input/Output: [(93 -66 51 27) -66]
Test Case: 440 | Input/Output: [(-43 -58 23 -18) -58]
Test Case: 441 | Input/Output: [(38 24 -4 51) -4]
Test Case: 442 | Input/Output: [(45 99 82 -15) -15]
Test Case: 443 | Input/Output: [(-100 -48 -57 -45) -100]
Test Case: 444 | Input/Output: [(-12 -1 -51 -33) -51]
Test Case: 445 | Input/Output: [(-28 -10 0 -88) -88]
Test Case: 446 | Input/Output: [(65 9 -52 24) -52]
Test Case: 447 | Input/Output: [(22 -54 59 35) -54]
Test Case: 448 | Input/Output: [(81 70 6 -89) -89]
Test Case: 449 | Input/Output: [(25 -50 -75 -44) -75]
Test Case: 450 | Input/Output: [(-41 98 -28 29) -41]
Test Case: 451 | Input/Output: [(31 50 3 48) 3]
Test Case: 452 | Input/Output: [(37 17 51 -78) -78]
Test Case: 453 | Input/Output: [(-29 -78 78 -25) -78]
Test Case: 454 | Input/Output: [(-59 48 -85 13) -85]
Test Case: 455 | Input/Output: [(71 -17 11 -85) -85]
Test Case: 456 | Input/Output: [(66 -95 91 67) -95]
Test Case: 457 | Input/Output: [(13 33 70 3) 3]
Test Case: 458 | Input/Output: [(-91 11 76 -50) -91]
Test Case: 459 | Input/Output: [(-68 -44 48 51) -68]
Test Case: 460 | Input/Output: [(61 -32 9 -28) -32]
Test Case: 461 | Input/Output: [(96 -2 -16 95) -16]
Test Case: 462 | Input/Output: [(90 -21 87 76) -21]
Test Case: 463 | Input/Output: [(19 -76 -72 85) -76]
Test Case: 464 | Input/Output: [(-83 67 -34 -90) -90]
Test Case: 465 | Input/Output: [(70 -81 -70 25) -81]
Test Case: 466 | Input/Output: [(58 44 69 -17) -17]
Test Case: 467 | Input/Output: [(35 -92 96 -63) -92]
Test Case: 468 | Input/Output: [(-50 -79 33 -9) -79]
Test Case: 469 | Input/Output: [(-71 -81 84 51) -81]
Test Case: 470 | Input/Output: [(-4 49 -57 60) -57]
Test Case: 471 | Input/Output: [(7 -36 21 41) -36]
Test Case: 472 | Input/Output: [(-43 -30 -57 -57) -57]
Test Case: 473 | Input/Output: [(-73 31 29 -78) -78]
Test Case: 474 | Input/Output: [(69 87 -15 67) -15]
Test Case: 475 | Input/Output: [(19 -85 -50 -63) -85]
Test Case: 476 | Input/Output: [(32 41 35 -39) -39]
Test Case: 477 | Input/Output: [(3 -51 -93 20) -93]
Test Case: 478 | Input/Output: [(75 -61 0 20) -61]
Test Case: 479 | Input/Output: [(19 -26 -89 -17) -89]
Test Case: 480 | Input/Output: [(-9 -19 -23 77) -23]
Test Case: 481 | Input/Output: [(-35 -43 -75 -91) -91]
Test Case: 482 | Input/Output: [(-37 -100 -62 -64) -100]
Test Case: 483 | Input/Output: [(-77 26 -49 -35) -77]
Test Case: 484 | Input/Output: [(-40 36 97 -48) -48]
Test Case: 485 | Input/Output: [(-26 -96 51 -38) -96]
Test Case: 486 | Input/Output: [(-83 -87 42 -32) -87]
Test Case: 487 | Input/Output: [(42 98 -62 -27) -62]
Test Case: 488 | Input/Output: [(-48 4 56 58) -48]
Test Case: 489 | Input/Output: [(-18 32 33 99) -18]
Test Case: 490 | Input/Output: [(-84 26 11 22) -84]
Test Case: 491 | Input/Output: [(86 60 5 -9) -9]
Test Case: 492 | Input/Output: [(76 -67 57 17) -67]
Test Case: 493 | Input/Output: [(-41 -62 48 20) -62]
Test Case: 494 | Input/Output: [(35 21 -46 -74) -74]
Test Case: 495 | Input/Output: [(-56 56 2 -86) -86]
Test Case: 496 | Input/Output: [(-17 20 -87 -22) -87]
Test Case: 497 | Input/Output: [(-20 9 25 -51) -51]
Test Case: 498 | Input/Output: [(31 86 63 -25) -25]
Test Case: 499 | Input/Output: [(89 -43 29 -76) -76]
Test Case: 500 | Input/Output: [(-25 36 -3 -23) -25]
Test Case: 501 | Input/Output: [(-53 -27 39 -58) -58]
Test Case: 502 | Input/Output: [(-95 43 19 -83) -95]
Test Case: 503 | Input/Output: [(80 -51 -19 18) -51]
Test Case: 504 | Input/Output: [(-5 2 89 -94) -94]
Test Case: 505 | Input/Output: [(-35 -44 79 -75) -75]
Test Case: 506 | Input/Output: [(62 21 -9 -43) -43]
Test Case: 507 | Input/Output: [(36 -61 -76 -87) -87]
Test Case: 508 | Input/Output: [(72 -30 42 -28) -30]
Test Case: 509 | Input/Output: [(80 -61 41 87) -61]
Test Case: 510 | Input/Output: [(64 -8 -96 -23) -96]
Test Case: 511 | Input/Output: [(-85 99 38 -15) -85]
Test Case: 512 | Input/Output: [(-84 16 42 -94) -94]
Test Case: 513 | Input/Output: [(97 -52 -64 -26) -64]
Test Case: 514 | Input/Output: [(42 -83 -12 92) -83]
Test Case: 515 | Input/Output: [(100 91 -34 47) -34]
Test Case: 516 | Input/Output: [(51 7 -50 -31) -50]
Test Case: 517 | Input/Output: [(71 54 50 -30) -30]
Test Case: 518 | Input/Output: [(39 -86 66 25) -86]
Test Case: 519 | Input/Output: [(61 49 26 -67) -67]
Test Case: 520 | Input/Output: [(-83 -22 -81 85) -83]
Test Case: 521 | Input/Output: [(-79 99 28 47) -79]
Test Case: 522 | Input/Output: [(70 -46 -41 18) -46]
Test Case: 523 | Input/Output: [(-70 21 -79 -40) -79]
Test Case: 524 | Input/Output: [(-85 -21 -48 70) -85]
Test Case: 525 | Input/Output: [(6 -33 -38 14) -38]
Test Case: 526 | Input/Output: [(50 -22 -58 69) -58]
Test Case: 527 | Input/Output: [(47 80 65 33) 33]
Test Case: 528 | Input/Output: [(-50 26 -88 -45) -88]
Test Case: 529 | Input/Output: [(16 100 -44 51) -44]
Test Case: 530 | Input/Output: [(-12 -22 -9 -99) -99]
Test Case: 531 | Input/Output: [(17 -81 94 -34) -81]
Test Case: 532 | Input/Output: [(15 -43 76 -35) -43]
Test Case: 533 | Input/Output: [(66 -95 17 6) -95]
Test Case: 534 | Input/Output: [(17 33 25 39) 17]
Test Case: 535 | Input/Output: [(3 88 -76 -24) -76]
Test Case: 536 | Input/Output: [(-99 -39 -97 64) -99]
Test Case: 537 | Input/Output: [(85 -100 -70 -62) -100]
Test Case: 538 | Input/Output: [(-17 -99 35 -27) -99]
Test Case: 539 | Input/Output: [(56 -82 -88 -51) -88]
Test Case: 540 | Input/Output: [(75 94 61 -30) -30]
Test Case: 541 | Input/Output: [(-9 -22 77 19) -22]
Test Case: 542 | Input/Output: [(63 89 83 19) 19]
Test Case: 543 | Input/Output: [(100 -69 -33 -42) -69]
Test Case: 544 | Input/Output: [(-44 -100 94 -47) -100]
Test Case: 545 | Input/Output: [(-11 -1 89 36) -11]
Test Case: 546 | Input/Output: [(-72 23 40 5) -72]
Test Case: 547 | Input/Output: [(-21 -76 55 -73) -76]
Test Case: 548 | Input/Output: [(-91 0 -15 37) -91]
Test Case: 549 | Input/Output: [(-43 84 35 -89) -89]
Test Case: 550 | Input/Output: [(-55 98 63 24) -55]
Test Case: 551 | Input/Output: [(-50 -32 -22 -55) -55]
Test Case: 552 | Input/Output: [(36 -32 -86 52) -86]
Test Case: 553 | Input/Output: [(-48 91 -35 90) -48]
Test Case: 554 | Input/Output: [(94 -20 -72 -12) -72]
Test Case: 555 | Input/Output: [(90 88 -29 82) -29]
Test Case: 556 | Input/Output: [(-96 65 -95 -29) -96]
Test Case: 557 | Input/Output: [(21 21 46 18) 18]
Test Case: 558 | Input/Output: [(55 -62 99 45) -62]
Test Case: 559 | Input/Output: [(22 51 -25 -35) -35]
Test Case: 560 | Input/Output: [(22 78 82 -39) -39]
Test Case: 561 | Input/Output: [(94 54 9 -66) -66]
Test Case: 562 | Input/Output: [(21 -98 19 -67) -98]
Test Case: 563 | Input/Output: [(-40 74 -5 90) -40]
Test Case: 564 | Input/Output: [(92 -34 1 -26) -34]
Test Case: 565 | Input/Output: [(-47 40 -92 53) -92]
Test Case: 566 | Input/Output: [(-18 -2 -78 -87) -87]
Test Case: 567 | Input/Output: [(-62 4 64 -3) -62]
Test Case: 568 | Input/Output: [(-47 -50 33 22) -50]
Test Case: 569 | Input/Output: [(30 -38 28 -69) -69]
Test Case: 570 | Input/Output: [(12 18 81 91) 12]
Test Case: 571 | Input/Output: [(19 41 -35 45) -35]
Test Case: 572 | Input/Output: [(47 -68 14 -49) -68]
Test Case: 573 | Input/Output: [(-86 -34 -63 -61) -86]
Test Case: 574 | Input/Output: [(-1 25 8 -89) -89]
Test Case: 575 | Input/Output: [(41 -47 -74 -68) -74]
Test Case: 576 | Input/Output: [(-46 -39 -69 -7) -69]
Test Case: 577 | Input/Output: [(-98 -25 -64 80) -98]
Test Case: 578 | Input/Output: [(-54 -20 -47 -9) -54]
Test Case: 579 | Input/Output: [(90 15 31 32) 15]
Test Case: 580 | Input/Output: [(93 83 4 64) 4]
Test Case: 581 | Input/Output: [(93 -3 35 12) -3]
Test Case: 582 | Input/Output: [(53 -73 73 63) -73]
Test Case: 583 | Input/Output: [(99 94 -1 -90) -90]
Test Case: 584 | Input/Output: [(59 29 -36 66) -36]
Test Case: 585 | Input/Output: [(-37 -80 83 -25) -80]
Test Case: 586 | Input/Output: [(48 31 -30 48) -30]
Test Case: 587 | Input/Output: [(-63 -12 92 0) -63]
Test Case: 588 | Input/Output: [(56 -98 -98 -98) -98]
Test Case: 589 | Input/Output: [(2 42 21 -97) -97]
Test Case: 590 | Input/Output: [(1 65 1 -86) -86]
Test Case: 591 | Input/Output: [(-20 27 50 90) -20]
Test Case: 592 | Input/Output: [(56 -7 45 -30) -30]
Test Case: 593 | Input/Output: [(-85 -82 23 -74) -85]
Test Case: 594 | Input/Output: [(34 -88 -89 35) -89]
Test Case: 595 | Input/Output: [(-77 -34 27 72) -77]
Test Case: 596 | Input/Output: [(20 88 -83 69) -83]
Test Case: 597 | Input/Output: [(53 95 49 -6) -6]
Test Case: 598 | Input/Output: [(-60 -94 3 -28) -94]
Test Case: 599 | Input/Output: [(-2 -75 33 -83) -83]
Test Case: 600 | Input/Output: [(-49 28 -29 -34) -49]
Test Case: 601 | Input/Output: [(74 59 -47 56) -47]
Test Case: 602 | Input/Output: [(2 -79 -10 -3) -79]
Test Case: 603 | Input/Output: [(-89 -15 63 84) -89]
Test Case: 604 | Input/Output: [(-92 69 8 18) -92]
Test Case: 605 | Input/Output: [(8 -41 24 55) -41]
Test Case: 606 | Input/Output: [(-12 74 -49 73) -49]
Test Case: 607 | Input/Output: [(25 50 -71 -37) -71]
Test Case: 608 | Input/Output: [(61 10 99 10) 10]
Test Case: 609 | Input/Output: [(95 41 -15 63) -15]
Test Case: 610 | Input/Output: [(27 78 76 -68) -68]
Test Case: 611 | Input/Output: [(-77 79 -73 -31) -77]
Test Case: 612 | Input/Output: [(-29 -74 50 39) -74]
Test Case: 613 | Input/Output: [(-59 -7 1 -63) -63]
Test Case: 614 | Input/Output: [(-79 -15 18 37) -79]
Test Case: 615 | Input/Output: [(59 40 -60 -4) -60]
Test Case: 616 | Input/Output: [(-56 83 49 79) -56]
Test Case: 617 | Input/Output: [(22 93 -32 3) -32]
Test Case: 618 | Input/Output: [(-5 -98 70 -38) -98]
Test Case: 619 | Input/Output: [(3 93 78 -55) -55]
Test Case: 620 | Input/Output: [(66 -75 92 -24) -75]
Test Case: 621 | Input/Output: [(-23 62 38 -92) -92]
Test Case: 622 | Input/Output: [(-43 53 57 44) -43]
Test Case: 623 | Input/Output: [(82 0 -22 36) -22]
Test Case: 624 | Input/Output: [(-42 -49 45 52) -49]
Test Case: 625 | Input/Output: [(100 -29 -62 -83) -83]
Test Case: 626 | Input/Output: [(-75 42 100 -65) -75]
Test Case: 627 | Input/Output: [(13 -93 -90 -98) -98]
Test Case: 628 | Input/Output: [(-85 0 7 -51) -85]
Test Case: 629 | Input/Output: [(90 96 -78 -73) -78]
Test Case: 630 | Input/Output: [(-20 -73 -71 43) -73]
Test Case: 631 | Input/Output: [(30 24 29 83) 24]
Test Case: 632 | Input/Output: [(-39 85 -22 -25) -39]
Test Case: 633 | Input/Output: [(4 75 82 30) 4]
Test Case: 634 | Input/Output: [(-7 26 -26 -8) -26]
Test Case: 635 | Input/Output: [(-13 74 1 62) -13]
Test Case: 636 | Input/Output: [(-58 72 -14 -42) -58]
Test Case: 637 | Input/Output: [(20 84 -96 72) -96]
Test Case: 638 | Input/Output: [(31 -66 -89 83) -89]
Test Case: 639 | Input/Output: [(-78 65 26 18) -78]
Test Case: 640 | Input/Output: [(-94 31 34 -98) -98]
Test Case: 641 | Input/Output: [(-47 -4 19 -3) -47]
Test Case: 642 | Input/Output: [(-31 -24 -62 -12) -62]
Test Case: 643 | Input/Output: [(49 -12 -2 -12) -12]
Test Case: 644 | Input/Output: [(-19 95 -95 10) -95]
Test Case: 645 | Input/Output: [(4 81 -34 43) -34]
Test Case: 646 | Input/Output: [(43 96 53 2) 2]
Test Case: 647 | Input/Output: [(37 -56 -72 -98) -98]
Test Case: 648 | Input/Output: [(54 -32 32 9) -32]
Test Case: 649 | Input/Output: [(-25 -67 -49 7) -67]
Test Case: 650 | Input/Output: [(21 -58 -11 63) -58]
Test Case: 651 | Input/Output: [(-68 -29 59 49) -68]
Test Case: 652 | Input/Output: [(25 92 -18 -81) -81]
Test Case: 653 | Input/Output: [(48 85 -24 16) -24]
Test Case: 654 | Input/Output: [(-46 94 -20 6) -46]
Test Case: 655 | Input/Output: [(-78 -20 4 47) -78]
Test Case: 656 | Input/Output: [(81 -60 15 67) -60]
Test Case: 657 | Input/Output: [(94 -33 89 -48) -48]
Test Case: 658 | Input/Output: [(-65 17 -41 -13) -65]
Test Case: 659 | Input/Output: [(-84 90 -36 -21) -84]
Test Case: 660 | Input/Output: [(98 66 -57 91) -57]
Test Case: 661 | Input/Output: [(-5 36 98 -99) -99]
Test Case: 662 | Input/Output: [(93 -75 -72 -74) -75]
Test Case: 663 | Input/Output: [(0 48 -49 38) -49]
Test Case: 664 | Input/Output: [(25 -75 -70 -92) -92]
Test Case: 665 | Input/Output: [(-75 64 54 11) -75]
Test Case: 666 | Input/Output: [(85 39 -78 65) -78]
Test Case: 667 | Input/Output: [(3 -85 92 -62) -85]
Test Case: 668 | Input/Output: [(-24 -49 14 -78) -78]
Test Case: 669 | Input/Output: [(-78 -12 -54 -38) -78]
Test Case: 670 | Input/Output: [(67 -37 29 -68) -68]
Test Case: 671 | Input/Output: [(-97 -4 61 13) -97]
Test Case: 672 | Input/Output: [(47 54 -72 -54) -72]
Test Case: 673 | Input/Output: [(-53 -91 45 16) -91]
Test Case: 674 | Input/Output: [(18 49 26 -71) -71]
Test Case: 675 | Input/Output: [(75 -25 91 -57) -57]
Test Case: 676 | Input/Output: [(-68 17 -36 -37) -68]
Test Case: 677 | Input/Output: [(-29 36 -71 -66) -71]
Test Case: 678 | Input/Output: [(-64 80 -53 17) -64]
Test Case: 679 | Input/Output: [(-76 18 86 64) -76]
Test Case: 680 | Input/Output: [(-54 6 -100 30) -100]
Test Case: 681 | Input/Output: [(32 -20 -51 38) -51]
Test Case: 682 | Input/Output: [(64 -9 77 3) -9]
Test Case: 683 | Input/Output: [(64 -38 -69 52) -69]
Test Case: 684 | Input/Output: [(84 -97 -54 -53) -97]
Test Case: 685 | Input/Output: [(-97 -80 -94 60) -97]
Test Case: 686 | Input/Output: [(-30 8 41 6) -30]
Test Case: 687 | Input/Output: [(-16 -31 86 14) -31]
Test Case: 688 | Input/Output: [(-58 -69 23 85) -69]
Test Case: 689 | Input/Output: [(74 -96 -8 33) -96]
Test Case: 690 | Input/Output: [(36 -50 -55 100) -55]
Test Case: 691 | Input/Output: [(90 -92 -61 -62) -92]
Test Case: 692 | Input/Output: [(-25 -88 11 1) -88]
Test Case: 693 | Input/Output: [(81 70 -58 -12) -58]
Test Case: 694 | Input/Output: [(-81 -46 23 -56) -81]
Test Case: 695 | Input/Output: [(57 -13 75 -100) -100]
Test Case: 696 | Input/Output: [(58 14 33 96) 14]
Test Case: 697 | Input/Output: [(26 66 2 -46) -46]
Test Case: 698 | Input/Output: [(-42 27 -17 75) -42]
Test Case: 699 | Input/Output: [(-79 -53 99 -68) -79]
Test Case: 700 | Input/Output: [(90 18 -83 -87) -87]
Test Case: 701 | Input/Output: [(-23 -60 -99 14) -99]
Test Case: 702 | Input/Output: [(22 -80 87 -45) -80]
Test Case: 703 | Input/Output: [(-67 37 68 13) -67]
Test Case: 704 | Input/Output: [(84 -64 -50 -99) -99]
Test Case: 705 | Input/Output: [(80 99 99 -13) -13]
Test Case: 706 | Input/Output: [(-14 -3 26 -16) -16]
Test Case: 707 | Input/Output: [(96 98 26 -7) -7]
Test Case: 708 | Input/Output: [(-100 92 -16 57) -100]
Test Case: 709 | Input/Output: [(58 -17 -30 23) -30]
Test Case: 710 | Input/Output: [(83 4 38 -18) -18]
Test Case: 711 | Input/Output: [(63 -6 6 -86) -86]
Test Case: 712 | Input/Output: [(91 -13 -23 92) -23]
Test Case: 713 | Input/Output: [(-78 -28 -81 26) -81]
Test Case: 714 | Input/Output: [(50 -53 96 32) -53]
Test Case: 715 | Input/Output: [(49 30 62 98) 30]
Test Case: 716 | Input/Output: [(5 -1 -100 -13) -100]
Test Case: 717 | Input/Output: [(-45 54 -36 39) -45]
Test Case: 718 | Input/Output: [(87 26 46 58) 26]
Test Case: 719 | Input/Output: [(84 34 -6 6) -6]
Test Case: 720 | Input/Output: [(96 46 27 96) 27]
Test Case: 721 | Input/Output: [(-42 22 61 100) -42]
Test Case: 722 | Input/Output: [(-31 -98 56 -25) -98]
Test Case: 723 | Input/Output: [(-92 -62 -10 39) -92]
Test Case: 724 | Input/Output: [(-52 93 42 -44) -52]
Test Case: 725 | Input/Output: [(-87 -17 85 86) -87]
Test Case: 726 | Input/Output: [(3 -71 16 -2) -71]
Test Case: 727 | Input/Output: [(12 -16 25 -75) -75]
Test Case: 728 | Input/Output: [(20 25 6 -76) -76]
Test Case: 729 | Input/Output: [(-22 43 -53 -19) -53]
Test Case: 730 | Input/Output: [(3 -22 28 59) -22]
Test Case: 731 | Input/Output: [(-59 -18 12 -15) -59]
Test Case: 732 | Input/Output: [(93 -87 63 -50) -87]
Test Case: 733 | Input/Output: [(56 76 77 -58) -58]
Test Case: 734 | Input/Output: [(-84 -46 -6 34) -84]
Test Case: 735 | Input/Output: [(-90 73 58 0) -90]
Test Case: 736 | Input/Output: [(-79 22 -42 -94) -94]
Test Case: 737 | Input/Output: [(98 18 62 36) 18]
Test Case: 738 | Input/Output: [(98 -73 60 -3) -73]
Test Case: 739 | Input/Output: [(-79 48 37 78) -79]
Test Case: 740 | Input/Output: [(-20 -47 -77 85) -77]
Test Case: 741 | Input/Output: [(77 34 -86 -49) -86]
Test Case: 742 | Input/Output: [(10 89 37 41) 10]
Test Case: 743 | Input/Output: [(19 -59 -45 98) -59]
Test Case: 744 | Input/Output: [(24 24 41 65) 24]
Test Case: 745 | Input/Output: [(-39 -90 -27 -6) -90]
Test Case: 746 | Input/Output: [(86 93 31 91) 31]
Test Case: 747 | Input/Output: [(-86 34 34 10) -86]
Test Case: 748 | Input/Output: [(-53 50 38 -47) -53]
Test Case: 749 | Input/Output: [(-98 -98 32 23) -98]
Test Case: 750 | Input/Output: [(13 -12 -68 -17) -68]
Test Case: 751 | Input/Output: [(81 27 10 70) 10]
Test Case: 752 | Input/Output: [(94 -52 -26 3) -52]
Test Case: 753 | Input/Output: [(23 -38 -25 -74) -74]
Test Case: 754 | Input/Output: [(78 22 -69 67) -69]
Test Case: 755 | Input/Output: [(-55 9 -95 -52) -95]
Test Case: 756 | Input/Output: [(-35 94 -83 75) -83]
Test Case: 757 | Input/Output: [(-34 -37 -84 39) -84]
Test Case: 758 | Input/Output: [(-38 55 69 31) -38]
Test Case: 759 | Input/Output: [(-43 11 1 -43) -43]
Test Case: 760 | Input/Output: [(-99 -97 52 -19) -99]
Test Case: 761 | Input/Output: [(15 -7 18 -77) -77]
Test Case: 762 | Input/Output: [(-88 -73 96 -46) -88]
Test Case: 763 | Input/Output: [(72 -68 -10 35) -68]
Test Case: 764 | Input/Output: [(-75 32 -34 38) -75]
Test Case: 765 | Input/Output: [(-8 -55 54 50) -55]
Test Case: 766 | Input/Output: [(-86 50 22 -12) -86]
Test Case: 767 | Input/Output: [(91 -83 65 83) -83]
Test Case: 768 | Input/Output: [(-84 37 12 44) -84]
Test Case: 769 | Input/Output: [(50 -13 -70 72) -70]
Test Case: 770 | Input/Output: [(81 91 -69 -11) -69]
Test Case: 771 | Input/Output: [(84 -61 15 53) -61]
Test Case: 772 | Input/Output: [(20 -40 91 42) -40]
Test Case: 773 | Input/Output: [(-83 60 14 10) -83]
Test Case: 774 | Input/Output: [(52 -45 5 20) -45]
Test Case: 775 | Input/Output: [(-21 30 22 -67) -67]
Test Case: 776 | Input/Output: [(88 -4 24 81) -4]
Test Case: 777 | Input/Output: [(84 59 -81 64) -81]
Test Case: 778 | Input/Output: [(63 42 -57 -8) -57]
Test Case: 779 | Input/Output: [(35 0 -92 -97) -97]
Test Case: 780 | Input/Output: [(-24 -85 -100 73) -100]
Test Case: 781 | Input/Output: [(-56 -4 5 52) -56]
Test Case: 782 | Input/Output: [(18 33 65 94) 18]
Test Case: 783 | Input/Output: [(-78 75 17 -63) -78]
Test Case: 784 | Input/Output: [(-24 -91 -71 1) -91]
Test Case: 785 | Input/Output: [(-12 -50 4 89) -50]
Test Case: 786 | Input/Output: [(23 11 37 -94) -94]
Test Case: 787 | Input/Output: [(-67 13 -3 -78) -78]
Test Case: 788 | Input/Output: [(34 75 4 -63) -63]
Test Case: 789 | Input/Output: [(11 -38 -14 39) -38]
Test Case: 790 | Input/Output: [(10 -62 -3 19) -62]
Test Case: 791 | Input/Output: [(38 19 -22 -61) -61]
Test Case: 792 | Input/Output: [(-23 -39 -78 11) -78]
Test Case: 793 | Input/Output: [(7 49 67 -18) -18]
Test Case: 794 | Input/Output: [(24 -35 -85 -83) -85]
Test Case: 795 | Input/Output: [(-45 89 78 10) -45]
Test Case: 796 | Input/Output: [(-16 -62 71 -61) -62]
Test Case: 797 | Input/Output: [(-90 19 -59 46) -90]
Test Case: 798 | Input/Output: [(-84 43 68 78) -84]
Test Case: 799 | Input/Output: [(80 100 11 -76) -76]
Test Case: 800 | Input/Output: [(-41 98 37 -64) -64]
Test Case: 801 | Input/Output: [(19 -6 87 -65) -65]
Test Case: 802 | Input/Output: [(-9 83 40 41) -9]
Test Case: 803 | Input/Output: [(57 -11 10 49) -11]
Test Case: 804 | Input/Output: [(-34 45 -91 -45) -91]
Test Case: 805 | Input/Output: [(7 29 27 -25) -25]
Test Case: 806 | Input/Output: [(25 -27 4 50) -27]
Test Case: 807 | Input/Output: [(-5 14 18 -81) -81]
Test Case: 808 | Input/Output: [(-62 -44 -40 -28) -62]
Test Case: 809 | Input/Output: [(71 -8 -7 -29) -29]
Test Case: 810 | Input/Output: [(28 -11 -69 -88) -88]
Test Case: 811 | Input/Output: [(-23 -52 -28 79) -52]
Test Case: 812 | Input/Output: [(27 15 -29 -99) -99]
Test Case: 813 | Input/Output: [(-86 100 59 76) -86]
Test Case: 814 | Input/Output: [(44 -59 11 -13) -59]
Test Case: 815 | Input/Output: [(28 -50 -13 52) -50]
Test Case: 816 | Input/Output: [(59 -53 -6 100) -53]
Test Case: 817 | Input/Output: [(-18 -8 -82 -69) -82]
Test Case: 818 | Input/Output: [(74 -32 -2 -59) -59]
Test Case: 819 | Input/Output: [(48 -85 -92 43) -92]
Test Case: 820 | Input/Output: [(-32 -95 -96 89) -96]
Test Case: 821 | Input/Output: [(1 -68 -66 -71) -71]
Test Case: 822 | Input/Output: [(-64 70 80 -17) -64]
Test Case: 823 | Input/Output: [(-89 88 23 -80) -89]
Test Case: 824 | Input/Output: [(34 74 -52 66) -52]
Test Case: 825 | Input/Output: [(55 37 -8 -27) -27]
Test Case: 826 | Input/Output: [(7 -46 83 82) -46]
Test Case: 827 | Input/Output: [(49 39 33 -16) -16]
Test Case: 828 | Input/Output: [(40 67 7 2) 2]
Test Case: 829 | Input/Output: [(-8 28 -24 29) -24]
Test Case: 830 | Input/Output: [(19 -58 -93 33) -93]
Test Case: 831 | Input/Output: [(-1 -60 97 32) -60]
Test Case: 832 | Input/Output: [(-92 50 30 -15) -92]
Test Case: 833 | Input/Output: [(39 -91 86 -95) -95]
Test Case: 834 | Input/Output: [(46 -100 47 60) -100]
Test Case: 835 | Input/Output: [(96 -50 -78 -86) -86]
Test Case: 836 | Input/Output: [(34 99 -95 -49) -95]
Test Case: 837 | Input/Output: [(22 40 57 -41) -41]
Test Case: 838 | Input/Output: [(93 -36 34 43) -36]
Test Case: 839 | Input/Output: [(35 31 45 53) 31]
Test Case: 840 | Input/Output: [(-30 1 -33 -68) -68]
Test Case: 841 | Input/Output: [(72 98 64 44) 44]
Test Case: 842 | Input/Output: [(-7 -39 -55 52) -55]
Test Case: 843 | Input/Output: [(-51 92 84 76) -51]
Test Case: 844 | Input/Output: [(3 -93 25 92) -93]
Test Case: 845 | Input/Output: [(-86 -48 -36 68) -86]
Test Case: 846 | Input/Output: [(50 3 -83 69) -83]
Test Case: 847 | Input/Output: [(-84 -64 -90 -24) -90]
Test Case: 848 | Input/Output: [(44 -85 -2 -7) -85]
Test Case: 849 | Input/Output: [(-19 80 49 7) -19]
Test Case: 850 | Input/Output: [(-81 -39 69 40) -81]
Test Case: 851 | Input/Output: [(-38 14 -32 -61) -61]
Test Case: 852 | Input/Output: [(1 -42 -38 -41) -42]
Test Case: 853 | Input/Output: [(70 -25 -100 45) -100]
Test Case: 854 | Input/Output: [(-11 99 -57 22) -57]
Test Case: 855 | Input/Output: [(42 -62 -59 -4) -62]
Test Case: 856 | Input/Output: [(-62 22 -42 -43) -62]
Test Case: 857 | Input/Output: [(-82 15 59 -8) -82]
Test Case: 858 | Input/Output: [(-89 7 -1 57) -89]
Test Case: 859 | Input/Output: [(52 64 46 70) 46]
Test Case: 860 | Input/Output: [(-84 8 -92 -95) -95]
Test Case: 861 | Input/Output: [(-6 39 -49 -98) -98]
Test Case: 862 | Input/Output: [(19 -3 71 -76) -76]
Test Case: 863 | Input/Output: [(34 62 -92 21) -92]
Test Case: 864 | Input/Output: [(-4 -68 82 49) -68]
Test Case: 865 | Input/Output: [(3 37 100 -10) -10]
Test Case: 866 | Input/Output: [(-67 51 82 56) -67]
Test Case: 867 | Input/Output: [(57 80 -32 -41) -41]
Test Case: 868 | Input/Output: [(-51 56 -47 -10) -51]
Test Case: 869 | Input/Output: [(13 62 -87 23) -87]
Test Case: 870 | Input/Output: [(-65 -34 -34 -75) -75]
Test Case: 871 | Input/Output: [(78 -38 60 15) -38]
Test Case: 872 | Input/Output: [(17 35 -50 -3) -50]
Test Case: 873 | Input/Output: [(-56 -84 -32 74) -84]
Test Case: 874 | Input/Output: [(66 45 -2 86) -2]
Test Case: 875 | Input/Output: [(-17 13 58 -31) -31]
Test Case: 876 | Input/Output: [(-93 -93 22 54) -93]
Test Case: 877 | Input/Output: [(36 60 -22 -8) -22]
Test Case: 878 | Input/Output: [(18 -99 -92 57) -99]
Test Case: 879 | Input/Output: [(-20 -30 -88 -46) -88]
Test Case: 880 | Input/Output: [(-89 94 37 -92) -92]
Test Case: 881 | Input/Output: [(-75 80 16 -95) -95]
Test Case: 882 | Input/Output: [(26 39 95 -51) -51]
Test Case: 883 | Input/Output: [(53 5 73 -39) -39]
Test Case: 884 | Input/Output: [(58 -2 99 -6) -6]
Test Case: 885 | Input/Output: [(46 -86 13 -63) -86]
Test Case: 886 | Input/Output: [(94 -43 1 45) -43]
Test Case: 887 | Input/Output: [(94 71 89 -81) -81]
Test Case: 888 | Input/Output: [(8 99 -57 69) -57]
Test Case: 889 | Input/Output: [(82 5 48 -95) -95]
Test Case: 890 | Input/Output: [(-60 -70 -64 74) -70]
Test Case: 891 | Input/Output: [(-100 -62 -98 7) -100]
Test Case: 892 | Input/Output: [(-44 94 -47 -31) -47]
Test Case: 893 | Input/Output: [(-60 -33 55 -12) -60]
Test Case: 894 | Input/Output: [(45 14 -72 -88) -88]
Test Case: 895 | Input/Output: [(-23 -23 -93 -10) -93]
Test Case: 896 | Input/Output: [(-62 1 -33 -83) -83]
Test Case: 897 | Input/Output: [(-78 -97 -11 -41) -97]
Test Case: 898 | Input/Output: [(-20 -7 -67 8) -67]
Test Case: 899 | Input/Output: [(53 56 52 -80) -80]
Test Case: 900 | Input/Output: [(17 -88 1 47) -88]
Test Case: 901 | Input/Output: [(89 61 71 18) 18]
Test Case: 902 | Input/Output: [(-79 43 62 76) -79]
Test Case: 903 | Input/Output: [(-36 -99 -63 -91) -99]
Test Case: 904 | Input/Output: [(-20 8 -39 -47) -47]
Test Case: 905 | Input/Output: [(50 -59 96 -11) -59]
Test Case: 906 | Input/Output: [(-19 98 82 46) -19]
Test Case: 907 | Input/Output: [(-12 31 19 -78) -78]
Test Case: 908 | Input/Output: [(-51 52 63 -34) -51]
Test Case: 909 | Input/Output: [(16 12 2 50) 2]
Test Case: 910 | Input/Output: [(61 -32 16 -44) -44]
Test Case: 911 | Input/Output: [(62 -16 -50 -44) -50]
Test Case: 912 | Input/Output: [(-83 -16 -15 -45) -83]
Test Case: 913 | Input/Output: [(-85 -53 -13 22) -85]
Test Case: 914 | Input/Output: [(-30 -39 -25 -27) -39]
Test Case: 915 | Input/Output: [(2 37 66 -26) -26]
Test Case: 916 | Input/Output: [(-95 43 -89 -44) -95]
Test Case: 917 | Input/Output: [(-24 -76 -23 -25) -76]
Test Case: 918 | Input/Output: [(-37 -30 -78 -8) -78]
Test Case: 919 | Input/Output: [(-64 -92 -7 90) -92]
Test Case: 920 | Input/Output: [(-75 -98 78 -63) -98]
Test Case: 921 | Input/Output: [(-87 100 -67 -66) -87]
Test Case: 922 | Input/Output: [(65 -70 93 100) -70]
Test Case: 923 | Input/Output: [(-65 -36 51 14) -65]
Test Case: 924 | Input/Output: [(51 20 -26 -42) -42]
Test Case: 925 | Input/Output: [(23 99 -62 -33) -62]
Test Case: 926 | Input/Output: [(19 27 -63 39) -63]
Test Case: 927 | Input/Output: [(58 -7 51 85) -7]
Test Case: 928 | Input/Output: [(-40 -30 80 -39) -40]
Test Case: 929 | Input/Output: [(59 73 -51 90) -51]
Test Case: 930 | Input/Output: [(9 8 -57 69) -57]
Test Case: 931 | Input/Output: [(-80 -68 39 46) -80]
Test Case: 932 | Input/Output: [(27 83 1 -61) -61]
Test Case: 933 | Input/Output: [(67 -38 -47 48) -47]
Test Case: 934 | Input/Output: [(80 52 76 58) 52]
Test Case: 935 | Input/Output: [(-68 -97 93 -48) -97]
Test Case: 936 | Input/Output: [(-51 98 -89 84) -89]
Test Case: 937 | Input/Output: [(-63 11 -42 -9) -63]
Test Case: 938 | Input/Output: [(16 -61 98 93) -61]
Test Case: 939 | Input/Output: [(-42 9 67 -16) -42]
Test Case: 940 | Input/Output: [(92 -99 80 46) -99]
Test Case: 941 | Input/Output: [(-50 -54 58 50) -54]
Test Case: 942 | Input/Output: [(-66 33 -85 -98) -98]
Test Case: 943 | Input/Output: [(-87 85 -60 37) -87]
Test Case: 944 | Input/Output: [(-68 16 56 27) -68]
Test Case: 945 | Input/Output: [(-73 -54 -50 -56) -73]
Test Case: 946 | Input/Output: [(-37 -100 91 -81) -100]
Test Case: 947 | Input/Output: [(-59 81 31 83) -59]
Test Case: 948 | Input/Output: [(-92 -21 -20 49) -92]
Test Case: 949 | Input/Output: [(-41 18 -52 -64) -64]
Test Case: 950 | Input/Output: [(-46 0 -57 62) -57]
Test Case: 951 | Input/Output: [(68 -89 -54 -22) -89]
Test Case: 952 | Input/Output: [(-17 77 -4 18) -17]
Test Case: 953 | Input/Output: [(-18 -45 -15 -37) -45]
Test Case: 954 | Input/Output: [(-81 -37 34 -32) -81]
Test Case: 955 | Input/Output: [(-49 83 4 -82) -82]
Test Case: 956 | Input/Output: [(-94 14 -95 66) -95]
Test Case: 957 | Input/Output: [(63 69 18 -10) -10]
Test Case: 958 | Input/Output: [(-56 100 15 17) -56]
Test Case: 959 | Input/Output: [(-46 50 -18 40) -46]
Test Case: 960 | Input/Output: [(22 24 98 -45) -45]
Test Case: 961 | Input/Output: [(-56 -93 86 -1) -93]
Test Case: 962 | Input/Output: [(-73 -88 -78 -64) -88]
Test Case: 963 | Input/Output: [(-81 -48 -43 -66) -81]
Test Case: 964 | Input/Output: [(-86 -62 18 33) -86]
Test Case: 965 | Input/Output: [(78 53 10 84) 10]
Test Case: 966 | Input/Output: [(79 35 -16 -90) -90]
Test Case: 967 | Input/Output: [(-80 -78 78 -76) -80]
Test Case: 968 | Input/Output: [(-54 -12 -59 -75) -75]
Test Case: 969 | Input/Output: [(-73 88 73 53) -73]
Test Case: 970 | Input/Output: [(-93 -60 -56 -51) -93]
Test Case: 971 | Input/Output: [(91 -96 -88 -94) -96]
Test Case: 972 | Input/Output: [(-59 -76 40 15) -76]
Test Case: 973 | Input/Output: [(97 38 44 89) 38]
Test Case: 974 | Input/Output: [(-87 71 2 20) -87]
Test Case: 975 | Input/Output: [(64 20 -3 11) -3]
Test Case: 976 | Input/Output: [(67 59 47 29) 29]
Test Case: 977 | Input/Output: [(-30 28 -52 93) -52]
Test Case: 978 | Input/Output: [(76 -4 -4 30) -4]
Test Case: 979 | Input/Output: [(-71 -48 -24 -96) -96]
Test Case: 980 | Input/Output: [(-52 -12 51 88) -52]
Test Case: 981 | Input/Output: [(-61 -3 -86 83) -86]
Test Case: 982 | Input/Output: [(-70 42 87 19) -70]
Test Case: 983 | Input/Output: [(28 -49 -24 -77) -77]
Test Case: 984 | Input/Output: [(39 94 3 29) 3]
Test Case: 985 | Input/Output: [(-36 85 75 -25) -36]
Test Case: 986 | Input/Output: [(87 100 12 -52) -52]
Test Case: 987 | Input/Output: [(-32 -28 83 9) -32]
Test Case: 988 | Input/Output: [(-85 -94 -9 62) -94]
Test Case: 989 | Input/Output: [(29 -36 49 93) -36]
Test Case: 990 | Input/Output: [(66 80 -100 87) -100]
Test Case: 991 | Input/Output: [(-5 -99 -87 -31) -99]
Test Case: 992 | Input/Output: [(-54 -8 37 15) -54]
Test Case: 993 | Input/Output: [(42 -43 -49 -41) -49]
Test Case: 994 | Input/Output: [(-52 -4 13 -95) -95]
Test Case: 995 | Input/Output: [(68 -45 -46 -90) -90]
Test Case: 996 | Input/Output: [(21 -23 -74 -92) -92]
Test Case: 997 | Input/Output: [(-68 -30 -57 -38) -68]
Test Case: 998 | Input/Output: [(-29 -83 -54 -16) -83]
Test Case: 999 | Input/Output: [(32 84 -84 90) -84]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 84 -37 21 -66 95 -66 57 -76 64 -100 56 19 -72 -17 -37 -58
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-58 -59 -59 -59] -59] [[89 89 47 89] 47] [[-19 61 -19 -19] -19] [[-38 -38 -30 -38] -38] [[-48 -48 -40 -48] -48] [[-20 -20 -20 84] -20] [[-54 -54 55 -54] -54] [[-97 -97 -97 94] -97] [[-81 -81 -81 -88] -88] [[98 -25 -25 -25] -25] [(-73 -73 -73 -73) -73] [(18 18 18 18) 18] [(-46 -46 -46 -46) -46] [(35 35 35 35) 35] [(3 3 3 3) 3] [(42 46 71 76) 42] [(41 9 48 48) 9] [(30 97 1 9) 1] [(65 9 11 40) 9] [(69 32 93 93) 32] [(40 92 39 99) 39] [(8 87 88 63) 8] [(12 18 0 38) 0] [(24 42 42 94) 24] [(36 50 46 62) 36] [(96 80 89 49) 49] [(85 4 66 73) 4] [(0 22 60 19) 0] [(87 51 70 99) 51] [(3 61 10 50) 3] [(45 18 86 98) 18] [(37 53 19 88) 19] [(50 66 13 39) 13] [(79 62 16 76) 16] [(7 60 50 49) 7] [(30 -40 37 -93) -93] [(-96 -17 -37 -91) -96] [(-39 42 27 -97) -97] [(-85 16 85 46) -85] [(21 -79 73 -55) -79] [(66 -18 14 -100) -100] [(-64 -67 -3 91) -67] [(19 -27 -99 -38) -99] [(-90 -83 -22 59) -90] [(13 -68 28 -17) -68] [(-16 -71 69 60) -71] [(62 -51 13 47) -51] [(-2 -95 -10 -21) -95] [(39 -85 -76 -61) -85] [(-19 17 69 29) -19] [(23 -78 91 27) -78] [(-95 -70 27 4) -95] [(-8 79 -69 94) -69] [(-98 21 2 -24) -98] [(-41 17 28 -69) -69] [(-64 26 28 -58) -64] [(-18 -74 24 54) -74] [(70 90 52 -84) -84] [(-64 -88 -59 49) -88] [(-21 6 14 1) -21] [(-47 27 -9 4) -47] [(-92 9 57 -45) -92] [(81 -88 0 -87) -88] [(32 -100 -55 88) -100] [(-1 86 -35 28) -35] [(-50 -4 -36 -26) -50] [(-89 57 15 26) -89] [(2 9 77 91) 2] [(-62 1 -2 80) -62] [(-67 -57 90 -96) -96] [(-59 54 -1 -50) -59] [(-74 85 92 46) -74] [(31 -44 44 33) -44] [(-47 9 -97 6) -97] [(25 -59 45 -95) -95] [(-67 47 -47 36) -67] [(94 83 17 96) 17] [(5 -19 -44 2) -44] [(21 -18 12 -33) -33] [(-10 28 77 -12) -12] [(52 -53 51 15) -53] [(43 -3 -70 99) -70] [(-83 20 40 -59) -83] [(-94 68 -67 49) -94] [(33 -49 100 -30) -49] [(60 -40 59 -33) -40] [(70 -12 50 26) -12] [(-76 -29 -84 38) -84] [(2 -74 48 61) -74] [(2 24 28 1) 1] [(75 57 89 16) 16] [(96 -11 -98 17) -98] [(58 97 30 55) 30] [(-53 -48 -25 -69) -69] [(88 97 94 -18) -18])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: 94                 
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 76                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 9                  
Correct output: 9                   | Program output: 40                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 99                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 38                 
Correct output: 24                  | Program output: 94                 
Correct output: 36                  | Program output: 62                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 73                 
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 99                 
Correct output: 3                   | Program output: 50                 
Correct output: 18                  | Program output: 98                 
Correct output: 19                  | Program output: 88                 
Correct output: 13                  | Program output: 39                 
Correct output: 16                  | Program output: 76                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 46                 
Correct output: -79                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 91                 
Correct output: -99                 | Program output: -38                
Correct output: -90                 | Program output: 59                 
Correct output: -68                 | Program output: -17                
Correct output: -71                 | Program output: 60                 
Correct output: -51                 | Program output: 47                 
Correct output: -95                 | Program output: -21                
Correct output: -85                 | Program output: -61                
Correct output: -19                 | Program output: 29                 
Correct output: -78                 | Program output: 27                 
Correct output: -95                 | Program output: 4                  
Correct output: -69                 | Program output: 94                 
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 49                 
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: 4                  
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -87                
Correct output: -100                | Program output: 88                 
Correct output: -35                 | Program output: 28                 
Correct output: -50                 | Program output: -26                
Correct output: -89                 | Program output: 26                 
Correct output: 2                   | Program output: 91                 
Correct output: -62                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: 33                 
Correct output: -97                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 36                 
Correct output: 17                  | Program output: 96                 
Correct output: -44                 | Program output: 2                  
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: 15                 
Correct output: -70                 | Program output: 99                 
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: 49                 
Correct output: -49                 | Program output: -30                
Correct output: -40                 | Program output: -33                
Correct output: -12                 | Program output: 26                 
Correct output: -84                 | Program output: 38                 
Correct output: -74                 | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: 17                 
Correct output: 30                  | Program output: 55                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove})
Lexicase best program: (exec_yank boolean_dup exec_yank integer_empty exec_do*count (exec_y_when_autoconstructing () integer_dec in4 integer_sub exec_do*times (exec_do*range (boolean_dup_times boolean_and exec_yank) integer_stackdepth in4) boolean_pop boolean_eq integer_eq in4 boolean_invert_first_then_and boolean_eq exec_y_when_autoconstructing () print_integer) in4 exec_flush exec_rot () (exec_dup_items integer_inc boolean_frominteger integer_lte integer_dup_times boolean_stackdepth integer_mult boolean_invert_first_then_and) (boolean_and integer_pop integer_eq) exec_k_when_autoconstructing (exec_swap (tagged_154 exec_when (boolean_dup_items exec_shove (exec_shove (integer_dup_times exec_when () in3 exec_do*count (exec_shove ()))))) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_shove})
Zero cases best program: (exec_yank boolean_dup exec_yank integer_empty exec_do*count (exec_y_when_autoconstructing () integer_dec in4 integer_sub exec_do*times (exec_do*range (boolean_dup_times boolean_and exec_yank) integer_stackdepth in4) boolean_pop boolean_eq integer_eq in4 boolean_invert_first_then_and boolean_eq exec_y_when_autoconstructing () print_integer) in4 exec_flush exec_rot () (exec_dup_items integer_inc boolean_frominteger integer_lte integer_dup_times boolean_stackdepth integer_mult boolean_invert_first_then_and) (boolean_and integer_pop integer_eq) exec_k_when_autoconstructing (exec_swap (tagged_154 exec_when (boolean_dup_items exec_shove (exec_shove (integer_dup_times exec_when () in3 exec_do*count (exec_shove ()))))) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 3 6 3 11 3 3 3 1 1)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (10 3 6 3 11 3 3 3 1 1)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction tagged_459} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_yankdup} {:close 0, :instruction 56} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_do*count})
Best program: (boolean_yank integer_flush boolean_flush exec_empty tagged_459 in4 in2 boolean_dup_items print_integer integer_sub exec_y () exec_do*while (boolean_empty boolean_yankdup integer_dup boolean_rot exec_do*count () integer_gt) boolean_invert_first_then_and exec_eq exec_noop integer_gte boolean_xor integer_dec in3 in2 exec_yankdup 56 boolean_frominteger exec_do*count ())
Errors: [0 0 1 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 35
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.99 0.997 0.994 0.997 0.989 0.997 0.997 0.997 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.762
Average program size in population (points): 69.843
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 495696
--- Timings ---
Current time: 1559314323568 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 31.7%
Fitness Testing:      1.5 seconds, 64.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: 61                 
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 92                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 18                 
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 53                 
Correct output: 13                  | Program output: 66                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 60                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 42                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: 79                 
Correct output: -98                 | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 90                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: 27                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 86                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 57                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: 54                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 9                  
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: 47                 
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: 68                 
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 97                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Lexicase best errors: [1 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Zero cases best errors: [1 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 604 98 98 97 101 97 126 97 98)
Population mean number of elite cases: 1.54
Count of perfect (error zero) individuals by case: (126 604 98 98 97 101 97 126 97 98)
Population mean number of perfect (error zero) cases: 1.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Errors: [1 1 1 0 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 37
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 8.458
Median total errors in population: 9
Error averages by case: (0.874 0.396 0.902 0.902 0.903 0.899 0.903 0.874 0.903 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.016
Average program size in population (points): 52.224
Average percent parens in population: 0.244
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1104004
--- Timings ---
Current time: 1559314326082 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.3 seconds, 44.6%
Fitness Testing:      2.2 seconds, 42.1%
Report:               0.6 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 167 182 167 182 182 162 812 83 464)
Population mean number of elite cases: 2.59
Count of perfect (error zero) individuals by case: (186 167 182 167 182 182 162 812 83 464)
Population mean number of perfect (error zero) cases: 2.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.413
Median total errors in population: 8
Error averages by case: (0.814 0.833 0.818 0.833 0.818 0.818 0.838 0.188 0.917 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.39
Average program size in population (points): 44.084
Average percent parens in population: 0.241
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.996
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1682257
--- Timings ---
Current time: 1559314329376 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.3 seconds, 53.5%
Fitness Testing:      2.8 seconds, 35.2%
Report:               0.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_swap integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_swap integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (838 940 1000 832 730 940 635 108 730 102)
Population mean number of elite cases: 6.86
Count of perfect (error zero) individuals by case: (838 940 0 832 730 940 635 108 730 102)
Population mean number of perfect (error zero) cases: 5.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_yank boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Errors: [0 0 1 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 4.145
Median total errors in population: 3
Error averages by case: (0.162 0.06 1.0 0.168 0.27 0.06 0.365 0.892 0.27 0.898)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 37.777
Average program size in population (points): 49.851
Average percent parens in population: 0.242
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 145
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2806685
--- Timings ---
Current time: 1559314333383 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 55.4%
Fitness Testing:      3.8 seconds, 31.3%
Report:               1.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop) (integer_mod exec_while (exec_when ()) tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot)
Lexicase best errors: [1 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop) (integer_mod exec_while (exec_when ()) tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot)
Zero cases best errors: [1 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 164 1000 615 1000 322 614 609 1000 615)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (157 164 0 615 0 322 614 609 0 615)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop exec_eq exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Errors: [1 1 1 0 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.904
Median total errors in population: 6
Error averages by case: (0.843 0.836 1.0 0.385 1.0 0.678 0.386 0.391 1.0 0.385)
Error minima by case: (0 0 1 0 1 0 0 0 1 0)
Average genome size in population (length): 37.011
Average program size in population (points): 48.503
Average percent parens in population: 0.237
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.938
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3779336
--- Timings ---
Current time: 1559314337132 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.0 seconds, 56.6%
Fitness Testing:      4.6 seconds, 29.0%
Report:               2.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: 61                 
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 92                 
Correct output: 8                   | Program output:                    
Correct output: 0                   | Program output: 18                 
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 53                 
Correct output: 13                  | Program output: 66                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 60                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 42                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output:                    
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: 79                 
Correct output: -98                 | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 90                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: 27                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 86                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 57                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: 54                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 9                  
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: 47                 
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: 68                 
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 97                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (integer_yank integer_mod boolean_flush) () (exec_yankdup) boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ()))
Lexicase best errors: [0 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (integer_yank integer_mod boolean_flush) () (exec_yankdup) boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ()))
Zero cases best errors: [0 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 515 213 514 213 213 518 515 213 416)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (213 515 213 514 213 213 518 515 213 416)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_shove () in1 exec_yank integer_eq boolean_pop integer_yank exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_stackdepth integer_min boolean_empty tagged_267 boolean_swap exec_pop (tagged_42 exec_flush boolean_dup) integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Errors: [0 1 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 6.457
Median total errors in population: 6
Error averages by case: (0.787 0.485 0.787 0.486 0.787 0.787 0.482 0.485 0.787 0.584)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.042
Average program size in population (points): 47.113
Average percent parens in population: 0.234
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.4624375
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4624360
--- Timings ---
Current time: 1559314339938 milliseconds
Total Time:          19.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.8 seconds, 56.6%
Fitness Testing:      5.3 seconds, 27.9%
Report:               2.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: 61                 
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 92                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 18                 
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 53                 
Correct output: 13                  | Program output: 66                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 60                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 42                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: 79                 
Correct output: -98                 | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 90                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: 27                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 86                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 57                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: 54                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 9                  
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: 47                 
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: 68                 
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 97                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction in3})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_noop integer_gte boolean_xor integer_dec in3))
Lexicase best errors: [0 1 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 31
Percent parens: 0.065
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction in3})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_noop integer_gte boolean_xor integer_dec in3))
Zero cases best errors: [0 1 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 31
Percent parens: 0.065
--- Lexicase Population Statistics ---
Count of elite individuals by case: (955 1 1000 566 1000 568 899 564 386 386)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (955 1 0 566 0 568 899 564 386 386)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (boolean_dup) integer_pop integer_min) exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Errors: [0 1 1 0 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.675
Median total errors in population: 5
Error averages by case: (0.045 0.999 1.0 0.434 1.0 0.432 0.101 0.436 0.614 0.614)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 33.863
Average program size in population (points): 43.711
Average percent parens in population: 0.225
Minimum age in population: 6.0
Maximum age in population: 10.84375
Average age in population: 8.9245
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 5307877
--- Timings ---
Current time: 1559314342570 milliseconds
Total Time:          21.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.7 seconds, 58.2%
Fitness Testing:      5.9 seconds, 27.3%
Report:               3.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: 61                 
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 97                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 92                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 18                 
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 50                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 53                 
Correct output: 13                  | Program output: 66                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 60                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 42                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: 79                 
Correct output: -98                 | Program output: 21                 
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 90                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: 27                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: 86                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 57                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: 1                  
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: 54                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: 9                  
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: 47                 
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: 68                 
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 97                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 2, :instruction exec_noop} {:close 1, :instruction tagged_267} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup exec_do*while (integer_mod exec_while ()) exec_noop) () tagged_267 integer_mod exec_pop (boolean_or print_boolean))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 2, :instruction exec_while} {:close 2, :instruction exec_noop} {:close 1, :instruction tagged_267} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup exec_do*while (integer_mod exec_while ()) exec_noop) () tagged_267 integer_mod exec_pop (boolean_or print_boolean))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (797 5 324 5 802 474 5 802 474 1000)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (797 5 324 5 802 474 5 802 474 0)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank})
Best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor in2 boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap boolean_swap boolean_stackdepth integer_eq tagged_267 boolean_swap exec_pop (boolean_or boolean_rot) boolean_yank integer_dup_times exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or integer_mult boolean_and exec_stackdepth boolean_dup_items integer_yank) ())
Errors: [0 1 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 43
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 6.312
Median total errors in population: 6
Error averages by case: (0.203 0.995 0.676 0.995 0.198 0.526 0.995 0.198 0.526 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 31.501
Average program size in population (points): 41.043
Average percent parens in population: 0.237
Minimum age in population: 7.0
Maximum age in population: 12.171875
Average age in population: 10.452078125
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5924560
--- Timings ---
Current time: 1559314345531 milliseconds
Total Time:          24.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 59.5%
Fitness Testing:      6.5 seconds, 26.7%
Report:               3.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 661
Test mean error for best: 0.66100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_shove () integer_eq exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267 boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup) boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Lexicase best errors: [1 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_shove () integer_eq exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267 boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup) boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Zero cases best errors: [1 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 189 528 419 1 341 419 1 189 947)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (1 189 528 419 1 341 419 1 189 947)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yankdup})
Best program: (in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (integer_dup_times boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank exec_empty exec_y (integer_mod boolean_yank boolean_not integer_yank) integer_mod boolean_flush integer_empty boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth boolean_dup_items integer_yank exec_yankdup)) ())
Errors: [1 0 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 50
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 7
Error averages by case: (0.999 0.811 0.472 0.581 0.999 0.659 0.581 0.999 0.811 0.053)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.236
Average program size in population (points): 42.248
Average percent parens in population: 0.211
Minimum age in population: 8.0
Maximum age in population: 13.6328125
Average age in population: 11.951453125
Median age in population: 12.0234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 6508595
--- Timings ---
Current time: 1559314348721 milliseconds
Total Time:          27.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 60.0%
Fitness Testing:      7.0 seconds, 25.4%
Report:               3.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: 84                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: 94                 
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 76                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 9                  
Correct output: 9                   | Program output: 40                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 99                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 38                 
Correct output: 24                  | Program output: 94                 
Correct output: 36                  | Program output: 62                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 73                 
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 99                 
Correct output: 3                   | Program output: 50                 
Correct output: 18                  | Program output: 98                 
Correct output: 19                  | Program output: 88                 
Correct output: 13                  | Program output: 39                 
Correct output: 16                  | Program output: 76                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 46                 
Correct output: -79                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 91                 
Correct output: -99                 | Program output: -38                
Correct output: -90                 | Program output: 59                 
Correct output: -68                 | Program output: -17                
Correct output: -71                 | Program output: 60                 
Correct output: -51                 | Program output: 47                 
Correct output: -95                 | Program output: -21                
Correct output: -85                 | Program output: -61                
Correct output: -19                 | Program output: 29                 
Correct output: -78                 | Program output: 27                 
Correct output: -95                 | Program output: 4                  
Correct output: -69                 | Program output: 94                 
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: 49                 
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: 4                  
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -87                
Correct output: -100                | Program output: 88                 
Correct output: -35                 | Program output: 28                 
Correct output: -50                 | Program output: -26                
Correct output: -89                 | Program output: 26                 
Correct output: 2                   | Program output: 91                 
Correct output: -62                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: 33                 
Correct output: -97                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 36                 
Correct output: 17                  | Program output: 96                 
Correct output: -44                 | Program output: 2                  
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: 15                 
Correct output: -70                 | Program output: 99                 
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: 49                 
Correct output: -49                 | Program output: -30                
Correct output: -40                 | Program output: -33                
Correct output: -12                 | Program output: 26                 
Correct output: -84                 | Program output: 38                 
Correct output: -74                 | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: 17                 
Correct output: 30                  | Program output: 55                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor exec_s_when_autoconstructing (integer_add print_integer) (boolean_dup) (boolean_invert_first_then_and boolean_swap in2) boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 integer_inc boolean_frominteger integer_lte integer_dup boolean_stackdepth integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [1 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor exec_s_when_autoconstructing (integer_add print_integer) (boolean_dup) (boolean_invert_first_then_and boolean_swap in2) boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 integer_inc boolean_frominteger integer_lte integer_dup boolean_stackdepth integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [1 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (262 241 632 128 262 311 241 241 311 241)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (262 241 632 128 262 311 241 241 311 241)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop})
Best program: (integer_eq boolean_pop in4 exec_noop boolean_and boolean_xor print_integer boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq boolean_eq tagged_42 exec_flush exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) integer_mod boolean_dup_items integer_yank integer_pop)
Errors: [1 0 0 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 7.13
Median total errors in population: 6
Error averages by case: (0.738 0.759 0.368 0.872 0.738 0.689 0.759 0.759 0.689 0.759)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.709
Average program size in population (points): 40.575
Average percent parens in population: 0.215
Minimum age in population: 10.25
Maximum age in population: 15.2578125
Average age in population: 13.64399609375
Median age in population: 13.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 208
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7058440
--- Timings ---
Current time: 1559314351694 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.8 seconds, 60.8%
Fitness Testing:      7.5 seconds, 24.1%
Report:               4.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_eq boolean_pop exec_shove () integer_yankdup exec_yank in1 boolean_and boolean_xor boolean_flush boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Lexicase best errors: [1 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_eq boolean_pop exec_shove () integer_yankdup exec_yank in1 boolean_and boolean_xor boolean_flush boolean_eq print_integer boolean_dup boolean_invert_first_then_and boolean_swap in2 boolean_stackdepth integer_eq boolean_eq integer_dup integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Zero cases best errors: [1 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 112 469 4 373 959 469 363 112 373)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (112 112 469 4 373 959 469 363 112 373)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_shove (in1 exec_yank in1 integer_sub) boolean_dup boolean_dup_times print_integer exec_do*times () boolean_dup_times print_integer exec_do*times (exec_do*range (exec_empty boolean_stackdepth exec_yankdup boolean_pop integer_mod boolean_eq integer_dup) integer_sub tagged_42 exec_flush boolean_dup) exec_k (integer_min) (exec_do*times (exec_do*while (integer_max) integer_gte exec_s_when_autoconstructing () () ())))
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.654
Median total errors in population: 7
Error averages by case: (0.888 0.888 0.531 0.996 0.627 0.041 0.531 0.637 0.888 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.911
Average program size in population (points): 43.79
Average percent parens in population: 0.224
Minimum age in population: 11.25
Maximum age in population: 16.94140625
Average age in population: 15.034107421875
Median age in population: 15.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7707905
--- Timings ---
Current time: 1559314354868 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 62.3%
Fitness Testing:      8.0 seconds, 23.5%
Report:               4.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output:                    
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup})
Lexicase best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while (exec_when ()) tagged_267) (boolean_swap exec_pop (boolean_or print_boolean) boolean_yank boolean_frominteger)) exec_y (integer_mod boolean_yank boolean_not boolean_shove integer_mod boolean_flush)) exec_yankdup)
Lexicase best errors: [0 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup})
Zero cases best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while (exec_when ()) tagged_267) (boolean_swap exec_pop (boolean_or print_boolean) boolean_yank boolean_frominteger)) exec_y (integer_mod boolean_yank boolean_not boolean_shove integer_mod boolean_flush)) exec_yankdup)
Zero cases best errors: [0 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (943 578 335 197 307 688 46 688 335 307)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (943 578 335 197 307 688 46 688 335 307)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_invert_second_then_and} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank})
Best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer exec_do*times (exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod boolean_invert_second_then_and) (exec_when ()) tagged_267) exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup exec_yankdup integer_sub integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times) exec_y (integer_mod boolean_yank boolean_not integer_yank))
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 5.576
Median total errors in population: 5
Error averages by case: (0.057 0.422 0.665 0.803 0.693 0.312 0.954 0.312 0.665 0.693)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.424
Average program size in population (points): 42.923
Average percent parens in population: 0.220
Minimum age in population: 12.25
Maximum age in population: 18.3623046875
Average age in population: 16.507501953125
Median age in population: 16.580078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8328789
--- Timings ---
Current time: 1559314357646 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.1 seconds, 62.9%
Fitness Testing:      8.5 seconds, 23.3%
Report:               4.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: 98                 
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output:                    
Correct output: -93                 | Program output: 30                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 21                 
Correct output: -100                | Program output: 66                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: 19                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 13                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 62                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: 39                 
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 23                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 81                 
Correct output: -100                | Program output: 32                 
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 31                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 25                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: 5                  
Correct output: -33                 | Program output: 21                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 52                 
Correct output: -70                 | Program output: 43                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 33                 
Correct output: -40                 | Program output: 60                 
Correct output: -12                 | Program output: 70                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 2                  
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: 96                 
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 2, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer boolean_invert_second_then_and exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267)) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 2, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer boolean_invert_second_then_and exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267)) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_do*while (integer_max) exec_rot (exec_s_when_autoconstructing () () ()) () ()))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 360 360 910 185 261 185 260 360 143)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (142 360 360 910 185 261 185 260 360 143)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 1, :instruction tagged_267} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_stackdepth})
Best program: (integer_eq exec_shove () in1 exec_yank in1 integer_sub boolean_dup boolean_dup_times print_integer integer_fromboolean exec_do*range (exec_k_when_autoconstructing (boolean_stackdepth exec_yankdup boolean_pop integer_mod exec_while () exec_when ()) (tagged_267) boolean_swap exec_pop (boolean_or print_boolean) boolean_yank integer_dup_times exec_y (integer_mod boolean_yank boolean_not integer_yank integer_mod boolean_flush)) exec_yankdup boolean_rot exec_k_when_autoconstructing (boolean_or exec_when (boolean_and exec_stackdepth)) ())
Errors: [1 0 0 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.834
Median total errors in population: 7
Error averages by case: (0.858 0.64 0.64 0.09 0.815 0.739 0.815 0.74 0.64 0.857)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.381
Average program size in population (points): 42.354
Average percent parens in population: 0.210
Minimum age in population: 15.0625
Maximum age in population: 19.84130859375
Average age in population: 18.11065380859375
Median age in population: 18.18798828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8891634
--- Timings ---
Current time: 1559314361178 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.4 seconds, 63.7%
Fitness Testing:      9.0 seconds, 22.6%
Report:               5.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 boolean_and boolean_xor in2 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [1 0 1 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 38
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 boolean_and boolean_xor in2 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_pop integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [1 0 1 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 38
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 292 324 2 144 197 197 313 292 759)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (195 292 324 2 144 197 197 313 292 759)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and boolean_xor in2 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 0 1 1 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 7.285
Median total errors in population: 7
Error averages by case: (0.805 0.708 0.676 0.998 0.856 0.803 0.803 0.687 0.708 0.241)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.246
Average program size in population (points): 41.902
Average percent parens in population: 0.204
Minimum age in population: 16.9970703125
Maximum age in population: 21.41162109375
Average age in population: 19.75933569335938
Median age in population: 19.72021484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 179
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 9521786
--- Timings ---
Current time: 1559314363908 milliseconds
Total Time:          43.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.3 seconds, 63.6%
Fitness Testing:      9.5 seconds, 22.1%
Report:               6.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: 37                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 73                 
Correct output: -100                | Program output: 14                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 28                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 13                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: -76                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 0                  
Correct output: -100                | Program output: -55                
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 44                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 12                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 51                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 100                
Correct output: -40                 | Program output: 59                 
Correct output: -12                 | Program output: 50                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 48                 
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq exec_shove () in1 exec_yank in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [0 0 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq exec_shove () in1 exec_yank in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [0 0 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (484 198 757 198 484 471 198 470 156 951)
Population mean number of elite cases: 4.37
Count of perfect (error zero) individuals by case: (484 198 757 198 484 471 198 470 156 951)
Population mean number of perfect (error zero) cases: 4.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and boolean_xor in1 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 0 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.633
Median total errors in population: 6
Error averages by case: (0.516 0.802 0.243 0.802 0.516 0.529 0.802 0.53 0.844 0.049)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.899
Average program size in population (points): 40.736
Average percent parens in population: 0.190
Minimum age in population: 17.9970703125
Maximum age in population: 22.9326171875
Average age in population: 21.62890075683594
Median age in population: 21.71826171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10053243
--- Timings ---
Current time: 1559314366815 milliseconds
Total Time:          45.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 64.3%
Fitness Testing:      9.9 seconds, 21.7%
Report:               6.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -58                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: 37                 
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: 73                 
Correct output: -100                | Program output: 14                 
Correct output: -67                 | Program output: -64                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: 28                 
Correct output: -71                 | Program output: -16                
Correct output: -51                 | Program output: 13                 
Correct output: -95                 | Program output: -2                 
Correct output: -85                 | Program output: -76                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: 91                 
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -18                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -64                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: 0                  
Correct output: -100                | Program output: -55                
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: 44                 
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: 45                 
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: 12                 
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: 51                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: 100                
Correct output: -40                 | Program output: 59                 
Correct output: -12                 | Program output: 50                 
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: 48                 
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and boolean_xor in1 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [1 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and boolean_xor in1 exec_do*times (print_integer) boolean_dup boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [1 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (459 1000 1 310 1 769 618 630 629 310)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (459 0 1 310 1 769 618 630 629 310)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and boolean_xor in1 exec_do*times (print_integer boolean_dup) boolean_frominteger boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 1 1 0 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 6.273
Median total errors in population: 5
Error averages by case: (0.541 1.0 0.999 0.69 0.999 0.231 0.382 0.37 0.371 0.69)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.754
Average program size in population (points): 40.226
Average percent parens in population: 0.186
Minimum age in population: 20.412353515625
Maximum age in population: 24.825439453125
Average age in population: 23.60399731445312
Median age in population: 23.536376953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 10664688
--- Timings ---
Current time: 1559314370124 milliseconds
Total Time:          49.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 65.1%
Fitness Testing:     10.4 seconds, 21.1%
Report:               6.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output:                    
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output:                    
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output:                    
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output:                    
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq exec_shove () in1 exec_yank in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_while () exec_when () integer_sub exec_k (exec_flush boolean_dup) (integer_dec integer_min) exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_k} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq exec_shove () in1 exec_yank in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_while () exec_when () integer_sub exec_k (exec_flush boolean_dup) (integer_dec integer_min) exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (728 955 227 726 241 243 241 232 1000 231)
Population mean number of elite cases: 4.82
Count of perfect (error zero) individuals by case: (728 955 227 726 241 243 241 232 0 231)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq exec_shove () in1 exec_yank in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.176
Median total errors in population: 7
Error averages by case: (0.272 0.045 0.773 0.274 0.759 0.757 0.759 0.768 1.0 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 33.284
Average program size in population (points): 40.618
Average percent parens in population: 0.181
Minimum age in population: 23.14801025390625
Maximum age in population: 26.58184814453125
Average age in population: 25.46944741821289
Median age in population: 25.536376953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 11378065
--- Timings ---
Current time: 1559314373014 milliseconds
Total Time:          52.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 65.4%
Fitness Testing:     10.9 seconds, 20.9%
Report:               7.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (907 205 722 951 946 202 930 198 202 712)
Population mean number of elite cases: 5.97
Count of perfect (error zero) individuals by case: (907 205 722 951 946 202 930 198 202 712)
Population mean number of perfect (error zero) cases: 5.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 33
Size: 40
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 4.025
Median total errors in population: 4
Error averages by case: (0.093 0.795 0.278 0.049 0.054 0.798 0.07 0.802 0.798 0.288)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.074
Average program size in population (points): 39.999
Average percent parens in population: 0.198
Minimum age in population: 24.71832275390625
Maximum age in population: 28.52220153808594
Average age in population: 26.8595982208252
Median age in population: 26.92104339599609
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 12231383
--- Timings ---
Current time: 1559314375828 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 65.5%
Fitness Testing:     11.5 seconds, 20.9%
Report:               7.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq exec_shove () exec_k (exec_yank in1 in2 exec_do*times (print_integer) boolean_dup) (boolean_pop boolean_pop integer_mod boolean_frominteger) exec_when () integer_sub tagged_42 exec_y_when_autoconstructing (boolean_dup) integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq exec_shove () exec_k (exec_yank in1 in2 exec_do*times (print_integer) boolean_dup) (boolean_pop boolean_pop integer_mod boolean_frominteger) exec_when () integer_sub tagged_42 exec_y_when_autoconstructing (boolean_dup) integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 951 175 9 951 7 944 938 780 761)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (0 951 175 9 951 7 944 938 780 761)
Population mean number of perfect (error zero) cases: 5.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 0 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 29
Size: 36
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 4.484
Median total errors in population: 4
Error averages by case: (1.0 0.049 0.825 0.991 0.049 0.993 0.056 0.062 0.22 0.239)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.371
Average program size in population (points): 38.549
Average percent parens in population: 0.186
Minimum age in population: 25.92608642578125
Maximum age in population: 30.11911773681641
Average age in population: 28.36920581817627
Median age in population: 28.88545227050781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 249
Genome diversity (% unique genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.397
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 12627431
--- Timings ---
Current time: 1559314378252 milliseconds
Total Time:          57.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.7 seconds, 65.8%
Fitness Testing:     11.8 seconds, 20.5%
Report:               7.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [0 1 1 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [0 1 1 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (736 1 1000 423 525 218 953 422 682 735)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (736 1 0 423 525 218 953 422 682 735)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [0 1 1 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.305
Median total errors in population: 5
Error averages by case: (0.264 0.999 1.0 0.577 0.475 0.782 0.047 0.578 0.318 0.265)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 31.019
Average program size in population (points): 38.538
Average percent parens in population: 0.195
Minimum age in population: 27.357177734375
Maximum age in population: 31.68576049804688
Average age in population: 30.00869799041748
Median age in population: 30.11029815673828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.415
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.369
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13278526
--- Timings ---
Current time: 1559314380829 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 66.0%
Fitness Testing:     12.2 seconds, 20.4%
Report:               8.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq exec_shove () integer_dup_times integer_fromboolean in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush exec_do*times () integer_empty boolean_invert_first_then_and) boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq exec_shove () integer_dup_times integer_fromboolean in1 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush exec_do*times () integer_empty boolean_invert_first_then_and) boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 191 211 545 762 1 1000 545 4 212)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (3 191 211 545 762 1 0 545 4 212)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec in2 exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 1 1 0 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 7.526
Median total errors in population: 7
Error averages by case: (0.997 0.809 0.789 0.455 0.238 0.999 1.0 0.455 0.996 0.788)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 31.38
Average program size in population (points): 38.534
Average percent parens in population: 0.185
Minimum age in population: 28.357177734375
Maximum age in population: 33.43368911743164
Average age in population: 31.44114620780945
Median age in population: 31.47768020629883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.004
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 13953622
--- Timings ---
Current time: 1559314383408 milliseconds
Total Time:          62.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.3 seconds, 66.1%
Fitness Testing:     12.7 seconds, 20.3%
Report:               8.4 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 41                 
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 65                 
Correct output: 32                  | Program output: 69                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 96                 
Correct output: 4                   | Program output: 85                 
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 87                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 45                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 79                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 94                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 75                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (integer_eq exec_shove () exec_k (exec_yank in1 in2 exec_do*times (print_integer) boolean_dup) (boolean_pop boolean_pop integer_yankdup boolean_frominteger) exec_when () integer_sub tagged_42 exec_y_when_autoconstructing (boolean_dup) integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (integer_pop integer_eq in2 exec_swap (integer_stackdepth) ()) ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (integer_eq exec_shove () exec_k (exec_yank in1 in2 exec_do*times (print_integer) boolean_dup) (boolean_pop boolean_pop integer_yankdup boolean_frominteger) exec_when () integer_sub tagged_42 exec_y_when_autoconstructing (boolean_dup) integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (integer_pop integer_eq in2 exec_swap (integer_stackdepth) ()) ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 648 648 647 2 325 2 223 347 129)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (347 648 648 647 2 325 2 223 347 129)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq exec_shove () exec_k (exec_yank in1 in2 exec_do*times (print_integer boolean_dup) boolean_pop boolean_pop integer_mod boolean_frominteger) (exec_when ()) integer_sub tagged_42 exec_y_when_autoconstructing () boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Errors: [1 0 0 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 42
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.682
Median total errors in population: 7
Error averages by case: (0.653 0.352 0.352 0.353 0.998 0.675 0.998 0.777 0.653 0.871)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.509
Average program size in population (points): 39.04
Average percent parens in population: 0.193
Minimum age in population: 30.11605072021484
Maximum age in population: 34.75987434387207
Average age in population: 32.91922430038452
Median age in population: 32.99531841278076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 14558496
--- Timings ---
Current time: 1559314386103 milliseconds
Total Time:          65.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.2 seconds, 66.3%
Fitness Testing:     13.1 seconds, 20.2%
Report:               8.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -30                
Correct output: -48                 | Program output: -40                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 76                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 9                  
Correct output: 9                   | Program output: 40                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 99                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 94                 
Correct output: 36                  | Program output: 62                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 73                 
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 99                 
Correct output: 3                   | Program output: 50                 
Correct output: 18                  | Program output: 98                 
Correct output: 19                  | Program output: 88                 
Correct output: 13                  | Program output: 39                 
Correct output: 16                  | Program output: 76                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 46                 
Correct output: -79                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -3                 
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -22                
Correct output: -68                 | Program output: -17                
Correct output: -71                 | Program output: 60                 
Correct output: -51                 | Program output: 47                 
Correct output: -95                 | Program output: -10                
Correct output: -85                 | Program output: -76                
Correct output: -19                 | Program output: 29                 
Correct output: -78                 | Program output: 27                 
Correct output: -95                 | Program output: 4                  
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: 54                 
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -59                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: 0                  
Correct output: -100                | Program output: -55                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 26                 
Correct output: 2                   | Program output: 91                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 96                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: 15                 
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -30                
Correct output: -40                 | Program output: -33                
Correct output: -12                 | Program output: 26                 
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: 61                 
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 55                 
Correct output: -69                 | Program output: -25                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in4 exec_noop in3 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 integer_div boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in4 exec_noop in3 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 integer_div boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (321 959 308 206 956 860 319 112 321 959)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (321 959 308 206 956 860 319 112 321 959)
Population mean number of perfect (error zero) cases: 5.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_8} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in4 exec_noop in3 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_8 integer_div boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and in3 integer_eq in2 in2 exec_swap (tagged_154) ())
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 44
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 4.679
Median total errors in population: 5
Error averages by case: (0.679 0.041 0.692 0.794 0.044 0.14 0.681 0.888 0.679 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.662
Average program size in population (points): 39.193
Average percent parens in population: 0.192
Minimum age in population: 31.11605072021484
Maximum age in population: 36.40727949142456
Average age in population: 34.64907785177231
Median age in population: 34.71254396438599
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 15162507
--- Timings ---
Current time: 1559314388756 milliseconds
Total Time:          67.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.1 seconds, 66.5%
Fitness Testing:     13.6 seconds, 20.0%
Report:               9.0 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2)
Lexicase best errors: [0 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.152
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and integer_pop integer_eq in2)
Zero cases best errors: [0 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (958 163 1 163 9 1000 1000 74 956 796)
Population mean number of elite cases: 5.12
Count of perfect (error zero) individuals by case: (958 163 1 163 9 0 0 74 956 796)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Errors: [0 0 1 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 30
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.88
Median total errors in population: 7
Error averages by case: (0.042 0.837 0.999 0.837 0.991 1.0 1.0 0.926 0.044 0.204)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 34.556
Average program size in population (points): 42.39
Average percent parens in population: 0.185
Minimum age in population: 33.86801147460938
Maximum age in population: 37.80469226837158
Average age in population: 36.34661986899376
Median age in population: 36.43090152740479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 225
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 15970544
--- Timings ---
Current time: 1559314391519 milliseconds
Total Time:          70.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 66.6%
Fitness Testing:     14.1 seconds, 20.0%
Report:               9.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 30
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 30
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (419 626 421 1000 419 419 934 626 309 635)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (419 626 421 0 419 419 934 626 309 635)
Population mean number of perfect (error zero) cases: 4.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction in4} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () in4 boolean_invert_first_then_and boolean_and integer_pop integer_eq in2 exec_swap (tagged_154) ())
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 27
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.192
Median total errors in population: 6
Error averages by case: (0.581 0.374 0.579 1.0 0.581 0.581 0.066 0.374 0.691 0.365)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 33.886
Average program size in population (points): 41.077
Average percent parens in population: 0.176
Minimum age in population: 34.86801147460938
Maximum age in population: 39.23330307006836
Average age in population: 37.60681613266468
Median age in population: 37.64742016792297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.433
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 16458888
--- Timings ---
Current time: 1559314393983 milliseconds
Total Time:          73.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.7 seconds, 66.7%
Fitness Testing:     14.5 seconds, 19.8%
Report:               9.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 557
Test mean error for best: 0.55700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 71                 
Correct output: 9                   | Program output: 48                 
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 11                 
Correct output: 32                  | Program output: 93                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 88                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 89                 
Correct output: 4                   | Program output: 66                 
Correct output: 0                   | Program output: 60                 
Correct output: 51                  | Program output: 70                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -17                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 85                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 69                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 28                 
Correct output: -64                 | Program output: 28                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 14                 
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -4                 
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 77                 
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 92                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 77                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: 40                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 28                 
Correct output: 16                  | Program output: 89                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_9982})
Lexicase best program: (integer_eq boolean_pop in3 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_dup integer_pop integer_eq in2 exec_swap (tagged_9982) ())
Lexicase best errors: [1 0 0 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_9982})
Zero cases best program: (integer_eq boolean_pop in3 in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_dup integer_pop integer_eq in2 exec_swap (tagged_9982) ())
Zero cases best errors: [1 0 0 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 806 808 808 1000 34 136 949 810 951)
Population mean number of elite cases: 7.30
Count of perfect (error zero) individuals by case: (0 806 808 808 0 34 136 949 810 951)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 2, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop in2 exec_do*times (print_integer) boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup_times integer_dec integer_min exec_do*times (exec_flush integer_max) integer_mult boolean_invert_first_then_and boolean_and exec_yank integer_eq in2 exec_swap (tagged_154) ())
Errors: [1 0 0 0 1 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 37
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 4.698
Median total errors in population: 4
Error averages by case: (1.0 0.194 0.192 0.192 1.0 0.966 0.864 0.051 0.19 0.049)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 31.777
Average program size in population (points): 39.077
Average percent parens in population: 0.188
Minimum age in population: 36.4164924621582
Maximum age in population: 40.96116477251053
Average age in population: 39.15147634094954
Median age in population: 39.24186456203461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 17180329
--- Timings ---
Current time: 1559314396739 milliseconds
Total Time:          75.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 66.8%
Fitness Testing:     15.0 seconds, 19.7%
Report:              10.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -37                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (753 1000 5 753 386 4 386 1000 3 1000)
Population mean number of elite cases: 5.29
Count of perfect (error zero) individuals by case: (753 0 5 753 386 4 386 0 3 0)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 7.71
Median total errors in population: 8
Error averages by case: (0.247 1.0 0.995 0.247 0.614 0.996 0.614 1.0 0.997 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 34.578
Average program size in population (points): 42.813
Average percent parens in population: 0.192
Minimum age in population: 37.91307067871094
Maximum age in population: 42.28406399488449
Average age in population: 40.67093504369259
Median age in population: 40.61249054968357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 17874537
--- Timings ---
Current time: 1559314399250 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 66.9%
Fitness Testing:     15.5 seconds, 19.7%
Report:              10.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -37                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 963 949 963 1000 930 930 963 1000 1000)
Population mean number of elite cases: 8.70
Count of perfect (error zero) individuals by case: (1 963 949 963 0 930 930 963 0 0)
Population mean number of perfect (error zero) cases: 5.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Errors: [1 0 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 4.301
Median total errors in population: 4
Error averages by case: (0.999 0.037 0.051 0.037 1.0 0.07 0.07 0.037 1.0 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 24.935
Average program size in population (points): 28.958
Average percent parens in population: 0.139
Minimum age in population: 42.1320296227932
Maximum age in population: 43.1320296227932
Average age in population: 42.6330296227932
Median age in population: 43.1320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 669
Genome diversity (% unique genomes):	 0.299
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 724
Syntactic diversity (% unique Push programs):	 0.238
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 18066698
--- Timings ---
Current time: 1559314401424 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.4 seconds, 67.4%
Fitness Testing:     15.6 seconds, 19.4%
Report:              10.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 87                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 22                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 50                 
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -37                
Correct output: -97                 | Program output: 27                 
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 2                  
Correct output: -69                 | Program output: 17                 
Correct output: -64                 | Program output: 26                 
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 52                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 6                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -57                
Correct output: -59                 | Program output: -1                 
Correct output: -74                 | Program output: 85                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: 28                 
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: 20                 
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 24                 
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -48                
Correct output: -18                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (966 967 1000 935 935 504 1000 937 1000 505)
Population mean number of elite cases: 8.75
Count of perfect (error zero) individuals by case: (966 967 0 935 935 504 0 937 0 505)
Population mean number of perfect (error zero) cases: 5.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush boolean_dup) boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec integer_min exec_do*times (exec_flush tagged_154))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 46
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 4.251
Median total errors in population: 5
Error averages by case: (0.034 0.033 1.0 0.065 0.065 0.496 1.0 0.063 1.0 0.495)
Error minima by case: (0 0 1 0 0 0 1 0 1 0)
Average genome size in population (length): 23.018
Average program size in population (points): 27.04
Average percent parens in population: 0.149
Minimum age in population: 43.1320296227932
Maximum age in population: 45.1320296227932
Average age in population: 44.3675296227932
Median age in population: 44.1320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 336
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 360
Syntactic diversity (% unique Push programs):	 0.31
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 18242269
--- Timings ---
Current time: 1559314403206 milliseconds
Total Time:          82.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 67.7%
Fitness Testing:     15.8 seconds, 19.2%
Report:              10.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 949 921 947 3 921 1000 921 923)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (4 3 949 921 947 3 921 0 921 923)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.408
Median total errors in population: 4
Error averages by case: (0.996 0.997 0.051 0.079 0.053 0.997 0.079 1.0 0.079 0.077)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 24.693
Average program size in population (points): 28.724
Average percent parens in population: 0.140
Minimum age in population: 44.1320296227932
Maximum age in population: 47.1320296227932
Average age in population: 45.6955296227932
Median age in population: 45.6320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 331
Genome diversity (% unique genomes):	 0.456
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 433
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 18434575
--- Timings ---
Current time: 1559314405311 milliseconds
Total Time:          84.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 68.1%
Fitness Testing:     16.0 seconds, 18.9%
Report:              10.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 909 909 955 910 929 1000 941 909 908)
Population mean number of elite cases: 9.37
Count of perfect (error zero) individuals by case: (0 909 909 955 910 929 0 941 909 908)
Population mean number of perfect (error zero) cases: 7.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction tag_exec_57} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 tag_exec_57 (boolean_and) integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 33
Percent parens: 0.152
--- Population Statistics ---
Average total errors in population: 2.63
Median total errors in population: 2
Error averages by case: (1.0 0.091 0.091 0.045 0.09 0.071 1.0 0.059 0.091 0.092)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 27.92
Average program size in population (points): 31.933
Average percent parens in population: 0.126
Minimum age in population: 47.6320296227932
Maximum age in population: 48.6320296227932
Average age in population: 48.1220296227932
Median age in population: 47.6320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 620
Genome diversity (% unique genomes):	 0.344
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 690
Syntactic diversity (% unique Push programs):	 0.285
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 18657321
--- Timings ---
Current time: 1559314407246 milliseconds
Total Time:          86.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 68.4%
Fitness Testing:     16.2 seconds, 18.8%
Report:              11.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when (integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush) tagged_154)
Lexicase best errors: [1 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when (integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush) tagged_154)
Zero cases best errors: [1 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 939 1000 1000 951 906 927 930 949 1000)
Population mean number of elite cases: 9.60
Count of perfect (error zero) individuals by case: (0 939 0 0 951 906 927 930 949 0)
Population mean number of perfect (error zero) cases: 5.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while (exec_when () integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [1 0 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.398
Median total errors in population: 4
Error averages by case: (1.0 0.061 1.0 1.0 0.049 0.094 0.073 0.07 0.051 1.0)
Error minima by case: (1 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 27.847
Average program size in population (points): 31.864
Average percent parens in population: 0.126
Minimum age in population: 48.6320296227932
Maximum age in population: 50.6320296227932
Average age in population: 49.5905296227932
Median age in population: 49.6320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 451
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 543
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 18878499
--- Timings ---
Current time: 1559314409404 milliseconds
Total Time:          88.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.0 seconds, 68.8%
Fitness Testing:     16.4 seconds, 18.6%
Report:              11.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_min boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_min} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_min boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 1000 953 942 1000 942 1000 916 942 1000)
Population mean number of elite cases: 9.61
Count of perfect (error zero) individuals by case: (915 0 953 942 0 942 0 916 942 0)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 2, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 3, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.39
Median total errors in population: 4
Error averages by case: (0.085 1.0 0.047 0.058 1.0 0.058 1.0 0.084 0.058 1.0)
Error minima by case: (0 1 0 0 1 0 1 0 0 1)
Average genome size in population (length): 27.911
Average program size in population (points): 31.947
Average percent parens in population: 0.126
Minimum age in population: 49.6320296227932
Maximum age in population: 52.6320296227932
Average age in population: 51.0655296227932
Median age in population: 51.1320296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 321
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 432
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 19102620
--- Timings ---
Current time: 1559314411502 milliseconds
Total Time:          90.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 69.1%
Fitness Testing:     16.7 seconds, 18.4%
Report:              11.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup tagged_42 exec_flush exec_flush tagged_154)
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup tagged_42 exec_flush exec_flush tagged_154)
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (905 945 1 948 944 905 1 1 906 1)
Population mean number of elite cases: 5.56
Count of perfect (error zero) individuals by case: (905 945 1 948 944 905 1 1 906 1)
Population mean number of perfect (error zero) cases: 5.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while (exec_when () integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 28
Size: 32
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 4.443
Median total errors in population: 4
Error averages by case: (0.095 0.055 0.999 0.052 0.056 0.095 0.999 0.999 0.094 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.72
Average program size in population (points): 31.743
Average percent parens in population: 0.126
Minimum age in population: 50.6320296227932
Maximum age in population: 54.3820296227932
Average age in population: 52.5211546227932
Median age in population: 52.5070296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 305
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 19324770
--- Timings ---
Current time: 1559314413364 milliseconds
Total Time:          92.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.2 seconds, 69.3%
Fitness Testing:     16.9 seconds, 18.2%
Report:              11.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush) tagged_154)
Lexicase best errors: [0 1 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush) tagged_154)
Zero cases best errors: [0 1 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (967 377 567 584 560 378 967 379 566 566)
Population mean number of elite cases: 5.91
Count of perfect (error zero) individuals by case: (967 377 567 584 560 378 967 379 566 566)
Population mean number of perfect (error zero) cases: 5.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_k_when_autoconstructing (boolean_and) (integer_eq) in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop exec_dup (integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 1 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 4.089
Median total errors in population: 3
Error averages by case: (0.033 0.623 0.433 0.416 0.44 0.622 0.033 0.621 0.434 0.434)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.842
Average program size in population (points): 31.922
Average percent parens in population: 0.127
Minimum age in population: 51.6320296227932
Maximum age in population: 55.7570296227932
Average age in population: 53.9936546227932
Median age in population: 54.0695296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 236
Genome diversity (% unique genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 263
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 19550073
--- Timings ---
Current time: 1559314415437 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.9 seconds, 69.6%
Fitness Testing:     17.1 seconds, 18.1%
Report:              11.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 3, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 3, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 523 943 519 399 934 932 399 933 935)
Population mean number of elite cases: 7.03
Count of perfect (error zero) individuals by case: (518 523 943 519 399 934 932 399 933 935)
Population mean number of perfect (error zero) cases: 7.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 2.965
Median total errors in population: 5/2
Error averages by case: (0.482 0.477 0.057 0.481 0.601 0.066 0.068 0.601 0.067 0.065)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.137
Average program size in population (points): 33.218
Average percent parens in population: 0.123
Minimum age in population: 52.6320296227932
Maximum age in population: 57.1320296227932
Average age in population: 55.1747171227932
Median age in population: 55.2570296227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 261
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 19789232
--- Timings ---
Current time: 1559314417637 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 69.9%
Fitness Testing:     17.3 seconds, 17.9%
Report:              11.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_or boolean_pop boolean_pop integer_mod exec_while () exec_when (integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_or boolean_pop boolean_pop integer_mod exec_while () exec_when (integer_sub tagged_42 exec_flush boolean_dup) integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 937 566 351 943 939 938 567 558)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (350 350 937 566 351 943 939 938 567 558)
Population mean number of perfect (error zero) cases: 6.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq in4 integer_min integer_eq boolean_and in2 in1 boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 1 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 3.501
Median total errors in population: 3
Error averages by case: (0.65 0.65 0.063 0.434 0.649 0.057 0.061 0.062 0.433 0.442)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.871
Average program size in population (points): 32.967
Average percent parens in population: 0.124
Minimum age in population: 54.6320296227932
Maximum age in population: 58.5070296227932
Average age in population: 56.6598733727932
Median age in population: 56.7179671227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 20026180
--- Timings ---
Current time: 1559314419943 milliseconds
Total Time:          99.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.6 seconds, 70.2%
Fitness Testing:     17.6 seconds, 17.7%
Report:              11.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 415
Test mean error for best: 0.41500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 89                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -81                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 40                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 12                 
Correct output: 24                  | Program output: 24                 
Correct output: 36                  | Program output: 36                 
Correct output: 49                  | Program output: 80                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 0                  
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 3                  
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 37                 
Correct output: 13                  | Program output: 50                 
Correct output: 16                  | Program output: 62                 
Correct output: 7                   | Program output: 7                  
Correct output: -93                 | Program output: -40                
Correct output: -96                 | Program output: -96                
Correct output: -97                 | Program output: -39                
Correct output: -85                 | Program output: -85                
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -27                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: -19                
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -95                
Correct output: -69                 | Program output: -8                 
Correct output: -98                 | Program output: -98                
Correct output: -69                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: 70                 
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: -21                
Correct output: -47                 | Program output: -47                
Correct output: -92                 | Program output: -92                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -1                 
Correct output: -50                 | Program output: -50                
Correct output: -89                 | Program output: -89                
Correct output: 2                   | Program output: 2                  
Correct output: -62                 | Program output: -62                
Correct output: -96                 | Program output: -67                
Correct output: -59                 | Program output: -59                
Correct output: -74                 | Program output: -74                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -47                
Correct output: -95                 | Program output: -59                
Correct output: -67                 | Program output: -67                
Correct output: 17                  | Program output: 83                 
Correct output: -44                 | Program output: -19                
Correct output: -33                 | Program output: -18                
Correct output: -12                 | Program output: -10                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -3                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -76                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 2                  
Correct output: 16                  | Program output: 57                 
Correct output: -98                 | Program output: -11                
Correct output: 30                  | Program output: 58                 
Correct output: -69                 | Program output: -53                
Correct output: -18                 | Program output: 88                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_dup_times integer_min integer_eq boolean_and in2 in1 boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 35
Percent parens: 0.114
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq boolean_dup_times integer_min integer_eq boolean_and in2 in1 boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (450 939 940 449 464 940 941 450 940 474)
Population mean number of elite cases: 6.99
Count of perfect (error zero) individuals by case: (450 939 940 449 464 940 941 450 940 474)
Population mean number of perfect (error zero) cases: 6.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 in1 boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () tagged_154)
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 22
Size: 24
Percent parens: 0.083
--- Population Statistics ---
Average total errors in population: 3.013
Median total errors in population: 3
Error averages by case: (0.55 0.061 0.06 0.551 0.536 0.06 0.059 0.55 0.06 0.526)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.991
Average program size in population (points): 33.119
Average percent parens in population: 0.124
Minimum age in population: 55.6945296227932
Maximum age in population: 59.8976546227932
Average age in population: 58.0678030602932
Median age in population: 58.1164046227932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 20269438
--- Timings ---
Current time: 1559314422239 milliseconds
Total Time:         101.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.5 seconds, 70.5%
Fitness Testing:     17.8 seconds, 17.5%
Report:              12.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Lexicase best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_dup () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Zero cases best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_dup () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 385 947 958 545 385 382 380 950 957)
Population mean number of elite cases: 6.27
Count of perfect (error zero) individuals by case: (380 385 947 958 545 385 382 380 950 957)
Population mean number of perfect (error zero) cases: 6.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 27
Size: 31
Percent parens: 0.129
--- Population Statistics ---
Average total errors in population: 3.731
Median total errors in population: 5
Error averages by case: (0.62 0.615 0.053 0.042 0.455 0.615 0.618 0.62 0.05 0.043)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.342
Average program size in population (points): 33.526
Average percent parens in population: 0.123
Minimum age in population: 57.0539046227932
Maximum age in population: 61.5656233727932
Average age in population: 59.4787288415432
Median age in population: 59.5421858727932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 20515734
--- Timings ---
Current time: 1559314424419 milliseconds
Total Time:         103.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.3 seconds, 70.7%
Fitness Testing:     18.0 seconds, 17.4%
Report:              12.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_154})
Lexicase best program: (integer_pop boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq exec_noop in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items integer_gt exec_flush tagged_154)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 35
Percent parens: 0.086
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_pop} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_flush} {:close 1, :instruction tagged_154})
Zero cases best program: (integer_pop boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq exec_noop in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_flush boolean_dup integer_sub tagged_42 exec_flush boolean_dup integer_dec exec_dup_items integer_gt exec_flush tagged_154)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 35
Percent parens: 0.086
--- Lexicase Population Statistics ---
Count of elite individuals by case: (963 781 782 765 965 767 953 782 766 781)
Population mean number of elite cases: 8.31
Count of perfect (error zero) individuals by case: (963 781 782 765 965 767 953 782 766 781)
Population mean number of perfect (error zero) cases: 8.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction print_integer} {:close 2, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 0, :instruction tagged_42} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction tagged_154})
Best program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 25
Size: 29
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1.695
Median total errors in population: 0
Error averages by case: (0.037 0.219 0.218 0.235 0.035 0.233 0.047 0.218 0.234 0.219)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.132
Average program size in population (points): 32.303
Average percent parens in population: 0.128
Minimum age in population: 58.2570296227932
Maximum age in population: 63.2960921227932
Average age in population: 61.0422483727932
Median age in population: 61.1564436852932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 20746489
--- Timings ---
Current time: 1559314426628 milliseconds
Total Time:         105.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.1 seconds, 71.0%
Fitness Testing:     18.3 seconds, 17.2%
Report:              12.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 39
Successful program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 29


Auto-simplifying with starting size: 29
step: 0
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 500
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1000
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 1500
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2000
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 2500
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3000
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 3500
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4000
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 4500
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

step: 5000
program: (integer_eq boolean_pop in3 exec_noop boolean_and integer_eq in4 integer_min integer_eq boolean_and in2 integer_min print_integer boolean_dup boolean_pop boolean_pop integer_mod exec_while () exec_when () integer_sub tagged_42 exec_dup_items exec_do*times (exec_flush tagged_154))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 29

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 219
Test mean error for best: 0.21900
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: 47                  | Program output: 47                 
Correct output: -19                 | Program output: -19                
Correct output: -38                 | Program output: -38                
Correct output: -48                 | Program output: -48                
Correct output: -20                 | Program output: -20                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -88                 | Program output: -88                
Correct output: -25                 | Program output: -25                
Correct output: -73                 | Program output: -73                
Correct output: 18                  | Program output: 18                 
Correct output: -46                 | Program output: -46                
Correct output: 35                  | Program output: 35                 
Correct output: 3                   | Program output: 3                  
Correct output: 42                  | Program output: 46                 
Correct output: 9                   | Program output: 9                  
Correct output: 1                   | Program output: 1                  
Correct output: 9                   | Program output: 9                  
Correct output: 32                  | Program output: 32                 
Correct output: 39                  | Program output: 39                 
Correct output: 8                   | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 24                  | Program output: 42                 
Correct output: 36                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 4                   | Program output: 4                  
Correct output: 0                   | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 10                 
Correct output: 18                  | Program output: 18                 
Correct output: 19                  | Program output: 19                 
Correct output: 13                  | Program output: 13                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 49                 
Correct output: -93                 | Program output: -93                
Correct output: -96                 | Program output: -91                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 16                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -99                 | Program output: -99                
Correct output: -90                 | Program output: -83                
Correct output: -68                 | Program output: -68                
Correct output: -71                 | Program output: -71                
Correct output: -51                 | Program output: -51                
Correct output: -95                 | Program output: -95                
Correct output: -85                 | Program output: -85                
Correct output: -19                 | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -95                 | Program output: -70                
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -24                
Correct output: -69                 | Program output: -69                
Correct output: -64                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -88                 | Program output: -88                
Correct output: -21                 | Program output: 1                  
Correct output: -47                 | Program output: -9                 
Correct output: -92                 | Program output: -45                
Correct output: -88                 | Program output: -88                
Correct output: -100                | Program output: -100               
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -36                
Correct output: -89                 | Program output: 15                 
Correct output: 2                   | Program output: 9                  
Correct output: -62                 | Program output: -2                 
Correct output: -96                 | Program output: -96                
Correct output: -59                 | Program output: -50                
Correct output: -74                 | Program output: 46                 
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: -47                
Correct output: 17                  | Program output: 17                 
Correct output: -44                 | Program output: -44                
Correct output: -33                 | Program output: -33                
Correct output: -12                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -70                 | Program output: -70                
Correct output: -83                 | Program output: -59                
Correct output: -94                 | Program output: -67                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -74                 | Program output: -74                
Correct output: 1                   | Program output: 1                  
Correct output: 16                  | Program output: 16                 
Correct output: -98                 | Program output: -98                
Correct output: 30                  | Program output: 30                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
;;******************************
