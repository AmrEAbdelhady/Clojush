Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-87 -87 -87 93] -87] [[-45 46 -45 -45] -45] [[9 9 -78 9] -78] [[82 82 82 -20] -20] [[-30 46 46 46] -30] [[-45 -45 -71 -45] -71] [[-99 9 9 9] -99] [[37 -2 -2 -2] -2] [[73 73 79 73] 73] [[-38 23 23 23] -38] [(-47 -47 -47 -47) -47] [(79 79 79 79) 79] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(5 5 5 5) 5] [(31 99 37 53) 31] [(36 47 54 82) 36] [(44 20 31 20) 20] [(89 37 97 50) 37] [(62 12 87 74) 12] [(82 2 24 38) 2] [(97 38 12 32) 12] [(47 6 94 49) 6] [(32 50 63 2) 2] [(75 94 64 59) 59] [(35 16 11 70) 11] [(37 65 14 100) 14] [(25 50 13 22) 13] [(74 30 65 3) 3] [(27 66 59 28) 27] [(60 55 83 28) 28] [(17 45 60 93) 17] [(23 4 84 89) 4] [(97 64 31 80) 31] [(7 34 97 18) 7] [(-23 -52 -62 -71) -71] [(82 44 -39 -28) -39] [(-71 69 7 -84) -84] [(-89 12 -7 -73) -89] [(-34 -5 26 -6) -34] [(27 -96 97 -24) -96] [(-48 -41 -50 -25) -50] [(58 -57 30 14) -57] [(11 -94 -12 -13) -94] [(-39 7 30 -88) -88] [(84 -65 96 -24) -65] [(84 -42 80 19) -42] [(-11 -21 13 -42) -42] [(90 -22 -8 22) -22] [(-31 52 -60 10) -60] [(-10 85 -33 -83) -83] [(28 -25 -46 42) -46] [(-55 63 54 29) -55] [(81 50 75 64) 50] [(3 87 97 -26) -26] [(-95 -77 95 -69) -95] [(-46 57 -16 -21) -46] [(-17 -32 98 93) -32] [(73 -19 69 -85) -85] [(40 -5 80 82) -5] [(-93 -30 -71 -2) -93] [(25 68 54 -22) -22] [(-95 -87 86 31) -95] [(76 10 -22 -16) -22] [(7 58 81 -35) -35] [(-86 28 57 93) -86] [(28 -55 3 -19) -55] [(15 -52 68 43) -52] [(-95 53 -79 -13) -95] [(-100 1 -11 -18) -100] [(-69 31 -48 -13) -69] [(97 -39 32 56) -39] [(-82 -89 -91 -29) -91] [(-51 -90 32 -95) -95] [(12 -40 7 18) -40] [(-5 25 -55 11) -55] [(51 -26 -98 36) -98] [(-42 -34 10 66) -42] [(27 24 -100 63) -100] [(99 -50 1 36) -50] [(47 36 -94 -6) -94] [(-80 -67 5 7) -80] [(-95 -56 44 -13) -95] [(-10 21 38 -89) -89] [(-66 46 43 72) -66] [(-95 81 -100 24) -100] [(-32 -90 23 80) -90] [(-60 -47 -57 -4) -60] [(92 62 -77 15) -77] [(50 -54 7 -7) -54] [(-84 34 44 68) -84] [(-22 68 73 16) -22] [(-69 -1 -99 -69) -99] [(43 85 27 -8) -8] [(60 48 95 -20) -20])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-87 -87 -87 93] -87]
Train Case:   6 | Input/Output: [[-45 46 -45 -45] -45]
Train Case:   7 | Input/Output: [[9 9 -78 9] -78]
Train Case:   8 | Input/Output: [[82 82 82 -20] -20]
Train Case:   9 | Input/Output: [[-30 46 46 46] -30]
Train Case:  10 | Input/Output: [[-45 -45 -71 -45] -71]
Train Case:  11 | Input/Output: [[-99 9 9 9] -99]
Train Case:  12 | Input/Output: [[37 -2 -2 -2] -2]
Train Case:  13 | Input/Output: [[73 73 79 73] 73]
Train Case:  14 | Input/Output: [[-38 23 23 23] -38]
Train Case:  15 | Input/Output: [(-47 -47 -47 -47) -47]
Train Case:  16 | Input/Output: [(79 79 79 79) 79]
Train Case:  17 | Input/Output: [(100 100 100 100) 100]
Train Case:  18 | Input/Output: [(-19 -19 -19 -19) -19]
Train Case:  19 | Input/Output: [(5 5 5 5) 5]
Train Case:  20 | Input/Output: [(31 99 37 53) 31]
Train Case:  21 | Input/Output: [(36 47 54 82) 36]
Train Case:  22 | Input/Output: [(44 20 31 20) 20]
Train Case:  23 | Input/Output: [(89 37 97 50) 37]
Train Case:  24 | Input/Output: [(62 12 87 74) 12]
Train Case:  25 | Input/Output: [(82 2 24 38) 2]
Train Case:  26 | Input/Output: [(97 38 12 32) 12]
Train Case:  27 | Input/Output: [(47 6 94 49) 6]
Train Case:  28 | Input/Output: [(32 50 63 2) 2]
Train Case:  29 | Input/Output: [(75 94 64 59) 59]
Train Case:  30 | Input/Output: [(35 16 11 70) 11]
Train Case:  31 | Input/Output: [(37 65 14 100) 14]
Train Case:  32 | Input/Output: [(25 50 13 22) 13]
Train Case:  33 | Input/Output: [(74 30 65 3) 3]
Train Case:  34 | Input/Output: [(27 66 59 28) 27]
Train Case:  35 | Input/Output: [(60 55 83 28) 28]
Train Case:  36 | Input/Output: [(17 45 60 93) 17]
Train Case:  37 | Input/Output: [(23 4 84 89) 4]
Train Case:  38 | Input/Output: [(97 64 31 80) 31]
Train Case:  39 | Input/Output: [(7 34 97 18) 7]
Train Case:  40 | Input/Output: [(-23 -52 -62 -71) -71]
Train Case:  41 | Input/Output: [(82 44 -39 -28) -39]
Train Case:  42 | Input/Output: [(-71 69 7 -84) -84]
Train Case:  43 | Input/Output: [(-89 12 -7 -73) -89]
Train Case:  44 | Input/Output: [(-34 -5 26 -6) -34]
Train Case:  45 | Input/Output: [(27 -96 97 -24) -96]
Train Case:  46 | Input/Output: [(-48 -41 -50 -25) -50]
Train Case:  47 | Input/Output: [(58 -57 30 14) -57]
Train Case:  48 | Input/Output: [(11 -94 -12 -13) -94]
Train Case:  49 | Input/Output: [(-39 7 30 -88) -88]
Train Case:  50 | Input/Output: [(84 -65 96 -24) -65]
Train Case:  51 | Input/Output: [(84 -42 80 19) -42]
Train Case:  52 | Input/Output: [(-11 -21 13 -42) -42]
Train Case:  53 | Input/Output: [(90 -22 -8 22) -22]
Train Case:  54 | Input/Output: [(-31 52 -60 10) -60]
Train Case:  55 | Input/Output: [(-10 85 -33 -83) -83]
Train Case:  56 | Input/Output: [(28 -25 -46 42) -46]
Train Case:  57 | Input/Output: [(-55 63 54 29) -55]
Train Case:  58 | Input/Output: [(81 50 75 64) 50]
Train Case:  59 | Input/Output: [(3 87 97 -26) -26]
Train Case:  60 | Input/Output: [(-95 -77 95 -69) -95]
Train Case:  61 | Input/Output: [(-46 57 -16 -21) -46]
Train Case:  62 | Input/Output: [(-17 -32 98 93) -32]
Train Case:  63 | Input/Output: [(73 -19 69 -85) -85]
Train Case:  64 | Input/Output: [(40 -5 80 82) -5]
Train Case:  65 | Input/Output: [(-93 -30 -71 -2) -93]
Train Case:  66 | Input/Output: [(25 68 54 -22) -22]
Train Case:  67 | Input/Output: [(-95 -87 86 31) -95]
Train Case:  68 | Input/Output: [(76 10 -22 -16) -22]
Train Case:  69 | Input/Output: [(7 58 81 -35) -35]
Train Case:  70 | Input/Output: [(-86 28 57 93) -86]
Train Case:  71 | Input/Output: [(28 -55 3 -19) -55]
Train Case:  72 | Input/Output: [(15 -52 68 43) -52]
Train Case:  73 | Input/Output: [(-95 53 -79 -13) -95]
Train Case:  74 | Input/Output: [(-100 1 -11 -18) -100]
Train Case:  75 | Input/Output: [(-69 31 -48 -13) -69]
Train Case:  76 | Input/Output: [(97 -39 32 56) -39]
Train Case:  77 | Input/Output: [(-82 -89 -91 -29) -91]
Train Case:  78 | Input/Output: [(-51 -90 32 -95) -95]
Train Case:  79 | Input/Output: [(12 -40 7 18) -40]
Train Case:  80 | Input/Output: [(-5 25 -55 11) -55]
Train Case:  81 | Input/Output: [(51 -26 -98 36) -98]
Train Case:  82 | Input/Output: [(-42 -34 10 66) -42]
Train Case:  83 | Input/Output: [(27 24 -100 63) -100]
Train Case:  84 | Input/Output: [(99 -50 1 36) -50]
Train Case:  85 | Input/Output: [(47 36 -94 -6) -94]
Train Case:  86 | Input/Output: [(-80 -67 5 7) -80]
Train Case:  87 | Input/Output: [(-95 -56 44 -13) -95]
Train Case:  88 | Input/Output: [(-10 21 38 -89) -89]
Train Case:  89 | Input/Output: [(-66 46 43 72) -66]
Train Case:  90 | Input/Output: [(-95 81 -100 24) -100]
Train Case:  91 | Input/Output: [(-32 -90 23 80) -90]
Train Case:  92 | Input/Output: [(-60 -47 -57 -4) -60]
Train Case:  93 | Input/Output: [(92 62 -77 15) -77]
Train Case:  94 | Input/Output: [(50 -54 7 -7) -54]
Train Case:  95 | Input/Output: [(-84 34 44 68) -84]
Train Case:  96 | Input/Output: [(-22 68 73 16) -22]
Train Case:  97 | Input/Output: [(-69 -1 -99 -69) -99]
Train Case:  98 | Input/Output: [(43 85 27 -8) -8]
Train Case:  99 | Input/Output: [(60 48 95 -20) -20]
Test Case:   0 | Input/Output: [[-41 -41 36 -41] -41]
Test Case:   1 | Input/Output: [[-72 -37 -37 -37] -72]
Test Case:   2 | Input/Output: [[-87 -87 -87 -44] -87]
Test Case:   3 | Input/Output: [[32 32 -35 32] -35]
Test Case:   4 | Input/Output: [[-11 -66 -66 -66] -66]
Test Case:   5 | Input/Output: [[-27 -27 -27 58] -27]
Test Case:   6 | Input/Output: [[34 95 95 95] 34]
Test Case:   7 | Input/Output: [[-85 -85 46 -85] -85]
Test Case:   8 | Input/Output: [[-45 25 -45 -45] -45]
Test Case:   9 | Input/Output: [[-46 -83 -46 -46] -83]
Test Case:  10 | Input/Output: [[-61 22 -61 -61] -61]
Test Case:  11 | Input/Output: [[-74 -98 -74 -74] -98]
Test Case:  12 | Input/Output: [[50 50 -22 50] -22]
Test Case:  13 | Input/Output: [[-55 99 -55 -55] -55]
Test Case:  14 | Input/Output: [[47 47 47 -14] -14]
Test Case:  15 | Input/Output: [[61 -100 61 61] -100]
Test Case:  16 | Input/Output: [[-91 77 77 77] -91]
Test Case:  17 | Input/Output: [[-94 -3 -3 -3] -94]
Test Case:  18 | Input/Output: [[2 46 2 2] 2]
Test Case:  19 | Input/Output: [[-63 -63 -63 -27] -63]
Test Case:  20 | Input/Output: [[-78 -78 -78 38] -78]
Test Case:  21 | Input/Output: [[26 -93 -93 -93] -93]
Test Case:  22 | Input/Output: [[0 73 73 73] 0]
Test Case:  23 | Input/Output: [[7 7 7 -47] -47]
Test Case:  24 | Input/Output: [[-56 -27 -27 -27] -56]
Test Case:  25 | Input/Output: [[-38 -38 -38 -67] -67]
Test Case:  26 | Input/Output: [[94 94 70 94] 70]
Test Case:  27 | Input/Output: [[-48 -48 78 -48] -48]
Test Case:  28 | Input/Output: [[-88 -69 -69 -69] -88]
Test Case:  29 | Input/Output: [[-57 18 18 18] -57]
Test Case:  30 | Input/Output: [[-98 -98 -98 -4] -98]
Test Case:  31 | Input/Output: [[-40 64 64 64] -40]
Test Case:  32 | Input/Output: [[8 26 8 8] 8]
Test Case:  33 | Input/Output: [[44 11 44 44] 11]
Test Case:  34 | Input/Output: [[20 -44 20 20] -44]
Test Case:  35 | Input/Output: [[93 -85 -85 -85] -85]
Test Case:  36 | Input/Output: [[4 -63 4 4] -63]
Test Case:  37 | Input/Output: [[93 93 93 93] 93]
Test Case:  38 | Input/Output: [[52 -56 52 52] -56]
Test Case:  39 | Input/Output: [[88 -62 88 88] -62]
Test Case:  40 | Input/Output: [[-17 -26 -17 -17] -26]
Test Case:  41 | Input/Output: [[-79 -79 -79 -93] -93]
Test Case:  42 | Input/Output: [[37 37 -68 37] -68]
Test Case:  43 | Input/Output: [[-22 -22 -22 -92] -92]
Test Case:  44 | Input/Output: [[-65 -65 23 -65] -65]
Test Case:  45 | Input/Output: [[84 84 84 -58] -58]
Test Case:  46 | Input/Output: [[21 -72 -72 -72] -72]
Test Case:  47 | Input/Output: [[52 -6 52 52] -6]
Test Case:  48 | Input/Output: [[-69 46 -69 -69] -69]
Test Case:  49 | Input/Output: [[88 -29 -29 -29] -29]
Test Case:  50 | Input/Output: [[-94 5 -94 -94] -94]
Test Case:  51 | Input/Output: [[24 24 -26 24] -26]
Test Case:  52 | Input/Output: [[31 31 31 -74] -74]
Test Case:  53 | Input/Output: [[63 63 63 60] 60]
Test Case:  54 | Input/Output: [[-16 98 98 98] -16]
Test Case:  55 | Input/Output: [[-71 -71 66 -71] -71]
Test Case:  56 | Input/Output: [[-28 33 33 33] -28]
Test Case:  57 | Input/Output: [[8 73 73 73] 8]
Test Case:  58 | Input/Output: [[15 93 15 15] 15]
Test Case:  59 | Input/Output: [[47 47 12 47] 12]
Test Case:  60 | Input/Output: [[-49 -49 -90 -49] -90]
Test Case:  61 | Input/Output: [[-44 -44 -44 -49] -49]
Test Case:  62 | Input/Output: [[3 -42 3 3] -42]
Test Case:  63 | Input/Output: [[-41 -41 4 -41] -41]
Test Case:  64 | Input/Output: [[-1 -66 -66 -66] -66]
Test Case:  65 | Input/Output: [[62 -56 -56 -56] -56]
Test Case:  66 | Input/Output: [[4 4 4 3] 3]
Test Case:  67 | Input/Output: [[-22 -24 -22 -22] -24]
Test Case:  68 | Input/Output: [[-48 -48 -48 -23] -48]
Test Case:  69 | Input/Output: [[-27 -53 -53 -53] -53]
Test Case:  70 | Input/Output: [[92 86 86 86] 86]
Test Case:  71 | Input/Output: [[-24 27 27 27] -24]
Test Case:  72 | Input/Output: [[81 -26 81 81] -26]
Test Case:  73 | Input/Output: [[49 49 78 49] 49]
Test Case:  74 | Input/Output: [[-64 91 -64 -64] -64]
Test Case:  75 | Input/Output: [[54 -57 54 54] -57]
Test Case:  76 | Input/Output: [[98 21 98 98] 21]
Test Case:  77 | Input/Output: [[26 26 26 -82] -82]
Test Case:  78 | Input/Output: [[-26 31 -26 -26] -26]
Test Case:  79 | Input/Output: [[-26 -26 -26 -52] -52]
Test Case:  80 | Input/Output: [[67 100 100 100] 67]
Test Case:  81 | Input/Output: [[-7 74 -7 -7] -7]
Test Case:  82 | Input/Output: [[-64 7 7 7] -64]
Test Case:  83 | Input/Output: [[38 38 8 38] 8]
Test Case:  84 | Input/Output: [[-67 -81 -81 -81] -81]
Test Case:  85 | Input/Output: [[63 -56 -56 -56] -56]
Test Case:  86 | Input/Output: [[-61 -61 -61 18] -61]
Test Case:  87 | Input/Output: [[47 54 47 47] 47]
Test Case:  88 | Input/Output: [[5 5 -40 5] -40]
Test Case:  89 | Input/Output: [[40 40 -27 40] -27]
Test Case:  90 | Input/Output: [[89 46 46 46] 46]
Test Case:  91 | Input/Output: [[-97 -97 -97 4] -97]
Test Case:  92 | Input/Output: [[95 58 58 58] 58]
Test Case:  93 | Input/Output: [[17 17 86 17] 17]
Test Case:  94 | Input/Output: [[-24 -24 -24 53] -24]
Test Case:  95 | Input/Output: [[9 4 4 4] 4]
Test Case:  96 | Input/Output: [[-58 -58 -58 70] -58]
Test Case:  97 | Input/Output: [[-58 -58 60 -58] -58]
Test Case:  98 | Input/Output: [[-10 42 -10 -10] -10]
Test Case:  99 | Input/Output: [[87 87 87 78] 78]
Test Case: 100 | Input/Output: [(3 3 3 3) 3]
Test Case: 101 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 102 | Input/Output: [(16 16 16 16) 16]
Test Case: 103 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 104 | Input/Output: [(51 51 51 51) 51]
Test Case: 105 | Input/Output: [(93 93 93 93) 93]
Test Case: 106 | Input/Output: [(39 39 39 39) 39]
Test Case: 107 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 108 | Input/Output: [(80 80 80 80) 80]
Test Case: 109 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 110 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 111 | Input/Output: [(78 78 78 78) 78]
Test Case: 112 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 113 | Input/Output: [(35 35 35 35) 35]
Test Case: 114 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 115 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 116 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 117 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 118 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 119 | Input/Output: [(90 90 90 90) 90]
Test Case: 120 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 121 | Input/Output: [(4 4 4 4) 4]
Test Case: 122 | Input/Output: [(49 49 49 49) 49]
Test Case: 123 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 124 | Input/Output: [(51 51 51 51) 51]
Test Case: 125 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 126 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 127 | Input/Output: [(31 31 31 31) 31]
Test Case: 128 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 129 | Input/Output: [(1 1 1 1) 1]
Test Case: 130 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 131 | Input/Output: [(88 88 88 88) 88]
Test Case: 132 | Input/Output: [(80 80 80 80) 80]
Test Case: 133 | Input/Output: [(38 38 38 38) 38]
Test Case: 134 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 135 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 136 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 137 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 138 | Input/Output: [(10 10 10 10) 10]
Test Case: 139 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 140 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 141 | Input/Output: [(90 90 90 90) 90]
Test Case: 142 | Input/Output: [(84 84 84 84) 84]
Test Case: 143 | Input/Output: [(24 24 24 24) 24]
Test Case: 144 | Input/Output: [(100 100 100 100) 100]
Test Case: 145 | Input/Output: [(86 86 86 86) 86]
Test Case: 146 | Input/Output: [(16 16 16 16) 16]
Test Case: 147 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 148 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 149 | Input/Output: [(57 57 57 57) 57]
Test Case: 150 | Input/Output: [(65 65 65 65) 65]
Test Case: 151 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 152 | Input/Output: [(75 75 75 75) 75]
Test Case: 153 | Input/Output: [(92 92 92 92) 92]
Test Case: 154 | Input/Output: [(70 70 70 70) 70]
Test Case: 155 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 156 | Input/Output: [(42 42 42 42) 42]
Test Case: 157 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 158 | Input/Output: [(52 52 52 52) 52]
Test Case: 159 | Input/Output: [(93 93 93 93) 93]
Test Case: 160 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 161 | Input/Output: [(71 71 71 71) 71]
Test Case: 162 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 163 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 164 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 165 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 166 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 167 | Input/Output: [(65 65 65 65) 65]
Test Case: 168 | Input/Output: [(43 43 43 43) 43]
Test Case: 169 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 170 | Input/Output: [(91 91 91 91) 91]
Test Case: 171 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 172 | Input/Output: [(70 70 70 70) 70]
Test Case: 173 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 174 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 175 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 176 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 177 | Input/Output: [(17 17 17 17) 17]
Test Case: 178 | Input/Output: [(9 9 9 9) 9]
Test Case: 179 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 180 | Input/Output: [(96 96 96 96) 96]
Test Case: 181 | Input/Output: [(58 58 58 58) 58]
Test Case: 182 | Input/Output: [(0 0 0 0) 0]
Test Case: 183 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 184 | Input/Output: [(1 1 1 1) 1]
Test Case: 185 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 186 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 187 | Input/Output: [(21 21 21 21) 21]
Test Case: 188 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 189 | Input/Output: [(28 28 28 28) 28]
Test Case: 190 | Input/Output: [(69 69 69 69) 69]
Test Case: 191 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 192 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 193 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 194 | Input/Output: [(80 80 80 80) 80]
Test Case: 195 | Input/Output: [(7 7 7 7) 7]
Test Case: 196 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 197 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 198 | Input/Output: [(23 23 23 23) 23]
Test Case: 199 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 200 | Input/Output: [(69 30 90 33) 30]
Test Case: 201 | Input/Output: [(80 17 86 33) 17]
Test Case: 202 | Input/Output: [(35 59 86 38) 35]
Test Case: 203 | Input/Output: [(70 82 97 77) 70]
Test Case: 204 | Input/Output: [(35 51 15 33) 15]
Test Case: 205 | Input/Output: [(76 17 32 16) 16]
Test Case: 206 | Input/Output: [(86 53 77 3) 3]
Test Case: 207 | Input/Output: [(3 79 47 28) 3]
Test Case: 208 | Input/Output: [(92 21 91 55) 21]
Test Case: 209 | Input/Output: [(54 0 18 51) 0]
Test Case: 210 | Input/Output: [(31 84 86 20) 20]
Test Case: 211 | Input/Output: [(29 52 64 72) 29]
Test Case: 212 | Input/Output: [(56 44 91 39) 39]
Test Case: 213 | Input/Output: [(96 13 11 87) 11]
Test Case: 214 | Input/Output: [(84 9 23 14) 9]
Test Case: 215 | Input/Output: [(61 44 28 6) 6]
Test Case: 216 | Input/Output: [(83 3 4 94) 3]
Test Case: 217 | Input/Output: [(7 43 50 12) 7]
Test Case: 218 | Input/Output: [(21 72 26 0) 0]
Test Case: 219 | Input/Output: [(42 54 81 79) 42]
Test Case: 220 | Input/Output: [(91 74 17 98) 17]
Test Case: 221 | Input/Output: [(24 92 100 18) 18]
Test Case: 222 | Input/Output: [(27 16 87 84) 16]
Test Case: 223 | Input/Output: [(76 26 56 93) 26]
Test Case: 224 | Input/Output: [(33 62 58 45) 33]
Test Case: 225 | Input/Output: [(62 15 31 11) 11]
Test Case: 226 | Input/Output: [(23 87 56 7) 7]
Test Case: 227 | Input/Output: [(64 38 8 18) 8]
Test Case: 228 | Input/Output: [(14 54 26 1) 1]
Test Case: 229 | Input/Output: [(12 17 12 45) 12]
Test Case: 230 | Input/Output: [(59 2 82 69) 2]
Test Case: 231 | Input/Output: [(30 19 47 46) 19]
Test Case: 232 | Input/Output: [(24 81 19 94) 19]
Test Case: 233 | Input/Output: [(73 76 31 95) 31]
Test Case: 234 | Input/Output: [(9 10 49 82) 9]
Test Case: 235 | Input/Output: [(43 12 96 69) 12]
Test Case: 236 | Input/Output: [(82 86 15 41) 15]
Test Case: 237 | Input/Output: [(30 75 89 91) 30]
Test Case: 238 | Input/Output: [(9 14 79 28) 9]
Test Case: 239 | Input/Output: [(5 76 38 36) 5]
Test Case: 240 | Input/Output: [(41 86 76 97) 41]
Test Case: 241 | Input/Output: [(100 49 40 50) 40]
Test Case: 242 | Input/Output: [(81 2 3 24) 2]
Test Case: 243 | Input/Output: [(37 37 22 19) 19]
Test Case: 244 | Input/Output: [(26 7 80 60) 7]
Test Case: 245 | Input/Output: [(68 60 78 55) 55]
Test Case: 246 | Input/Output: [(58 83 49 57) 49]
Test Case: 247 | Input/Output: [(25 33 77 21) 21]
Test Case: 248 | Input/Output: [(18 90 88 57) 18]
Test Case: 249 | Input/Output: [(81 5 55 49) 5]
Test Case: 250 | Input/Output: [(83 63 38 53) 38]
Test Case: 251 | Input/Output: [(13 12 51 72) 12]
Test Case: 252 | Input/Output: [(13 97 49 69) 13]
Test Case: 253 | Input/Output: [(46 44 7 63) 7]
Test Case: 254 | Input/Output: [(17 97 92 94) 17]
Test Case: 255 | Input/Output: [(23 79 34 2) 2]
Test Case: 256 | Input/Output: [(71 83 97 65) 65]
Test Case: 257 | Input/Output: [(92 2 12 5) 2]
Test Case: 258 | Input/Output: [(65 68 44 6) 6]
Test Case: 259 | Input/Output: [(80 25 47 6) 6]
Test Case: 260 | Input/Output: [(85 79 38 24) 24]
Test Case: 261 | Input/Output: [(82 17 58 58) 17]
Test Case: 262 | Input/Output: [(18 35 22 61) 18]
Test Case: 263 | Input/Output: [(74 53 48 15) 15]
Test Case: 264 | Input/Output: [(69 12 61 65) 12]
Test Case: 265 | Input/Output: [(83 65 49 12) 12]
Test Case: 266 | Input/Output: [(23 22 59 82) 22]
Test Case: 267 | Input/Output: [(91 46 48 45) 45]
Test Case: 268 | Input/Output: [(94 68 41 63) 41]
Test Case: 269 | Input/Output: [(16 94 87 91) 16]
Test Case: 270 | Input/Output: [(84 6 76 79) 6]
Test Case: 271 | Input/Output: [(98 14 92 47) 14]
Test Case: 272 | Input/Output: [(98 92 57 38) 38]
Test Case: 273 | Input/Output: [(49 63 3 99) 3]
Test Case: 274 | Input/Output: [(16 86 7 93) 7]
Test Case: 275 | Input/Output: [(10 8 40 24) 8]
Test Case: 276 | Input/Output: [(78 53 28 51) 28]
Test Case: 277 | Input/Output: [(89 37 37 98) 37]
Test Case: 278 | Input/Output: [(65 86 44 84) 44]
Test Case: 279 | Input/Output: [(77 85 44 100) 44]
Test Case: 280 | Input/Output: [(26 11 43 47) 11]
Test Case: 281 | Input/Output: [(24 63 50 89) 24]
Test Case: 282 | Input/Output: [(30 2 61 45) 2]
Test Case: 283 | Input/Output: [(69 40 15 15) 15]
Test Case: 284 | Input/Output: [(54 64 43 100) 43]
Test Case: 285 | Input/Output: [(62 54 69 53) 53]
Test Case: 286 | Input/Output: [(48 72 32 3) 3]
Test Case: 287 | Input/Output: [(70 22 12 47) 12]
Test Case: 288 | Input/Output: [(90 9 62 49) 9]
Test Case: 289 | Input/Output: [(18 14 57 76) 14]
Test Case: 290 | Input/Output: [(89 32 1 51) 1]
Test Case: 291 | Input/Output: [(38 97 21 43) 21]
Test Case: 292 | Input/Output: [(47 88 16 77) 16]
Test Case: 293 | Input/Output: [(79 81 9 74) 9]
Test Case: 294 | Input/Output: [(72 37 71 26) 26]
Test Case: 295 | Input/Output: [(59 17 69 35) 17]
Test Case: 296 | Input/Output: [(7 13 96 2) 2]
Test Case: 297 | Input/Output: [(51 17 17 66) 17]
Test Case: 298 | Input/Output: [(39 27 24 75) 24]
Test Case: 299 | Input/Output: [(80 44 62 65) 44]
Test Case: 300 | Input/Output: [(59 84 73 65) 59]
Test Case: 301 | Input/Output: [(96 36 67 9) 9]
Test Case: 302 | Input/Output: [(74 81 40 62) 40]
Test Case: 303 | Input/Output: [(97 83 91 9) 9]
Test Case: 304 | Input/Output: [(86 35 11 64) 11]
Test Case: 305 | Input/Output: [(5 11 83 25) 5]
Test Case: 306 | Input/Output: [(1 93 0 65) 0]
Test Case: 307 | Input/Output: [(46 83 46 51) 46]
Test Case: 308 | Input/Output: [(85 93 45 69) 45]
Test Case: 309 | Input/Output: [(10 100 100 28) 10]
Test Case: 310 | Input/Output: [(36 70 38 18) 18]
Test Case: 311 | Input/Output: [(12 31 15 81) 12]
Test Case: 312 | Input/Output: [(39 15 74 81) 15]
Test Case: 313 | Input/Output: [(22 82 31 2) 2]
Test Case: 314 | Input/Output: [(98 79 43 26) 26]
Test Case: 315 | Input/Output: [(14 42 58 45) 14]
Test Case: 316 | Input/Output: [(72 3 41 51) 3]
Test Case: 317 | Input/Output: [(100 66 98 10) 10]
Test Case: 318 | Input/Output: [(61 44 31 4) 4]
Test Case: 319 | Input/Output: [(52 63 58 77) 52]
Test Case: 320 | Input/Output: [(73 86 65 31) 31]
Test Case: 321 | Input/Output: [(67 16 9 26) 9]
Test Case: 322 | Input/Output: [(35 80 40 84) 35]
Test Case: 323 | Input/Output: [(23 13 87 4) 4]
Test Case: 324 | Input/Output: [(64 93 58 54) 54]
Test Case: 325 | Input/Output: [(23 66 31 64) 23]
Test Case: 326 | Input/Output: [(19 72 78 15) 15]
Test Case: 327 | Input/Output: [(50 64 49 85) 49]
Test Case: 328 | Input/Output: [(63 99 7 90) 7]
Test Case: 329 | Input/Output: [(59 15 39 51) 15]
Test Case: 330 | Input/Output: [(31 41 27 43) 27]
Test Case: 331 | Input/Output: [(57 44 29 73) 29]
Test Case: 332 | Input/Output: [(43 91 10 81) 10]
Test Case: 333 | Input/Output: [(2 28 55 6) 2]
Test Case: 334 | Input/Output: [(82 16 65 68) 16]
Test Case: 335 | Input/Output: [(21 1 14 14) 1]
Test Case: 336 | Input/Output: [(98 28 58 80) 28]
Test Case: 337 | Input/Output: [(100 32 90 68) 32]
Test Case: 338 | Input/Output: [(70 91 7 53) 7]
Test Case: 339 | Input/Output: [(1 29 100 72) 1]
Test Case: 340 | Input/Output: [(36 83 47 90) 36]
Test Case: 341 | Input/Output: [(82 73 6 22) 6]
Test Case: 342 | Input/Output: [(37 53 24 0) 0]
Test Case: 343 | Input/Output: [(85 80 14 4) 4]
Test Case: 344 | Input/Output: [(34 38 42 8) 8]
Test Case: 345 | Input/Output: [(12 78 95 65) 12]
Test Case: 346 | Input/Output: [(31 35 83 85) 31]
Test Case: 347 | Input/Output: [(3 68 86 81) 3]
Test Case: 348 | Input/Output: [(58 84 5 90) 5]
Test Case: 349 | Input/Output: [(57 54 80 19) 19]
Test Case: 350 | Input/Output: [(13 52 2 91) 2]
Test Case: 351 | Input/Output: [(59 61 23 75) 23]
Test Case: 352 | Input/Output: [(57 15 68 98) 15]
Test Case: 353 | Input/Output: [(17 99 93 46) 17]
Test Case: 354 | Input/Output: [(21 15 6 19) 6]
Test Case: 355 | Input/Output: [(57 52 84 94) 52]
Test Case: 356 | Input/Output: [(98 82 2 46) 2]
Test Case: 357 | Input/Output: [(31 53 73 96) 31]
Test Case: 358 | Input/Output: [(50 89 96 38) 38]
Test Case: 359 | Input/Output: [(1 87 19 35) 1]
Test Case: 360 | Input/Output: [(18 86 24 0) 0]
Test Case: 361 | Input/Output: [(1 56 45 18) 1]
Test Case: 362 | Input/Output: [(98 34 83 1) 1]
Test Case: 363 | Input/Output: [(54 83 48 84) 48]
Test Case: 364 | Input/Output: [(52 38 85 2) 2]
Test Case: 365 | Input/Output: [(23 58 98 6) 6]
Test Case: 366 | Input/Output: [(28 33 6 41) 6]
Test Case: 367 | Input/Output: [(27 74 78 24) 24]
Test Case: 368 | Input/Output: [(10 19 91 93) 10]
Test Case: 369 | Input/Output: [(91 62 52 13) 13]
Test Case: 370 | Input/Output: [(0 4 5 25) 0]
Test Case: 371 | Input/Output: [(15 30 9 94) 9]
Test Case: 372 | Input/Output: [(40 33 58 5) 5]
Test Case: 373 | Input/Output: [(6 83 39 7) 6]
Test Case: 374 | Input/Output: [(4 26 98 59) 4]
Test Case: 375 | Input/Output: [(15 41 7 93) 7]
Test Case: 376 | Input/Output: [(56 25 18 56) 18]
Test Case: 377 | Input/Output: [(74 44 37 45) 37]
Test Case: 378 | Input/Output: [(34 91 24 98) 24]
Test Case: 379 | Input/Output: [(76 6 55 47) 6]
Test Case: 380 | Input/Output: [(44 30 46 58) 30]
Test Case: 381 | Input/Output: [(63 73 59 47) 47]
Test Case: 382 | Input/Output: [(76 49 34 86) 34]
Test Case: 383 | Input/Output: [(26 96 46 100) 26]
Test Case: 384 | Input/Output: [(1 61 13 24) 1]
Test Case: 385 | Input/Output: [(75 87 55 12) 12]
Test Case: 386 | Input/Output: [(2 38 13 13) 2]
Test Case: 387 | Input/Output: [(31 57 67 7) 7]
Test Case: 388 | Input/Output: [(99 42 78 71) 42]
Test Case: 389 | Input/Output: [(57 53 1 13) 1]
Test Case: 390 | Input/Output: [(67 39 21 45) 21]
Test Case: 391 | Input/Output: [(66 23 11 28) 11]
Test Case: 392 | Input/Output: [(2 25 60 24) 2]
Test Case: 393 | Input/Output: [(1 82 54 13) 1]
Test Case: 394 | Input/Output: [(3 33 67 15) 3]
Test Case: 395 | Input/Output: [(54 76 99 68) 54]
Test Case: 396 | Input/Output: [(22 74 23 32) 22]
Test Case: 397 | Input/Output: [(18 73 74 100) 18]
Test Case: 398 | Input/Output: [(80 56 91 40) 40]
Test Case: 399 | Input/Output: [(8 94 27 63) 8]
Test Case: 400 | Input/Output: [(-45 20 27 -8) -45]
Test Case: 401 | Input/Output: [(-92 -37 -33 89) -92]
Test Case: 402 | Input/Output: [(19 75 -73 9) -73]
Test Case: 403 | Input/Output: [(25 18 65 84) 18]
Test Case: 404 | Input/Output: [(81 20 95 92) 20]
Test Case: 405 | Input/Output: [(46 75 94 -81) -81]
Test Case: 406 | Input/Output: [(-1 94 88 -92) -92]
Test Case: 407 | Input/Output: [(-9 -23 -17 15) -23]
Test Case: 408 | Input/Output: [(-32 95 68 94) -32]
Test Case: 409 | Input/Output: [(88 -5 15 10) -5]
Test Case: 410 | Input/Output: [(38 -40 -67 23) -67]
Test Case: 411 | Input/Output: [(3 5 -44 80) -44]
Test Case: 412 | Input/Output: [(-46 45 95 85) -46]
Test Case: 413 | Input/Output: [(-76 20 -4 23) -76]
Test Case: 414 | Input/Output: [(28 69 -16 88) -16]
Test Case: 415 | Input/Output: [(45 -61 -92 -48) -92]
Test Case: 416 | Input/Output: [(-10 -34 -69 -85) -85]
Test Case: 417 | Input/Output: [(22 66 51 -20) -20]
Test Case: 418 | Input/Output: [(61 -90 -2 -82) -90]
Test Case: 419 | Input/Output: [(-96 -5 52 -48) -96]
Test Case: 420 | Input/Output: [(-33 -34 -26 90) -34]
Test Case: 421 | Input/Output: [(-8 51 -90 28) -90]
Test Case: 422 | Input/Output: [(-11 -62 33 61) -62]
Test Case: 423 | Input/Output: [(97 5 -22 74) -22]
Test Case: 424 | Input/Output: [(4 -95 -11 -89) -95]
Test Case: 425 | Input/Output: [(-28 84 41 30) -28]
Test Case: 426 | Input/Output: [(-51 -30 79 80) -51]
Test Case: 427 | Input/Output: [(-34 -45 -78 -33) -78]
Test Case: 428 | Input/Output: [(-83 -2 -49 -79) -83]
Test Case: 429 | Input/Output: [(-72 26 72 85) -72]
Test Case: 430 | Input/Output: [(6 34 -93 -40) -93]
Test Case: 431 | Input/Output: [(-39 19 46 -8) -39]
Test Case: 432 | Input/Output: [(57 -50 -56 86) -56]
Test Case: 433 | Input/Output: [(-47 19 -14 -87) -87]
Test Case: 434 | Input/Output: [(-24 -33 77 17) -33]
Test Case: 435 | Input/Output: [(83 -12 -76 93) -76]
Test Case: 436 | Input/Output: [(-28 -98 -31 -52) -98]
Test Case: 437 | Input/Output: [(41 62 -33 64) -33]
Test Case: 438 | Input/Output: [(92 91 -1 -63) -63]
Test Case: 439 | Input/Output: [(79 -52 -33 -100) -100]
Test Case: 440 | Input/Output: [(-96 34 81 -82) -96]
Test Case: 441 | Input/Output: [(-87 -62 86 -42) -87]
Test Case: 442 | Input/Output: [(-56 15 34 -31) -56]
Test Case: 443 | Input/Output: [(70 -41 -76 81) -76]
Test Case: 444 | Input/Output: [(-91 -14 51 97) -91]
Test Case: 445 | Input/Output: [(-43 -23 -48 -40) -48]
Test Case: 446 | Input/Output: [(-16 17 -87 73) -87]
Test Case: 447 | Input/Output: [(15 97 62 -61) -61]
Test Case: 448 | Input/Output: [(-22 -66 50 10) -66]
Test Case: 449 | Input/Output: [(-74 3 43 44) -74]
Test Case: 450 | Input/Output: [(-92 -71 -24 54) -92]
Test Case: 451 | Input/Output: [(-47 62 100 19) -47]
Test Case: 452 | Input/Output: [(86 -46 -36 -30) -46]
Test Case: 453 | Input/Output: [(96 -99 93 -43) -99]
Test Case: 454 | Input/Output: [(-3 12 -48 43) -48]
Test Case: 455 | Input/Output: [(-2 14 -33 -62) -62]
Test Case: 456 | Input/Output: [(51 -64 46 0) -64]
Test Case: 457 | Input/Output: [(-12 -79 -22 33) -79]
Test Case: 458 | Input/Output: [(-35 9 33 27) -35]
Test Case: 459 | Input/Output: [(79 75 -97 -47) -97]
Test Case: 460 | Input/Output: [(-39 -16 31 94) -39]
Test Case: 461 | Input/Output: [(59 -24 -39 -70) -70]
Test Case: 462 | Input/Output: [(10 -92 -97 -37) -97]
Test Case: 463 | Input/Output: [(-7 -44 97 72) -44]
Test Case: 464 | Input/Output: [(-28 73 87 19) -28]
Test Case: 465 | Input/Output: [(-49 74 10 -76) -76]
Test Case: 466 | Input/Output: [(76 -92 56 -15) -92]
Test Case: 467 | Input/Output: [(-37 39 53 -35) -37]
Test Case: 468 | Input/Output: [(55 76 53 96) 53]
Test Case: 469 | Input/Output: [(71 68 -32 -58) -58]
Test Case: 470 | Input/Output: [(-15 -60 -19 52) -60]
Test Case: 471 | Input/Output: [(41 -8 87 97) -8]
Test Case: 472 | Input/Output: [(20 58 -91 98) -91]
Test Case: 473 | Input/Output: [(-33 -98 -53 -9) -98]
Test Case: 474 | Input/Output: [(-11 -76 47 21) -76]
Test Case: 475 | Input/Output: [(-82 -63 23 63) -82]
Test Case: 476 | Input/Output: [(-62 59 -68 -29) -68]
Test Case: 477 | Input/Output: [(92 77 79 42) 42]
Test Case: 478 | Input/Output: [(8 91 88 98) 8]
Test Case: 479 | Input/Output: [(-6 -26 16 4) -26]
Test Case: 480 | Input/Output: [(-61 -77 -2 -11) -77]
Test Case: 481 | Input/Output: [(61 12 73 98) 12]
Test Case: 482 | Input/Output: [(30 42 -69 -62) -69]
Test Case: 483 | Input/Output: [(79 67 -11 12) -11]
Test Case: 484 | Input/Output: [(-27 79 -89 31) -89]
Test Case: 485 | Input/Output: [(96 -28 -89 -2) -89]
Test Case: 486 | Input/Output: [(-50 -32 62 -32) -50]
Test Case: 487 | Input/Output: [(9 79 -9 -57) -57]
Test Case: 488 | Input/Output: [(-46 68 4 -100) -100]
Test Case: 489 | Input/Output: [(13 16 -100 -49) -100]
Test Case: 490 | Input/Output: [(6 -82 -28 -5) -82]
Test Case: 491 | Input/Output: [(19 -12 69 -1) -12]
Test Case: 492 | Input/Output: [(-45 8 72 -98) -98]
Test Case: 493 | Input/Output: [(-82 36 -14 2) -82]
Test Case: 494 | Input/Output: [(-1 -42 -13 -22) -42]
Test Case: 495 | Input/Output: [(-8 -95 84 90) -95]
Test Case: 496 | Input/Output: [(8 87 23 40) 8]
Test Case: 497 | Input/Output: [(-56 -71 -61 72) -71]
Test Case: 498 | Input/Output: [(74 -40 -41 70) -41]
Test Case: 499 | Input/Output: [(4 -24 32 -50) -50]
Test Case: 500 | Input/Output: [(86 -86 -73 -21) -86]
Test Case: 501 | Input/Output: [(-60 47 -38 57) -60]
Test Case: 502 | Input/Output: [(17 77 -54 -8) -54]
Test Case: 503 | Input/Output: [(1 -73 -4 -22) -73]
Test Case: 504 | Input/Output: [(97 62 -82 80) -82]
Test Case: 505 | Input/Output: [(-24 81 -91 74) -91]
Test Case: 506 | Input/Output: [(-41 99 52 -100) -100]
Test Case: 507 | Input/Output: [(6 54 67 86) 6]
Test Case: 508 | Input/Output: [(19 -7 -91 42) -91]
Test Case: 509 | Input/Output: [(27 10 15 -57) -57]
Test Case: 510 | Input/Output: [(68 -15 -13 -49) -49]
Test Case: 511 | Input/Output: [(-9 -68 -22 -67) -68]
Test Case: 512 | Input/Output: [(68 70 47 65) 47]
Test Case: 513 | Input/Output: [(-43 -5 -67 -38) -67]
Test Case: 514 | Input/Output: [(-97 -3 12 95) -97]
Test Case: 515 | Input/Output: [(-38 57 -81 96) -81]
Test Case: 516 | Input/Output: [(33 10 32 -95) -95]
Test Case: 517 | Input/Output: [(-46 -26 -48 50) -48]
Test Case: 518 | Input/Output: [(-25 -26 -3 43) -26]
Test Case: 519 | Input/Output: [(-23 -20 46 38) -23]
Test Case: 520 | Input/Output: [(-34 30 -62 14) -62]
Test Case: 521 | Input/Output: [(64 54 20 27) 20]
Test Case: 522 | Input/Output: [(90 -53 -39 -87) -87]
Test Case: 523 | Input/Output: [(88 -6 96 -77) -77]
Test Case: 524 | Input/Output: [(-69 71 74 69) -69]
Test Case: 525 | Input/Output: [(-72 -75 45 32) -75]
Test Case: 526 | Input/Output: [(-98 49 -100 13) -100]
Test Case: 527 | Input/Output: [(84 -52 85 15) -52]
Test Case: 528 | Input/Output: [(-55 -87 89 57) -87]
Test Case: 529 | Input/Output: [(-75 -90 7 76) -90]
Test Case: 530 | Input/Output: [(-37 13 99 -38) -38]
Test Case: 531 | Input/Output: [(43 -95 -46 -78) -95]
Test Case: 532 | Input/Output: [(60 79 -44 -1) -44]
Test Case: 533 | Input/Output: [(-56 -23 0 -13) -56]
Test Case: 534 | Input/Output: [(96 42 -61 -39) -61]
Test Case: 535 | Input/Output: [(-74 -67 90 63) -74]
Test Case: 536 | Input/Output: [(-49 47 -27 -32) -49]
Test Case: 537 | Input/Output: [(4 -97 -91 -57) -97]
Test Case: 538 | Input/Output: [(51 -24 26 -26) -26]
Test Case: 539 | Input/Output: [(-70 -37 -44 -75) -75]
Test Case: 540 | Input/Output: [(6 93 69 -85) -85]
Test Case: 541 | Input/Output: [(-90 -26 -15 26) -90]
Test Case: 542 | Input/Output: [(-61 86 42 -11) -61]
Test Case: 543 | Input/Output: [(83 -42 37 -47) -47]
Test Case: 544 | Input/Output: [(-89 -26 -71 -72) -89]
Test Case: 545 | Input/Output: [(-83 -99 57 -64) -99]
Test Case: 546 | Input/Output: [(-63 -66 40 84) -66]
Test Case: 547 | Input/Output: [(52 -59 7 9) -59]
Test Case: 548 | Input/Output: [(70 96 -29 29) -29]
Test Case: 549 | Input/Output: [(27 -81 -70 -44) -81]
Test Case: 550 | Input/Output: [(-64 -92 44 68) -92]
Test Case: 551 | Input/Output: [(-27 -80 17 62) -80]
Test Case: 552 | Input/Output: [(6 27 -97 31) -97]
Test Case: 553 | Input/Output: [(26 78 -95 67) -95]
Test Case: 554 | Input/Output: [(99 100 -70 -46) -70]
Test Case: 555 | Input/Output: [(77 -21 70 -89) -89]
Test Case: 556 | Input/Output: [(-7 42 -44 -64) -64]
Test Case: 557 | Input/Output: [(45 -24 89 14) -24]
Test Case: 558 | Input/Output: [(47 40 -52 -76) -76]
Test Case: 559 | Input/Output: [(92 43 -82 -96) -96]
Test Case: 560 | Input/Output: [(79 89 -45 -18) -45]
Test Case: 561 | Input/Output: [(35 -31 2 86) -31]
Test Case: 562 | Input/Output: [(30 34 -24 63) -24]
Test Case: 563 | Input/Output: [(-54 24 42 -35) -54]
Test Case: 564 | Input/Output: [(33 -11 -16 37) -16]
Test Case: 565 | Input/Output: [(-12 51 43 39) -12]
Test Case: 566 | Input/Output: [(26 71 98 67) 26]
Test Case: 567 | Input/Output: [(23 3 80 11) 3]
Test Case: 568 | Input/Output: [(1 55 -87 83) -87]
Test Case: 569 | Input/Output: [(-90 -41 -54 1) -90]
Test Case: 570 | Input/Output: [(85 48 19 -79) -79]
Test Case: 571 | Input/Output: [(49 -93 -40 -99) -99]
Test Case: 572 | Input/Output: [(58 42 -28 57) -28]
Test Case: 573 | Input/Output: [(-56 -47 100 92) -56]
Test Case: 574 | Input/Output: [(-36 16 2 85) -36]
Test Case: 575 | Input/Output: [(7 10 94 -36) -36]
Test Case: 576 | Input/Output: [(-59 32 -1 -21) -59]
Test Case: 577 | Input/Output: [(-5 -85 59 -92) -92]
Test Case: 578 | Input/Output: [(-64 -13 51 -13) -64]
Test Case: 579 | Input/Output: [(90 80 22 -92) -92]
Test Case: 580 | Input/Output: [(-29 -20 86 68) -29]
Test Case: 581 | Input/Output: [(20 72 -64 -6) -64]
Test Case: 582 | Input/Output: [(23 61 -63 -98) -98]
Test Case: 583 | Input/Output: [(-61 -80 97 0) -80]
Test Case: 584 | Input/Output: [(-93 -84 85 73) -93]
Test Case: 585 | Input/Output: [(-24 -45 -92 96) -92]
Test Case: 586 | Input/Output: [(32 43 -60 18) -60]
Test Case: 587 | Input/Output: [(69 -47 -99 72) -99]
Test Case: 588 | Input/Output: [(-32 7 -53 -37) -53]
Test Case: 589 | Input/Output: [(-90 -24 -31 -91) -91]
Test Case: 590 | Input/Output: [(70 -24 -5 38) -24]
Test Case: 591 | Input/Output: [(15 -35 -36 -46) -46]
Test Case: 592 | Input/Output: [(26 32 0 -99) -99]
Test Case: 593 | Input/Output: [(-75 -25 -20 -19) -75]
Test Case: 594 | Input/Output: [(100 -3 48 -86) -86]
Test Case: 595 | Input/Output: [(-22 16 66 -70) -70]
Test Case: 596 | Input/Output: [(8 -32 85 -75) -75]
Test Case: 597 | Input/Output: [(-82 -82 -90 90) -90]
Test Case: 598 | Input/Output: [(-7 -79 -77 -64) -79]
Test Case: 599 | Input/Output: [(-5 52 66 -8) -8]
Test Case: 600 | Input/Output: [(-59 -77 -83 -49) -83]
Test Case: 601 | Input/Output: [(89 -30 -98 -70) -98]
Test Case: 602 | Input/Output: [(55 -28 -45 -48) -48]
Test Case: 603 | Input/Output: [(46 71 -63 79) -63]
Test Case: 604 | Input/Output: [(-86 60 -20 -28) -86]
Test Case: 605 | Input/Output: [(73 -18 -98 -99) -99]
Test Case: 606 | Input/Output: [(-87 42 -93 -57) -93]
Test Case: 607 | Input/Output: [(84 -6 59 -20) -20]
Test Case: 608 | Input/Output: [(34 -16 77 -55) -55]
Test Case: 609 | Input/Output: [(65 -74 -10 88) -74]
Test Case: 610 | Input/Output: [(60 68 -70 -39) -70]
Test Case: 611 | Input/Output: [(30 -35 -94 -17) -94]
Test Case: 612 | Input/Output: [(-49 -6 -55 -52) -55]
Test Case: 613 | Input/Output: [(45 47 49 -42) -42]
Test Case: 614 | Input/Output: [(-61 89 44 9) -61]
Test Case: 615 | Input/Output: [(79 3 -76 71) -76]
Test Case: 616 | Input/Output: [(-28 25 64 -12) -28]
Test Case: 617 | Input/Output: [(-74 83 -2 92) -74]
Test Case: 618 | Input/Output: [(-14 -27 -34 -67) -67]
Test Case: 619 | Input/Output: [(14 -41 -67 -53) -67]
Test Case: 620 | Input/Output: [(-14 -45 -48 -26) -48]
Test Case: 621 | Input/Output: [(29 91 74 0) 0]
Test Case: 622 | Input/Output: [(1 42 57 -89) -89]
Test Case: 623 | Input/Output: [(-57 -63 2 -28) -63]
Test Case: 624 | Input/Output: [(-87 93 -18 -28) -87]
Test Case: 625 | Input/Output: [(69 -29 69 -5) -29]
Test Case: 626 | Input/Output: [(-16 77 100 28) -16]
Test Case: 627 | Input/Output: [(-53 -93 -82 -79) -93]
Test Case: 628 | Input/Output: [(15 12 99 93) 12]
Test Case: 629 | Input/Output: [(-62 -98 10 41) -98]
Test Case: 630 | Input/Output: [(-13 -58 -96 3) -96]
Test Case: 631 | Input/Output: [(-44 -75 53 -62) -75]
Test Case: 632 | Input/Output: [(-34 62 -50 -68) -68]
Test Case: 633 | Input/Output: [(-83 10 64 -53) -83]
Test Case: 634 | Input/Output: [(-53 -100 49 70) -100]
Test Case: 635 | Input/Output: [(77 -26 -38 -43) -43]
Test Case: 636 | Input/Output: [(75 55 1 -38) -38]
Test Case: 637 | Input/Output: [(-67 -77 12 -5) -77]
Test Case: 638 | Input/Output: [(36 -34 48 80) -34]
Test Case: 639 | Input/Output: [(88 51 -18 -91) -91]
Test Case: 640 | Input/Output: [(-21 14 63 -34) -34]
Test Case: 641 | Input/Output: [(-68 96 -43 -21) -68]
Test Case: 642 | Input/Output: [(1 -50 81 -47) -50]
Test Case: 643 | Input/Output: [(-45 45 84 -32) -45]
Test Case: 644 | Input/Output: [(51 -65 -79 65) -79]
Test Case: 645 | Input/Output: [(65 -53 -37 40) -53]
Test Case: 646 | Input/Output: [(17 -83 -98 60) -98]
Test Case: 647 | Input/Output: [(87 -53 37 90) -53]
Test Case: 648 | Input/Output: [(-73 4 52 53) -73]
Test Case: 649 | Input/Output: [(-54 79 -93 -19) -93]
Test Case: 650 | Input/Output: [(-45 -86 75 -93) -93]
Test Case: 651 | Input/Output: [(-67 26 -22 53) -67]
Test Case: 652 | Input/Output: [(49 -76 20 42) -76]
Test Case: 653 | Input/Output: [(53 -55 56 91) -55]
Test Case: 654 | Input/Output: [(-72 -45 -57 4) -72]
Test Case: 655 | Input/Output: [(62 78 57 46) 46]
Test Case: 656 | Input/Output: [(31 54 74 79) 31]
Test Case: 657 | Input/Output: [(45 66 41 10) 10]
Test Case: 658 | Input/Output: [(-56 59 -46 -27) -56]
Test Case: 659 | Input/Output: [(24 9 -14 -3) -14]
Test Case: 660 | Input/Output: [(93 -98 71 -66) -98]
Test Case: 661 | Input/Output: [(-78 -20 -2 -51) -78]
Test Case: 662 | Input/Output: [(66 -96 14 -13) -96]
Test Case: 663 | Input/Output: [(-90 -36 -66 84) -90]
Test Case: 664 | Input/Output: [(-38 81 66 5) -38]
Test Case: 665 | Input/Output: [(22 -98 64 -98) -98]
Test Case: 666 | Input/Output: [(46 84 34 -46) -46]
Test Case: 667 | Input/Output: [(16 -41 -67 -2) -67]
Test Case: 668 | Input/Output: [(-45 51 31 83) -45]
Test Case: 669 | Input/Output: [(-60 -1 93 -71) -71]
Test Case: 670 | Input/Output: [(40 -90 -6 66) -90]
Test Case: 671 | Input/Output: [(-98 65 -83 4) -98]
Test Case: 672 | Input/Output: [(37 -55 47 22) -55]
Test Case: 673 | Input/Output: [(-49 84 -84 -100) -100]
Test Case: 674 | Input/Output: [(75 -32 48 89) -32]
Test Case: 675 | Input/Output: [(-75 71 62 -75) -75]
Test Case: 676 | Input/Output: [(54 -78 -74 -70) -78]
Test Case: 677 | Input/Output: [(89 73 -86 -93) -93]
Test Case: 678 | Input/Output: [(50 28 -28 7) -28]
Test Case: 679 | Input/Output: [(95 -76 -21 -29) -76]
Test Case: 680 | Input/Output: [(28 22 5 98) 5]
Test Case: 681 | Input/Output: [(-93 -54 20 -28) -93]
Test Case: 682 | Input/Output: [(87 75 82 -34) -34]
Test Case: 683 | Input/Output: [(-75 -58 -15 -86) -86]
Test Case: 684 | Input/Output: [(-84 53 -76 -68) -84]
Test Case: 685 | Input/Output: [(93 25 -15 87) -15]
Test Case: 686 | Input/Output: [(53 -21 79 -91) -91]
Test Case: 687 | Input/Output: [(93 94 -8 -48) -48]
Test Case: 688 | Input/Output: [(-56 -17 81 -65) -65]
Test Case: 689 | Input/Output: [(83 -62 -21 70) -62]
Test Case: 690 | Input/Output: [(-55 -33 35 26) -55]
Test Case: 691 | Input/Output: [(-54 63 -79 8) -79]
Test Case: 692 | Input/Output: [(56 -45 -98 8) -98]
Test Case: 693 | Input/Output: [(88 81 -44 -46) -46]
Test Case: 694 | Input/Output: [(-41 -6 -31 -33) -41]
Test Case: 695 | Input/Output: [(27 -6 -11 -98) -98]
Test Case: 696 | Input/Output: [(-71 -56 72 30) -71]
Test Case: 697 | Input/Output: [(-99 16 70 -31) -99]
Test Case: 698 | Input/Output: [(-5 -95 -66 -18) -95]
Test Case: 699 | Input/Output: [(-82 -54 -80 -11) -82]
Test Case: 700 | Input/Output: [(-62 -48 -43 -85) -85]
Test Case: 701 | Input/Output: [(98 -61 86 -69) -69]
Test Case: 702 | Input/Output: [(-18 -26 9 55) -26]
Test Case: 703 | Input/Output: [(32 -52 -52 90) -52]
Test Case: 704 | Input/Output: [(-99 -87 29 -7) -99]
Test Case: 705 | Input/Output: [(80 45 69 -65) -65]
Test Case: 706 | Input/Output: [(87 -6 45 -76) -76]
Test Case: 707 | Input/Output: [(62 -81 72 44) -81]
Test Case: 708 | Input/Output: [(-3 -76 11 -22) -76]
Test Case: 709 | Input/Output: [(-93 41 -58 18) -93]
Test Case: 710 | Input/Output: [(70 -76 4 90) -76]
Test Case: 711 | Input/Output: [(-13 -43 -65 48) -65]
Test Case: 712 | Input/Output: [(-70 -60 -70 98) -70]
Test Case: 713 | Input/Output: [(-6 73 8 -92) -92]
Test Case: 714 | Input/Output: [(38 25 9 -29) -29]
Test Case: 715 | Input/Output: [(69 -8 -27 -96) -96]
Test Case: 716 | Input/Output: [(5 100 83 -80) -80]
Test Case: 717 | Input/Output: [(79 30 87 32) 30]
Test Case: 718 | Input/Output: [(6 86 49 40) 6]
Test Case: 719 | Input/Output: [(-50 -14 38 -87) -87]
Test Case: 720 | Input/Output: [(-52 -37 -53 -82) -82]
Test Case: 721 | Input/Output: [(79 87 18 -77) -77]
Test Case: 722 | Input/Output: [(60 68 -66 34) -66]
Test Case: 723 | Input/Output: [(40 74 -73 2) -73]
Test Case: 724 | Input/Output: [(-94 53 45 -5) -94]
Test Case: 725 | Input/Output: [(93 86 -91 -84) -91]
Test Case: 726 | Input/Output: [(13 -79 64 6) -79]
Test Case: 727 | Input/Output: [(66 51 7 60) 7]
Test Case: 728 | Input/Output: [(-78 -63 -23 70) -78]
Test Case: 729 | Input/Output: [(10 41 95 -36) -36]
Test Case: 730 | Input/Output: [(-4 -38 70 -32) -38]
Test Case: 731 | Input/Output: [(-26 -40 5 24) -40]
Test Case: 732 | Input/Output: [(-58 -88 69 66) -88]
Test Case: 733 | Input/Output: [(23 -27 -50 -39) -50]
Test Case: 734 | Input/Output: [(35 -73 -67 -66) -73]
Test Case: 735 | Input/Output: [(36 -80 40 62) -80]
Test Case: 736 | Input/Output: [(78 59 -49 68) -49]
Test Case: 737 | Input/Output: [(91 -47 -21 62) -47]
Test Case: 738 | Input/Output: [(-39 34 -56 30) -56]
Test Case: 739 | Input/Output: [(-81 -29 -36 -32) -81]
Test Case: 740 | Input/Output: [(-48 -66 -34 24) -66]
Test Case: 741 | Input/Output: [(85 -86 -28 11) -86]
Test Case: 742 | Input/Output: [(-10 -50 -47 -99) -99]
Test Case: 743 | Input/Output: [(-8 -73 -57 93) -73]
Test Case: 744 | Input/Output: [(-89 -4 20 21) -89]
Test Case: 745 | Input/Output: [(11 -36 -79 16) -79]
Test Case: 746 | Input/Output: [(-86 -60 -7 -7) -86]
Test Case: 747 | Input/Output: [(2 7 -6 -25) -25]
Test Case: 748 | Input/Output: [(-87 -85 35 24) -87]
Test Case: 749 | Input/Output: [(-16 -16 -49 75) -49]
Test Case: 750 | Input/Output: [(61 73 13 -7) -7]
Test Case: 751 | Input/Output: [(79 -38 48 15) -38]
Test Case: 752 | Input/Output: [(-21 83 -16 -24) -24]
Test Case: 753 | Input/Output: [(-41 -50 -48 9) -50]
Test Case: 754 | Input/Output: [(-55 54 50 23) -55]
Test Case: 755 | Input/Output: [(-67 -44 2 6) -67]
Test Case: 756 | Input/Output: [(98 -39 74 20) -39]
Test Case: 757 | Input/Output: [(66 -20 84 62) -20]
Test Case: 758 | Input/Output: [(-100 -22 -32 96) -100]
Test Case: 759 | Input/Output: [(40 95 -9 -67) -67]
Test Case: 760 | Input/Output: [(-7 -53 -67 6) -67]
Test Case: 761 | Input/Output: [(65 28 -96 -42) -96]
Test Case: 762 | Input/Output: [(82 88 92 99) 82]
Test Case: 763 | Input/Output: [(-35 -42 8 -6) -42]
Test Case: 764 | Input/Output: [(68 81 37 7) 7]
Test Case: 765 | Input/Output: [(8 29 -48 -27) -48]
Test Case: 766 | Input/Output: [(17 -40 7 -89) -89]
Test Case: 767 | Input/Output: [(10 43 55 -19) -19]
Test Case: 768 | Input/Output: [(-50 66 -91 -81) -91]
Test Case: 769 | Input/Output: [(16 -20 -18 -16) -20]
Test Case: 770 | Input/Output: [(8 -80 -42 11) -80]
Test Case: 771 | Input/Output: [(65 -88 -51 -47) -88]
Test Case: 772 | Input/Output: [(0 2 -14 44) -14]
Test Case: 773 | Input/Output: [(-32 47 -69 15) -69]
Test Case: 774 | Input/Output: [(-69 5 -24 77) -69]
Test Case: 775 | Input/Output: [(-3 -53 -20 59) -53]
Test Case: 776 | Input/Output: [(91 -86 86 94) -86]
Test Case: 777 | Input/Output: [(-18 -29 82 19) -29]
Test Case: 778 | Input/Output: [(-56 -5 -7 89) -56]
Test Case: 779 | Input/Output: [(-97 -54 -30 29) -97]
Test Case: 780 | Input/Output: [(-62 100 60 85) -62]
Test Case: 781 | Input/Output: [(-95 7 79 -64) -95]
Test Case: 782 | Input/Output: [(42 84 21 -20) -20]
Test Case: 783 | Input/Output: [(1 -29 71 39) -29]
Test Case: 784 | Input/Output: [(-16 -76 2 1) -76]
Test Case: 785 | Input/Output: [(63 84 6 -23) -23]
Test Case: 786 | Input/Output: [(56 -75 -70 -66) -75]
Test Case: 787 | Input/Output: [(69 -32 100 -76) -76]
Test Case: 788 | Input/Output: [(-9 -4 -40 36) -40]
Test Case: 789 | Input/Output: [(-6 -2 -81 -84) -84]
Test Case: 790 | Input/Output: [(-23 -53 87 -88) -88]
Test Case: 791 | Input/Output: [(86 46 -4 -49) -49]
Test Case: 792 | Input/Output: [(-70 -60 87 7) -70]
Test Case: 793 | Input/Output: [(-52 -87 -57 87) -87]
Test Case: 794 | Input/Output: [(-27 13 -9 -59) -59]
Test Case: 795 | Input/Output: [(14 -100 0 -38) -100]
Test Case: 796 | Input/Output: [(-69 38 6 -26) -69]
Test Case: 797 | Input/Output: [(39 -83 71 97) -83]
Test Case: 798 | Input/Output: [(44 79 -46 -68) -68]
Test Case: 799 | Input/Output: [(96 -24 -79 36) -79]
Test Case: 800 | Input/Output: [(-54 72 -55 42) -55]
Test Case: 801 | Input/Output: [(-64 38 -73 20) -73]
Test Case: 802 | Input/Output: [(15 -100 -92 100) -100]
Test Case: 803 | Input/Output: [(51 -83 -99 68) -99]
Test Case: 804 | Input/Output: [(86 25 -63 81) -63]
Test Case: 805 | Input/Output: [(68 11 39 97) 11]
Test Case: 806 | Input/Output: [(3 15 -23 -39) -39]
Test Case: 807 | Input/Output: [(21 91 -28 -62) -62]
Test Case: 808 | Input/Output: [(-71 -54 -43 32) -71]
Test Case: 809 | Input/Output: [(22 -24 -27 -37) -37]
Test Case: 810 | Input/Output: [(38 -78 -37 49) -78]
Test Case: 811 | Input/Output: [(-88 -15 47 81) -88]
Test Case: 812 | Input/Output: [(69 -51 -49 11) -51]
Test Case: 813 | Input/Output: [(97 -85 52 -49) -85]
Test Case: 814 | Input/Output: [(17 -87 -63 -63) -87]
Test Case: 815 | Input/Output: [(-26 12 -19 -59) -59]
Test Case: 816 | Input/Output: [(83 96 -47 -35) -47]
Test Case: 817 | Input/Output: [(-73 -59 97 -92) -92]
Test Case: 818 | Input/Output: [(-52 10 66 -8) -52]
Test Case: 819 | Input/Output: [(27 -5 64 78) -5]
Test Case: 820 | Input/Output: [(-18 -71 69 16) -71]
Test Case: 821 | Input/Output: [(-83 75 41 -52) -83]
Test Case: 822 | Input/Output: [(-72 13 -94 -90) -94]
Test Case: 823 | Input/Output: [(-56 -96 77 -24) -96]
Test Case: 824 | Input/Output: [(18 -49 -59 35) -59]
Test Case: 825 | Input/Output: [(14 -42 68 30) -42]
Test Case: 826 | Input/Output: [(-61 -4 5 -39) -61]
Test Case: 827 | Input/Output: [(-93 -18 -24 -38) -93]
Test Case: 828 | Input/Output: [(-52 7 -2 -90) -90]
Test Case: 829 | Input/Output: [(87 0 -14 -2) -14]
Test Case: 830 | Input/Output: [(4 55 49 39) 4]
Test Case: 831 | Input/Output: [(-5 -1 30 -76) -76]
Test Case: 832 | Input/Output: [(87 -24 80 -96) -96]
Test Case: 833 | Input/Output: [(-71 -70 -37 -66) -71]
Test Case: 834 | Input/Output: [(-49 -34 13 -87) -87]
Test Case: 835 | Input/Output: [(7 48 25 55) 7]
Test Case: 836 | Input/Output: [(-67 88 -74 51) -74]
Test Case: 837 | Input/Output: [(48 43 30 -53) -53]
Test Case: 838 | Input/Output: [(17 -24 -9 -40) -40]
Test Case: 839 | Input/Output: [(-26 -1 67 -41) -41]
Test Case: 840 | Input/Output: [(13 -62 -67 55) -67]
Test Case: 841 | Input/Output: [(-83 -28 -70 -10) -83]
Test Case: 842 | Input/Output: [(-8 -35 74 88) -35]
Test Case: 843 | Input/Output: [(-24 -98 -54 -1) -98]
Test Case: 844 | Input/Output: [(79 5 -69 23) -69]
Test Case: 845 | Input/Output: [(21 -79 -32 73) -79]
Test Case: 846 | Input/Output: [(-11 63 -69 74) -69]
Test Case: 847 | Input/Output: [(87 -45 -78 -67) -78]
Test Case: 848 | Input/Output: [(68 -77 -83 -65) -83]
Test Case: 849 | Input/Output: [(25 -77 -24 -49) -77]
Test Case: 850 | Input/Output: [(-54 10 -23 -83) -83]
Test Case: 851 | Input/Output: [(-7 -29 -61 13) -61]
Test Case: 852 | Input/Output: [(-82 -55 -72 26) -82]
Test Case: 853 | Input/Output: [(-45 -45 -72 51) -72]
Test Case: 854 | Input/Output: [(-34 98 -23 -49) -49]
Test Case: 855 | Input/Output: [(-33 26 15 -24) -33]
Test Case: 856 | Input/Output: [(71 -8 26 19) -8]
Test Case: 857 | Input/Output: [(-16 9 52 -95) -95]
Test Case: 858 | Input/Output: [(43 100 -82 8) -82]
Test Case: 859 | Input/Output: [(-28 -65 -14 -100) -100]
Test Case: 860 | Input/Output: [(-49 18 -55 71) -55]
Test Case: 861 | Input/Output: [(47 -74 -50 92) -74]
Test Case: 862 | Input/Output: [(-7 -88 40 10) -88]
Test Case: 863 | Input/Output: [(-60 18 -4 60) -60]
Test Case: 864 | Input/Output: [(54 72 91 12) 12]
Test Case: 865 | Input/Output: [(-65 -83 17 -86) -86]
Test Case: 866 | Input/Output: [(-18 22 9 69) -18]
Test Case: 867 | Input/Output: [(6 -49 -1 0) -49]
Test Case: 868 | Input/Output: [(8 -41 -49 -56) -56]
Test Case: 869 | Input/Output: [(-4 -94 47 -87) -94]
Test Case: 870 | Input/Output: [(0 54 17 -84) -84]
Test Case: 871 | Input/Output: [(3 77 68 -12) -12]
Test Case: 872 | Input/Output: [(-10 -36 89 -14) -36]
Test Case: 873 | Input/Output: [(-65 -57 -10 6) -65]
Test Case: 874 | Input/Output: [(-40 93 0 -94) -94]
Test Case: 875 | Input/Output: [(-70 70 -55 -6) -70]
Test Case: 876 | Input/Output: [(-6 90 -53 55) -53]
Test Case: 877 | Input/Output: [(-17 58 -25 89) -25]
Test Case: 878 | Input/Output: [(81 -41 -94 60) -94]
Test Case: 879 | Input/Output: [(65 53 96 74) 53]
Test Case: 880 | Input/Output: [(-58 99 -30 -84) -84]
Test Case: 881 | Input/Output: [(-72 65 16 51) -72]
Test Case: 882 | Input/Output: [(11 -24 83 39) -24]
Test Case: 883 | Input/Output: [(-73 96 92 -8) -73]
Test Case: 884 | Input/Output: [(-53 -80 -17 -77) -80]
Test Case: 885 | Input/Output: [(50 3 74 53) 3]
Test Case: 886 | Input/Output: [(71 -47 99 -26) -47]
Test Case: 887 | Input/Output: [(17 -3 82 -5) -5]
Test Case: 888 | Input/Output: [(-49 -34 -16 35) -49]
Test Case: 889 | Input/Output: [(-98 -41 88 49) -98]
Test Case: 890 | Input/Output: [(47 0 -99 50) -99]
Test Case: 891 | Input/Output: [(50 -88 9 31) -88]
Test Case: 892 | Input/Output: [(-56 86 77 23) -56]
Test Case: 893 | Input/Output: [(7 -56 -33 7) -56]
Test Case: 894 | Input/Output: [(30 12 -1 -25) -25]
Test Case: 895 | Input/Output: [(-19 -26 4 50) -26]
Test Case: 896 | Input/Output: [(-29 71 22 46) -29]
Test Case: 897 | Input/Output: [(-52 -63 52 -94) -94]
Test Case: 898 | Input/Output: [(-35 58 100 -2) -35]
Test Case: 899 | Input/Output: [(95 -56 -80 14) -80]
Test Case: 900 | Input/Output: [(9 -85 81 91) -85]
Test Case: 901 | Input/Output: [(-21 5 -52 -82) -82]
Test Case: 902 | Input/Output: [(54 100 98 1) 1]
Test Case: 903 | Input/Output: [(-87 63 88 84) -87]
Test Case: 904 | Input/Output: [(-11 59 -70 97) -70]
Test Case: 905 | Input/Output: [(-75 99 -32 70) -75]
Test Case: 906 | Input/Output: [(-91 98 -85 16) -91]
Test Case: 907 | Input/Output: [(-97 -99 -16 55) -99]
Test Case: 908 | Input/Output: [(-92 39 -85 86) -92]
Test Case: 909 | Input/Output: [(78 -53 89 47) -53]
Test Case: 910 | Input/Output: [(48 84 54 -81) -81]
Test Case: 911 | Input/Output: [(42 55 15 -51) -51]
Test Case: 912 | Input/Output: [(-68 -44 -2 -36) -68]
Test Case: 913 | Input/Output: [(-43 -62 75 -59) -62]
Test Case: 914 | Input/Output: [(78 24 -27 -30) -30]
Test Case: 915 | Input/Output: [(33 81 -9 -33) -33]
Test Case: 916 | Input/Output: [(-75 40 -23 76) -75]
Test Case: 917 | Input/Output: [(57 -24 11 -15) -24]
Test Case: 918 | Input/Output: [(-39 33 -80 -47) -80]
Test Case: 919 | Input/Output: [(60 95 87 -24) -24]
Test Case: 920 | Input/Output: [(-93 -70 89 86) -93]
Test Case: 921 | Input/Output: [(55 -8 -87 -26) -87]
Test Case: 922 | Input/Output: [(-76 -83 61 -73) -83]
Test Case: 923 | Input/Output: [(-40 37 91 64) -40]
Test Case: 924 | Input/Output: [(-87 -72 33 72) -87]
Test Case: 925 | Input/Output: [(45 -43 90 -100) -100]
Test Case: 926 | Input/Output: [(8 67 96 -18) -18]
Test Case: 927 | Input/Output: [(41 -19 16 -80) -80]
Test Case: 928 | Input/Output: [(-13 69 -18 17) -18]
Test Case: 929 | Input/Output: [(86 -69 10 -40) -69]
Test Case: 930 | Input/Output: [(37 51 72 36) 36]
Test Case: 931 | Input/Output: [(11 -92 65 -39) -92]
Test Case: 932 | Input/Output: [(-79 -31 66 16) -79]
Test Case: 933 | Input/Output: [(37 72 32 15) 15]
Test Case: 934 | Input/Output: [(41 -31 37 95) -31]
Test Case: 935 | Input/Output: [(87 70 -23 86) -23]
Test Case: 936 | Input/Output: [(4 96 98 3) 3]
Test Case: 937 | Input/Output: [(-60 -28 54 -2) -60]
Test Case: 938 | Input/Output: [(-93 -61 34 0) -93]
Test Case: 939 | Input/Output: [(55 41 12 8) 8]
Test Case: 940 | Input/Output: [(-90 -17 -98 95) -98]
Test Case: 941 | Input/Output: [(-8 94 29 -98) -98]
Test Case: 942 | Input/Output: [(75 -85 44 -5) -85]
Test Case: 943 | Input/Output: [(79 91 -59 27) -59]
Test Case: 944 | Input/Output: [(14 18 3 -16) -16]
Test Case: 945 | Input/Output: [(-70 17 -62 10) -70]
Test Case: 946 | Input/Output: [(-98 -98 -62 90) -98]
Test Case: 947 | Input/Output: [(17 -34 3 2) -34]
Test Case: 948 | Input/Output: [(-58 43 57 51) -58]
Test Case: 949 | Input/Output: [(89 -35 30 36) -35]
Test Case: 950 | Input/Output: [(-97 -65 -100 12) -100]
Test Case: 951 | Input/Output: [(53 -47 -95 -52) -95]
Test Case: 952 | Input/Output: [(82 -11 76 91) -11]
Test Case: 953 | Input/Output: [(-4 -20 -96 10) -96]
Test Case: 954 | Input/Output: [(45 61 -39 -73) -73]
Test Case: 955 | Input/Output: [(-46 -24 60 -34) -46]
Test Case: 956 | Input/Output: [(25 87 0 -17) -17]
Test Case: 957 | Input/Output: [(60 86 39 97) 39]
Test Case: 958 | Input/Output: [(-24 -8 -92 89) -92]
Test Case: 959 | Input/Output: [(-46 -45 45 78) -46]
Test Case: 960 | Input/Output: [(12 -77 44 -58) -77]
Test Case: 961 | Input/Output: [(55 -3 -36 99) -36]
Test Case: 962 | Input/Output: [(19 -94 71 -17) -94]
Test Case: 963 | Input/Output: [(100 82 15 9) 9]
Test Case: 964 | Input/Output: [(87 59 43 92) 43]
Test Case: 965 | Input/Output: [(-7 41 -70 19) -70]
Test Case: 966 | Input/Output: [(42 -18 11 -45) -45]
Test Case: 967 | Input/Output: [(-23 -93 -87 -93) -93]
Test Case: 968 | Input/Output: [(-66 50 -96 73) -96]
Test Case: 969 | Input/Output: [(-62 -25 34 -93) -93]
Test Case: 970 | Input/Output: [(-2 29 42 -92) -92]
Test Case: 971 | Input/Output: [(-46 88 6 7) -46]
Test Case: 972 | Input/Output: [(69 62 59 82) 59]
Test Case: 973 | Input/Output: [(61 -20 -75 50) -75]
Test Case: 974 | Input/Output: [(-81 -41 71 25) -81]
Test Case: 975 | Input/Output: [(91 -97 47 20) -97]
Test Case: 976 | Input/Output: [(-77 -26 -79 20) -79]
Test Case: 977 | Input/Output: [(93 11 -71 54) -71]
Test Case: 978 | Input/Output: [(-45 -77 25 97) -77]
Test Case: 979 | Input/Output: [(90 98 47 64) 47]
Test Case: 980 | Input/Output: [(-24 93 -45 -81) -81]
Test Case: 981 | Input/Output: [(100 -32 -11 -73) -73]
Test Case: 982 | Input/Output: [(13 3 48 -41) -41]
Test Case: 983 | Input/Output: [(-100 -96 13 17) -100]
Test Case: 984 | Input/Output: [(-52 -24 11 -81) -81]
Test Case: 985 | Input/Output: [(93 25 -97 44) -97]
Test Case: 986 | Input/Output: [(52 49 -12 96) -12]
Test Case: 987 | Input/Output: [(66 79 -35 -49) -49]
Test Case: 988 | Input/Output: [(76 -69 -74 -38) -74]
Test Case: 989 | Input/Output: [(-31 -2 45 4) -31]
Test Case: 990 | Input/Output: [(-95 -12 100 59) -95]
Test Case: 991 | Input/Output: [(-100 75 -94 -58) -100]
Test Case: 992 | Input/Output: [(-39 -8 -11 28) -39]
Test Case: 993 | Input/Output: [(-52 -23 32 13) -52]
Test Case: 994 | Input/Output: [(-29 -70 67 50) -70]
Test Case: 995 | Input/Output: [(98 9 -6 6) -6]
Test Case: 996 | Input/Output: [(-68 -99 -99 43) -99]
Test Case: 997 | Input/Output: [(94 -47 69 -70) -70]
Test Case: 998 | Input/Output: [(-92 49 -86 49) -92]
Test Case: 999 | Input/Output: [(-24 58 -34 59) -34]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 44 -125 -5 19 118 123 14 9 32 36 111 -112 53 115 27 115
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-87 -87 -87 93] -87] [[-45 46 -45 -45] -45] [[9 9 -78 9] -78] [[82 82 82 -20] -20] [[-30 46 46 46] -30] [[-45 -45 -71 -45] -71] [[-99 9 9 9] -99] [[37 -2 -2 -2] -2] [[73 73 79 73] 73] [[-38 23 23 23] -38] [(-47 -47 -47 -47) -47] [(79 79 79 79) 79] [(100 100 100 100) 100] [(-19 -19 -19 -19) -19] [(5 5 5 5) 5] [(31 99 37 53) 31] [(36 47 54 82) 36] [(44 20 31 20) 20] [(89 37 97 50) 37] [(62 12 87 74) 12] [(82 2 24 38) 2] [(97 38 12 32) 12] [(47 6 94 49) 6] [(32 50 63 2) 2] [(75 94 64 59) 59] [(35 16 11 70) 11] [(37 65 14 100) 14] [(25 50 13 22) 13] [(74 30 65 3) 3] [(27 66 59 28) 27] [(60 55 83 28) 28] [(17 45 60 93) 17] [(23 4 84 89) 4] [(97 64 31 80) 31] [(7 34 97 18) 7] [(-23 -52 -62 -71) -71] [(82 44 -39 -28) -39] [(-71 69 7 -84) -84] [(-89 12 -7 -73) -89] [(-34 -5 26 -6) -34] [(27 -96 97 -24) -96] [(-48 -41 -50 -25) -50] [(58 -57 30 14) -57] [(11 -94 -12 -13) -94] [(-39 7 30 -88) -88] [(84 -65 96 -24) -65] [(84 -42 80 19) -42] [(-11 -21 13 -42) -42] [(90 -22 -8 22) -22] [(-31 52 -60 10) -60] [(-10 85 -33 -83) -83] [(28 -25 -46 42) -46] [(-55 63 54 29) -55] [(81 50 75 64) 50] [(3 87 97 -26) -26] [(-95 -77 95 -69) -95] [(-46 57 -16 -21) -46] [(-17 -32 98 93) -32] [(73 -19 69 -85) -85] [(40 -5 80 82) -5] [(-93 -30 -71 -2) -93] [(25 68 54 -22) -22] [(-95 -87 86 31) -95] [(76 10 -22 -16) -22] [(7 58 81 -35) -35] [(-86 28 57 93) -86] [(28 -55 3 -19) -55] [(15 -52 68 43) -52] [(-95 53 -79 -13) -95] [(-100 1 -11 -18) -100] [(-69 31 -48 -13) -69] [(97 -39 32 56) -39] [(-82 -89 -91 -29) -91] [(-51 -90 32 -95) -95] [(12 -40 7 18) -40] [(-5 25 -55 11) -55] [(51 -26 -98 36) -98] [(-42 -34 10 66) -42] [(27 24 -100 63) -100] [(99 -50 1 36) -50] [(47 36 -94 -6) -94] [(-80 -67 5 7) -80] [(-95 -56 44 -13) -95] [(-10 21 38 -89) -89] [(-66 46 43 72) -66] [(-95 81 -100 24) -100] [(-32 -90 23 80) -90] [(-60 -47 -57 -4) -60] [(92 62 -77 15) -77] [(50 -54 7 -7) -54] [(-84 34 44 68) -84] [(-22 68 73 16) -22] [(-69 -1 -99 -69) -99] [(43 85 27 -8) -8] [(60 48 95 -20) -20])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: 9                  
Correct output: -20                 | Program output: 82                 
Correct output: -30                 | Program output: -30                
Correct output: -71                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -2                  | Program output: 37                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 20                  | Program output: 44                 
Correct output: 37                  | Program output: 89                 
Correct output: 12                  | Program output: 62                 
Correct output: 2                   | Program output: 82                 
Correct output: 12                  | Program output: 97                 
Correct output: 6                   | Program output: 47                 
Correct output: 2                   | Program output: 32                 
Correct output: 59                  | Program output: 75                 
Correct output: 11                  | Program output: 35                 
Correct output: 14                  | Program output: 37                 
Correct output: 13                  | Program output: 25                 
Correct output: 3                   | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 28                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 23                 
Correct output: 31                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: -71                 | Program output: -23                
Correct output: -39                 | Program output: 82                 
Correct output: -84                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -96                 | Program output: 27                 
Correct output: -50                 | Program output: -48                
Correct output: -57                 | Program output: 58                 
Correct output: -94                 | Program output: 11                 
Correct output: -88                 | Program output: -39                
Correct output: -65                 | Program output: 84                 
Correct output: -42                 | Program output: 84                 
Correct output: -42                 | Program output: -11                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -31                
Correct output: -83                 | Program output: -10                
Correct output: -46                 | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: 50                  | Program output: 81                 
Correct output: -26                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -17                
Correct output: -85                 | Program output: 73                 
Correct output: -5                  | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: 25                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: 76                 
Correct output: -35                 | Program output: 7                  
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 28                 
Correct output: -52                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 97                 
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -51                
Correct output: -40                 | Program output: 12                 
Correct output: -55                 | Program output: -5                 
Correct output: -98                 | Program output: 51                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 27                 
Correct output: -50                 | Program output: 99                 
Correct output: -94                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -95                
Correct output: -90                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -77                 | Program output: 92                 
Correct output: -54                 | Program output: 50                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -69                
Correct output: -8                  | Program output: 43                 
Correct output: -20                 | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (integer_flush integer_lt) exec_noop) (integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) ())) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (integer_flush integer_lt) exec_noop) (integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) ())) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 4 2 1 4 3 1 4 5 1)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 4 2 1 4 3 1 4 5 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (integer_flush integer_lt) exec_noop) (integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) ())) ())
Errors: [0 1 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 9.973
Median total errors in population: 10
Error averages by case: (0.998 0.996 0.998 0.999 0.996 0.997 0.999 0.996 0.995 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.791
Average program size in population (points): 69.732
Average percent parens in population: 0.279
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 474154
--- Timings ---
Current time: 1559314426320 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 31.8%
Fitness Testing:      1.6 seconds, 64.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: 9                  
Correct output: -20                 | Program output: 82                 
Correct output: -30                 | Program output: -30                
Correct output: -71                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -2                  | Program output: 37                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 20                  | Program output: 44                 
Correct output: 37                  | Program output: 89                 
Correct output: 12                  | Program output: 62                 
Correct output: 2                   | Program output: 82                 
Correct output: 12                  | Program output: 97                 
Correct output: 6                   | Program output: 47                 
Correct output: 2                   | Program output: 32                 
Correct output: 59                  | Program output: 75                 
Correct output: 11                  | Program output: 35                 
Correct output: 14                  | Program output: 37                 
Correct output: 13                  | Program output: 25                 
Correct output: 3                   | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 28                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 23                 
Correct output: 31                  | Program output: 97                 
Correct output: 7                   | Program output: 7                  
Correct output: -71                 | Program output: -23                
Correct output: -39                 | Program output: 82                 
Correct output: -84                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -96                 | Program output: 27                 
Correct output: -50                 | Program output: -48                
Correct output: -57                 | Program output: 58                 
Correct output: -94                 | Program output: 11                 
Correct output: -88                 | Program output: -39                
Correct output: -65                 | Program output: 84                 
Correct output: -42                 | Program output: 84                 
Correct output: -42                 | Program output: -11                
Correct output: -22                 | Program output: 90                 
Correct output: -60                 | Program output: -31                
Correct output: -83                 | Program output: -10                
Correct output: -46                 | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: 50                  | Program output: 81                 
Correct output: -26                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -17                
Correct output: -85                 | Program output: 73                 
Correct output: -5                  | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: 25                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: 76                 
Correct output: -35                 | Program output: 7                  
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 28                 
Correct output: -52                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 97                 
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -51                
Correct output: -40                 | Program output: 12                 
Correct output: -55                 | Program output: -5                 
Correct output: -98                 | Program output: 51                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 27                 
Correct output: -50                 | Program output: 99                 
Correct output: -94                 | Program output: 47                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -95                
Correct output: -90                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -77                 | Program output: 92                 
Correct output: -54                 | Program output: 50                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -69                
Correct output: -8                  | Program output: 43                 
Correct output: -20                 | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Lexicase best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (exec_dup (integer_lt) exec_noop) integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) () ())) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Zero cases best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (exec_dup (integer_lt) exec_noop) integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) () ())) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 91 104 417 417 417 417 105 282 92)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (417 91 104 417 417 417 417 105 282 92)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_345} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_k} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop})
Best program: (boolean_eq in1 exec_k (integer_shove print_integer boolean_and integer_add integer_empty exec_while (exec_rot (exec_empty integer_div tagged_345 integer_swap exec_noop integer_mult boolean_frominteger exec_dup_times (exec_flush boolean_frominteger exec_yank) exec_while (integer_flush integer_lt) exec_noop) (integer_dec boolean_and exec_do*while () exec_k (integer_mod) (integer_div) boolean_dup_items integer_div boolean_or boolean_pop) ())) ())
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.241
Median total errors in population: 8
Error averages by case: (0.583 0.909 0.896 0.583 0.583 0.583 0.583 0.895 0.718 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.272
Average program size in population (points): 54.271
Average percent parens in population: 0.267
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.496
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 255
Genome diversity (% unique genomes):	 0.473
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 866589
--- Timings ---
Current time: 1559314429299 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.9 seconds, 52.2%
Fitness Testing:      2.2 seconds, 39.8%
Report:               0.3 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: 9                  
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: 23                 
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 37                 
Correct output: 36                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 50                 
Correct output: 12                  | Program output: 74                 
Correct output: 2                   | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 60                 
Correct output: 4                   | Program output: 84                 
Correct output: 31                  | Program output: 31                 
Correct output: 7                   | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -73                
Correct output: -34                 | Program output: -6                 
Correct output: -96                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -57                 | Program output: 14                 
Correct output: -94                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -24                
Correct output: -42                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -8                 
Correct output: -60                 | Program output: -60                
Correct output: -83                 | Program output: -83                
Correct output: -46                 | Program output: -46                
Correct output: -55                 | Program output: 29                 
Correct output: 50                  | Program output: 64                 
Correct output: -26                 | Program output: -26                
Correct output: -95                 | Program output: -69                
Correct output: -46                 | Program output: -21                
Correct output: -32                 | Program output: 93                 
Correct output: -85                 | Program output: -85                
Correct output: -5                  | Program output: 80                 
Correct output: -93                 | Program output: -71                
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: 31                 
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: 57                 
Correct output: -55                 | Program output: -19                
Correct output: -52                 | Program output: 43                 
Correct output: -95                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -69                 | Program output: -48                
Correct output: -39                 | Program output: 32                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 5                  
Correct output: -95                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 23                 
Correct output: -60                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -7                 
Correct output: -84                 | Program output: 44                 
Correct output: -22                 | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction -58} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt})
Lexicase best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (in3) exec_noop exec_while () exec_y_when_autoconstructing (boolean_frominteger) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min boolean_or -58 print_integer integer_rot exec_if () (integer_gt))))))) ()) ()))) ())
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 92
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction -58} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt})
Zero cases best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (in3) exec_noop exec_while () exec_y_when_autoconstructing (boolean_frominteger) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min boolean_or -58 print_integer integer_rot exec_if () (integer_gt))))))) ()) ()))) ())
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 92
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 859 243 237 611 154 243 452 452 452)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (236 859 243 237 611 154 243 452 452 452)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction -58} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt})
Best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (integer_mult) exec_noop exec_while () exec_y_when_autoconstructing (boolean_invert_second_then_and) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove boolean_yankdup tagged_248) integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min boolean_or -58 print_integer integer_rot exec_if () (integer_gt))))))) ())) ())
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 89
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.061
Median total errors in population: 5
Error averages by case: (0.764 0.141 0.757 0.763 0.389 0.846 0.757 0.548 0.548 0.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.211
Average program size in population (points): 68.248
Average percent parens in population: 0.285
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.957
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1237769
--- Timings ---
Current time: 1559314432954 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.1 seconds, 59.7%
Fitness Testing:      2.8 seconds, 32.3%
Report:               0.6 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: 9                  
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: 23                 
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 37                 
Correct output: 36                  | Program output: 54                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 50                 
Correct output: 12                  | Program output: 74                 
Correct output: 2                   | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 49                 
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 60                 
Correct output: 4                   | Program output: 84                 
Correct output: 31                  | Program output: 31                 
Correct output: 7                   | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -73                
Correct output: -34                 | Program output: -6                 
Correct output: -96                 | Program output: -24                
Correct output: -50                 | Program output: -50                
Correct output: -57                 | Program output: 14                 
Correct output: -94                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -24                
Correct output: -42                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -8                 
Correct output: -60                 | Program output: -60                
Correct output: -83                 | Program output: -83                
Correct output: -46                 | Program output: -46                
Correct output: -55                 | Program output: 29                 
Correct output: 50                  | Program output: 64                 
Correct output: -26                 | Program output: -26                
Correct output: -95                 | Program output: -69                
Correct output: -46                 | Program output: -21                
Correct output: -32                 | Program output: 93                 
Correct output: -85                 | Program output: -85                
Correct output: -5                  | Program output: 80                 
Correct output: -93                 | Program output: -71                
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: 31                 
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: 57                 
Correct output: -55                 | Program output: -19                
Correct output: -52                 | Program output: 43                 
Correct output: -95                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -69                 | Program output: -48                
Correct output: -39                 | Program output: 32                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 5                  
Correct output: -95                 | Program output: -13                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: 23                 
Correct output: -60                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -7                 
Correct output: -84                 | Program output: 44                 
Correct output: -22                 | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Lexicase best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (in3) exec_noop exec_while () exec_y_when_autoconstructing (boolean_frominteger) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup exec_while (boolean_yank exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min integer_min)))))) ()) ())) ()))) ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min})
Zero cases best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (in3) exec_noop exec_while () exec_y_when_autoconstructing (boolean_frominteger) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup exec_while (boolean_yank exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min integer_min)))))) ()) ())) ()))) ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (384 349 384 349 349 487 869 384 350 349)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (384 349 384 349 349 487 869 384 350 349)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap})
Best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (exec_do*while (integer_mult) exec_noop exec_while () exec_y_when_autoconstructing (boolean_invert_second_then_and) in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap)))))) ()) ()))) ())
Errors: [1 0 1 0 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 78
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.746
Median total errors in population: 6
Error averages by case: (0.616 0.651 0.616 0.651 0.651 0.513 0.131 0.616 0.65 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.601
Average program size in population (points): 71.989
Average percent parens in population: 0.290
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.40575
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1593102
--- Timings ---
Current time: 1559314435826 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.3 seconds, 59.9%
Fitness Testing:      3.2 seconds, 26.4%
Report:               1.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: 9                  
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: -30                
Correct output: -71                 | Program output: -45                
Correct output: -99                 | Program output: -99                
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 50                 
Correct output: 12                  | Program output: 62                 
Correct output: 2                   | Program output: 38                 
Correct output: 12                  | Program output: 32                 
Correct output: 6                   | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 11                  | Program output: 35                 
Correct output: 14                  | Program output: 37                 
Correct output: 13                  | Program output: 22                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 27                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 23                 
Correct output: 31                  | Program output: 80                 
Correct output: 7                   | Program output: 7                  
Correct output: -71                 | Program output: -71                
Correct output: -39                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -96                 | Program output: -24                
Correct output: -50                 | Program output: -48                
Correct output: -57                 | Program output: 14                 
Correct output: -94                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -24                
Correct output: -42                 | Program output: 19                 
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: 22                 
Correct output: -60                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: -46                 | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: 50                  | Program output: 64                 
Correct output: -26                 | Program output: -26                
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -17                
Correct output: -85                 | Program output: -85                
Correct output: -5                  | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -16                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: -19                
Correct output: -52                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 56                 
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: 12                 
Correct output: -55                 | Program output: -5                 
Correct output: -98                 | Program output: 36                 
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: 27                 
Correct output: -50                 | Program output: 36                 
Correct output: -94                 | Program output: -6                 
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -95                
Correct output: -90                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -77                 | Program output: 15                 
Correct output: -54                 | Program output: -7                 
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -69                
Correct output: -8                  | Program output: -8                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_eq in1 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_eq in1 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 351 828 1000 1000 1000 441 1000 800 352)
Population mean number of elite cases: 7.12
Count of perfect (error zero) individuals by case: (352 351 828 0 0 0 441 0 800 352)
Population mean number of perfect (error zero) cases: 3.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Best program: (boolean_eq in1 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ()))
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 53
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.876
Median total errors in population: 7
Error averages by case: (0.648 0.649 0.172 1.0 1.0 1.0 0.559 1.0 0.2 0.648)
Error minima by case: (0 0 0 1 1 1 0 1 0 0)
Average genome size in population (length): 56.358
Average program size in population (points): 81.367
Average percent parens in population: 0.306
Minimum age in population: 4.0
Maximum age in population: 7.25
Average age in population: 5.69375
Median age in population: 5.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1844315
--- Timings ---
Current time: 1559314438667 milliseconds
Total Time:          15.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.6 seconds, 63.7%
Fitness Testing:      3.5 seconds, 23.6%
Report:               1.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: 82                 
Correct output: -30                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: -99                
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: -38                
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 20                  | Program output: 31                 
Correct output: 37                  | Program output: 89                 
Correct output: 12                  | Program output: 62                 
Correct output: 2                   | Program output: 24                 
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 47                 
Correct output: 2                   | Program output: 32                 
Correct output: 59                  | Program output: 64                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 65                 
Correct output: 27                  | Program output: 27                 
Correct output: 28                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 7                   | Program output: 7                  
Correct output: -71                 | Program output: -62                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -71                
Correct output: -89                 | Program output: -89                
Correct output: -34                 | Program output: -34                
Correct output: -96                 | Program output: 27                 
Correct output: -50                 | Program output: -50                
Correct output: -57                 | Program output: 30                 
Correct output: -94                 | Program output: -12                
Correct output: -88                 | Program output: -39                
Correct output: -65                 | Program output: 84                 
Correct output: -42                 | Program output: 80                 
Correct output: -42                 | Program output: -11                
Correct output: -22                 | Program output: -8                 
Correct output: -60                 | Program output: -60                
Correct output: -83                 | Program output: -33                
Correct output: -46                 | Program output: -46                
Correct output: -55                 | Program output: -55                
Correct output: 50                  | Program output: 75                 
Correct output: -26                 | Program output: 3                  
Correct output: -95                 | Program output: -95                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -17                
Correct output: -85                 | Program output: 69                 
Correct output: -5                  | Program output: 40                 
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: 25                 
Correct output: -95                 | Program output: -95                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: 7                  
Correct output: -86                 | Program output: -86                
Correct output: -55                 | Program output: 3                  
Correct output: -52                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -39                 | Program output: 32                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -51                
Correct output: -40                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -42                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: 1                  
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -95                 | Program output: -95                
Correct output: -89                 | Program output: -10                
Correct output: -66                 | Program output: -66                
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -32                
Correct output: -60                 | Program output: -60                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: 7                  
Correct output: -84                 | Program output: -84                
Correct output: -22                 | Program output: -22                
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: 27                 
Correct output: -20                 | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in1 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Lexicase best errors: [0 1 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in1 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Zero cases best errors: [0 1 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (596 1000 1000 1000 596 814 195 1000 807 596)
Population mean number of elite cases: 7.60
Count of perfect (error zero) individuals by case: (596 0 0 0 596 814 195 0 807 596)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 3, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction 91} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction -58} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt})
Best program: (boolean_eq in1 exec_k (exec_do*while (in3) exec_noop exec_while (exec_y_when_autoconstructing (boolean_frominteger) in4 exec_eq exec_do*range (exec_dup_items) boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot exec_do*while (boolean_invert_second_then_and)) () print_integer) (boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod exec_rot (integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush exec_y (exec_while (print_exec (exec_yank print_boolean 91 integer_swap exec_do*times (integer_pop integer_gt) integer_dup integer_min boolean_or -58 print_integer integer_rot exec_if () (integer_gt))))))) ()) () ()) ())) ())
Errors: [0 1 1 1 0 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 92
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 6.396
Median total errors in population: 5
Error averages by case: (0.404 1.0 1.0 1.0 0.404 0.186 0.805 1.0 0.193 0.404)
Error minima by case: (0 1 1 1 0 0 0 1 0 0)
Average genome size in population (length): 52.635
Average program size in population (points): 75.698
Average percent parens in population: 0.302
Minimum age in population: 5.5
Maximum age in population: 8.8125
Average age in population: 7.165625
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.741
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2065969
--- Timings ---
Current time: 1559314441160 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.5 seconds, 65.9%
Fitness Testing:      3.8 seconds, 21.9%
Report:               2.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: 9                  
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: 23                 
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 37                 
Correct output: 36                  | Program output: 47                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 31                 
Correct output: 7                   | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -73                
Correct output: -34                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -65                
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -83                 | Program output: -83                
Correct output: -46                 | Program output: -46                
Correct output: -55                 | Program output: 29                 
Correct output: 50                  | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -95                 | Program output: -77                
Correct output: -46                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -71                
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -69                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -67                
Correct output: -95                 | Program output: -56                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: -84                 | Program output: 34                 
Correct output: -22                 | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -20                 | Program output: -20                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Lexicase best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 75
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Zero cases best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 75
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 835 1 1 805 411 411 1 806 1)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (840 835 1 1 805 411 411 1 806 1)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 2, :instruction boolean_invert_second_then_and} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_248} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush})
Best program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 5.888
Median total errors in population: 6
Error averages by case: (0.16 0.165 0.999 0.999 0.195 0.589 0.589 0.999 0.194 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.133
Average program size in population (points): 83.735
Average percent parens in population: 0.305
Minimum age in population: 7.75
Maximum age in population: 9.0
Average age in population: 8.358
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2389633
--- Timings ---
Current time: 1559314443852 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 67.2%
Fitness Testing:      4.2 seconds, 21.0%
Report:               2.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 6
Successful program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 75


Auto-simplifying with starting size: 75
step: 0
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 500
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1000
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1500
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2000
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2500
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3000
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3500
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4000
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4500
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 5000
program: (in3 integer_gte exec_k_when_autoconstructing (exec_swap () (boolean_eq) in2 in4 exec_eq exec_do*range (exec_dup_items boolean_frominteger boolean_eq boolean_pop boolean_swap) exec_k (integer_min boolean_swap) (boolean_eq boolean_pop boolean_swap) exec_k (integer_min exec_k (integer_gt integer_rot) (exec_do*while (boolean_invert_second_then_and)) print_integer) (integer_gt integer_rot) exec_do*while (boolean_invert_second_then_and)) (print_integer) boolean_shove exec_s (tagged_248) (integer_yank boolean_dup boolean_swap boolean_yank integer_mod integer_flush integer_mod integer_yankdup integer_pop exec_pop (exec_yank integer_dec) exec_swap (exec_shove (integer_stackdepth exec_do*while (boolean_flush))) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 208
Test mean error for best: 0.20800
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 1
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 1
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -78                 | Program output: -78                
Correct output: -20                 | Program output: -20                
Correct output: -30                 | Program output: 46                 
Correct output: -71                 | Program output: -71                
Correct output: -99                 | Program output: 9                  
Correct output: -2                  | Program output: -2                 
Correct output: 73                  | Program output: 73                 
Correct output: -38                 | Program output: 23                 
Correct output: -47                 | Program output: -47                
Correct output: 79                  | Program output: 79                 
Correct output: 100                 | Program output: 100                
Correct output: -19                 | Program output: -19                
Correct output: 5                   | Program output: 5                  
Correct output: 31                  | Program output: 37                 
Correct output: 36                  | Program output: 47                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: 12                  | Program output: 12                 
Correct output: 6                   | Program output: 6                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 13                  | Program output: 13                 
Correct output: 3                   | Program output: 3                  
Correct output: 27                  | Program output: 28                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 45                 
Correct output: 4                   | Program output: 4                  
Correct output: 31                  | Program output: 31                 
Correct output: 7                   | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -39                 | Program output: -39                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -73                
Correct output: -34                 | Program output: -6                 
Correct output: -96                 | Program output: -96                
Correct output: -50                 | Program output: -50                
Correct output: -57                 | Program output: -57                
Correct output: -94                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -65                 | Program output: -65                
Correct output: -42                 | Program output: -42                
Correct output: -42                 | Program output: -42                
Correct output: -22                 | Program output: -22                
Correct output: -60                 | Program output: -60                
Correct output: -83                 | Program output: -83                
Correct output: -46                 | Program output: -46                
Correct output: -55                 | Program output: 29                 
Correct output: 50                  | Program output: 50                 
Correct output: -26                 | Program output: -26                
Correct output: -95                 | Program output: -77                
Correct output: -46                 | Program output: -21                
Correct output: -32                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -5                  | Program output: -5                 
Correct output: -93                 | Program output: -71                
Correct output: -22                 | Program output: -22                
Correct output: -95                 | Program output: -87                
Correct output: -22                 | Program output: -22                
Correct output: -35                 | Program output: -35                
Correct output: -86                 | Program output: 28                 
Correct output: -55                 | Program output: -55                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -79                
Correct output: -100                | Program output: -18                
Correct output: -69                 | Program output: -48                
Correct output: -39                 | Program output: -39                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -98                 | Program output: -98                
Correct output: -42                 | Program output: -34                
Correct output: -100                | Program output: -100               
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -67                
Correct output: -95                 | Program output: -56                
Correct output: -89                 | Program output: -89                
Correct output: -66                 | Program output: 43                 
Correct output: -100                | Program output: -100               
Correct output: -90                 | Program output: -90                
Correct output: -60                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: -84                 | Program output: 34                 
Correct output: -22                 | Program output: 16                 
Correct output: -99                 | Program output: -99                
Correct output: -8                  | Program output: -8                 
Correct output: -20                 | Program output: -20                
;;******************************
