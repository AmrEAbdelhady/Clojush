Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 80 0 0] 0] [[6 6 57 6] 6] [[-74 -74 -74 -55] -74] [[-80 -29 -80 -80] -80] [[89 89 -98 89] -98] [[-52 -2 -2 -2] -52] [[53 24 24 24] 24] [[91 91 91 20] 20] [[-11 -57 -57 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-4 -58 -4 -4] -58]
Train Case:   6 | Input/Output: [[0 80 0 0] 0]
Train Case:   7 | Input/Output: [[6 6 57 6] 6]
Train Case:   8 | Input/Output: [[-74 -74 -74 -55] -74]
Train Case:   9 | Input/Output: [[-80 -29 -80 -80] -80]
Train Case:  10 | Input/Output: [[89 89 -98 89] -98]
Train Case:  11 | Input/Output: [[-52 -2 -2 -2] -52]
Train Case:  12 | Input/Output: [[53 24 24 24] 24]
Train Case:  13 | Input/Output: [[91 91 91 20] 20]
Train Case:  14 | Input/Output: [[-11 -57 -57 -57] -57]
Train Case:  15 | Input/Output: [(26 26 26 26) 26]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(54 54 54 54) 54]
Train Case:  18 | Input/Output: [(76 76 76 76) 76]
Train Case:  19 | Input/Output: [(61 61 61 61) 61]
Train Case:  20 | Input/Output: [(26 0 91 2) 0]
Train Case:  21 | Input/Output: [(16 22 43 95) 16]
Train Case:  22 | Input/Output: [(97 65 50 44) 44]
Train Case:  23 | Input/Output: [(89 24 84 52) 24]
Train Case:  24 | Input/Output: [(83 79 55 95) 55]
Train Case:  25 | Input/Output: [(75 31 37 2) 2]
Train Case:  26 | Input/Output: [(89 9 55 46) 9]
Train Case:  27 | Input/Output: [(54 22 81 72) 22]
Train Case:  28 | Input/Output: [(45 5 99 95) 5]
Train Case:  29 | Input/Output: [(27 90 51 54) 27]
Train Case:  30 | Input/Output: [(60 55 92 100) 55]
Train Case:  31 | Input/Output: [(82 82 5 49) 5]
Train Case:  32 | Input/Output: [(66 44 65 98) 44]
Train Case:  33 | Input/Output: [(88 30 39 56) 30]
Train Case:  34 | Input/Output: [(26 43 78 8) 8]
Train Case:  35 | Input/Output: [(41 88 93 41) 41]
Train Case:  36 | Input/Output: [(37 22 37 66) 22]
Train Case:  37 | Input/Output: [(64 42 1 88) 1]
Train Case:  38 | Input/Output: [(46 33 13 87) 13]
Train Case:  39 | Input/Output: [(26 90 72 54) 26]
Train Case:  40 | Input/Output: [(-37 -63 37 -95) -95]
Train Case:  41 | Input/Output: [(41 -79 90 53) -79]
Train Case:  42 | Input/Output: [(16 32 91 37) 16]
Train Case:  43 | Input/Output: [(1 -12 -67 -27) -67]
Train Case:  44 | Input/Output: [(24 38 -84 -65) -84]
Train Case:  45 | Input/Output: [(-25 59 -16 41) -25]
Train Case:  46 | Input/Output: [(33 29 -20 -8) -20]
Train Case:  47 | Input/Output: [(7 -95 -2 -80) -95]
Train Case:  48 | Input/Output: [(-86 -91 15 -68) -91]
Train Case:  49 | Input/Output: [(-51 8 -7 -31) -51]
Train Case:  50 | Input/Output: [(100 39 -3 10) -3]
Train Case:  51 | Input/Output: [(35 63 -96 31) -96]
Train Case:  52 | Input/Output: [(-9 10 26 22) -9]
Train Case:  53 | Input/Output: [(67 -12 27 12) -12]
Train Case:  54 | Input/Output: [(-17 46 9 -11) -17]
Train Case:  55 | Input/Output: [(17 53 72 -82) -82]
Train Case:  56 | Input/Output: [(-8 -78 -6 -100) -100]
Train Case:  57 | Input/Output: [(88 90 3 4) 3]
Train Case:  58 | Input/Output: [(-71 -36 -83 47) -83]
Train Case:  59 | Input/Output: [(-81 -74 -90 -88) -90]
Train Case:  60 | Input/Output: [(-90 7 -28 64) -90]
Train Case:  61 | Input/Output: [(-25 -55 -28 -27) -55]
Train Case:  62 | Input/Output: [(-77 84 -18 40) -77]
Train Case:  63 | Input/Output: [(-98 -93 20 -61) -98]
Train Case:  64 | Input/Output: [(17 -86 -37 -70) -86]
Train Case:  65 | Input/Output: [(-53 11 35 5) -53]
Train Case:  66 | Input/Output: [(3 -28 89 76) -28]
Train Case:  67 | Input/Output: [(-26 61 -46 -30) -46]
Train Case:  68 | Input/Output: [(-68 -80 -98 -96) -98]
Train Case:  69 | Input/Output: [(-72 -84 10 77) -84]
Train Case:  70 | Input/Output: [(13 20 48 39) 13]
Train Case:  71 | Input/Output: [(-91 67 -79 -37) -91]
Train Case:  72 | Input/Output: [(-98 -14 -21 10) -98]
Train Case:  73 | Input/Output: [(89 -27 98 -63) -63]
Train Case:  74 | Input/Output: [(-30 79 12 -5) -30]
Train Case:  75 | Input/Output: [(85 19 19 -51) -51]
Train Case:  76 | Input/Output: [(-27 39 -17 -87) -87]
Train Case:  77 | Input/Output: [(-81 -13 100 87) -81]
Train Case:  78 | Input/Output: [(98 90 -46 81) -46]
Train Case:  79 | Input/Output: [(-32 19 -4 58) -32]
Train Case:  80 | Input/Output: [(-84 0 -60 -4) -84]
Train Case:  81 | Input/Output: [(-64 -75 -18 96) -75]
Train Case:  82 | Input/Output: [(14 0 -58 -57) -58]
Train Case:  83 | Input/Output: [(18 -46 48 45) -46]
Train Case:  84 | Input/Output: [(78 76 65 -93) -93]
Train Case:  85 | Input/Output: [(-62 66 -8 67) -62]
Train Case:  86 | Input/Output: [(31 24 21 36) 21]
Train Case:  87 | Input/Output: [(34 -83 -32 7) -83]
Train Case:  88 | Input/Output: [(-44 69 99 91) -44]
Train Case:  89 | Input/Output: [(-99 1 30 36) -99]
Train Case:  90 | Input/Output: [(-42 -28 56 -99) -99]
Train Case:  91 | Input/Output: [(-24 -33 -87 -29) -87]
Train Case:  92 | Input/Output: [(-23 -1 -48 -2) -48]
Train Case:  93 | Input/Output: [(-8 -46 -1 97) -46]
Train Case:  94 | Input/Output: [(-14 -64 -19 -80) -80]
Train Case:  95 | Input/Output: [(13 -72 34 -98) -98]
Train Case:  96 | Input/Output: [(-64 -83 45 -60) -83]
Train Case:  97 | Input/Output: [(62 -95 98 69) -95]
Train Case:  98 | Input/Output: [(39 -24 -81 -23) -81]
Train Case:  99 | Input/Output: [(7 94 -68 -86) -86]
Test Case:   0 | Input/Output: [[3 20 20 20] 3]
Test Case:   1 | Input/Output: [[36 36 36 -71] -71]
Test Case:   2 | Input/Output: [[7 7 70 7] 7]
Test Case:   3 | Input/Output: [[92 92 92 -79] -79]
Test Case:   4 | Input/Output: [[-43 -43 59 -43] -43]
Test Case:   5 | Input/Output: [[52 52 -5 52] -5]
Test Case:   6 | Input/Output: [[-92 -59 -59 -59] -92]
Test Case:   7 | Input/Output: [[38 -99 -99 -99] -99]
Test Case:   8 | Input/Output: [[-3 -3 -3 96] -3]
Test Case:   9 | Input/Output: [[32 32 32 32] 32]
Test Case:  10 | Input/Output: [[21 21 21 -73] -73]
Test Case:  11 | Input/Output: [[-77 20 20 20] -77]
Test Case:  12 | Input/Output: [[12 12 12 26] 12]
Test Case:  13 | Input/Output: [[-34 -100 -100 -100] -100]
Test Case:  14 | Input/Output: [[0 -53 -53 -53] -53]
Test Case:  15 | Input/Output: [[10 10 10 -75] -75]
Test Case:  16 | Input/Output: [[34 -18 -18 -18] -18]
Test Case:  17 | Input/Output: [[-40 -40 -40 30] -40]
Test Case:  18 | Input/Output: [[62 62 62 -73] -73]
Test Case:  19 | Input/Output: [[93 36 93 93] 36]
Test Case:  20 | Input/Output: [[-91 -91 -40 -91] -91]
Test Case:  21 | Input/Output: [[-33 -33 -33 -24] -33]
Test Case:  22 | Input/Output: [[-84 -84 -73 -84] -84]
Test Case:  23 | Input/Output: [[-43 42 42 42] -43]
Test Case:  24 | Input/Output: [[46 46 65 46] 46]
Test Case:  25 | Input/Output: [[-25 -8 -8 -8] -25]
Test Case:  26 | Input/Output: [[-67 -13 -67 -67] -67]
Test Case:  27 | Input/Output: [[-39 -39 84 -39] -39]
Test Case:  28 | Input/Output: [[9 9 -17 9] -17]
Test Case:  29 | Input/Output: [[-73 69 -73 -73] -73]
Test Case:  30 | Input/Output: [[67 -5 67 67] -5]
Test Case:  31 | Input/Output: [[28 28 -61 28] -61]
Test Case:  32 | Input/Output: [[55 55 55 54] 54]
Test Case:  33 | Input/Output: [[43 43 0 43] 0]
Test Case:  34 | Input/Output: [[52 52 52 75] 52]
Test Case:  35 | Input/Output: [[15 -68 15 15] -68]
Test Case:  36 | Input/Output: [[-68 -68 -10 -68] -68]
Test Case:  37 | Input/Output: [[-95 32 -95 -95] -95]
Test Case:  38 | Input/Output: [[-25 -25 -47 -25] -47]
Test Case:  39 | Input/Output: [[60 60 -83 60] -83]
Test Case:  40 | Input/Output: [[-89 -41 -89 -89] -89]
Test Case:  41 | Input/Output: [[50 50 50 99] 50]
Test Case:  42 | Input/Output: [[-86 -86 -86 -57] -86]
Test Case:  43 | Input/Output: [[-57 -57 -55 -57] -57]
Test Case:  44 | Input/Output: [[-9 -9 -9 -18] -18]
Test Case:  45 | Input/Output: [[34 -90 -90 -90] -90]
Test Case:  46 | Input/Output: [[73 -59 -59 -59] -59]
Test Case:  47 | Input/Output: [[-99 -99 -16 -99] -99]
Test Case:  48 | Input/Output: [[43 43 37 43] 37]
Test Case:  49 | Input/Output: [[-30 -31 -31 -31] -31]
Test Case:  50 | Input/Output: [[-32 -32 -32 89] -32]
Test Case:  51 | Input/Output: [[-52 -52 26 -52] -52]
Test Case:  52 | Input/Output: [[-32 -13 -32 -32] -32]
Test Case:  53 | Input/Output: [[-45 -39 -39 -39] -45]
Test Case:  54 | Input/Output: [[-5 -5 -5 -44] -44]
Test Case:  55 | Input/Output: [[-53 31 -53 -53] -53]
Test Case:  56 | Input/Output: [[44 44 98 44] 44]
Test Case:  57 | Input/Output: [[-29 -29 -29 91] -29]
Test Case:  58 | Input/Output: [[4 4 4 69] 4]
Test Case:  59 | Input/Output: [[45 45 45 4] 4]
Test Case:  60 | Input/Output: [[45 45 -86 45] -86]
Test Case:  61 | Input/Output: [[-52 -94 -94 -94] -94]
Test Case:  62 | Input/Output: [[-100 -100 -15 -100] -100]
Test Case:  63 | Input/Output: [[-11 45 -11 -11] -11]
Test Case:  64 | Input/Output: [[7 7 90 7] 7]
Test Case:  65 | Input/Output: [[2 2 -43 2] -43]
Test Case:  66 | Input/Output: [[97 2 97 97] 2]
Test Case:  67 | Input/Output: [[74 9 9 9] 9]
Test Case:  68 | Input/Output: [[-17 -17 -43 -17] -43]
Test Case:  69 | Input/Output: [[-34 -34 -34 -40] -40]
Test Case:  70 | Input/Output: [[97 97 97 -49] -49]
Test Case:  71 | Input/Output: [[-68 -68 -92 -68] -92]
Test Case:  72 | Input/Output: [[-28 -28 -28 -100] -100]
Test Case:  73 | Input/Output: [[26 26 26 -99] -99]
Test Case:  74 | Input/Output: [[61 7 7 7] 7]
Test Case:  75 | Input/Output: [[83 23 83 83] 23]
Test Case:  76 | Input/Output: [[-14 -14 -14 58] -14]
Test Case:  77 | Input/Output: [[80 80 80 11] 11]
Test Case:  78 | Input/Output: [[1 1 53 1] 1]
Test Case:  79 | Input/Output: [[-55 -55 -62 -55] -62]
Test Case:  80 | Input/Output: [[-84 36 -84 -84] -84]
Test Case:  81 | Input/Output: [[1 43 1 1] 1]
Test Case:  82 | Input/Output: [[68 -44 -44 -44] -44]
Test Case:  83 | Input/Output: [[-93 51 -93 -93] -93]
Test Case:  84 | Input/Output: [[52 -68 52 52] -68]
Test Case:  85 | Input/Output: [[-13 -100 -100 -100] -100]
Test Case:  86 | Input/Output: [[-18 -59 -59 -59] -59]
Test Case:  87 | Input/Output: [[17 17 89 17] 17]
Test Case:  88 | Input/Output: [[-77 -77 -77 30] -77]
Test Case:  89 | Input/Output: [[10 -48 10 10] -48]
Test Case:  90 | Input/Output: [[95 95 95 95] 95]
Test Case:  91 | Input/Output: [[-31 -92 -31 -31] -92]
Test Case:  92 | Input/Output: [[-88 -59 -59 -59] -88]
Test Case:  93 | Input/Output: [[87 22 22 22] 22]
Test Case:  94 | Input/Output: [[62 62 62 98] 62]
Test Case:  95 | Input/Output: [[87 -96 87 87] -96]
Test Case:  96 | Input/Output: [[89 -97 -97 -97] -97]
Test Case:  97 | Input/Output: [[76 76 76 20] 20]
Test Case:  98 | Input/Output: [[-62 -7 -7 -7] -62]
Test Case:  99 | Input/Output: [[77 34 77 77] 34]
Test Case: 100 | Input/Output: [(69 69 69 69) 69]
Test Case: 101 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 102 | Input/Output: [(40 40 40 40) 40]
Test Case: 103 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 104 | Input/Output: [(94 94 94 94) 94]
Test Case: 105 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 106 | Input/Output: [(23 23 23 23) 23]
Test Case: 107 | Input/Output: [(37 37 37 37) 37]
Test Case: 108 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 109 | Input/Output: [(13 13 13 13) 13]
Test Case: 110 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 111 | Input/Output: [(44 44 44 44) 44]
Test Case: 112 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 113 | Input/Output: [(31 31 31 31) 31]
Test Case: 114 | Input/Output: [(87 87 87 87) 87]
Test Case: 115 | Input/Output: [(7 7 7 7) 7]
Test Case: 116 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 117 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 118 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 119 | Input/Output: [(15 15 15 15) 15]
Test Case: 120 | Input/Output: [(29 29 29 29) 29]
Test Case: 121 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 122 | Input/Output: [(24 24 24 24) 24]
Test Case: 123 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 124 | Input/Output: [(78 78 78 78) 78]
Test Case: 125 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 126 | Input/Output: [(84 84 84 84) 84]
Test Case: 127 | Input/Output: [(66 66 66 66) 66]
Test Case: 128 | Input/Output: [(90 90 90 90) 90]
Test Case: 129 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 130 | Input/Output: [(46 46 46 46) 46]
Test Case: 131 | Input/Output: [(41 41 41 41) 41]
Test Case: 132 | Input/Output: [(14 14 14 14) 14]
Test Case: 133 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 134 | Input/Output: [(72 72 72 72) 72]
Test Case: 135 | Input/Output: [(1 1 1 1) 1]
Test Case: 136 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 137 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 138 | Input/Output: [(55 55 55 55) 55]
Test Case: 139 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 140 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 141 | Input/Output: [(19 19 19 19) 19]
Test Case: 142 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 143 | Input/Output: [(81 81 81 81) 81]
Test Case: 144 | Input/Output: [(38 38 38 38) 38]
Test Case: 145 | Input/Output: [(35 35 35 35) 35]
Test Case: 146 | Input/Output: [(25 25 25 25) 25]
Test Case: 147 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 148 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 149 | Input/Output: [(29 29 29 29) 29]
Test Case: 150 | Input/Output: [(63 63 63 63) 63]
Test Case: 151 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 152 | Input/Output: [(21 21 21 21) 21]
Test Case: 153 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 154 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 155 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 156 | Input/Output: [(8 8 8 8) 8]
Test Case: 157 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 158 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 159 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 160 | Input/Output: [(82 82 82 82) 82]
Test Case: 161 | Input/Output: [(18 18 18 18) 18]
Test Case: 162 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 163 | Input/Output: [(95 95 95 95) 95]
Test Case: 164 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 165 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 166 | Input/Output: [(21 21 21 21) 21]
Test Case: 167 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 168 | Input/Output: [(100 100 100 100) 100]
Test Case: 169 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 170 | Input/Output: [(92 92 92 92) 92]
Test Case: 171 | Input/Output: [(23 23 23 23) 23]
Test Case: 172 | Input/Output: [(85 85 85 85) 85]
Test Case: 173 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 174 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 175 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 176 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 177 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 178 | Input/Output: [(85 85 85 85) 85]
Test Case: 179 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 180 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 181 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 182 | Input/Output: [(43 43 43 43) 43]
Test Case: 183 | Input/Output: [(50 50 50 50) 50]
Test Case: 184 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 185 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 186 | Input/Output: [(33 33 33 33) 33]
Test Case: 187 | Input/Output: [(81 81 81 81) 81]
Test Case: 188 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 189 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 190 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 191 | Input/Output: [(63 63 63 63) 63]
Test Case: 192 | Input/Output: [(42 42 42 42) 42]
Test Case: 193 | Input/Output: [(65 65 65 65) 65]
Test Case: 194 | Input/Output: [(6 6 6 6) 6]
Test Case: 195 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 196 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 197 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 198 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 199 | Input/Output: [(91 91 91 91) 91]
Test Case: 200 | Input/Output: [(79 1 28 93) 1]
Test Case: 201 | Input/Output: [(82 20 78 49) 20]
Test Case: 202 | Input/Output: [(75 35 14 74) 14]
Test Case: 203 | Input/Output: [(71 94 85 31) 31]
Test Case: 204 | Input/Output: [(13 39 33 90) 13]
Test Case: 205 | Input/Output: [(28 77 94 98) 28]
Test Case: 206 | Input/Output: [(80 44 23 68) 23]
Test Case: 207 | Input/Output: [(22 60 18 56) 18]
Test Case: 208 | Input/Output: [(15 16 29 2) 2]
Test Case: 209 | Input/Output: [(66 28 34 7) 7]
Test Case: 210 | Input/Output: [(32 93 88 67) 32]
Test Case: 211 | Input/Output: [(33 72 76 9) 9]
Test Case: 212 | Input/Output: [(28 78 22 100) 22]
Test Case: 213 | Input/Output: [(84 41 5 2) 2]
Test Case: 214 | Input/Output: [(93 54 54 47) 47]
Test Case: 215 | Input/Output: [(36 61 66 65) 36]
Test Case: 216 | Input/Output: [(57 87 29 76) 29]
Test Case: 217 | Input/Output: [(71 36 25 82) 25]
Test Case: 218 | Input/Output: [(89 59 1 67) 1]
Test Case: 219 | Input/Output: [(75 80 99 80) 75]
Test Case: 220 | Input/Output: [(26 87 66 10) 10]
Test Case: 221 | Input/Output: [(38 57 36 43) 36]
Test Case: 222 | Input/Output: [(51 10 49 1) 1]
Test Case: 223 | Input/Output: [(63 24 66 93) 24]
Test Case: 224 | Input/Output: [(9 84 65 74) 9]
Test Case: 225 | Input/Output: [(36 93 69 26) 26]
Test Case: 226 | Input/Output: [(14 46 30 23) 14]
Test Case: 227 | Input/Output: [(26 47 87 63) 26]
Test Case: 228 | Input/Output: [(80 59 88 48) 48]
Test Case: 229 | Input/Output: [(21 80 52 38) 21]
Test Case: 230 | Input/Output: [(34 96 82 99) 34]
Test Case: 231 | Input/Output: [(23 83 94 11) 11]
Test Case: 232 | Input/Output: [(81 17 56 71) 17]
Test Case: 233 | Input/Output: [(37 75 98 44) 37]
Test Case: 234 | Input/Output: [(61 40 5 8) 5]
Test Case: 235 | Input/Output: [(12 5 58 75) 5]
Test Case: 236 | Input/Output: [(98 63 29 13) 13]
Test Case: 237 | Input/Output: [(98 18 61 73) 18]
Test Case: 238 | Input/Output: [(92 54 81 48) 48]
Test Case: 239 | Input/Output: [(86 85 14 83) 14]
Test Case: 240 | Input/Output: [(2 85 99 32) 2]
Test Case: 241 | Input/Output: [(79 24 32 32) 24]
Test Case: 242 | Input/Output: [(40 88 100 77) 40]
Test Case: 243 | Input/Output: [(72 63 91 27) 27]
Test Case: 244 | Input/Output: [(22 6 89 30) 6]
Test Case: 245 | Input/Output: [(95 90 38 25) 25]
Test Case: 246 | Input/Output: [(11 9 58 61) 9]
Test Case: 247 | Input/Output: [(62 78 61 10) 10]
Test Case: 248 | Input/Output: [(61 45 88 29) 29]
Test Case: 249 | Input/Output: [(90 52 98 91) 52]
Test Case: 250 | Input/Output: [(41 10 32 76) 10]
Test Case: 251 | Input/Output: [(27 99 44 44) 27]
Test Case: 252 | Input/Output: [(81 96 22 66) 22]
Test Case: 253 | Input/Output: [(1 83 16 22) 1]
Test Case: 254 | Input/Output: [(94 70 54 49) 49]
Test Case: 255 | Input/Output: [(95 47 58 39) 39]
Test Case: 256 | Input/Output: [(5 98 34 71) 5]
Test Case: 257 | Input/Output: [(9 42 1 18) 1]
Test Case: 258 | Input/Output: [(19 98 51 73) 19]
Test Case: 259 | Input/Output: [(47 91 100 13) 13]
Test Case: 260 | Input/Output: [(22 54 61 7) 7]
Test Case: 261 | Input/Output: [(46 66 20 10) 10]
Test Case: 262 | Input/Output: [(18 20 64 94) 18]
Test Case: 263 | Input/Output: [(10 21 17 98) 10]
Test Case: 264 | Input/Output: [(13 81 23 52) 13]
Test Case: 265 | Input/Output: [(63 22 95 74) 22]
Test Case: 266 | Input/Output: [(23 13 66 35) 13]
Test Case: 267 | Input/Output: [(64 29 55 26) 26]
Test Case: 268 | Input/Output: [(68 20 26 3) 3]
Test Case: 269 | Input/Output: [(84 97 27 17) 17]
Test Case: 270 | Input/Output: [(83 68 11 23) 11]
Test Case: 271 | Input/Output: [(80 91 82 63) 63]
Test Case: 272 | Input/Output: [(52 71 91 78) 52]
Test Case: 273 | Input/Output: [(84 31 20 53) 20]
Test Case: 274 | Input/Output: [(66 86 69 1) 1]
Test Case: 275 | Input/Output: [(29 55 100 85) 29]
Test Case: 276 | Input/Output: [(80 82 18 13) 13]
Test Case: 277 | Input/Output: [(86 69 88 37) 37]
Test Case: 278 | Input/Output: [(24 4 60 76) 4]
Test Case: 279 | Input/Output: [(76 66 63 12) 12]
Test Case: 280 | Input/Output: [(65 9 76 53) 9]
Test Case: 281 | Input/Output: [(85 34 35 98) 34]
Test Case: 282 | Input/Output: [(55 56 26 73) 26]
Test Case: 283 | Input/Output: [(2 41 26 9) 2]
Test Case: 284 | Input/Output: [(99 32 100 15) 15]
Test Case: 285 | Input/Output: [(14 67 6 29) 6]
Test Case: 286 | Input/Output: [(78 45 17 27) 17]
Test Case: 287 | Input/Output: [(49 38 9 6) 6]
Test Case: 288 | Input/Output: [(12 62 91 60) 12]
Test Case: 289 | Input/Output: [(15 72 11 20) 11]
Test Case: 290 | Input/Output: [(53 96 12 66) 12]
Test Case: 291 | Input/Output: [(94 79 74 33) 33]
Test Case: 292 | Input/Output: [(26 37 24 80) 24]
Test Case: 293 | Input/Output: [(0 74 63 73) 0]
Test Case: 294 | Input/Output: [(90 87 1 92) 1]
Test Case: 295 | Input/Output: [(55 5 31 21) 5]
Test Case: 296 | Input/Output: [(46 9 78 95) 9]
Test Case: 297 | Input/Output: [(57 85 53 34) 34]
Test Case: 298 | Input/Output: [(4 33 0 61) 0]
Test Case: 299 | Input/Output: [(63 12 83 2) 2]
Test Case: 300 | Input/Output: [(93 92 19 57) 19]
Test Case: 301 | Input/Output: [(4 50 23 69) 4]
Test Case: 302 | Input/Output: [(82 84 45 88) 45]
Test Case: 303 | Input/Output: [(25 35 39 91) 25]
Test Case: 304 | Input/Output: [(71 23 68 87) 23]
Test Case: 305 | Input/Output: [(18 95 18 11) 11]
Test Case: 306 | Input/Output: [(91 40 7 16) 7]
Test Case: 307 | Input/Output: [(53 88 97 71) 53]
Test Case: 308 | Input/Output: [(27 29 67 52) 27]
Test Case: 309 | Input/Output: [(59 15 93 37) 15]
Test Case: 310 | Input/Output: [(8 9 2 4) 2]
Test Case: 311 | Input/Output: [(66 93 55 59) 55]
Test Case: 312 | Input/Output: [(93 6 51 19) 6]
Test Case: 313 | Input/Output: [(3 9 86 80) 3]
Test Case: 314 | Input/Output: [(6 88 5 3) 3]
Test Case: 315 | Input/Output: [(99 68 59 63) 59]
Test Case: 316 | Input/Output: [(53 100 0 17) 0]
Test Case: 317 | Input/Output: [(0 74 52 83) 0]
Test Case: 318 | Input/Output: [(66 67 65 53) 53]
Test Case: 319 | Input/Output: [(49 0 66 69) 0]
Test Case: 320 | Input/Output: [(13 41 2 47) 2]
Test Case: 321 | Input/Output: [(84 7 58 1) 1]
Test Case: 322 | Input/Output: [(13 6 46 99) 6]
Test Case: 323 | Input/Output: [(14 58 21 80) 14]
Test Case: 324 | Input/Output: [(89 37 48 69) 37]
Test Case: 325 | Input/Output: [(44 52 46 87) 44]
Test Case: 326 | Input/Output: [(10 59 99 73) 10]
Test Case: 327 | Input/Output: [(30 51 21 32) 21]
Test Case: 328 | Input/Output: [(62 70 2 18) 2]
Test Case: 329 | Input/Output: [(97 77 96 12) 12]
Test Case: 330 | Input/Output: [(58 95 61 84) 58]
Test Case: 331 | Input/Output: [(39 68 71 44) 39]
Test Case: 332 | Input/Output: [(26 39 37 30) 26]
Test Case: 333 | Input/Output: [(64 96 76 37) 37]
Test Case: 334 | Input/Output: [(10 86 89 100) 10]
Test Case: 335 | Input/Output: [(55 11 25 64) 11]
Test Case: 336 | Input/Output: [(35 33 23 8) 8]
Test Case: 337 | Input/Output: [(30 73 43 76) 30]
Test Case: 338 | Input/Output: [(39 97 14 91) 14]
Test Case: 339 | Input/Output: [(91 0 29 94) 0]
Test Case: 340 | Input/Output: [(67 76 89 28) 28]
Test Case: 341 | Input/Output: [(32 3 21 67) 3]
Test Case: 342 | Input/Output: [(68 21 76 71) 21]
Test Case: 343 | Input/Output: [(39 99 38 88) 38]
Test Case: 344 | Input/Output: [(40 40 85 95) 40]
Test Case: 345 | Input/Output: [(80 96 4 12) 4]
Test Case: 346 | Input/Output: [(8 53 15 2) 2]
Test Case: 347 | Input/Output: [(78 43 25 84) 25]
Test Case: 348 | Input/Output: [(36 21 78 54) 21]
Test Case: 349 | Input/Output: [(11 88 27 12) 11]
Test Case: 350 | Input/Output: [(18 66 5 95) 5]
Test Case: 351 | Input/Output: [(32 18 56 82) 18]
Test Case: 352 | Input/Output: [(13 64 32 55) 13]
Test Case: 353 | Input/Output: [(29 0 57 78) 0]
Test Case: 354 | Input/Output: [(20 69 15 69) 15]
Test Case: 355 | Input/Output: [(58 76 55 13) 13]
Test Case: 356 | Input/Output: [(24 58 5 62) 5]
Test Case: 357 | Input/Output: [(5 41 46 86) 5]
Test Case: 358 | Input/Output: [(26 28 30 45) 26]
Test Case: 359 | Input/Output: [(48 26 32 35) 26]
Test Case: 360 | Input/Output: [(42 50 40 43) 40]
Test Case: 361 | Input/Output: [(48 44 23 9) 9]
Test Case: 362 | Input/Output: [(95 44 0 52) 0]
Test Case: 363 | Input/Output: [(30 35 5 86) 5]
Test Case: 364 | Input/Output: [(16 12 64 20) 12]
Test Case: 365 | Input/Output: [(17 16 48 99) 16]
Test Case: 366 | Input/Output: [(3 40 31 83) 3]
Test Case: 367 | Input/Output: [(56 52 19 11) 11]
Test Case: 368 | Input/Output: [(33 52 36 49) 33]
Test Case: 369 | Input/Output: [(1 93 46 83) 1]
Test Case: 370 | Input/Output: [(68 58 97 75) 58]
Test Case: 371 | Input/Output: [(1 49 74 74) 1]
Test Case: 372 | Input/Output: [(19 31 11 100) 11]
Test Case: 373 | Input/Output: [(20 7 3 59) 3]
Test Case: 374 | Input/Output: [(91 81 100 33) 33]
Test Case: 375 | Input/Output: [(63 86 97 24) 24]
Test Case: 376 | Input/Output: [(34 88 18 55) 18]
Test Case: 377 | Input/Output: [(20 33 52 79) 20]
Test Case: 378 | Input/Output: [(79 52 64 0) 0]
Test Case: 379 | Input/Output: [(41 99 36 66) 36]
Test Case: 380 | Input/Output: [(57 76 18 78) 18]
Test Case: 381 | Input/Output: [(50 24 61 18) 18]
Test Case: 382 | Input/Output: [(44 38 70 26) 26]
Test Case: 383 | Input/Output: [(48 28 82 19) 19]
Test Case: 384 | Input/Output: [(70 64 4 72) 4]
Test Case: 385 | Input/Output: [(58 49 14 97) 14]
Test Case: 386 | Input/Output: [(76 92 18 17) 17]
Test Case: 387 | Input/Output: [(35 79 46 83) 35]
Test Case: 388 | Input/Output: [(68 38 98 28) 28]
Test Case: 389 | Input/Output: [(54 25 88 36) 25]
Test Case: 390 | Input/Output: [(55 18 88 94) 18]
Test Case: 391 | Input/Output: [(71 47 71 27) 27]
Test Case: 392 | Input/Output: [(11 79 4 96) 4]
Test Case: 393 | Input/Output: [(15 96 21 77) 15]
Test Case: 394 | Input/Output: [(34 53 55 100) 34]
Test Case: 395 | Input/Output: [(79 48 91 53) 48]
Test Case: 396 | Input/Output: [(55 2 80 85) 2]
Test Case: 397 | Input/Output: [(25 0 60 60) 0]
Test Case: 398 | Input/Output: [(21 86 99 95) 21]
Test Case: 399 | Input/Output: [(32 29 46 36) 29]
Test Case: 400 | Input/Output: [(11 25 -39 38) -39]
Test Case: 401 | Input/Output: [(-27 -47 -5 1) -47]
Test Case: 402 | Input/Output: [(-62 -24 -94 -41) -94]
Test Case: 403 | Input/Output: [(-5 -42 25 52) -42]
Test Case: 404 | Input/Output: [(19 -31 49 92) -31]
Test Case: 405 | Input/Output: [(99 -44 49 27) -44]
Test Case: 406 | Input/Output: [(-27 18 -89 -46) -89]
Test Case: 407 | Input/Output: [(67 -9 16 -22) -22]
Test Case: 408 | Input/Output: [(-20 -68 19 21) -68]
Test Case: 409 | Input/Output: [(-58 -36 20 -21) -58]
Test Case: 410 | Input/Output: [(-67 -91 -82 -26) -91]
Test Case: 411 | Input/Output: [(-67 9 -83 45) -83]
Test Case: 412 | Input/Output: [(64 -6 12 94) -6]
Test Case: 413 | Input/Output: [(31 4 51 -12) -12]
Test Case: 414 | Input/Output: [(71 -38 41 88) -38]
Test Case: 415 | Input/Output: [(73 -29 -95 78) -95]
Test Case: 416 | Input/Output: [(-19 -69 -8 78) -69]
Test Case: 417 | Input/Output: [(97 11 -7 -46) -46]
Test Case: 418 | Input/Output: [(-73 8 80 -92) -92]
Test Case: 419 | Input/Output: [(-91 24 -59 73) -91]
Test Case: 420 | Input/Output: [(-80 -31 5 61) -80]
Test Case: 421 | Input/Output: [(-30 22 17 94) -30]
Test Case: 422 | Input/Output: [(-18 -53 92 -67) -67]
Test Case: 423 | Input/Output: [(-48 -66 -52 74) -66]
Test Case: 424 | Input/Output: [(-6 33 -57 16) -57]
Test Case: 425 | Input/Output: [(-60 -7 -70 -65) -70]
Test Case: 426 | Input/Output: [(58 -89 -33 -6) -89]
Test Case: 427 | Input/Output: [(-22 77 77 -39) -39]
Test Case: 428 | Input/Output: [(1 -19 -66 -32) -66]
Test Case: 429 | Input/Output: [(-26 27 -58 44) -58]
Test Case: 430 | Input/Output: [(-42 77 -38 -9) -42]
Test Case: 431 | Input/Output: [(45 53 -87 -42) -87]
Test Case: 432 | Input/Output: [(49 61 -44 -30) -44]
Test Case: 433 | Input/Output: [(-2 19 14 -86) -86]
Test Case: 434 | Input/Output: [(-10 73 48 -79) -79]
Test Case: 435 | Input/Output: [(-30 46 46 -74) -74]
Test Case: 436 | Input/Output: [(55 99 17 -72) -72]
Test Case: 437 | Input/Output: [(70 -57 -63 -81) -81]
Test Case: 438 | Input/Output: [(85 94 -74 87) -74]
Test Case: 439 | Input/Output: [(19 50 17 35) 17]
Test Case: 440 | Input/Output: [(-27 -73 6 5) -73]
Test Case: 441 | Input/Output: [(15 -34 -51 93) -51]
Test Case: 442 | Input/Output: [(-11 -5 -91 -3) -91]
Test Case: 443 | Input/Output: [(-27 -29 56 -22) -29]
Test Case: 444 | Input/Output: [(-64 35 88 87) -64]
Test Case: 445 | Input/Output: [(42 33 -78 57) -78]
Test Case: 446 | Input/Output: [(-5 28 -40 -89) -89]
Test Case: 447 | Input/Output: [(14 81 -3 -58) -58]
Test Case: 448 | Input/Output: [(84 -3 -70 91) -70]
Test Case: 449 | Input/Output: [(-79 73 98 23) -79]
Test Case: 450 | Input/Output: [(12 59 -45 89) -45]
Test Case: 451 | Input/Output: [(48 -87 -85 -61) -87]
Test Case: 452 | Input/Output: [(-38 -56 98 -29) -56]
Test Case: 453 | Input/Output: [(-42 -44 88 18) -44]
Test Case: 454 | Input/Output: [(18 -38 83 -17) -38]
Test Case: 455 | Input/Output: [(-70 -87 63 45) -87]
Test Case: 456 | Input/Output: [(-71 75 -49 53) -71]
Test Case: 457 | Input/Output: [(-77 44 11 35) -77]
Test Case: 458 | Input/Output: [(-14 -31 -26 -26) -31]
Test Case: 459 | Input/Output: [(-95 -1 3 85) -95]
Test Case: 460 | Input/Output: [(-13 75 83 -28) -28]
Test Case: 461 | Input/Output: [(74 -76 -100 -50) -100]
Test Case: 462 | Input/Output: [(79 46 42 2) 2]
Test Case: 463 | Input/Output: [(-7 41 88 -14) -14]
Test Case: 464 | Input/Output: [(43 -49 17 69) -49]
Test Case: 465 | Input/Output: [(-49 9 75 38) -49]
Test Case: 466 | Input/Output: [(-57 -69 27 -14) -69]
Test Case: 467 | Input/Output: [(-6 47 76 63) -6]
Test Case: 468 | Input/Output: [(-44 -81 11 2) -81]
Test Case: 469 | Input/Output: [(77 -52 -49 -68) -68]
Test Case: 470 | Input/Output: [(79 -95 -95 -10) -95]
Test Case: 471 | Input/Output: [(68 -21 -23 -35) -35]
Test Case: 472 | Input/Output: [(-8 -89 74 -58) -89]
Test Case: 473 | Input/Output: [(89 44 45 80) 44]
Test Case: 474 | Input/Output: [(-73 -36 -97 39) -97]
Test Case: 475 | Input/Output: [(-37 54 -28 -39) -39]
Test Case: 476 | Input/Output: [(-40 -39 32 -2) -40]
Test Case: 477 | Input/Output: [(-100 -64 -44 29) -100]
Test Case: 478 | Input/Output: [(-57 84 96 32) -57]
Test Case: 479 | Input/Output: [(55 -96 73 -72) -96]
Test Case: 480 | Input/Output: [(-58 38 4 13) -58]
Test Case: 481 | Input/Output: [(-92 -96 23 -13) -96]
Test Case: 482 | Input/Output: [(-34 -12 75 -88) -88]
Test Case: 483 | Input/Output: [(89 60 98 53) 53]
Test Case: 484 | Input/Output: [(-63 -81 -10 65) -81]
Test Case: 485 | Input/Output: [(-97 59 -62 66) -97]
Test Case: 486 | Input/Output: [(92 50 -81 95) -81]
Test Case: 487 | Input/Output: [(25 -45 31 43) -45]
Test Case: 488 | Input/Output: [(96 -8 -54 85) -54]
Test Case: 489 | Input/Output: [(67 65 -22 94) -22]
Test Case: 490 | Input/Output: [(-36 66 36 -30) -36]
Test Case: 491 | Input/Output: [(-85 27 -18 21) -85]
Test Case: 492 | Input/Output: [(-79 88 -69 0) -79]
Test Case: 493 | Input/Output: [(0 52 -9 -60) -60]
Test Case: 494 | Input/Output: [(49 -31 -27 27) -31]
Test Case: 495 | Input/Output: [(81 45 -24 -88) -88]
Test Case: 496 | Input/Output: [(69 -1 39 25) -1]
Test Case: 497 | Input/Output: [(62 -96 15 -93) -96]
Test Case: 498 | Input/Output: [(-39 50 72 -19) -39]
Test Case: 499 | Input/Output: [(24 49 -78 -32) -78]
Test Case: 500 | Input/Output: [(-77 48 -42 -20) -77]
Test Case: 501 | Input/Output: [(86 -50 -69 31) -69]
Test Case: 502 | Input/Output: [(43 67 -3 33) -3]
Test Case: 503 | Input/Output: [(83 66 39 95) 39]
Test Case: 504 | Input/Output: [(-99 2 -39 29) -99]
Test Case: 505 | Input/Output: [(20 -73 -95 6) -95]
Test Case: 506 | Input/Output: [(-98 -74 42 -70) -98]
Test Case: 507 | Input/Output: [(42 -70 58 -100) -100]
Test Case: 508 | Input/Output: [(39 58 30 58) 30]
Test Case: 509 | Input/Output: [(-52 90 -63 -4) -63]
Test Case: 510 | Input/Output: [(-76 -92 -52 -27) -92]
Test Case: 511 | Input/Output: [(-84 12 -15 -77) -84]
Test Case: 512 | Input/Output: [(21 87 61 99) 21]
Test Case: 513 | Input/Output: [(-37 80 3 9) -37]
Test Case: 514 | Input/Output: [(-49 -51 75 -9) -51]
Test Case: 515 | Input/Output: [(51 -51 88 15) -51]
Test Case: 516 | Input/Output: [(-79 95 -96 61) -96]
Test Case: 517 | Input/Output: [(-99 27 -83 -77) -99]
Test Case: 518 | Input/Output: [(-37 68 58 57) -37]
Test Case: 519 | Input/Output: [(-66 -44 -27 -15) -66]
Test Case: 520 | Input/Output: [(92 -55 12 32) -55]
Test Case: 521 | Input/Output: [(-20 -94 52 40) -94]
Test Case: 522 | Input/Output: [(70 71 97 60) 60]
Test Case: 523 | Input/Output: [(-29 -95 46 -30) -95]
Test Case: 524 | Input/Output: [(64 -64 48 -14) -64]
Test Case: 525 | Input/Output: [(70 -31 17 -94) -94]
Test Case: 526 | Input/Output: [(-25 96 -20 51) -25]
Test Case: 527 | Input/Output: [(52 90 1 -66) -66]
Test Case: 528 | Input/Output: [(44 61 -77 60) -77]
Test Case: 529 | Input/Output: [(1 -34 42 -58) -58]
Test Case: 530 | Input/Output: [(11 93 29 56) 11]
Test Case: 531 | Input/Output: [(64 -43 -11 46) -43]
Test Case: 532 | Input/Output: [(73 3 12 -5) -5]
Test Case: 533 | Input/Output: [(96 10 -97 -81) -97]
Test Case: 534 | Input/Output: [(70 -5 -20 -96) -96]
Test Case: 535 | Input/Output: [(67 87 80 -4) -4]
Test Case: 536 | Input/Output: [(-91 0 16 67) -91]
Test Case: 537 | Input/Output: [(22 -18 64 70) -18]
Test Case: 538 | Input/Output: [(73 -76 54 -58) -76]
Test Case: 539 | Input/Output: [(-99 -77 -19 47) -99]
Test Case: 540 | Input/Output: [(-3 15 82 -21) -21]
Test Case: 541 | Input/Output: [(-93 65 -57 -98) -98]
Test Case: 542 | Input/Output: [(13 -86 63 42) -86]
Test Case: 543 | Input/Output: [(-92 -6 83 -59) -92]
Test Case: 544 | Input/Output: [(-46 -7 -86 72) -86]
Test Case: 545 | Input/Output: [(32 -73 4 -81) -81]
Test Case: 546 | Input/Output: [(-74 -83 41 75) -83]
Test Case: 547 | Input/Output: [(34 53 -23 -88) -88]
Test Case: 548 | Input/Output: [(-94 71 100 4) -94]
Test Case: 549 | Input/Output: [(59 91 58 31) 31]
Test Case: 550 | Input/Output: [(-87 50 -73 8) -87]
Test Case: 551 | Input/Output: [(94 95 -89 79) -89]
Test Case: 552 | Input/Output: [(-79 -84 6 77) -84]
Test Case: 553 | Input/Output: [(26 66 75 -98) -98]
Test Case: 554 | Input/Output: [(42 0 -18 26) -18]
Test Case: 555 | Input/Output: [(35 48 -72 -28) -72]
Test Case: 556 | Input/Output: [(34 -88 19 3) -88]
Test Case: 557 | Input/Output: [(84 -31 -12 91) -31]
Test Case: 558 | Input/Output: [(40 -52 -83 -60) -83]
Test Case: 559 | Input/Output: [(-14 -5 -49 19) -49]
Test Case: 560 | Input/Output: [(-90 -10 -10 -81) -90]
Test Case: 561 | Input/Output: [(-16 -22 65 2) -22]
Test Case: 562 | Input/Output: [(-56 -26 -34 -2) -56]
Test Case: 563 | Input/Output: [(65 12 -57 78) -57]
Test Case: 564 | Input/Output: [(1 92 -71 2) -71]
Test Case: 565 | Input/Output: [(-67 -26 53 -64) -67]
Test Case: 566 | Input/Output: [(18 -6 5 -39) -39]
Test Case: 567 | Input/Output: [(13 99 13 -44) -44]
Test Case: 568 | Input/Output: [(-70 84 70 36) -70]
Test Case: 569 | Input/Output: [(1 -13 -56 50) -56]
Test Case: 570 | Input/Output: [(9 -4 -14 -25) -25]
Test Case: 571 | Input/Output: [(-77 -11 52 15) -77]
Test Case: 572 | Input/Output: [(-22 47 -30 67) -30]
Test Case: 573 | Input/Output: [(27 -24 -71 49) -71]
Test Case: 574 | Input/Output: [(51 82 -20 -45) -45]
Test Case: 575 | Input/Output: [(-32 78 -36 81) -36]
Test Case: 576 | Input/Output: [(95 -12 25 -22) -22]
Test Case: 577 | Input/Output: [(33 14 18 -2) -2]
Test Case: 578 | Input/Output: [(-64 -38 -17 -48) -64]
Test Case: 579 | Input/Output: [(86 -98 -81 -47) -98]
Test Case: 580 | Input/Output: [(-18 -36 90 -4) -36]
Test Case: 581 | Input/Output: [(97 -69 10 38) -69]
Test Case: 582 | Input/Output: [(-70 -7 -32 64) -70]
Test Case: 583 | Input/Output: [(74 32 43 0) 0]
Test Case: 584 | Input/Output: [(-21 -35 -69 13) -69]
Test Case: 585 | Input/Output: [(5 -13 43 50) -13]
Test Case: 586 | Input/Output: [(-27 -43 -37 -87) -87]
Test Case: 587 | Input/Output: [(4 -76 -58 -82) -82]
Test Case: 588 | Input/Output: [(-18 -17 37 -48) -48]
Test Case: 589 | Input/Output: [(-33 -33 -84 -61) -84]
Test Case: 590 | Input/Output: [(-51 24 72 -38) -51]
Test Case: 591 | Input/Output: [(22 77 -88 34) -88]
Test Case: 592 | Input/Output: [(16 -47 13 28) -47]
Test Case: 593 | Input/Output: [(-76 -9 68 42) -76]
Test Case: 594 | Input/Output: [(75 -84 62 21) -84]
Test Case: 595 | Input/Output: [(-15 -92 -11 36) -92]
Test Case: 596 | Input/Output: [(21 -99 95 -78) -99]
Test Case: 597 | Input/Output: [(-2 50 89 -25) -25]
Test Case: 598 | Input/Output: [(-96 -93 59 -78) -96]
Test Case: 599 | Input/Output: [(11 91 -11 7) -11]
Test Case: 600 | Input/Output: [(30 -79 -89 3) -89]
Test Case: 601 | Input/Output: [(94 34 77 82) 34]
Test Case: 602 | Input/Output: [(-10 16 -12 1) -12]
Test Case: 603 | Input/Output: [(-81 73 -86 -20) -86]
Test Case: 604 | Input/Output: [(32 -32 -58 -57) -58]
Test Case: 605 | Input/Output: [(1 -57 -59 -31) -59]
Test Case: 606 | Input/Output: [(45 -89 -25 -48) -89]
Test Case: 607 | Input/Output: [(78 -48 -8 34) -48]
Test Case: 608 | Input/Output: [(-25 22 80 -47) -47]
Test Case: 609 | Input/Output: [(-57 -41 49 -13) -57]
Test Case: 610 | Input/Output: [(-19 10 38 48) -19]
Test Case: 611 | Input/Output: [(-69 -20 56 71) -69]
Test Case: 612 | Input/Output: [(28 2 97 94) 2]
Test Case: 613 | Input/Output: [(6 -77 -19 -48) -77]
Test Case: 614 | Input/Output: [(2 100 96 -18) -18]
Test Case: 615 | Input/Output: [(-96 62 -55 -85) -96]
Test Case: 616 | Input/Output: [(-19 -93 90 -73) -93]
Test Case: 617 | Input/Output: [(-70 43 -12 -91) -91]
Test Case: 618 | Input/Output: [(77 49 -84 -19) -84]
Test Case: 619 | Input/Output: [(27 -48 86 67) -48]
Test Case: 620 | Input/Output: [(37 -69 -3 69) -69]
Test Case: 621 | Input/Output: [(89 1 -96 91) -96]
Test Case: 622 | Input/Output: [(93 72 19 -92) -92]
Test Case: 623 | Input/Output: [(-24 53 -67 -29) -67]
Test Case: 624 | Input/Output: [(-35 35 92 63) -35]
Test Case: 625 | Input/Output: [(98 -98 71 7) -98]
Test Case: 626 | Input/Output: [(88 7 -83 -62) -83]
Test Case: 627 | Input/Output: [(16 42 -70 -46) -70]
Test Case: 628 | Input/Output: [(-17 42 -13 28) -17]
Test Case: 629 | Input/Output: [(72 -44 -73 26) -73]
Test Case: 630 | Input/Output: [(70 -25 50 29) -25]
Test Case: 631 | Input/Output: [(-93 -1 -29 17) -93]
Test Case: 632 | Input/Output: [(-6 -52 5 68) -52]
Test Case: 633 | Input/Output: [(-83 -59 -98 99) -98]
Test Case: 634 | Input/Output: [(25 81 -44 13) -44]
Test Case: 635 | Input/Output: [(-45 3 58 -44) -45]
Test Case: 636 | Input/Output: [(74 -99 11 99) -99]
Test Case: 637 | Input/Output: [(3 -46 1 -24) -46]
Test Case: 638 | Input/Output: [(-47 52 15 -57) -57]
Test Case: 639 | Input/Output: [(71 66 49 57) 49]
Test Case: 640 | Input/Output: [(-16 -70 -3 15) -70]
Test Case: 641 | Input/Output: [(-31 20 98 -98) -98]
Test Case: 642 | Input/Output: [(78 82 45 67) 45]
Test Case: 643 | Input/Output: [(-50 50 61 89) -50]
Test Case: 644 | Input/Output: [(-69 -64 -65 91) -69]
Test Case: 645 | Input/Output: [(-6 92 -71 50) -71]
Test Case: 646 | Input/Output: [(-50 -91 49 -75) -91]
Test Case: 647 | Input/Output: [(82 -9 -72 89) -72]
Test Case: 648 | Input/Output: [(-64 -67 -7 -77) -77]
Test Case: 649 | Input/Output: [(28 -62 -20 96) -62]
Test Case: 650 | Input/Output: [(71 -91 -93 38) -93]
Test Case: 651 | Input/Output: [(-41 81 -2 19) -41]
Test Case: 652 | Input/Output: [(41 55 -15 29) -15]
Test Case: 653 | Input/Output: [(41 57 69 17) 17]
Test Case: 654 | Input/Output: [(-93 -35 -87 93) -93]
Test Case: 655 | Input/Output: [(-100 37 -3 92) -100]
Test Case: 656 | Input/Output: [(7 -18 76 28) -18]
Test Case: 657 | Input/Output: [(57 61 -59 -89) -89]
Test Case: 658 | Input/Output: [(94 -11 62 53) -11]
Test Case: 659 | Input/Output: [(35 84 67 -69) -69]
Test Case: 660 | Input/Output: [(32 -2 -34 3) -34]
Test Case: 661 | Input/Output: [(-22 81 82 89) -22]
Test Case: 662 | Input/Output: [(85 74 84 40) 40]
Test Case: 663 | Input/Output: [(60 -20 0 -24) -24]
Test Case: 664 | Input/Output: [(36 -9 -77 80) -77]
Test Case: 665 | Input/Output: [(89 -90 21 34) -90]
Test Case: 666 | Input/Output: [(-12 -41 8 69) -41]
Test Case: 667 | Input/Output: [(62 -2 28 -50) -50]
Test Case: 668 | Input/Output: [(-6 40 28 59) -6]
Test Case: 669 | Input/Output: [(28 -31 -71 37) -71]
Test Case: 670 | Input/Output: [(-55 -83 -74 -16) -83]
Test Case: 671 | Input/Output: [(-8 45 83 48) -8]
Test Case: 672 | Input/Output: [(-28 -77 -47 53) -77]
Test Case: 673 | Input/Output: [(-31 10 -45 94) -45]
Test Case: 674 | Input/Output: [(-3 -42 73 -92) -92]
Test Case: 675 | Input/Output: [(-5 25 -2 10) -5]
Test Case: 676 | Input/Output: [(87 -79 86 -80) -80]
Test Case: 677 | Input/Output: [(-76 81 -12 94) -76]
Test Case: 678 | Input/Output: [(-72 88 -17 -48) -72]
Test Case: 679 | Input/Output: [(62 -38 65 99) -38]
Test Case: 680 | Input/Output: [(72 -85 -56 61) -85]
Test Case: 681 | Input/Output: [(37 80 -15 -61) -61]
Test Case: 682 | Input/Output: [(36 -12 -99 -58) -99]
Test Case: 683 | Input/Output: [(73 79 -37 -95) -95]
Test Case: 684 | Input/Output: [(55 -48 -85 31) -85]
Test Case: 685 | Input/Output: [(75 55 16 -21) -21]
Test Case: 686 | Input/Output: [(92 29 -48 29) -48]
Test Case: 687 | Input/Output: [(36 38 -3 -83) -83]
Test Case: 688 | Input/Output: [(-56 -62 -88 64) -88]
Test Case: 689 | Input/Output: [(29 51 28 -38) -38]
Test Case: 690 | Input/Output: [(62 69 -59 -48) -59]
Test Case: 691 | Input/Output: [(76 71 -61 -57) -61]
Test Case: 692 | Input/Output: [(-46 -78 -16 -58) -78]
Test Case: 693 | Input/Output: [(-96 -84 96 18) -96]
Test Case: 694 | Input/Output: [(-12 92 -61 -37) -61]
Test Case: 695 | Input/Output: [(90 -54 8 18) -54]
Test Case: 696 | Input/Output: [(32 -81 -13 -28) -81]
Test Case: 697 | Input/Output: [(83 -3 97 -48) -48]
Test Case: 698 | Input/Output: [(88 -52 -95 55) -95]
Test Case: 699 | Input/Output: [(-74 89 -32 -28) -74]
Test Case: 700 | Input/Output: [(-38 -85 -76 -43) -85]
Test Case: 701 | Input/Output: [(-60 -35 28 61) -60]
Test Case: 702 | Input/Output: [(-26 -53 -83 -76) -83]
Test Case: 703 | Input/Output: [(54 18 -79 -42) -79]
Test Case: 704 | Input/Output: [(-46 26 -46 -89) -89]
Test Case: 705 | Input/Output: [(-95 93 46 -66) -95]
Test Case: 706 | Input/Output: [(19 -81 -10 49) -81]
Test Case: 707 | Input/Output: [(85 -47 62 -78) -78]
Test Case: 708 | Input/Output: [(-60 -90 -81 92) -90]
Test Case: 709 | Input/Output: [(96 -76 -33 -76) -76]
Test Case: 710 | Input/Output: [(27 10 0 -90) -90]
Test Case: 711 | Input/Output: [(-75 -56 70 81) -75]
Test Case: 712 | Input/Output: [(-71 93 30 71) -71]
Test Case: 713 | Input/Output: [(35 18 1 -77) -77]
Test Case: 714 | Input/Output: [(89 -12 -35 30) -35]
Test Case: 715 | Input/Output: [(68 -62 -21 51) -62]
Test Case: 716 | Input/Output: [(81 -34 -40 59) -40]
Test Case: 717 | Input/Output: [(-61 55 22 53) -61]
Test Case: 718 | Input/Output: [(71 46 -60 -51) -60]
Test Case: 719 | Input/Output: [(54 -6 14 -56) -56]
Test Case: 720 | Input/Output: [(73 -48 -62 8) -62]
Test Case: 721 | Input/Output: [(1 -9 -26 -95) -95]
Test Case: 722 | Input/Output: [(-68 -21 -56 -42) -68]
Test Case: 723 | Input/Output: [(98 -12 4 -42) -42]
Test Case: 724 | Input/Output: [(87 -52 4 -23) -52]
Test Case: 725 | Input/Output: [(70 27 31 -85) -85]
Test Case: 726 | Input/Output: [(-84 19 39 -40) -84]
Test Case: 727 | Input/Output: [(68 -29 77 -42) -42]
Test Case: 728 | Input/Output: [(-97 -100 51 -91) -100]
Test Case: 729 | Input/Output: [(54 -58 -73 -38) -73]
Test Case: 730 | Input/Output: [(17 -55 -86 -96) -96]
Test Case: 731 | Input/Output: [(48 91 48 -84) -84]
Test Case: 732 | Input/Output: [(53 -76 -96 47) -96]
Test Case: 733 | Input/Output: [(36 -65 -46 -15) -65]
Test Case: 734 | Input/Output: [(-94 7 89 -79) -94]
Test Case: 735 | Input/Output: [(55 57 -11 -15) -15]
Test Case: 736 | Input/Output: [(-87 -69 -43 43) -87]
Test Case: 737 | Input/Output: [(2 72 32 48) 2]
Test Case: 738 | Input/Output: [(-96 -9 -54 -44) -96]
Test Case: 739 | Input/Output: [(31 83 100 61) 31]
Test Case: 740 | Input/Output: [(-8 -55 -70 -18) -70]
Test Case: 741 | Input/Output: [(65 88 78 85) 65]
Test Case: 742 | Input/Output: [(79 4 92 -65) -65]
Test Case: 743 | Input/Output: [(55 -5 -11 32) -11]
Test Case: 744 | Input/Output: [(71 30 -43 99) -43]
Test Case: 745 | Input/Output: [(-78 -76 -35 0) -78]
Test Case: 746 | Input/Output: [(84 57 17 75) 17]
Test Case: 747 | Input/Output: [(-22 -26 85 -7) -26]
Test Case: 748 | Input/Output: [(-16 100 -8 -7) -16]
Test Case: 749 | Input/Output: [(-90 -35 -66 -50) -90]
Test Case: 750 | Input/Output: [(-9 -22 -92 -83) -92]
Test Case: 751 | Input/Output: [(11 -80 89 67) -80]
Test Case: 752 | Input/Output: [(41 63 30 -75) -75]
Test Case: 753 | Input/Output: [(33 93 -4 -38) -38]
Test Case: 754 | Input/Output: [(95 9 1 65) 1]
Test Case: 755 | Input/Output: [(-23 -75 0 55) -75]
Test Case: 756 | Input/Output: [(25 95 -33 -48) -48]
Test Case: 757 | Input/Output: [(-55 -87 -94 -40) -94]
Test Case: 758 | Input/Output: [(-17 14 -15 8) -17]
Test Case: 759 | Input/Output: [(31 -46 -25 -94) -94]
Test Case: 760 | Input/Output: [(84 -64 46 -52) -64]
Test Case: 761 | Input/Output: [(22 42 -20 52) -20]
Test Case: 762 | Input/Output: [(67 -85 -47 -12) -85]
Test Case: 763 | Input/Output: [(-47 -61 31 61) -61]
Test Case: 764 | Input/Output: [(-43 25 15 -61) -61]
Test Case: 765 | Input/Output: [(98 -56 38 57) -56]
Test Case: 766 | Input/Output: [(25 92 -24 65) -24]
Test Case: 767 | Input/Output: [(-9 72 28 100) -9]
Test Case: 768 | Input/Output: [(80 7 99 -65) -65]
Test Case: 769 | Input/Output: [(-21 -96 3 82) -96]
Test Case: 770 | Input/Output: [(26 -40 -71 75) -71]
Test Case: 771 | Input/Output: [(98 -88 98 -23) -88]
Test Case: 772 | Input/Output: [(-98 24 25 14) -98]
Test Case: 773 | Input/Output: [(-10 35 60 -71) -71]
Test Case: 774 | Input/Output: [(-5 33 -38 88) -38]
Test Case: 775 | Input/Output: [(-63 -44 -76 -33) -76]
Test Case: 776 | Input/Output: [(43 -25 -91 23) -91]
Test Case: 777 | Input/Output: [(65 23 -36 56) -36]
Test Case: 778 | Input/Output: [(-54 21 -2 -34) -54]
Test Case: 779 | Input/Output: [(-31 41 -83 -55) -83]
Test Case: 780 | Input/Output: [(-100 -36 91 -99) -100]
Test Case: 781 | Input/Output: [(47 -38 -29 -14) -38]
Test Case: 782 | Input/Output: [(-60 74 81 63) -60]
Test Case: 783 | Input/Output: [(-80 68 -63 -88) -88]
Test Case: 784 | Input/Output: [(-37 33 -88 -19) -88]
Test Case: 785 | Input/Output: [(77 -1 77 34) -1]
Test Case: 786 | Input/Output: [(-49 -46 -91 76) -91]
Test Case: 787 | Input/Output: [(85 -93 -61 -68) -93]
Test Case: 788 | Input/Output: [(-70 61 100 26) -70]
Test Case: 789 | Input/Output: [(71 -20 9 -88) -88]
Test Case: 790 | Input/Output: [(4 -26 -16 -54) -54]
Test Case: 791 | Input/Output: [(56 -87 48 -74) -87]
Test Case: 792 | Input/Output: [(-12 -24 -29 -18) -29]
Test Case: 793 | Input/Output: [(-83 63 -91 23) -91]
Test Case: 794 | Input/Output: [(-72 -36 -51 86) -72]
Test Case: 795 | Input/Output: [(49 58 19 0) 0]
Test Case: 796 | Input/Output: [(17 -75 -68 19) -75]
Test Case: 797 | Input/Output: [(38 -24 -100 6) -100]
Test Case: 798 | Input/Output: [(48 -31 -64 -26) -64]
Test Case: 799 | Input/Output: [(-17 -31 96 -72) -72]
Test Case: 800 | Input/Output: [(13 -61 53 -1) -61]
Test Case: 801 | Input/Output: [(50 -24 -26 -35) -35]
Test Case: 802 | Input/Output: [(-7 -43 -57 11) -57]
Test Case: 803 | Input/Output: [(-79 82 5 -17) -79]
Test Case: 804 | Input/Output: [(73 56 34 -59) -59]
Test Case: 805 | Input/Output: [(-12 -62 -31 -16) -62]
Test Case: 806 | Input/Output: [(30 -39 -72 -58) -72]
Test Case: 807 | Input/Output: [(-79 -66 -54 4) -79]
Test Case: 808 | Input/Output: [(30 80 -47 -60) -60]
Test Case: 809 | Input/Output: [(91 35 29 -19) -19]
Test Case: 810 | Input/Output: [(100 96 -66 65) -66]
Test Case: 811 | Input/Output: [(-68 46 -76 -60) -76]
Test Case: 812 | Input/Output: [(16 55 0 -22) -22]
Test Case: 813 | Input/Output: [(-55 -74 -31 88) -74]
Test Case: 814 | Input/Output: [(-15 86 57 91) -15]
Test Case: 815 | Input/Output: [(-52 -52 6 -80) -80]
Test Case: 816 | Input/Output: [(87 -19 -23 42) -23]
Test Case: 817 | Input/Output: [(72 87 14 81) 14]
Test Case: 818 | Input/Output: [(19 46 34 82) 19]
Test Case: 819 | Input/Output: [(85 97 -68 -1) -68]
Test Case: 820 | Input/Output: [(-97 -16 21 -15) -97]
Test Case: 821 | Input/Output: [(-1 81 63 41) -1]
Test Case: 822 | Input/Output: [(-39 -92 -86 -100) -100]
Test Case: 823 | Input/Output: [(15 -36 77 -3) -36]
Test Case: 824 | Input/Output: [(46 -29 94 34) -29]
Test Case: 825 | Input/Output: [(37 89 84 -35) -35]
Test Case: 826 | Input/Output: [(41 37 53 26) 26]
Test Case: 827 | Input/Output: [(-54 -20 24 2) -54]
Test Case: 828 | Input/Output: [(-77 -69 12 -5) -77]
Test Case: 829 | Input/Output: [(-32 74 89 -7) -32]
Test Case: 830 | Input/Output: [(72 28 -24 34) -24]
Test Case: 831 | Input/Output: [(73 -14 9 -2) -14]
Test Case: 832 | Input/Output: [(10 23 20 13) 10]
Test Case: 833 | Input/Output: [(-4 -78 81 -95) -95]
Test Case: 834 | Input/Output: [(98 73 19 12) 12]
Test Case: 835 | Input/Output: [(-9 47 93 30) -9]
Test Case: 836 | Input/Output: [(59 -81 13 -5) -81]
Test Case: 837 | Input/Output: [(5 -28 81 -99) -99]
Test Case: 838 | Input/Output: [(90 7 37 -29) -29]
Test Case: 839 | Input/Output: [(-21 96 47 -65) -65]
Test Case: 840 | Input/Output: [(-15 72 12 66) -15]
Test Case: 841 | Input/Output: [(61 50 -19 -84) -84]
Test Case: 842 | Input/Output: [(-71 40 73 25) -71]
Test Case: 843 | Input/Output: [(33 -22 86 66) -22]
Test Case: 844 | Input/Output: [(72 -29 -64 17) -64]
Test Case: 845 | Input/Output: [(46 -3 60 -36) -36]
Test Case: 846 | Input/Output: [(-60 48 17 68) -60]
Test Case: 847 | Input/Output: [(-8 -34 70 79) -34]
Test Case: 848 | Input/Output: [(-11 -41 9 9) -41]
Test Case: 849 | Input/Output: [(25 -38 62 51) -38]
Test Case: 850 | Input/Output: [(-49 -63 -79 -55) -79]
Test Case: 851 | Input/Output: [(15 90 69 -55) -55]
Test Case: 852 | Input/Output: [(87 -30 -74 -76) -76]
Test Case: 853 | Input/Output: [(-100 -86 -100 97) -100]
Test Case: 854 | Input/Output: [(-95 -40 -20 96) -95]
Test Case: 855 | Input/Output: [(95 22 92 54) 22]
Test Case: 856 | Input/Output: [(73 -27 48 99) -27]
Test Case: 857 | Input/Output: [(-71 69 26 20) -71]
Test Case: 858 | Input/Output: [(69 39 -52 4) -52]
Test Case: 859 | Input/Output: [(40 16 -63 8) -63]
Test Case: 860 | Input/Output: [(90 93 82 -29) -29]
Test Case: 861 | Input/Output: [(52 58 -95 50) -95]
Test Case: 862 | Input/Output: [(-40 -39 6 71) -40]
Test Case: 863 | Input/Output: [(-55 -38 10 2) -55]
Test Case: 864 | Input/Output: [(98 -33 77 65) -33]
Test Case: 865 | Input/Output: [(-10 7 49 -60) -60]
Test Case: 866 | Input/Output: [(-38 12 87 78) -38]
Test Case: 867 | Input/Output: [(-1 -42 99 34) -42]
Test Case: 868 | Input/Output: [(13 51 5 -96) -96]
Test Case: 869 | Input/Output: [(20 -24 -88 68) -88]
Test Case: 870 | Input/Output: [(97 28 43 -1) -1]
Test Case: 871 | Input/Output: [(-69 -1 55 -19) -69]
Test Case: 872 | Input/Output: [(-27 -33 15 33) -33]
Test Case: 873 | Input/Output: [(-95 34 14 -84) -95]
Test Case: 874 | Input/Output: [(-10 56 98 34) -10]
Test Case: 875 | Input/Output: [(-11 25 61 90) -11]
Test Case: 876 | Input/Output: [(-32 54 99 -87) -87]
Test Case: 877 | Input/Output: [(77 -34 64 77) -34]
Test Case: 878 | Input/Output: [(41 -65 85 -23) -65]
Test Case: 879 | Input/Output: [(-93 -56 38 12) -93]
Test Case: 880 | Input/Output: [(65 76 81 -59) -59]
Test Case: 881 | Input/Output: [(-97 80 -73 58) -97]
Test Case: 882 | Input/Output: [(-67 -59 37 58) -67]
Test Case: 883 | Input/Output: [(16 46 26 -97) -97]
Test Case: 884 | Input/Output: [(-27 18 -43 69) -43]
Test Case: 885 | Input/Output: [(-8 93 48 -84) -84]
Test Case: 886 | Input/Output: [(74 -41 -7 33) -41]
Test Case: 887 | Input/Output: [(-81 43 -23 -56) -81]
Test Case: 888 | Input/Output: [(97 26 -38 26) -38]
Test Case: 889 | Input/Output: [(76 15 -52 38) -52]
Test Case: 890 | Input/Output: [(-43 -20 -52 57) -52]
Test Case: 891 | Input/Output: [(-31 47 -64 53) -64]
Test Case: 892 | Input/Output: [(-49 56 66 95) -49]
Test Case: 893 | Input/Output: [(98 40 -40 -22) -40]
Test Case: 894 | Input/Output: [(36 -60 -74 79) -74]
Test Case: 895 | Input/Output: [(22 81 -28 -65) -65]
Test Case: 896 | Input/Output: [(13 35 -50 -33) -50]
Test Case: 897 | Input/Output: [(-27 83 70 35) -27]
Test Case: 898 | Input/Output: [(95 -30 -20 -1) -30]
Test Case: 899 | Input/Output: [(-57 -18 14 -81) -81]
Test Case: 900 | Input/Output: [(21 0 61 -13) -13]
Test Case: 901 | Input/Output: [(-16 -53 44 -48) -53]
Test Case: 902 | Input/Output: [(-3 0 -54 17) -54]
Test Case: 903 | Input/Output: [(-11 -28 60 9) -28]
Test Case: 904 | Input/Output: [(3 -17 89 -58) -58]
Test Case: 905 | Input/Output: [(60 78 -62 -88) -88]
Test Case: 906 | Input/Output: [(17 -16 -28 98) -28]
Test Case: 907 | Input/Output: [(-43 -82 61 49) -82]
Test Case: 908 | Input/Output: [(-26 85 69 36) -26]
Test Case: 909 | Input/Output: [(7 -64 93 70) -64]
Test Case: 910 | Input/Output: [(-62 -33 -26 -77) -77]
Test Case: 911 | Input/Output: [(66 -96 -6 23) -96]
Test Case: 912 | Input/Output: [(-45 -63 36 -20) -63]
Test Case: 913 | Input/Output: [(-21 95 -84 13) -84]
Test Case: 914 | Input/Output: [(20 -89 32 -39) -89]
Test Case: 915 | Input/Output: [(-70 18 85 -74) -74]
Test Case: 916 | Input/Output: [(16 98 47 -48) -48]
Test Case: 917 | Input/Output: [(41 -4 -41 -54) -54]
Test Case: 918 | Input/Output: [(-95 -74 -43 -19) -95]
Test Case: 919 | Input/Output: [(-71 -77 -6 97) -77]
Test Case: 920 | Input/Output: [(-12 -99 -20 21) -99]
Test Case: 921 | Input/Output: [(-23 -7 -69 3) -69]
Test Case: 922 | Input/Output: [(78 -50 -13 -9) -50]
Test Case: 923 | Input/Output: [(-8 -87 19 74) -87]
Test Case: 924 | Input/Output: [(-26 80 94 83) -26]
Test Case: 925 | Input/Output: [(-43 -72 -11 5) -72]
Test Case: 926 | Input/Output: [(-52 -30 74 71) -52]
Test Case: 927 | Input/Output: [(-42 -61 -33 -66) -66]
Test Case: 928 | Input/Output: [(-39 81 -96 -42) -96]
Test Case: 929 | Input/Output: [(20 76 -21 7) -21]
Test Case: 930 | Input/Output: [(60 57 -32 65) -32]
Test Case: 931 | Input/Output: [(-9 -64 -83 -35) -83]
Test Case: 932 | Input/Output: [(-14 -35 65 18) -35]
Test Case: 933 | Input/Output: [(-76 -91 37 89) -91]
Test Case: 934 | Input/Output: [(25 97 -76 49) -76]
Test Case: 935 | Input/Output: [(74 -60 -51 18) -60]
Test Case: 936 | Input/Output: [(-89 -8 41 40) -89]
Test Case: 937 | Input/Output: [(-69 -85 -7 -17) -85]
Test Case: 938 | Input/Output: [(20 -76 -62 38) -76]
Test Case: 939 | Input/Output: [(16 21 -49 64) -49]
Test Case: 940 | Input/Output: [(24 30 -97 44) -97]
Test Case: 941 | Input/Output: [(50 -59 36 26) -59]
Test Case: 942 | Input/Output: [(-48 46 15 80) -48]
Test Case: 943 | Input/Output: [(6 -72 57 -56) -72]
Test Case: 944 | Input/Output: [(15 -100 -58 89) -100]
Test Case: 945 | Input/Output: [(0 51 -76 -45) -76]
Test Case: 946 | Input/Output: [(40 64 -16 -73) -73]
Test Case: 947 | Input/Output: [(47 -20 -33 -8) -33]
Test Case: 948 | Input/Output: [(-45 100 8 -3) -45]
Test Case: 949 | Input/Output: [(-38 -7 -94 37) -94]
Test Case: 950 | Input/Output: [(-11 63 -11 74) -11]
Test Case: 951 | Input/Output: [(46 -100 -50 41) -100]
Test Case: 952 | Input/Output: [(-23 -89 83 -25) -89]
Test Case: 953 | Input/Output: [(-6 -24 -64 -61) -64]
Test Case: 954 | Input/Output: [(-71 81 38 -56) -71]
Test Case: 955 | Input/Output: [(10 76 -26 54) -26]
Test Case: 956 | Input/Output: [(-4 -24 47 66) -24]
Test Case: 957 | Input/Output: [(-46 81 -18 95) -46]
Test Case: 958 | Input/Output: [(-41 14 -87 0) -87]
Test Case: 959 | Input/Output: [(-7 88 -68 -68) -68]
Test Case: 960 | Input/Output: [(78 -55 16 41) -55]
Test Case: 961 | Input/Output: [(-67 -88 -56 -28) -88]
Test Case: 962 | Input/Output: [(9 46 34 69) 9]
Test Case: 963 | Input/Output: [(-18 84 -86 -85) -86]
Test Case: 964 | Input/Output: [(12 54 -45 49) -45]
Test Case: 965 | Input/Output: [(99 -73 -17 -5) -73]
Test Case: 966 | Input/Output: [(76 -89 32 -7) -89]
Test Case: 967 | Input/Output: [(-36 17 69 98) -36]
Test Case: 968 | Input/Output: [(-26 -36 -78 34) -78]
Test Case: 969 | Input/Output: [(85 4 6 29) 4]
Test Case: 970 | Input/Output: [(83 -6 -87 -88) -88]
Test Case: 971 | Input/Output: [(38 21 -55 87) -55]
Test Case: 972 | Input/Output: [(19 -21 -5 35) -21]
Test Case: 973 | Input/Output: [(-16 -60 38 96) -60]
Test Case: 974 | Input/Output: [(-11 71 84 55) -11]
Test Case: 975 | Input/Output: [(-76 62 15 -25) -76]
Test Case: 976 | Input/Output: [(8 48 -68 -74) -74]
Test Case: 977 | Input/Output: [(73 58 83 8) 8]
Test Case: 978 | Input/Output: [(28 -68 -73 45) -73]
Test Case: 979 | Input/Output: [(-68 -80 -57 31) -80]
Test Case: 980 | Input/Output: [(75 -64 -43 17) -64]
Test Case: 981 | Input/Output: [(2 19 -81 -28) -81]
Test Case: 982 | Input/Output: [(-97 -75 81 -44) -97]
Test Case: 983 | Input/Output: [(6 -47 -12 12) -47]
Test Case: 984 | Input/Output: [(25 60 -59 27) -59]
Test Case: 985 | Input/Output: [(63 -84 20 -55) -84]
Test Case: 986 | Input/Output: [(86 82 -54 -22) -54]
Test Case: 987 | Input/Output: [(-1 13 47 -26) -26]
Test Case: 988 | Input/Output: [(-19 15 71 -92) -92]
Test Case: 989 | Input/Output: [(69 -25 -57 -46) -57]
Test Case: 990 | Input/Output: [(-86 16 61 -65) -86]
Test Case: 991 | Input/Output: [(-67 -69 -78 6) -78]
Test Case: 992 | Input/Output: [(-32 77 15 2) -32]
Test Case: 993 | Input/Output: [(30 -15 -24 39) -24]
Test Case: 994 | Input/Output: [(-24 -27 -43 8) -43]
Test Case: 995 | Input/Output: [(30 91 -54 99) -54]
Test Case: 996 | Input/Output: [(10 -70 -70 84) -70]
Test Case: 997 | Input/Output: [(-19 72 -84 -43) -84]
Test Case: 998 | Input/Output: [(-38 -4 -20 -50) -50]
Test Case: 999 | Input/Output: [(3 -91 13 51) -91]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 22 -95 38 96 109 95 85 -116 119 -31 -83 -87 -114 -76 26 124
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 80 0 0] 0] [[6 6 57 6] 6] [[-74 -74 -74 -55] -74] [[-80 -29 -80 -80] -80] [[89 89 -98 89] -98] [[-52 -2 -2 -2] -52] [[53 24 24 24] 24] [[91 91 91 20] 20] [[-11 -57 -57 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -29                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_280} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (exec_dup_items integer_max integer_lte integer_sub integer_lt integer_dup_items exec_rot () (exec_k_when_autoconstructing (exec_noop) (in2 in2) print_integer exec_when () integer_mod exec_k (integer_stackdepth) (exec_dup (boolean_shove) boolean_and integer_sub exec_rot (boolean_invert_second_then_and exec_dup (boolean_frominteger exec_rot (boolean_not boolean_xor in1 integer_dup_items integer_dup_items boolean_rot exec_yankdup boolean_dup_times integer_yank tagged_280 exec_do*times (exec_stackdepth integer_shove integer_dup boolean_yankdup)) (in3 exec_rot (integer_mult boolean_shove in1 integer_inc boolean_pop) (boolean_rot boolean_shove exec_dup_items) (exec_flush)) ())) () ())) ())
Lexicase best errors: [0 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_280} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (exec_dup_items integer_max integer_lte integer_sub integer_lt integer_dup_items exec_rot () (exec_k_when_autoconstructing (exec_noop) (in2 in2) print_integer exec_when () integer_mod exec_k (integer_stackdepth) (exec_dup (boolean_shove) boolean_and integer_sub exec_rot (boolean_invert_second_then_and exec_dup (boolean_frominteger exec_rot (boolean_not boolean_xor in1 integer_dup_items integer_dup_items boolean_rot exec_yankdup boolean_dup_times integer_yank tagged_280 exec_do*times (exec_stackdepth integer_shove integer_dup boolean_yankdup)) (in3 exec_rot (integer_mult boolean_shove in1 integer_inc boolean_pop) (boolean_rot boolean_shove exec_dup_items) (exec_flush)) ())) () ())) ())
Zero cases best errors: [0 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 5 5 5 1 3 6 5 5 2)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (8 5 5 5 1 3 6 5 5 2)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 1, :instruction integer_gte} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_153} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_k} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_784} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 3, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_xor} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction print_newline} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_dup} {:close 0, :instruction print_newline} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_yank})
Best program: (integer_inc exec_eq boolean_yank exec_do*range (boolean_dup boolean_dup_times exec_yankdup integer_mult integer_min integer_gte) boolean_xor integer_mod exec_while (integer_mult) boolean_invert_second_then_and integer_lte in2 print_integer print_integer integer_dup_items tagged_153 integer_add boolean_invert_second_then_and boolean_or exec_k () () boolean_invert_second_then_and boolean_eq exec_do*while () in1 tag_boolean_784 boolean_dup integer_dup_times exec_s_when_autoconstructing () (integer_flush boolean_eq integer_empty) (in4 exec_eq integer_shove boolean_stackdepth exec_do*range (exec_eq) exec_do*times (exec_do*range ()) exec_do*while (exec_noop) exec_flush integer_max exec_dup_items exec_k_when_autoconstructing (exec_noop) (exec_stackdepth)) integer_gt boolean_flush boolean_frominteger exec_yank integer_mod boolean_or boolean_xor in2 exec_shove (print_boolean print_newline) exec_swap (exec_do*range (boolean_dup) integer_min) (boolean_swap) boolean_dup_items exec_when (integer_fromboolean exec_if (integer_lte integer_add boolean_or) (integer_dup print_newline integer_stackdepth integer_max exec_when (integer_div exec_dup_items exec_yank))))
Errors: [0 0 1 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 83
Size: 106
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 9.955
Median total errors in population: 10
Error averages by case: (0.992 0.995 0.995 0.995 0.999 0.997 0.994 0.995 0.995 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.472
Average program size in population (points): 69.599
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 476814
--- Timings ---
Current time: 1559314333463 milliseconds
Total Time:           2.0 seconds
Initialization:       0.1 seconds,  5.6%
Reproduction:         0.8 seconds, 40.9%
Fitness Testing:      1.1 seconds, 53.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_705} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_280} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Lexicase best program: (integer_yankdup exec_shove (boolean_yank) exec_swap (integer_yankdup tag_boolean_705 exec_stackdepth boolean_eq exec_do*count (in1) integer_gte integer_mod boolean_dup_items boolean_invert_first_then_and) () exec_s (boolean_empty boolean_dup_times) (boolean_yankdup print_integer exec_empty exec_do*range (integer_add boolean_invert_first_then_and exec_k_when_autoconstructing (exec_when () integer_mod exec_k (integer_stackdepth) (exec_dup (boolean_shove) boolean_and integer_sub exec_rot (boolean_invert_second_then_and exec_dup (boolean_frominteger exec_rot (boolean_not boolean_xor in1 integer_dup_items integer_dup_items boolean_rot exec_yankdup boolean_dup_times integer_yank tagged_280 exec_do*times (exec_stackdepth integer_shove integer_dup boolean_yankdup)) (in3 exec_rot (integer_mult boolean_shove in1 integer_inc boolean_pop) (boolean_rot boolean_shove exec_dup_items) (exec_flush)) ())) () ())) ())) ())
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_boolean_705} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*count} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_280} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_flush})
Zero cases best program: (integer_yankdup exec_shove (boolean_yank) exec_swap (integer_yankdup tag_boolean_705 exec_stackdepth boolean_eq exec_do*count (in1) integer_gte integer_mod boolean_dup_items boolean_invert_first_then_and) () exec_s (boolean_empty boolean_dup_times) (boolean_yankdup print_integer exec_empty exec_do*range (integer_add boolean_invert_first_then_and exec_k_when_autoconstructing (exec_when () integer_mod exec_k (integer_stackdepth) (exec_dup (boolean_shove) boolean_and integer_sub exec_rot (boolean_invert_second_then_and exec_dup (boolean_frominteger exec_rot (boolean_not boolean_xor in1 integer_dup_items integer_dup_items boolean_rot exec_yankdup boolean_dup_times integer_yank tagged_280 exec_do*times (exec_stackdepth integer_shove integer_dup boolean_yankdup)) (in3 exec_rot (integer_mult boolean_shove in1 integer_inc boolean_pop) (boolean_rot boolean_shove exec_dup_items) (exec_flush)) ())) () ())) ())) ())
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (119 119 63 117 117 399 119 398 62 398)
Population mean number of elite cases: 1.91
Count of perfect (error zero) individuals by case: (119 119 63 117 117 399 119 398 62 398)
Population mean number of perfect (error zero) cases: 1.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 0, :instruction tagged_287} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_dup_times})
Best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_empty boolean_invert_first_then_and) () exec_s (boolean_empty boolean_dup_times) (boolean_yankdup print_integer exec_empty exec_do*range (integer_add boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (integer_dec) integer_yank integer_shove exec_flush) (integer_dup boolean_flush) exec_dup_times (boolean_frominteger exec_while (integer_min integer_gt integer_shove boolean_stackdepth exec_dup_items boolean_invert_second_then_and boolean_dup_items boolean_swap) integer_min exec_do*while (integer_div boolean_flush) exec_dup_times (integer_yankdup exec_shove () exec_y_when_autoconstructing () exec_k () (integer_gte) exec_if (boolean_dup_items exec_do*times (print_integer integer_gte exec_eq integer_div) exec_noop) (integer_div tagged_287 boolean_shove exec_dup_times ()))))) ()) () ())
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 68
Size: 98
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 8.089
Median total errors in population: 7
Error averages by case: (0.881 0.881 0.937 0.883 0.883 0.601 0.881 0.602 0.938 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.176
Average program size in population (points): 92.618
Average percent parens in population: 0.277
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1013154
--- Timings ---
Current time: 1559314336149 milliseconds
Total Time:           4.8 seconds
Initialization:       0.1 seconds,  2.4%
Reproduction:         2.4 seconds, 50.5%
Fitness Testing:      1.7 seconds, 35.7%
Report:               0.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 559
Test mean error for best: 0.55900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -27                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -61                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -4                 
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -29                
Correct output: -48                 | Program output: -2                 
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -60                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (boolean_dup_items print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (boolean_dup_items print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 133 402 2 401 536 132 249 3 132)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (404 133 402 2 401 536 132 249 3 132)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (boolean_dup_items print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 47
Size: 74
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.606
Median total errors in population: 6
Error averages by case: (0.596 0.867 0.598 0.998 0.599 0.464 0.868 0.751 0.997 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.689
Average program size in population (points): 84.778
Average percent parens in population: 0.245
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.011
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1603331
--- Timings ---
Current time: 1559314339283 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.4 seconds, 55.8%
Fitness Testing:      2.3 seconds, 29.7%
Report:               1.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -29                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction tagged_44} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 2, :instruction tagged_69} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_eq})
Lexicase best program: (boolean_empty integer_sub integer_gte exec_while (boolean_swap exec_dup (boolean_pop integer_pop) exec_y_when_autoconstructing ()) exec_eq exec_do*range (integer_rot boolean_invert_second_then_and boolean_not) exec_swap () (exec_dup_times (integer_dup_items integer_gt integer_fromboolean boolean_yank)) exec_eq boolean_yankdup integer_dec integer_eq integer_mult integer_gte exec_do*count (boolean_yank integer_rot integer_div in2 integer_eq) print_integer boolean_invert_second_then_and integer_dup_items exec_y (exec_pop (integer_yank exec_rot (integer_mod) (tagged_44 boolean_or boolean_not integer_yank tagged_69) () integer_min integer_lte integer_eq) exec_do*range ()) boolean_and exec_dup () exec_do*while (integer_eq exec_yankdup integer_lte exec_y () integer_mult boolean_stackdepth boolean_eq exec_do*range (integer_shove) exec_swap () (exec_flush exec_empty print_boolean integer_sub) integer_fromboolean boolean_empty boolean_eq))
Lexicase best errors: [1 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 90
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_pop} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_not} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_fromboolean} {:close 2, :instruction boolean_yank} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_mod} {:close 0, :instruction tagged_44} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 2, :instruction tagged_69} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_eq})
Zero cases best program: (boolean_empty integer_sub integer_gte exec_while (boolean_swap exec_dup (boolean_pop integer_pop) exec_y_when_autoconstructing ()) exec_eq exec_do*range (integer_rot boolean_invert_second_then_and boolean_not) exec_swap () (exec_dup_times (integer_dup_items integer_gt integer_fromboolean boolean_yank)) exec_eq boolean_yankdup integer_dec integer_eq integer_mult integer_gte exec_do*count (boolean_yank integer_rot integer_div in2 integer_eq) print_integer boolean_invert_second_then_and integer_dup_items exec_y (exec_pop (integer_yank exec_rot (integer_mod) (tagged_44 boolean_or boolean_not integer_yank tagged_69) () integer_min integer_lte integer_eq) exec_do*range ()) boolean_and exec_dup () exec_do*while (integer_eq exec_yankdup integer_lte exec_y () integer_mult boolean_stackdepth boolean_eq exec_do*range (integer_shove) exec_swap () (exec_flush exec_empty print_boolean integer_sub) integer_fromboolean boolean_empty boolean_eq))
Zero cases best errors: [1 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 90
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 465 478 98 98 192 183 20 98 98)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (473 465 478 98 98 192 183 20 98 98)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 2, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction print_integer} {:close 0, :instruction 43} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 2, :instruction integer_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_eq})
Best program: (exec_dup_items integer_max integer_lte integer_sub integer_lt integer_dup_items exec_rot () (exec_k_when_autoconstructing (exec_noop) (in2 in2) print_integer exec_when () integer_mod exec_k (integer_stackdepth) (exec_dup (boolean_shove) boolean_and integer_sub exec_rot (boolean_invert_second_then_and exec_dup (boolean_frominteger exec_rot (boolean_not boolean_xor in1 integer_dec) (integer_swap integer_shove boolean_invert_first_then_and exec_k_when_autoconstructing (in3 exec_noop integer_eq) () exec_noop) (integer_inc integer_lte print_integer) 43 integer_rot integer_empty exec_noop integer_empty integer_yank boolean_stackdepth integer_div boolean_empty integer_gt integer_stackdepth)) (in4 exec_swap () (exec_flush exec_empty print_boolean integer_sub) integer_fromboolean boolean_empty boolean_eq) ())) ())
Errors: [1 1 1 0 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 60
Size: 81
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.797
Median total errors in population: 7
Error averages by case: (0.527 0.535 0.522 0.902 0.902 0.808 0.817 0.98 0.902 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.68
Average program size in population (points): 79.729
Average percent parens in population: 0.306
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 5.04575
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 253
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2237518
--- Timings ---
Current time: 1559314342264 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 57.8%
Fitness Testing:      3.0 seconds, 26.8%
Report:               1.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 52                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 46                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 12                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -27                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 7                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -29                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 74
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 74
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (63 287 795 64 294 132 424 292 369 289)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (63 287 795 64 294 132 424 292 369 289)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 72
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 6.991
Median total errors in population: 8
Error averages by case: (0.937 0.713 0.205 0.936 0.706 0.868 0.576 0.708 0.631 0.711)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.458
Average program size in population (points): 81.278
Average percent parens in population: 0.282
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.368125
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2830476
--- Timings ---
Current time: 1559314345273 milliseconds
Total Time:          13.8 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 60.2%
Fitness Testing:      3.5 seconds, 25.6%
Report:               1.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 52                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 46                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 12                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -27                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 7                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -29                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (667 673 98 664 664 99 638 645 100 98)
Population mean number of elite cases: 4.35
Count of perfect (error zero) individuals by case: (667 673 98 664 664 99 638 645 100 98)
Population mean number of perfect (error zero) cases: 4.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (exec_k () (integer_eq) integer_mod integer_max exec_s (boolean_empty boolean_flush) () (in1 in4) boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (exec_k (in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove boolean_invert_first_then_and in1 exec_dup () exec_yank in4) (boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div)) () ()) () ()) () ()) ()) () ())
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 47
Size: 74
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 5.654
Median total errors in population: 4
Error averages by case: (0.333 0.327 0.902 0.336 0.336 0.901 0.362 0.355 0.9 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.585
Average program size in population (points): 76.688
Average percent parens in population: 0.330
Minimum age in population: 5.0
Maximum age in population: 9.5
Average age in population: 7.80725
Median age in population: 7.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 204
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3533226
--- Timings ---
Current time: 1559314348688 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.4 seconds, 60.8%
Fitness Testing:      4.2 seconds, 24.5%
Report:               2.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) (integer_mod) integer_div) () ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) (integer_mod) integer_div) () ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 872 543 1000 355 863 903 508 539 357)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (355 872 543 0 355 863 903 508 539 357)
Population mean number of perfect (error zero) cases: 5.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_shove exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in3 integer_add exec_do*count () exec_if (in1 exec_yank integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) (integer_mod) integer_div) () ()) () ()) () ()) ()) () ())
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 45
Size: 66
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 4.705
Median total errors in population: 4
Error averages by case: (0.645 0.128 0.457 1.0 0.645 0.137 0.097 0.492 0.461 0.643)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 52.205
Average program size in population (points): 76.167
Average percent parens in population: 0.316
Minimum age in population: 6.25
Maximum age in population: 10.9375
Average age in population: 9.298875
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4182441
--- Timings ---
Current time: 1559314352036 milliseconds
Total Time:          20.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.6 seconds, 61.3%
Fitness Testing:      4.8 seconds, 23.3%
Report:               3.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 60
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 60
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (657 896 1 255 255 902 896 1 901 659)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (657 896 1 255 255 902 896 1 901 659)
Population mean number of perfect (error zero) cases: 5.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 60
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 4.577
Median total errors in population: 4
Error averages by case: (0.343 0.104 0.999 0.745 0.745 0.098 0.104 0.999 0.099 0.341)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.67
Average program size in population (points): 68.147
Average percent parens in population: 0.329
Minimum age in population: 8.875
Maximum age in population: 12.34375
Average age in population: 10.31109375
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 357
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 362
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4910222
--- Timings ---
Current time: 1559314355035 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.5 seconds, 61.1%
Fitness Testing:      5.5 seconds, 23.1%
Report:               3.6 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not exec_empty) (integer_mod) (integer_div)) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not exec_empty) (integer_mod) (integer_div)) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 702 81 822 697 1 821 1 822 701)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (694 702 81 822 697 1 821 1 822 701)
Population mean number of perfect (error zero) cases: 5.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) (integer_mod) (integer_div)) () ()) () ()) ()) () ())
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 57
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 4.658
Median total errors in population: 3
Error averages by case: (0.306 0.298 0.919 0.178 0.303 0.999 0.179 0.999 0.178 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.071
Average program size in population (points): 60.119
Average percent parens in population: 0.316
Minimum age in population: 11.625
Maximum age in population: 12.625
Average age in population: 12.103
Median age in population: 11.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 389
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 404
Syntactic diversity (% unique Push programs):	 0.452
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5365140
--- Timings ---
Current time: 1559314358014 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.4 seconds, 61.9%
Fitness Testing:      5.9 seconds, 22.5%
Report:               4.0 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank exec_s_when_autoconstructing (exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) () ()) ()) () ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 63
Percent parens: 0.349
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank exec_s_when_autoconstructing (exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) () ()) ()) () ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 63
Percent parens: 0.349
--- Lexicase Population Statistics ---
Count of elite individuals by case: (145 653 648 647 637 647 644 800 647 658)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (145 653 648 647 637 647 644 800 647 658)
Population mean number of perfect (error zero) cases: 6.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop) integer_shove exec_do*count (in1 exec_dup () exec_yank in4 boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 41
Size: 60
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 3.874
Median total errors in population: 1
Error averages by case: (0.855 0.347 0.352 0.353 0.363 0.353 0.356 0.2 0.353 0.342)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.741
Average program size in population (points): 60.835
Average percent parens in population: 0.313
Minimum age in population: 12.625
Maximum age in population: 14.625
Average age in population: 13.6465
Median age in population: 13.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5880580
--- Timings ---
Current time: 1559314360737 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.2 seconds, 61.7%
Fitness Testing:      6.5 seconds, 22.0%
Report:               4.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 224
Test mean error for best: 0.22400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Lexicase best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count () in1 exec_dup (exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 60
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_do*count} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Zero cases best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count () in1 exec_dup (exec_yank in4) boolean_yankdup boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 60
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (913 912 703 706 706 693 693 912 912 714)
Population mean number of elite cases: 7.86
Count of perfect (error zero) individuals by case: (913 912 703 706 706 693 693 912 912 714)
Population mean number of perfect (error zero) cases: 7.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 2, :instruction boolean_flush} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div})
Best program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 41
Size: 60
Percent parens: 0.317
--- Population Statistics ---
Average total errors in population: 2.136
Median total errors in population: 3
Error averages by case: (0.087 0.088 0.297 0.294 0.294 0.307 0.307 0.088 0.088 0.286)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.672
Average program size in population (points): 56.436
Average percent parens in population: 0.293
Minimum age in population: 13.625
Maximum age in population: 16.625
Average age in population: 15.42275
Median age in population: 15.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.561
Total error diversity:				 0.01
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6273476
--- Timings ---
Current time: 1559314363399 milliseconds
Total Time:          32.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.0 seconds, 62.4%
Fitness Testing:      6.9 seconds, 21.5%
Report:               5.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 60


Auto-simplifying with starting size: 60
step: 0
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 500
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1000
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 1500
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2000
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 2500
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3000
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 3500
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4000
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 4500
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

step: 5000
program: (integer_dup_items integer_yankdup in2 boolean_empty boolean_flush in1 in4 boolean_invert_second_then_and boolean_empty integer_min exec_rot (exec_eq print_newline exec_k_when_autoconstructing (integer_min print_integer integer_yank boolean_invert_second_then_and exec_pop () exec_noop exec_rot (exec_s (integer_lt exec_s (boolean_eq in1 exec_shove (integer_max boolean_dup boolean_pop integer_shove exec_do*count (in1 exec_dup () exec_yank in4) integer_flush boolean_not boolean_stackdepth) integer_mod) (integer_div) ()) () ()) () ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 60

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 224
Test mean error for best: 0.22400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 1
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -86                
;;******************************
