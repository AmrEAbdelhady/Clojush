Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -16 -16 17] -16] [[18 77 18 18] 18] [[54 26 54 54] 26] [[-64 -5 -64 -64] -64] [[6 6 6 85] 6] [[85 85 90 85] 85] [[57 57 57 71] 57] [[54 32 32 32] 32] [[47 22 47 47] 22] [[85 -79 -79 -79] -79] [(61 61 61 61) 61] [(65 65 65 65) 65] [(-55 -55 -55 -55) -55] [(62 62 62 62) 62] [(99 99 99 99) 99] [(33 84 33 24) 24] [(90 60 20 22) 20] [(43 17 69 48) 17] [(91 76 23 41) 23] [(97 78 43 99) 43] [(63 80 31 66) 31] [(88 97 18 11) 11] [(99 53 6 37) 6] [(56 62 70 21) 21] [(24 57 87 62) 24] [(55 70 65 9) 9] [(5 84 82 9) 5] [(74 17 96 32) 17] [(12 54 98 60) 12] [(25 83 8 52) 8] [(7 35 71 64) 7] [(41 88 60 0) 0] [(79 99 62 4) 4] [(44 41 32 33) 32] [(83 88 31 47) 31] [(-96 30 100 -26) -96] [(64 -95 -69 -46) -95] [(90 -40 0 -23) -40] [(-28 70 84 -64) -64] [(36 97 73 1) 1] [(-47 99 -61 50) -61] [(58 -21 -2 36) -21] [(-39 -62 -25 52) -62] [(84 68 57 47) 47] [(90 0 -65 78) -65] [(-10 -91 -62 86) -91] [(99 -78 -88 -33) -88] [(6 5 73 -54) -54] [(12 59 -46 -35) -46] [(60 -23 -25 62) -25] [(-41 -48 79 -43) -48] [(-78 -88 -21 -82) -88] [(97 -11 -92 93) -92] [(-98 35 -25 8) -98] [(61 -24 74 91) -24] [(-57 54 -62 -79) -79] [(-58 -31 -1 31) -58] [(29 -17 -92 16) -92] [(51 25 -29 28) -29] [(-12 -35 23 27) -35] [(78 32 -64 -87) -87] [(-65 41 77 50) -65] [(-73 17 1 -80) -80] [(3 43 6 -25) -25] [(-59 87 -51 12) -59] [(-92 -50 -30 41) -92] [(49 11 81 71) 11] [(71 97 -36 71) -36] [(24 79 44 10) 10] [(21 8 -63 -89) -89] [(82 -47 -67 -14) -67] [(64 -18 -55 0) -55] [(-91 27 -82 76) -91] [(60 -52 -50 -95) -95] [(-20 31 -3 92) -20] [(-91 76 -24 55) -91] [(21 27 -52 14) -52] [(25 -3 -95 -70) -95] [(61 -30 -34 31) -34] [(-77 -23 -23 -81) -81] [(-67 -99 29 -91) -99] [(11 -69 25 15) -69] [(-16 7 -20 -68) -68] [(-14 81 21 -24) -24] [(-56 86 -3 18) -56] [(97 51 -29 -98) -98] [(95 99 46 49) 46] [(68 -30 62 -78) -78] [(-71 69 86 51) -71] [(-97 68 -26 -83) -97] [(59 24 -14 21) -14] [(-42 65 -39 19) -42] [(46 -37 -5 -19) -37] [(0 98 -53 -13) -53] [(-98 70 -50 -100) -100])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-16 -16 -16 17] -16]
Train Case:   6 | Input/Output: [[18 77 18 18] 18]
Train Case:   7 | Input/Output: [[54 26 54 54] 26]
Train Case:   8 | Input/Output: [[-64 -5 -64 -64] -64]
Train Case:   9 | Input/Output: [[6 6 6 85] 6]
Train Case:  10 | Input/Output: [[85 85 90 85] 85]
Train Case:  11 | Input/Output: [[57 57 57 71] 57]
Train Case:  12 | Input/Output: [[54 32 32 32] 32]
Train Case:  13 | Input/Output: [[47 22 47 47] 22]
Train Case:  14 | Input/Output: [[85 -79 -79 -79] -79]
Train Case:  15 | Input/Output: [(61 61 61 61) 61]
Train Case:  16 | Input/Output: [(65 65 65 65) 65]
Train Case:  17 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  18 | Input/Output: [(62 62 62 62) 62]
Train Case:  19 | Input/Output: [(99 99 99 99) 99]
Train Case:  20 | Input/Output: [(33 84 33 24) 24]
Train Case:  21 | Input/Output: [(90 60 20 22) 20]
Train Case:  22 | Input/Output: [(43 17 69 48) 17]
Train Case:  23 | Input/Output: [(91 76 23 41) 23]
Train Case:  24 | Input/Output: [(97 78 43 99) 43]
Train Case:  25 | Input/Output: [(63 80 31 66) 31]
Train Case:  26 | Input/Output: [(88 97 18 11) 11]
Train Case:  27 | Input/Output: [(99 53 6 37) 6]
Train Case:  28 | Input/Output: [(56 62 70 21) 21]
Train Case:  29 | Input/Output: [(24 57 87 62) 24]
Train Case:  30 | Input/Output: [(55 70 65 9) 9]
Train Case:  31 | Input/Output: [(5 84 82 9) 5]
Train Case:  32 | Input/Output: [(74 17 96 32) 17]
Train Case:  33 | Input/Output: [(12 54 98 60) 12]
Train Case:  34 | Input/Output: [(25 83 8 52) 8]
Train Case:  35 | Input/Output: [(7 35 71 64) 7]
Train Case:  36 | Input/Output: [(41 88 60 0) 0]
Train Case:  37 | Input/Output: [(79 99 62 4) 4]
Train Case:  38 | Input/Output: [(44 41 32 33) 32]
Train Case:  39 | Input/Output: [(83 88 31 47) 31]
Train Case:  40 | Input/Output: [(-96 30 100 -26) -96]
Train Case:  41 | Input/Output: [(64 -95 -69 -46) -95]
Train Case:  42 | Input/Output: [(90 -40 0 -23) -40]
Train Case:  43 | Input/Output: [(-28 70 84 -64) -64]
Train Case:  44 | Input/Output: [(36 97 73 1) 1]
Train Case:  45 | Input/Output: [(-47 99 -61 50) -61]
Train Case:  46 | Input/Output: [(58 -21 -2 36) -21]
Train Case:  47 | Input/Output: [(-39 -62 -25 52) -62]
Train Case:  48 | Input/Output: [(84 68 57 47) 47]
Train Case:  49 | Input/Output: [(90 0 -65 78) -65]
Train Case:  50 | Input/Output: [(-10 -91 -62 86) -91]
Train Case:  51 | Input/Output: [(99 -78 -88 -33) -88]
Train Case:  52 | Input/Output: [(6 5 73 -54) -54]
Train Case:  53 | Input/Output: [(12 59 -46 -35) -46]
Train Case:  54 | Input/Output: [(60 -23 -25 62) -25]
Train Case:  55 | Input/Output: [(-41 -48 79 -43) -48]
Train Case:  56 | Input/Output: [(-78 -88 -21 -82) -88]
Train Case:  57 | Input/Output: [(97 -11 -92 93) -92]
Train Case:  58 | Input/Output: [(-98 35 -25 8) -98]
Train Case:  59 | Input/Output: [(61 -24 74 91) -24]
Train Case:  60 | Input/Output: [(-57 54 -62 -79) -79]
Train Case:  61 | Input/Output: [(-58 -31 -1 31) -58]
Train Case:  62 | Input/Output: [(29 -17 -92 16) -92]
Train Case:  63 | Input/Output: [(51 25 -29 28) -29]
Train Case:  64 | Input/Output: [(-12 -35 23 27) -35]
Train Case:  65 | Input/Output: [(78 32 -64 -87) -87]
Train Case:  66 | Input/Output: [(-65 41 77 50) -65]
Train Case:  67 | Input/Output: [(-73 17 1 -80) -80]
Train Case:  68 | Input/Output: [(3 43 6 -25) -25]
Train Case:  69 | Input/Output: [(-59 87 -51 12) -59]
Train Case:  70 | Input/Output: [(-92 -50 -30 41) -92]
Train Case:  71 | Input/Output: [(49 11 81 71) 11]
Train Case:  72 | Input/Output: [(71 97 -36 71) -36]
Train Case:  73 | Input/Output: [(24 79 44 10) 10]
Train Case:  74 | Input/Output: [(21 8 -63 -89) -89]
Train Case:  75 | Input/Output: [(82 -47 -67 -14) -67]
Train Case:  76 | Input/Output: [(64 -18 -55 0) -55]
Train Case:  77 | Input/Output: [(-91 27 -82 76) -91]
Train Case:  78 | Input/Output: [(60 -52 -50 -95) -95]
Train Case:  79 | Input/Output: [(-20 31 -3 92) -20]
Train Case:  80 | Input/Output: [(-91 76 -24 55) -91]
Train Case:  81 | Input/Output: [(21 27 -52 14) -52]
Train Case:  82 | Input/Output: [(25 -3 -95 -70) -95]
Train Case:  83 | Input/Output: [(61 -30 -34 31) -34]
Train Case:  84 | Input/Output: [(-77 -23 -23 -81) -81]
Train Case:  85 | Input/Output: [(-67 -99 29 -91) -99]
Train Case:  86 | Input/Output: [(11 -69 25 15) -69]
Train Case:  87 | Input/Output: [(-16 7 -20 -68) -68]
Train Case:  88 | Input/Output: [(-14 81 21 -24) -24]
Train Case:  89 | Input/Output: [(-56 86 -3 18) -56]
Train Case:  90 | Input/Output: [(97 51 -29 -98) -98]
Train Case:  91 | Input/Output: [(95 99 46 49) 46]
Train Case:  92 | Input/Output: [(68 -30 62 -78) -78]
Train Case:  93 | Input/Output: [(-71 69 86 51) -71]
Train Case:  94 | Input/Output: [(-97 68 -26 -83) -97]
Train Case:  95 | Input/Output: [(59 24 -14 21) -14]
Train Case:  96 | Input/Output: [(-42 65 -39 19) -42]
Train Case:  97 | Input/Output: [(46 -37 -5 -19) -37]
Train Case:  98 | Input/Output: [(0 98 -53 -13) -53]
Train Case:  99 | Input/Output: [(-98 70 -50 -100) -100]
Test Case:   0 | Input/Output: [[-37 70 70 70] -37]
Test Case:   1 | Input/Output: [[90 90 90 -15] -15]
Test Case:   2 | Input/Output: [[49 15 15 15] 15]
Test Case:   3 | Input/Output: [[85 85 39 85] 39]
Test Case:   4 | Input/Output: [[30 30 30 72] 30]
Test Case:   5 | Input/Output: [[-63 -63 49 -63] -63]
Test Case:   6 | Input/Output: [[17 40 40 40] 17]
Test Case:   7 | Input/Output: [[-85 -81 -85 -85] -85]
Test Case:   8 | Input/Output: [[3 3 3 73] 3]
Test Case:   9 | Input/Output: [[-25 92 92 92] -25]
Test Case:  10 | Input/Output: [[-88 -88 85 -88] -88]
Test Case:  11 | Input/Output: [[-33 -33 -33 92] -33]
Test Case:  12 | Input/Output: [[-24 -24 -24 12] -24]
Test Case:  13 | Input/Output: [[6 17 17 17] 6]
Test Case:  14 | Input/Output: [[70 70 45 70] 45]
Test Case:  15 | Input/Output: [[36 36 -47 36] -47]
Test Case:  16 | Input/Output: [[-39 -39 85 -39] -39]
Test Case:  17 | Input/Output: [[-22 -22 98 -22] -22]
Test Case:  18 | Input/Output: [[14 14 77 14] 14]
Test Case:  19 | Input/Output: [[-46 97 97 97] -46]
Test Case:  20 | Input/Output: [[63 63 92 63] 63]
Test Case:  21 | Input/Output: [[-71 -71 -69 -71] -71]
Test Case:  22 | Input/Output: [[48 48 48 -22] -22]
Test Case:  23 | Input/Output: [[-32 -32 -69 -32] -69]
Test Case:  24 | Input/Output: [[28 28 94 28] 28]
Test Case:  25 | Input/Output: [[86 86 -38 86] -38]
Test Case:  26 | Input/Output: [[65 16 16 16] 16]
Test Case:  27 | Input/Output: [[-92 -92 -92 -8] -92]
Test Case:  28 | Input/Output: [[14 -92 -92 -92] -92]
Test Case:  29 | Input/Output: [[-62 -35 -35 -35] -62]
Test Case:  30 | Input/Output: [[1 -100 1 1] -100]
Test Case:  31 | Input/Output: [[51 -81 51 51] -81]
Test Case:  32 | Input/Output: [[-32 -32 75 -32] -32]
Test Case:  33 | Input/Output: [[82 82 50 82] 50]
Test Case:  34 | Input/Output: [[-57 -48 -57 -57] -57]
Test Case:  35 | Input/Output: [[-2 46 46 46] -2]
Test Case:  36 | Input/Output: [[-76 -85 -85 -85] -85]
Test Case:  37 | Input/Output: [[-5 27 -5 -5] -5]
Test Case:  38 | Input/Output: [[-47 -14 -47 -47] -47]
Test Case:  39 | Input/Output: [[60 60 60 34] 34]
Test Case:  40 | Input/Output: [[-2 -80 -2 -2] -80]
Test Case:  41 | Input/Output: [[86 67 86 86] 67]
Test Case:  42 | Input/Output: [[-30 -40 -40 -40] -40]
Test Case:  43 | Input/Output: [[38 70 70 70] 38]
Test Case:  44 | Input/Output: [[76 66 66 66] 66]
Test Case:  45 | Input/Output: [[80 80 -97 80] -97]
Test Case:  46 | Input/Output: [[100 -11 -11 -11] -11]
Test Case:  47 | Input/Output: [[-26 -96 -96 -96] -96]
Test Case:  48 | Input/Output: [[-75 -75 -75 21] -75]
Test Case:  49 | Input/Output: [[-98 -98 -98 72] -98]
Test Case:  50 | Input/Output: [[10 83 83 83] 10]
Test Case:  51 | Input/Output: [[35 35 88 35] 35]
Test Case:  52 | Input/Output: [[80 80 80 7] 7]
Test Case:  53 | Input/Output: [[58 80 80 80] 58]
Test Case:  54 | Input/Output: [[75 -78 75 75] -78]
Test Case:  55 | Input/Output: [[91 68 68 68] 68]
Test Case:  56 | Input/Output: [[71 -20 -20 -20] -20]
Test Case:  57 | Input/Output: [[-53 -53 -57 -53] -57]
Test Case:  58 | Input/Output: [[-57 -57 75 -57] -57]
Test Case:  59 | Input/Output: [[73 72 73 73] 72]
Test Case:  60 | Input/Output: [[-89 -89 -43 -89] -89]
Test Case:  61 | Input/Output: [[66 44 44 44] 44]
Test Case:  62 | Input/Output: [[12 -9 12 12] -9]
Test Case:  63 | Input/Output: [[-36 -67 -36 -36] -67]
Test Case:  64 | Input/Output: [[-92 -92 -92 70] -92]
Test Case:  65 | Input/Output: [[-86 -86 -92 -86] -92]
Test Case:  66 | Input/Output: [[93 -10 -10 -10] -10]
Test Case:  67 | Input/Output: [[62 62 62 -83] -83]
Test Case:  68 | Input/Output: [[4 4 -49 4] -49]
Test Case:  69 | Input/Output: [[-61 -19 -61 -61] -61]
Test Case:  70 | Input/Output: [[-15 -15 -15 -72] -72]
Test Case:  71 | Input/Output: [[-12 -86 -86 -86] -86]
Test Case:  72 | Input/Output: [[67 67 88 67] 67]
Test Case:  73 | Input/Output: [[75 75 75 -99] -99]
Test Case:  74 | Input/Output: [[11 11 11 83] 11]
Test Case:  75 | Input/Output: [[80 95 95 95] 80]
Test Case:  76 | Input/Output: [[98 98 98 -88] -88]
Test Case:  77 | Input/Output: [[30 30 66 30] 30]
Test Case:  78 | Input/Output: [[-68 -68 -31 -68] -68]
Test Case:  79 | Input/Output: [[16 -77 16 16] -77]
Test Case:  80 | Input/Output: [[-13 -3 -13 -13] -13]
Test Case:  81 | Input/Output: [[22 -80 22 22] -80]
Test Case:  82 | Input/Output: [[-27 -27 16 -27] -27]
Test Case:  83 | Input/Output: [[-10 -10 -10 31] -10]
Test Case:  84 | Input/Output: [[-4 97 97 97] -4]
Test Case:  85 | Input/Output: [[-35 26 26 26] -35]
Test Case:  86 | Input/Output: [[-4 14 -4 -4] -4]
Test Case:  87 | Input/Output: [[-50 -79 -79 -79] -79]
Test Case:  88 | Input/Output: [[-93 -95 -95 -95] -95]
Test Case:  89 | Input/Output: [[10 9 9 9] 9]
Test Case:  90 | Input/Output: [[-24 -24 -61 -24] -61]
Test Case:  91 | Input/Output: [[-86 -7 -7 -7] -86]
Test Case:  92 | Input/Output: [[75 13 75 75] 13]
Test Case:  93 | Input/Output: [[-16 -16 9 -16] -16]
Test Case:  94 | Input/Output: [[-23 64 -23 -23] -23]
Test Case:  95 | Input/Output: [[41 -60 -60 -60] -60]
Test Case:  96 | Input/Output: [[27 27 -50 27] -50]
Test Case:  97 | Input/Output: [[-85 -85 -85 -89] -89]
Test Case:  98 | Input/Output: [[44 44 -47 44] -47]
Test Case:  99 | Input/Output: [[-5 -30 -5 -5] -30]
Test Case: 100 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 101 | Input/Output: [(51 51 51 51) 51]
Test Case: 102 | Input/Output: [(45 45 45 45) 45]
Test Case: 103 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 104 | Input/Output: [(23 23 23 23) 23]
Test Case: 105 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 106 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 107 | Input/Output: [(30 30 30 30) 30]
Test Case: 108 | Input/Output: [(90 90 90 90) 90]
Test Case: 109 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 110 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 111 | Input/Output: [(39 39 39 39) 39]
Test Case: 112 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 113 | Input/Output: [(11 11 11 11) 11]
Test Case: 114 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 115 | Input/Output: [(28 28 28 28) 28]
Test Case: 116 | Input/Output: [(18 18 18 18) 18]
Test Case: 117 | Input/Output: [(20 20 20 20) 20]
Test Case: 118 | Input/Output: [(28 28 28 28) 28]
Test Case: 119 | Input/Output: [(95 95 95 95) 95]
Test Case: 120 | Input/Output: [(34 34 34 34) 34]
Test Case: 121 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 122 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 123 | Input/Output: [(51 51 51 51) 51]
Test Case: 124 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 125 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 126 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 127 | Input/Output: [(50 50 50 50) 50]
Test Case: 128 | Input/Output: [(43 43 43 43) 43]
Test Case: 129 | Input/Output: [(97 97 97 97) 97]
Test Case: 130 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 131 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 132 | Input/Output: [(25 25 25 25) 25]
Test Case: 133 | Input/Output: [(98 98 98 98) 98]
Test Case: 134 | Input/Output: [(100 100 100 100) 100]
Test Case: 135 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 136 | Input/Output: [(81 81 81 81) 81]
Test Case: 137 | Input/Output: [(78 78 78 78) 78]
Test Case: 138 | Input/Output: [(78 78 78 78) 78]
Test Case: 139 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 140 | Input/Output: [(14 14 14 14) 14]
Test Case: 141 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 142 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 143 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 144 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 145 | Input/Output: [(54 54 54 54) 54]
Test Case: 146 | Input/Output: [(46 46 46 46) 46]
Test Case: 147 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 148 | Input/Output: [(14 14 14 14) 14]
Test Case: 149 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 150 | Input/Output: [(79 79 79 79) 79]
Test Case: 151 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 152 | Input/Output: [(24 24 24 24) 24]
Test Case: 153 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 154 | Input/Output: [(91 91 91 91) 91]
Test Case: 155 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 156 | Input/Output: [(41 41 41 41) 41]
Test Case: 157 | Input/Output: [(94 94 94 94) 94]
Test Case: 158 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 159 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 160 | Input/Output: [(55 55 55 55) 55]
Test Case: 161 | Input/Output: [(8 8 8 8) 8]
Test Case: 162 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 163 | Input/Output: [(92 92 92 92) 92]
Test Case: 164 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 165 | Input/Output: [(64 64 64 64) 64]
Test Case: 166 | Input/Output: [(46 46 46 46) 46]
Test Case: 167 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 168 | Input/Output: [(24 24 24 24) 24]
Test Case: 169 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 170 | Input/Output: [(57 57 57 57) 57]
Test Case: 171 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 172 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 173 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 174 | Input/Output: [(96 96 96 96) 96]
Test Case: 175 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 176 | Input/Output: [(74 74 74 74) 74]
Test Case: 177 | Input/Output: [(59 59 59 59) 59]
Test Case: 178 | Input/Output: [(21 21 21 21) 21]
Test Case: 179 | Input/Output: [(100 100 100 100) 100]
Test Case: 180 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 181 | Input/Output: [(20 20 20 20) 20]
Test Case: 182 | Input/Output: [(21 21 21 21) 21]
Test Case: 183 | Input/Output: [(79 79 79 79) 79]
Test Case: 184 | Input/Output: [(14 14 14 14) 14]
Test Case: 185 | Input/Output: [(3 3 3 3) 3]
Test Case: 186 | Input/Output: [(93 93 93 93) 93]
Test Case: 187 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 188 | Input/Output: [(56 56 56 56) 56]
Test Case: 189 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 190 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 191 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 192 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 193 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 194 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 195 | Input/Output: [(56 56 56 56) 56]
Test Case: 196 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 197 | Input/Output: [(57 57 57 57) 57]
Test Case: 198 | Input/Output: [(80 80 80 80) 80]
Test Case: 199 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 200 | Input/Output: [(93 79 56 54) 54]
Test Case: 201 | Input/Output: [(54 87 77 88) 54]
Test Case: 202 | Input/Output: [(29 10 38 46) 10]
Test Case: 203 | Input/Output: [(79 52 98 83) 52]
Test Case: 204 | Input/Output: [(47 28 40 40) 28]
Test Case: 205 | Input/Output: [(37 28 42 64) 28]
Test Case: 206 | Input/Output: [(65 58 25 98) 25]
Test Case: 207 | Input/Output: [(28 51 27 71) 27]
Test Case: 208 | Input/Output: [(63 61 76 13) 13]
Test Case: 209 | Input/Output: [(93 16 15 90) 15]
Test Case: 210 | Input/Output: [(58 62 31 31) 31]
Test Case: 211 | Input/Output: [(35 58 7 15) 7]
Test Case: 212 | Input/Output: [(83 18 79 6) 6]
Test Case: 213 | Input/Output: [(42 44 77 62) 42]
Test Case: 214 | Input/Output: [(95 76 75 92) 75]
Test Case: 215 | Input/Output: [(31 65 76 55) 31]
Test Case: 216 | Input/Output: [(96 1 86 23) 1]
Test Case: 217 | Input/Output: [(37 96 53 94) 37]
Test Case: 218 | Input/Output: [(54 96 21 7) 7]
Test Case: 219 | Input/Output: [(5 80 57 34) 5]
Test Case: 220 | Input/Output: [(91 5 8 20) 5]
Test Case: 221 | Input/Output: [(43 66 49 35) 35]
Test Case: 222 | Input/Output: [(91 20 42 18) 18]
Test Case: 223 | Input/Output: [(22 94 58 94) 22]
Test Case: 224 | Input/Output: [(36 70 53 42) 36]
Test Case: 225 | Input/Output: [(58 56 44 33) 33]
Test Case: 226 | Input/Output: [(1 43 70 44) 1]
Test Case: 227 | Input/Output: [(81 53 48 64) 48]
Test Case: 228 | Input/Output: [(94 76 18 57) 18]
Test Case: 229 | Input/Output: [(73 96 93 76) 73]
Test Case: 230 | Input/Output: [(6 53 97 90) 6]
Test Case: 231 | Input/Output: [(64 58 96 89) 58]
Test Case: 232 | Input/Output: [(98 50 67 33) 33]
Test Case: 233 | Input/Output: [(76 0 54 84) 0]
Test Case: 234 | Input/Output: [(28 33 24 47) 24]
Test Case: 235 | Input/Output: [(84 35 4 89) 4]
Test Case: 236 | Input/Output: [(22 54 90 54) 22]
Test Case: 237 | Input/Output: [(38 79 57 69) 38]
Test Case: 238 | Input/Output: [(76 21 60 86) 21]
Test Case: 239 | Input/Output: [(81 1 96 2) 1]
Test Case: 240 | Input/Output: [(58 100 63 32) 32]
Test Case: 241 | Input/Output: [(42 63 9 12) 9]
Test Case: 242 | Input/Output: [(30 61 20 38) 20]
Test Case: 243 | Input/Output: [(85 52 68 8) 8]
Test Case: 244 | Input/Output: [(26 86 7 5) 5]
Test Case: 245 | Input/Output: [(49 46 52 69) 46]
Test Case: 246 | Input/Output: [(94 21 81 2) 2]
Test Case: 247 | Input/Output: [(72 63 26 90) 26]
Test Case: 248 | Input/Output: [(18 39 97 42) 18]
Test Case: 249 | Input/Output: [(52 16 81 21) 16]
Test Case: 250 | Input/Output: [(64 6 45 3) 3]
Test Case: 251 | Input/Output: [(64 47 29 38) 29]
Test Case: 252 | Input/Output: [(49 35 88 23) 23]
Test Case: 253 | Input/Output: [(9 90 38 6) 6]
Test Case: 254 | Input/Output: [(4 97 66 14) 4]
Test Case: 255 | Input/Output: [(75 2 75 45) 2]
Test Case: 256 | Input/Output: [(12 98 87 72) 12]
Test Case: 257 | Input/Output: [(8 44 86 28) 8]
Test Case: 258 | Input/Output: [(37 16 2 12) 2]
Test Case: 259 | Input/Output: [(74 76 55 42) 42]
Test Case: 260 | Input/Output: [(30 39 45 29) 29]
Test Case: 261 | Input/Output: [(42 45 10 74) 10]
Test Case: 262 | Input/Output: [(88 26 86 27) 26]
Test Case: 263 | Input/Output: [(96 50 79 39) 39]
Test Case: 264 | Input/Output: [(16 12 22 45) 12]
Test Case: 265 | Input/Output: [(4 45 49 70) 4]
Test Case: 266 | Input/Output: [(4 62 23 73) 4]
Test Case: 267 | Input/Output: [(26 21 37 34) 21]
Test Case: 268 | Input/Output: [(85 28 69 41) 28]
Test Case: 269 | Input/Output: [(35 95 44 32) 32]
Test Case: 270 | Input/Output: [(91 43 38 61) 38]
Test Case: 271 | Input/Output: [(98 60 69 49) 49]
Test Case: 272 | Input/Output: [(72 55 94 25) 25]
Test Case: 273 | Input/Output: [(65 74 37 76) 37]
Test Case: 274 | Input/Output: [(44 75 50 31) 31]
Test Case: 275 | Input/Output: [(63 55 19 58) 19]
Test Case: 276 | Input/Output: [(1 59 24 5) 1]
Test Case: 277 | Input/Output: [(14 6 13 65) 6]
Test Case: 278 | Input/Output: [(30 54 20 44) 20]
Test Case: 279 | Input/Output: [(69 15 29 78) 15]
Test Case: 280 | Input/Output: [(89 1 57 1) 1]
Test Case: 281 | Input/Output: [(61 20 59 82) 20]
Test Case: 282 | Input/Output: [(60 99 30 78) 30]
Test Case: 283 | Input/Output: [(53 44 24 5) 5]
Test Case: 284 | Input/Output: [(11 51 82 3) 3]
Test Case: 285 | Input/Output: [(81 89 47 50) 47]
Test Case: 286 | Input/Output: [(50 42 73 97) 42]
Test Case: 287 | Input/Output: [(26 92 64 14) 14]
Test Case: 288 | Input/Output: [(78 49 91 42) 42]
Test Case: 289 | Input/Output: [(53 30 87 62) 30]
Test Case: 290 | Input/Output: [(17 18 80 64) 17]
Test Case: 291 | Input/Output: [(19 65 59 66) 19]
Test Case: 292 | Input/Output: [(45 0 3 46) 0]
Test Case: 293 | Input/Output: [(82 8 21 36) 8]
Test Case: 294 | Input/Output: [(63 47 12 64) 12]
Test Case: 295 | Input/Output: [(25 65 24 86) 24]
Test Case: 296 | Input/Output: [(0 93 60 40) 0]
Test Case: 297 | Input/Output: [(70 3 23 66) 3]
Test Case: 298 | Input/Output: [(84 37 60 38) 37]
Test Case: 299 | Input/Output: [(15 2 6 40) 2]
Test Case: 300 | Input/Output: [(90 30 71 77) 30]
Test Case: 301 | Input/Output: [(35 29 48 60) 29]
Test Case: 302 | Input/Output: [(44 31 81 72) 31]
Test Case: 303 | Input/Output: [(21 49 1 56) 1]
Test Case: 304 | Input/Output: [(83 39 9 49) 9]
Test Case: 305 | Input/Output: [(35 24 92 67) 24]
Test Case: 306 | Input/Output: [(49 61 61 25) 25]
Test Case: 307 | Input/Output: [(75 97 59 73) 59]
Test Case: 308 | Input/Output: [(18 53 3 19) 3]
Test Case: 309 | Input/Output: [(53 54 91 31) 31]
Test Case: 310 | Input/Output: [(50 26 52 59) 26]
Test Case: 311 | Input/Output: [(2 100 77 89) 2]
Test Case: 312 | Input/Output: [(61 16 48 58) 16]
Test Case: 313 | Input/Output: [(74 64 95 9) 9]
Test Case: 314 | Input/Output: [(84 91 2 47) 2]
Test Case: 315 | Input/Output: [(73 82 25 73) 25]
Test Case: 316 | Input/Output: [(55 11 16 59) 11]
Test Case: 317 | Input/Output: [(26 86 61 78) 26]
Test Case: 318 | Input/Output: [(29 46 57 94) 29]
Test Case: 319 | Input/Output: [(58 40 80 93) 40]
Test Case: 320 | Input/Output: [(25 91 63 84) 25]
Test Case: 321 | Input/Output: [(9 97 27 21) 9]
Test Case: 322 | Input/Output: [(39 46 4 6) 4]
Test Case: 323 | Input/Output: [(80 51 54 19) 19]
Test Case: 324 | Input/Output: [(71 78 68 94) 68]
Test Case: 325 | Input/Output: [(100 59 20 45) 20]
Test Case: 326 | Input/Output: [(20 27 56 84) 20]
Test Case: 327 | Input/Output: [(8 95 40 27) 8]
Test Case: 328 | Input/Output: [(53 87 41 80) 41]
Test Case: 329 | Input/Output: [(82 50 76 30) 30]
Test Case: 330 | Input/Output: [(96 36 48 3) 3]
Test Case: 331 | Input/Output: [(95 11 61 46) 11]
Test Case: 332 | Input/Output: [(59 69 93 99) 59]
Test Case: 333 | Input/Output: [(59 24 76 82) 24]
Test Case: 334 | Input/Output: [(81 91 33 32) 32]
Test Case: 335 | Input/Output: [(13 6 63 1) 1]
Test Case: 336 | Input/Output: [(52 78 48 53) 48]
Test Case: 337 | Input/Output: [(56 84 1 97) 1]
Test Case: 338 | Input/Output: [(85 4 99 96) 4]
Test Case: 339 | Input/Output: [(12 88 2 67) 2]
Test Case: 340 | Input/Output: [(92 82 38 79) 38]
Test Case: 341 | Input/Output: [(74 74 24 44) 24]
Test Case: 342 | Input/Output: [(64 4 38 99) 4]
Test Case: 343 | Input/Output: [(96 61 12 24) 12]
Test Case: 344 | Input/Output: [(11 40 10 31) 10]
Test Case: 345 | Input/Output: [(4 62 13 24) 4]
Test Case: 346 | Input/Output: [(95 53 25 31) 25]
Test Case: 347 | Input/Output: [(43 3 76 79) 3]
Test Case: 348 | Input/Output: [(99 25 51 54) 25]
Test Case: 349 | Input/Output: [(10 91 33 41) 10]
Test Case: 350 | Input/Output: [(87 79 97 25) 25]
Test Case: 351 | Input/Output: [(95 59 18 56) 18]
Test Case: 352 | Input/Output: [(5 80 28 90) 5]
Test Case: 353 | Input/Output: [(63 24 23 8) 8]
Test Case: 354 | Input/Output: [(61 34 83 94) 34]
Test Case: 355 | Input/Output: [(25 85 79 57) 25]
Test Case: 356 | Input/Output: [(54 50 58 89) 50]
Test Case: 357 | Input/Output: [(23 9 38 80) 9]
Test Case: 358 | Input/Output: [(85 47 71 3) 3]
Test Case: 359 | Input/Output: [(34 63 41 5) 5]
Test Case: 360 | Input/Output: [(37 61 77 44) 37]
Test Case: 361 | Input/Output: [(79 30 21 40) 21]
Test Case: 362 | Input/Output: [(86 71 71 43) 43]
Test Case: 363 | Input/Output: [(68 76 35 35) 35]
Test Case: 364 | Input/Output: [(58 58 29 79) 29]
Test Case: 365 | Input/Output: [(78 77 100 0) 0]
Test Case: 366 | Input/Output: [(23 24 71 96) 23]
Test Case: 367 | Input/Output: [(42 25 80 17) 17]
Test Case: 368 | Input/Output: [(98 38 6 34) 6]
Test Case: 369 | Input/Output: [(79 100 78 52) 52]
Test Case: 370 | Input/Output: [(79 74 85 46) 46]
Test Case: 371 | Input/Output: [(83 91 99 42) 42]
Test Case: 372 | Input/Output: [(1 86 57 8) 1]
Test Case: 373 | Input/Output: [(11 6 96 62) 6]
Test Case: 374 | Input/Output: [(2 30 18 91) 2]
Test Case: 375 | Input/Output: [(64 38 87 50) 38]
Test Case: 376 | Input/Output: [(86 29 75 62) 29]
Test Case: 377 | Input/Output: [(11 32 57 80) 11]
Test Case: 378 | Input/Output: [(87 50 51 15) 15]
Test Case: 379 | Input/Output: [(15 83 66 28) 15]
Test Case: 380 | Input/Output: [(36 65 73 46) 36]
Test Case: 381 | Input/Output: [(99 74 88 16) 16]
Test Case: 382 | Input/Output: [(47 42 22 52) 22]
Test Case: 383 | Input/Output: [(8 87 28 22) 8]
Test Case: 384 | Input/Output: [(14 23 69 34) 14]
Test Case: 385 | Input/Output: [(83 83 29 48) 29]
Test Case: 386 | Input/Output: [(25 80 15 91) 15]
Test Case: 387 | Input/Output: [(62 95 36 19) 19]
Test Case: 388 | Input/Output: [(56 33 3 42) 3]
Test Case: 389 | Input/Output: [(22 88 22 14) 14]
Test Case: 390 | Input/Output: [(76 39 2 79) 2]
Test Case: 391 | Input/Output: [(7 61 69 30) 7]
Test Case: 392 | Input/Output: [(100 57 67 7) 7]
Test Case: 393 | Input/Output: [(12 36 45 86) 12]
Test Case: 394 | Input/Output: [(96 93 7 36) 7]
Test Case: 395 | Input/Output: [(54 87 12 88) 12]
Test Case: 396 | Input/Output: [(36 78 8 23) 8]
Test Case: 397 | Input/Output: [(30 69 42 10) 10]
Test Case: 398 | Input/Output: [(64 95 27 39) 27]
Test Case: 399 | Input/Output: [(32 16 33 92) 16]
Test Case: 400 | Input/Output: [(-7 -33 98 -44) -44]
Test Case: 401 | Input/Output: [(97 50 80 96) 50]
Test Case: 402 | Input/Output: [(-28 -12 100 13) -28]
Test Case: 403 | Input/Output: [(-6 38 21 66) -6]
Test Case: 404 | Input/Output: [(83 -34 -16 96) -34]
Test Case: 405 | Input/Output: [(-44 12 35 76) -44]
Test Case: 406 | Input/Output: [(65 -11 28 100) -11]
Test Case: 407 | Input/Output: [(40 99 -13 -41) -41]
Test Case: 408 | Input/Output: [(-44 68 5 -19) -44]
Test Case: 409 | Input/Output: [(2 54 100 80) 2]
Test Case: 410 | Input/Output: [(6 -70 51 -34) -70]
Test Case: 411 | Input/Output: [(73 49 85 96) 49]
Test Case: 412 | Input/Output: [(80 66 -71 86) -71]
Test Case: 413 | Input/Output: [(-14 48 27 34) -14]
Test Case: 414 | Input/Output: [(-83 23 67 87) -83]
Test Case: 415 | Input/Output: [(9 -47 -21 -40) -47]
Test Case: 416 | Input/Output: [(87 67 -55 -27) -55]
Test Case: 417 | Input/Output: [(-55 -61 8 9) -61]
Test Case: 418 | Input/Output: [(64 -5 -5 11) -5]
Test Case: 419 | Input/Output: [(24 -10 -66 -9) -66]
Test Case: 420 | Input/Output: [(-57 3 -45 -69) -69]
Test Case: 421 | Input/Output: [(-3 28 57 76) -3]
Test Case: 422 | Input/Output: [(77 -67 14 -63) -67]
Test Case: 423 | Input/Output: [(31 -92 78 -37) -92]
Test Case: 424 | Input/Output: [(-59 52 65 -26) -59]
Test Case: 425 | Input/Output: [(-100 66 71 -71) -100]
Test Case: 426 | Input/Output: [(98 -76 5 -76) -76]
Test Case: 427 | Input/Output: [(85 73 86 25) 25]
Test Case: 428 | Input/Output: [(-42 74 -53 -30) -53]
Test Case: 429 | Input/Output: [(-100 44 -84 68) -100]
Test Case: 430 | Input/Output: [(-83 5 88 20) -83]
Test Case: 431 | Input/Output: [(-20 -66 -27 0) -66]
Test Case: 432 | Input/Output: [(-83 -94 -45 62) -94]
Test Case: 433 | Input/Output: [(83 4 23 66) 4]
Test Case: 434 | Input/Output: [(-11 -33 51 -3) -33]
Test Case: 435 | Input/Output: [(90 32 -58 98) -58]
Test Case: 436 | Input/Output: [(97 38 53 42) 38]
Test Case: 437 | Input/Output: [(58 22 58 46) 22]
Test Case: 438 | Input/Output: [(-50 48 99 -86) -86]
Test Case: 439 | Input/Output: [(-76 98 20 -21) -76]
Test Case: 440 | Input/Output: [(56 -28 -78 -31) -78]
Test Case: 441 | Input/Output: [(-12 -39 92 -43) -43]
Test Case: 442 | Input/Output: [(-70 66 69 -24) -70]
Test Case: 443 | Input/Output: [(32 92 74 -69) -69]
Test Case: 444 | Input/Output: [(34 98 -75 67) -75]
Test Case: 445 | Input/Output: [(-44 -95 7 14) -95]
Test Case: 446 | Input/Output: [(-40 -11 -2 82) -40]
Test Case: 447 | Input/Output: [(55 33 86 -22) -22]
Test Case: 448 | Input/Output: [(11 -17 -22 -94) -94]
Test Case: 449 | Input/Output: [(-41 -74 43 91) -74]
Test Case: 450 | Input/Output: [(-74 28 87 -17) -74]
Test Case: 451 | Input/Output: [(-54 14 -24 -24) -54]
Test Case: 452 | Input/Output: [(-55 -29 -54 -29) -55]
Test Case: 453 | Input/Output: [(50 -39 82 8) -39]
Test Case: 454 | Input/Output: [(-84 45 -35 67) -84]
Test Case: 455 | Input/Output: [(-2 91 64 55) -2]
Test Case: 456 | Input/Output: [(61 82 50 -41) -41]
Test Case: 457 | Input/Output: [(-14 -76 7 58) -76]
Test Case: 458 | Input/Output: [(-57 -42 -74 -7) -74]
Test Case: 459 | Input/Output: [(95 -86 -74 27) -86]
Test Case: 460 | Input/Output: [(46 -37 70 -44) -44]
Test Case: 461 | Input/Output: [(35 -49 -47 -22) -49]
Test Case: 462 | Input/Output: [(-47 -83 4 -84) -84]
Test Case: 463 | Input/Output: [(-54 98 62 -47) -54]
Test Case: 464 | Input/Output: [(-75 -3 -86 90) -86]
Test Case: 465 | Input/Output: [(53 75 -43 -51) -51]
Test Case: 466 | Input/Output: [(60 4 20 -4) -4]
Test Case: 467 | Input/Output: [(84 21 25 81) 21]
Test Case: 468 | Input/Output: [(-79 24 -3 60) -79]
Test Case: 469 | Input/Output: [(-29 -81 56 -38) -81]
Test Case: 470 | Input/Output: [(6 -42 68 -47) -47]
Test Case: 471 | Input/Output: [(22 79 28 -78) -78]
Test Case: 472 | Input/Output: [(-75 -37 -40 -9) -75]
Test Case: 473 | Input/Output: [(28 -8 14 63) -8]
Test Case: 474 | Input/Output: [(-21 84 41 53) -21]
Test Case: 475 | Input/Output: [(-95 -74 -77 34) -95]
Test Case: 476 | Input/Output: [(-47 -69 -57 -92) -92]
Test Case: 477 | Input/Output: [(-17 -63 -71 -48) -71]
Test Case: 478 | Input/Output: [(63 84 -74 6) -74]
Test Case: 479 | Input/Output: [(-34 82 80 24) -34]
Test Case: 480 | Input/Output: [(-85 56 95 34) -85]
Test Case: 481 | Input/Output: [(-86 63 76 -22) -86]
Test Case: 482 | Input/Output: [(80 92 97 42) 42]
Test Case: 483 | Input/Output: [(-91 75 55 46) -91]
Test Case: 484 | Input/Output: [(-35 -19 38 -71) -71]
Test Case: 485 | Input/Output: [(-84 -2 -18 -13) -84]
Test Case: 486 | Input/Output: [(-86 -8 -2 -61) -86]
Test Case: 487 | Input/Output: [(95 1 37 25) 1]
Test Case: 488 | Input/Output: [(10 100 69 42) 10]
Test Case: 489 | Input/Output: [(77 82 39 0) 0]
Test Case: 490 | Input/Output: [(1 67 -32 71) -32]
Test Case: 491 | Input/Output: [(-11 -93 -72 12) -93]
Test Case: 492 | Input/Output: [(40 13 -67 -19) -67]
Test Case: 493 | Input/Output: [(-39 68 59 -66) -66]
Test Case: 494 | Input/Output: [(-61 -77 83 66) -77]
Test Case: 495 | Input/Output: [(61 -88 38 -50) -88]
Test Case: 496 | Input/Output: [(-78 86 -92 4) -92]
Test Case: 497 | Input/Output: [(73 -95 34 -45) -95]
Test Case: 498 | Input/Output: [(1 -47 -72 -19) -72]
Test Case: 499 | Input/Output: [(83 49 77 98) 49]
Test Case: 500 | Input/Output: [(-72 -31 62 -54) -72]
Test Case: 501 | Input/Output: [(69 -23 23 57) -23]
Test Case: 502 | Input/Output: [(12 -4 65 9) -4]
Test Case: 503 | Input/Output: [(-10 -35 -52 30) -52]
Test Case: 504 | Input/Output: [(-90 28 2 18) -90]
Test Case: 505 | Input/Output: [(-72 12 26 -50) -72]
Test Case: 506 | Input/Output: [(-14 -43 -43 39) -43]
Test Case: 507 | Input/Output: [(-80 26 -47 63) -80]
Test Case: 508 | Input/Output: [(47 94 -59 4) -59]
Test Case: 509 | Input/Output: [(17 -36 11 -1) -36]
Test Case: 510 | Input/Output: [(87 -48 -19 69) -48]
Test Case: 511 | Input/Output: [(-6 57 -45 28) -45]
Test Case: 512 | Input/Output: [(-30 6 95 -78) -78]
Test Case: 513 | Input/Output: [(79 49 -75 25) -75]
Test Case: 514 | Input/Output: [(-46 74 13 30) -46]
Test Case: 515 | Input/Output: [(-58 24 -83 53) -83]
Test Case: 516 | Input/Output: [(50 -19 87 60) -19]
Test Case: 517 | Input/Output: [(-93 -13 16 42) -93]
Test Case: 518 | Input/Output: [(-31 4 71 28) -31]
Test Case: 519 | Input/Output: [(53 48 3 -27) -27]
Test Case: 520 | Input/Output: [(-72 68 -59 -59) -72]
Test Case: 521 | Input/Output: [(81 -100 0 69) -100]
Test Case: 522 | Input/Output: [(-29 -59 61 -84) -84]
Test Case: 523 | Input/Output: [(91 14 90 -31) -31]
Test Case: 524 | Input/Output: [(22 -84 -96 -16) -96]
Test Case: 525 | Input/Output: [(-94 7 56 -43) -94]
Test Case: 526 | Input/Output: [(-98 -65 35 56) -98]
Test Case: 527 | Input/Output: [(90 -60 5 24) -60]
Test Case: 528 | Input/Output: [(89 -28 -56 71) -56]
Test Case: 529 | Input/Output: [(-53 -64 -54 -100) -100]
Test Case: 530 | Input/Output: [(-66 -93 -28 -71) -93]
Test Case: 531 | Input/Output: [(-35 -98 92 23) -98]
Test Case: 532 | Input/Output: [(28 -1 -11 69) -11]
Test Case: 533 | Input/Output: [(36 -6 -57 96) -57]
Test Case: 534 | Input/Output: [(-45 -85 65 32) -85]
Test Case: 535 | Input/Output: [(3 40 -31 -7) -31]
Test Case: 536 | Input/Output: [(-2 -37 61 88) -37]
Test Case: 537 | Input/Output: [(-48 -89 -98 68) -98]
Test Case: 538 | Input/Output: [(71 69 94 90) 69]
Test Case: 539 | Input/Output: [(23 31 55 91) 23]
Test Case: 540 | Input/Output: [(26 -68 98 30) -68]
Test Case: 541 | Input/Output: [(-44 30 73 9) -44]
Test Case: 542 | Input/Output: [(-35 100 12 46) -35]
Test Case: 543 | Input/Output: [(-93 -32 -87 -26) -93]
Test Case: 544 | Input/Output: [(30 3 -60 -79) -79]
Test Case: 545 | Input/Output: [(-34 -37 -2 33) -37]
Test Case: 546 | Input/Output: [(58 92 76 100) 58]
Test Case: 547 | Input/Output: [(18 -14 5 83) -14]
Test Case: 548 | Input/Output: [(-56 -17 53 5) -56]
Test Case: 549 | Input/Output: [(-48 23 83 84) -48]
Test Case: 550 | Input/Output: [(-7 60 -41 -97) -97]
Test Case: 551 | Input/Output: [(21 87 71 -62) -62]
Test Case: 552 | Input/Output: [(27 -7 58 46) -7]
Test Case: 553 | Input/Output: [(4 43 -38 81) -38]
Test Case: 554 | Input/Output: [(-63 28 -40 -59) -63]
Test Case: 555 | Input/Output: [(-8 5 -10 27) -10]
Test Case: 556 | Input/Output: [(87 44 48 88) 44]
Test Case: 557 | Input/Output: [(77 28 -1 -60) -60]
Test Case: 558 | Input/Output: [(29 31 85 79) 29]
Test Case: 559 | Input/Output: [(-35 87 38 64) -35]
Test Case: 560 | Input/Output: [(87 73 75 -75) -75]
Test Case: 561 | Input/Output: [(93 -92 -96 96) -96]
Test Case: 562 | Input/Output: [(-22 -28 79 -64) -64]
Test Case: 563 | Input/Output: [(-26 19 29 66) -26]
Test Case: 564 | Input/Output: [(-44 -26 79 76) -44]
Test Case: 565 | Input/Output: [(-93 -39 72 -15) -93]
Test Case: 566 | Input/Output: [(71 -3 79 -7) -7]
Test Case: 567 | Input/Output: [(-43 38 45 -88) -88]
Test Case: 568 | Input/Output: [(46 4 31 3) 3]
Test Case: 569 | Input/Output: [(9 77 -34 -42) -42]
Test Case: 570 | Input/Output: [(-32 53 93 34) -32]
Test Case: 571 | Input/Output: [(-18 -30 7 -47) -47]
Test Case: 572 | Input/Output: [(67 28 -72 -88) -88]
Test Case: 573 | Input/Output: [(-30 37 10 77) -30]
Test Case: 574 | Input/Output: [(12 23 -79 -51) -79]
Test Case: 575 | Input/Output: [(-80 -84 56 -10) -84]
Test Case: 576 | Input/Output: [(-42 47 -55 -27) -55]
Test Case: 577 | Input/Output: [(81 -30 84 53) -30]
Test Case: 578 | Input/Output: [(-25 -90 62 -50) -90]
Test Case: 579 | Input/Output: [(-75 -91 -45 99) -91]
Test Case: 580 | Input/Output: [(51 -57 -47 -87) -87]
Test Case: 581 | Input/Output: [(33 67 69 9) 9]
Test Case: 582 | Input/Output: [(5 -5 15 -6) -6]
Test Case: 583 | Input/Output: [(-62 83 43 9) -62]
Test Case: 584 | Input/Output: [(-15 -35 64 -22) -35]
Test Case: 585 | Input/Output: [(21 -68 71 31) -68]
Test Case: 586 | Input/Output: [(-100 15 -6 25) -100]
Test Case: 587 | Input/Output: [(100 -60 10 -88) -88]
Test Case: 588 | Input/Output: [(-52 -62 63 99) -62]
Test Case: 589 | Input/Output: [(-22 -73 -65 9) -73]
Test Case: 590 | Input/Output: [(1 -65 -12 70) -65]
Test Case: 591 | Input/Output: [(-42 -46 79 -44) -46]
Test Case: 592 | Input/Output: [(100 33 -42 7) -42]
Test Case: 593 | Input/Output: [(71 8 60 91) 8]
Test Case: 594 | Input/Output: [(-74 -100 -87 32) -100]
Test Case: 595 | Input/Output: [(52 5 -50 -74) -74]
Test Case: 596 | Input/Output: [(15 28 -80 -47) -80]
Test Case: 597 | Input/Output: [(-57 35 77 24) -57]
Test Case: 598 | Input/Output: [(24 2 -83 -86) -86]
Test Case: 599 | Input/Output: [(19 -39 -18 19) -39]
Test Case: 600 | Input/Output: [(-6 20 18 21) -6]
Test Case: 601 | Input/Output: [(-58 89 48 -35) -58]
Test Case: 602 | Input/Output: [(14 42 -24 -100) -100]
Test Case: 603 | Input/Output: [(-80 -34 17 94) -80]
Test Case: 604 | Input/Output: [(-72 -68 73 68) -72]
Test Case: 605 | Input/Output: [(-40 -12 -54 -90) -90]
Test Case: 606 | Input/Output: [(79 -67 -89 -99) -99]
Test Case: 607 | Input/Output: [(-82 94 63 -17) -82]
Test Case: 608 | Input/Output: [(-37 -47 -14 72) -47]
Test Case: 609 | Input/Output: [(84 -45 25 54) -45]
Test Case: 610 | Input/Output: [(45 89 -53 -19) -53]
Test Case: 611 | Input/Output: [(34 93 90 -57) -57]
Test Case: 612 | Input/Output: [(8 -5 30 -9) -9]
Test Case: 613 | Input/Output: [(-45 19 33 -76) -76]
Test Case: 614 | Input/Output: [(-86 30 82 57) -86]
Test Case: 615 | Input/Output: [(39 3 100 -33) -33]
Test Case: 616 | Input/Output: [(-15 44 -39 21) -39]
Test Case: 617 | Input/Output: [(1 39 8 -15) -15]
Test Case: 618 | Input/Output: [(-4 71 -81 92) -81]
Test Case: 619 | Input/Output: [(-41 71 29 -28) -41]
Test Case: 620 | Input/Output: [(78 -7 -11 17) -11]
Test Case: 621 | Input/Output: [(-91 77 -63 -57) -91]
Test Case: 622 | Input/Output: [(52 -38 -35 6) -38]
Test Case: 623 | Input/Output: [(-28 15 -99 42) -99]
Test Case: 624 | Input/Output: [(-20 -34 56 -33) -34]
Test Case: 625 | Input/Output: [(65 -32 -12 -85) -85]
Test Case: 626 | Input/Output: [(-60 -61 39 80) -61]
Test Case: 627 | Input/Output: [(-13 69 31 96) -13]
Test Case: 628 | Input/Output: [(-41 -96 61 -89) -96]
Test Case: 629 | Input/Output: [(-77 -53 53 -49) -77]
Test Case: 630 | Input/Output: [(25 -18 2 -9) -18]
Test Case: 631 | Input/Output: [(-10 72 19 55) -10]
Test Case: 632 | Input/Output: [(42 68 -38 1) -38]
Test Case: 633 | Input/Output: [(-77 22 -63 86) -77]
Test Case: 634 | Input/Output: [(-43 29 -23 67) -43]
Test Case: 635 | Input/Output: [(83 -48 -25 22) -48]
Test Case: 636 | Input/Output: [(-86 -66 100 -86) -86]
Test Case: 637 | Input/Output: [(97 0 -97 -55) -97]
Test Case: 638 | Input/Output: [(70 38 7 -55) -55]
Test Case: 639 | Input/Output: [(72 80 92 -26) -26]
Test Case: 640 | Input/Output: [(63 -96 87 79) -96]
Test Case: 641 | Input/Output: [(62 -32 -84 -94) -94]
Test Case: 642 | Input/Output: [(-50 32 56 32) -50]
Test Case: 643 | Input/Output: [(-19 -67 39 -33) -67]
Test Case: 644 | Input/Output: [(60 20 -92 -69) -92]
Test Case: 645 | Input/Output: [(-98 -32 86 85) -98]
Test Case: 646 | Input/Output: [(-93 68 -28 -75) -93]
Test Case: 647 | Input/Output: [(89 44 52 -41) -41]
Test Case: 648 | Input/Output: [(52 -67 -24 -21) -67]
Test Case: 649 | Input/Output: [(-76 -23 71 -85) -85]
Test Case: 650 | Input/Output: [(37 -98 34 52) -98]
Test Case: 651 | Input/Output: [(-92 -63 29 67) -92]
Test Case: 652 | Input/Output: [(-7 -48 98 65) -48]
Test Case: 653 | Input/Output: [(-14 63 54 26) -14]
Test Case: 654 | Input/Output: [(-64 -18 67 -15) -64]
Test Case: 655 | Input/Output: [(-68 2 24 21) -68]
Test Case: 656 | Input/Output: [(-35 -27 -18 78) -35]
Test Case: 657 | Input/Output: [(68 -24 -76 -7) -76]
Test Case: 658 | Input/Output: [(9 50 -85 -11) -85]
Test Case: 659 | Input/Output: [(-87 -50 81 43) -87]
Test Case: 660 | Input/Output: [(-23 -12 -81 -45) -81]
Test Case: 661 | Input/Output: [(-85 -9 -91 71) -91]
Test Case: 662 | Input/Output: [(-22 -96 -16 6) -96]
Test Case: 663 | Input/Output: [(-83 -28 -84 -78) -84]
Test Case: 664 | Input/Output: [(34 12 96 37) 12]
Test Case: 665 | Input/Output: [(-9 -100 -60 60) -100]
Test Case: 666 | Input/Output: [(-68 92 -47 93) -68]
Test Case: 667 | Input/Output: [(-80 9 17 82) -80]
Test Case: 668 | Input/Output: [(-22 -52 30 91) -52]
Test Case: 669 | Input/Output: [(-54 40 70 5) -54]
Test Case: 670 | Input/Output: [(-20 26 3 47) -20]
Test Case: 671 | Input/Output: [(-79 13 -27 -85) -85]
Test Case: 672 | Input/Output: [(82 -73 51 -87) -87]
Test Case: 673 | Input/Output: [(80 -37 46 84) -37]
Test Case: 674 | Input/Output: [(-19 -35 -6 -75) -75]
Test Case: 675 | Input/Output: [(69 -62 53 -14) -62]
Test Case: 676 | Input/Output: [(97 -10 -44 -83) -83]
Test Case: 677 | Input/Output: [(56 35 -65 -8) -65]
Test Case: 678 | Input/Output: [(-34 -85 -92 37) -92]
Test Case: 679 | Input/Output: [(-24 48 93 22) -24]
Test Case: 680 | Input/Output: [(49 68 83 -77) -77]
Test Case: 681 | Input/Output: [(-83 33 8 93) -83]
Test Case: 682 | Input/Output: [(-43 -51 -24 79) -51]
Test Case: 683 | Input/Output: [(-91 10 46 21) -91]
Test Case: 684 | Input/Output: [(14 -59 31 11) -59]
Test Case: 685 | Input/Output: [(13 -62 -72 -70) -72]
Test Case: 686 | Input/Output: [(87 -44 -55 54) -55]
Test Case: 687 | Input/Output: [(69 -69 21 34) -69]
Test Case: 688 | Input/Output: [(-90 59 48 -6) -90]
Test Case: 689 | Input/Output: [(85 54 -43 -7) -43]
Test Case: 690 | Input/Output: [(55 -42 78 48) -42]
Test Case: 691 | Input/Output: [(-54 -61 -35 39) -61]
Test Case: 692 | Input/Output: [(66 -100 -96 53) -100]
Test Case: 693 | Input/Output: [(43 81 89 -83) -83]
Test Case: 694 | Input/Output: [(-86 -19 -9 100) -86]
Test Case: 695 | Input/Output: [(93 -19 14 -8) -19]
Test Case: 696 | Input/Output: [(-61 -72 57 68) -72]
Test Case: 697 | Input/Output: [(12 7 -95 84) -95]
Test Case: 698 | Input/Output: [(84 -38 42 22) -38]
Test Case: 699 | Input/Output: [(-30 -1 60 4) -30]
Test Case: 700 | Input/Output: [(39 23 7 -41) -41]
Test Case: 701 | Input/Output: [(-98 42 -61 89) -98]
Test Case: 702 | Input/Output: [(70 58 14 -39) -39]
Test Case: 703 | Input/Output: [(-15 60 73 71) -15]
Test Case: 704 | Input/Output: [(-30 35 56 74) -30]
Test Case: 705 | Input/Output: [(77 67 -12 27) -12]
Test Case: 706 | Input/Output: [(80 -91 5 -48) -91]
Test Case: 707 | Input/Output: [(31 -100 -55 -42) -100]
Test Case: 708 | Input/Output: [(-11 85 -16 -29) -29]
Test Case: 709 | Input/Output: [(49 42 69 -86) -86]
Test Case: 710 | Input/Output: [(-77 -66 96 44) -77]
Test Case: 711 | Input/Output: [(78 -3 -11 -65) -65]
Test Case: 712 | Input/Output: [(83 65 84 -99) -99]
Test Case: 713 | Input/Output: [(19 32 63 -69) -69]
Test Case: 714 | Input/Output: [(-34 34 12 54) -34]
Test Case: 715 | Input/Output: [(44 97 83 50) 44]
Test Case: 716 | Input/Output: [(24 52 86 10) 10]
Test Case: 717 | Input/Output: [(-95 95 -85 21) -95]
Test Case: 718 | Input/Output: [(-31 -30 -8 2) -31]
Test Case: 719 | Input/Output: [(16 38 -98 22) -98]
Test Case: 720 | Input/Output: [(-12 -80 66 47) -80]
Test Case: 721 | Input/Output: [(76 77 -61 -80) -80]
Test Case: 722 | Input/Output: [(73 60 -13 65) -13]
Test Case: 723 | Input/Output: [(61 21 86 -53) -53]
Test Case: 724 | Input/Output: [(46 20 -83 73) -83]
Test Case: 725 | Input/Output: [(76 -77 -40 34) -77]
Test Case: 726 | Input/Output: [(-30 -38 86 31) -38]
Test Case: 727 | Input/Output: [(58 79 -83 -83) -83]
Test Case: 728 | Input/Output: [(93 28 -66 -54) -66]
Test Case: 729 | Input/Output: [(72 73 62 -6) -6]
Test Case: 730 | Input/Output: [(43 29 4 -7) -7]
Test Case: 731 | Input/Output: [(-2 -70 71 -73) -73]
Test Case: 732 | Input/Output: [(62 87 -94 -100) -100]
Test Case: 733 | Input/Output: [(53 -3 -78 0) -78]
Test Case: 734 | Input/Output: [(-77 -67 -39 -60) -77]
Test Case: 735 | Input/Output: [(56 -87 44 -61) -87]
Test Case: 736 | Input/Output: [(-98 69 75 -27) -98]
Test Case: 737 | Input/Output: [(93 -35 -74 21) -74]
Test Case: 738 | Input/Output: [(-1 69 -53 -7) -53]
Test Case: 739 | Input/Output: [(-59 24 5 -23) -59]
Test Case: 740 | Input/Output: [(-24 2 28 58) -24]
Test Case: 741 | Input/Output: [(53 -74 -96 9) -96]
Test Case: 742 | Input/Output: [(-81 -72 -12 -61) -81]
Test Case: 743 | Input/Output: [(-76 -27 36 24) -76]
Test Case: 744 | Input/Output: [(-16 73 50 54) -16]
Test Case: 745 | Input/Output: [(-36 -93 3 36) -93]
Test Case: 746 | Input/Output: [(38 17 34 34) 17]
Test Case: 747 | Input/Output: [(-78 20 92 48) -78]
Test Case: 748 | Input/Output: [(-63 73 20 83) -63]
Test Case: 749 | Input/Output: [(-36 -55 77 61) -55]
Test Case: 750 | Input/Output: [(67 -85 -13 -95) -95]
Test Case: 751 | Input/Output: [(70 66 73 49) 49]
Test Case: 752 | Input/Output: [(-26 -100 3 -37) -100]
Test Case: 753 | Input/Output: [(-10 12 85 63) -10]
Test Case: 754 | Input/Output: [(-76 5 83 -81) -81]
Test Case: 755 | Input/Output: [(38 -18 -91 -96) -96]
Test Case: 756 | Input/Output: [(0 -78 56 -41) -78]
Test Case: 757 | Input/Output: [(-63 91 -3 93) -63]
Test Case: 758 | Input/Output: [(45 -78 -94 -71) -94]
Test Case: 759 | Input/Output: [(45 66 87 -39) -39]
Test Case: 760 | Input/Output: [(-94 41 -41 10) -94]
Test Case: 761 | Input/Output: [(41 53 -98 2) -98]
Test Case: 762 | Input/Output: [(46 7 -61 -4) -61]
Test Case: 763 | Input/Output: [(-70 -55 -99 -13) -99]
Test Case: 764 | Input/Output: [(60 71 79 94) 60]
Test Case: 765 | Input/Output: [(-66 -32 -66 -93) -93]
Test Case: 766 | Input/Output: [(57 -20 91 -72) -72]
Test Case: 767 | Input/Output: [(-2 14 13 4) -2]
Test Case: 768 | Input/Output: [(33 33 -44 74) -44]
Test Case: 769 | Input/Output: [(100 33 -97 -96) -97]
Test Case: 770 | Input/Output: [(-41 42 17 -12) -41]
Test Case: 771 | Input/Output: [(-79 -26 14 -8) -79]
Test Case: 772 | Input/Output: [(-11 -67 -88 39) -88]
Test Case: 773 | Input/Output: [(-3 -51 51 34) -51]
Test Case: 774 | Input/Output: [(11 1 -56 23) -56]
Test Case: 775 | Input/Output: [(62 46 53 52) 46]
Test Case: 776 | Input/Output: [(-20 63 17 -79) -79]
Test Case: 777 | Input/Output: [(-50 11 -38 -85) -85]
Test Case: 778 | Input/Output: [(70 1 -71 -41) -71]
Test Case: 779 | Input/Output: [(-42 33 -64 -92) -92]
Test Case: 780 | Input/Output: [(-29 -10 -78 -30) -78]
Test Case: 781 | Input/Output: [(49 24 64 -78) -78]
Test Case: 782 | Input/Output: [(-5 -91 81 -13) -91]
Test Case: 783 | Input/Output: [(98 5 0 -72) -72]
Test Case: 784 | Input/Output: [(0 -68 -87 41) -87]
Test Case: 785 | Input/Output: [(-50 77 -26 32) -50]
Test Case: 786 | Input/Output: [(-57 14 45 -8) -57]
Test Case: 787 | Input/Output: [(6 -53 -84 -14) -84]
Test Case: 788 | Input/Output: [(45 89 -97 48) -97]
Test Case: 789 | Input/Output: [(-75 -61 26 -28) -75]
Test Case: 790 | Input/Output: [(9 20 47 -17) -17]
Test Case: 791 | Input/Output: [(94 65 -86 -61) -86]
Test Case: 792 | Input/Output: [(-59 53 -91 -68) -91]
Test Case: 793 | Input/Output: [(-46 -39 66 22) -46]
Test Case: 794 | Input/Output: [(69 -63 -19 -76) -76]
Test Case: 795 | Input/Output: [(80 99 -42 -92) -92]
Test Case: 796 | Input/Output: [(48 30 36 46) 30]
Test Case: 797 | Input/Output: [(62 61 -78 -18) -78]
Test Case: 798 | Input/Output: [(16 94 59 36) 16]
Test Case: 799 | Input/Output: [(-39 -83 83 -37) -83]
Test Case: 800 | Input/Output: [(-36 -11 -6 1) -36]
Test Case: 801 | Input/Output: [(21 -69 16 61) -69]
Test Case: 802 | Input/Output: [(0 87 -85 -45) -85]
Test Case: 803 | Input/Output: [(-72 68 13 26) -72]
Test Case: 804 | Input/Output: [(57 -3 35 -34) -34]
Test Case: 805 | Input/Output: [(-51 -31 -93 57) -93]
Test Case: 806 | Input/Output: [(2 -75 74 32) -75]
Test Case: 807 | Input/Output: [(-50 -63 100 97) -63]
Test Case: 808 | Input/Output: [(15 -58 -59 -3) -59]
Test Case: 809 | Input/Output: [(-95 -85 10 -77) -95]
Test Case: 810 | Input/Output: [(80 66 32 -89) -89]
Test Case: 811 | Input/Output: [(-62 16 29 34) -62]
Test Case: 812 | Input/Output: [(-36 -19 24 -73) -73]
Test Case: 813 | Input/Output: [(49 41 97 68) 41]
Test Case: 814 | Input/Output: [(51 -13 86 -44) -44]
Test Case: 815 | Input/Output: [(-6 84 32 88) -6]
Test Case: 816 | Input/Output: [(-60 -88 -53 -7) -88]
Test Case: 817 | Input/Output: [(58 -44 -46 -59) -59]
Test Case: 818 | Input/Output: [(76 -5 45 29) -5]
Test Case: 819 | Input/Output: [(-47 -61 41 95) -61]
Test Case: 820 | Input/Output: [(80 -69 -90 3) -90]
Test Case: 821 | Input/Output: [(71 -29 87 84) -29]
Test Case: 822 | Input/Output: [(-43 1 -18 29) -43]
Test Case: 823 | Input/Output: [(-97 88 18 66) -97]
Test Case: 824 | Input/Output: [(-15 72 43 -27) -27]
Test Case: 825 | Input/Output: [(26 13 -4 -43) -43]
Test Case: 826 | Input/Output: [(94 19 57 -64) -64]
Test Case: 827 | Input/Output: [(8 -72 -93 80) -93]
Test Case: 828 | Input/Output: [(88 0 -14 -74) -74]
Test Case: 829 | Input/Output: [(79 -17 34 52) -17]
Test Case: 830 | Input/Output: [(99 -90 55 -33) -90]
Test Case: 831 | Input/Output: [(72 -71 -100 -78) -100]
Test Case: 832 | Input/Output: [(-26 68 38 -85) -85]
Test Case: 833 | Input/Output: [(13 75 -68 10) -68]
Test Case: 834 | Input/Output: [(10 -49 -42 22) -49]
Test Case: 835 | Input/Output: [(98 70 -52 71) -52]
Test Case: 836 | Input/Output: [(78 -87 29 81) -87]
Test Case: 837 | Input/Output: [(7 -56 58 -61) -61]
Test Case: 838 | Input/Output: [(-93 -66 17 -99) -99]
Test Case: 839 | Input/Output: [(95 -74 42 22) -74]
Test Case: 840 | Input/Output: [(-77 -77 -70 -61) -77]
Test Case: 841 | Input/Output: [(85 17 -4 37) -4]
Test Case: 842 | Input/Output: [(35 69 31 64) 31]
Test Case: 843 | Input/Output: [(90 68 85 -68) -68]
Test Case: 844 | Input/Output: [(-79 29 36 -44) -79]
Test Case: 845 | Input/Output: [(-23 -64 19 -88) -88]
Test Case: 846 | Input/Output: [(-40 -67 29 -42) -67]
Test Case: 847 | Input/Output: [(-22 -5 91 1) -22]
Test Case: 848 | Input/Output: [(-4 40 -40 0) -40]
Test Case: 849 | Input/Output: [(-84 20 -24 40) -84]
Test Case: 850 | Input/Output: [(-72 82 99 -80) -80]
Test Case: 851 | Input/Output: [(-75 -9 -7 66) -75]
Test Case: 852 | Input/Output: [(-86 -15 84 14) -86]
Test Case: 853 | Input/Output: [(-15 -97 10 41) -97]
Test Case: 854 | Input/Output: [(47 -100 5 -68) -100]
Test Case: 855 | Input/Output: [(-77 96 9 12) -77]
Test Case: 856 | Input/Output: [(-44 87 96 35) -44]
Test Case: 857 | Input/Output: [(-28 -36 75 -44) -44]
Test Case: 858 | Input/Output: [(13 38 -4 -63) -63]
Test Case: 859 | Input/Output: [(-64 -28 -78 -48) -78]
Test Case: 860 | Input/Output: [(9 48 -27 61) -27]
Test Case: 861 | Input/Output: [(87 53 22 -62) -62]
Test Case: 862 | Input/Output: [(37 76 29 98) 29]
Test Case: 863 | Input/Output: [(-22 46 -32 2) -32]
Test Case: 864 | Input/Output: [(3 13 -54 -42) -54]
Test Case: 865 | Input/Output: [(-97 -34 -88 16) -97]
Test Case: 866 | Input/Output: [(40 36 -81 -4) -81]
Test Case: 867 | Input/Output: [(-14 -36 -96 -67) -96]
Test Case: 868 | Input/Output: [(-26 70 -43 85) -43]
Test Case: 869 | Input/Output: [(-7 48 81 -71) -71]
Test Case: 870 | Input/Output: [(-42 20 -49 1) -49]
Test Case: 871 | Input/Output: [(68 -42 -80 66) -80]
Test Case: 872 | Input/Output: [(-23 -69 24 8) -69]
Test Case: 873 | Input/Output: [(-68 75 85 46) -68]
Test Case: 874 | Input/Output: [(16 -5 32 99) -5]
Test Case: 875 | Input/Output: [(26 22 -81 -71) -81]
Test Case: 876 | Input/Output: [(-21 -75 -2 -51) -75]
Test Case: 877 | Input/Output: [(-45 53 -52 44) -52]
Test Case: 878 | Input/Output: [(-13 -3 66 94) -13]
Test Case: 879 | Input/Output: [(44 100 99 -88) -88]
Test Case: 880 | Input/Output: [(77 -23 -74 -54) -74]
Test Case: 881 | Input/Output: [(-59 -65 -12 -90) -90]
Test Case: 882 | Input/Output: [(-70 78 -3 1) -70]
Test Case: 883 | Input/Output: [(-20 64 99 -100) -100]
Test Case: 884 | Input/Output: [(29 -93 -90 -61) -93]
Test Case: 885 | Input/Output: [(-51 -81 -8 76) -81]
Test Case: 886 | Input/Output: [(73 -80 59 88) -80]
Test Case: 887 | Input/Output: [(35 19 -98 -57) -98]
Test Case: 888 | Input/Output: [(21 -53 1 81) -53]
Test Case: 889 | Input/Output: [(-49 19 -41 -12) -49]
Test Case: 890 | Input/Output: [(-84 39 -16 62) -84]
Test Case: 891 | Input/Output: [(-96 97 -76 -4) -96]
Test Case: 892 | Input/Output: [(7 -62 -59 69) -62]
Test Case: 893 | Input/Output: [(22 -79 -27 -93) -93]
Test Case: 894 | Input/Output: [(-25 -95 -23 -11) -95]
Test Case: 895 | Input/Output: [(-93 30 -96 -38) -96]
Test Case: 896 | Input/Output: [(64 4 -65 90) -65]
Test Case: 897 | Input/Output: [(6 -37 -18 16) -37]
Test Case: 898 | Input/Output: [(-65 85 31 91) -65]
Test Case: 899 | Input/Output: [(90 -93 74 -8) -93]
Test Case: 900 | Input/Output: [(28 4 -93 8) -93]
Test Case: 901 | Input/Output: [(21 -13 48 47) -13]
Test Case: 902 | Input/Output: [(-24 -74 -19 -64) -74]
Test Case: 903 | Input/Output: [(-68 41 48 -100) -100]
Test Case: 904 | Input/Output: [(-54 -75 -30 25) -75]
Test Case: 905 | Input/Output: [(-34 75 -96 93) -96]
Test Case: 906 | Input/Output: [(-20 8 -46 54) -46]
Test Case: 907 | Input/Output: [(58 69 -85 -19) -85]
Test Case: 908 | Input/Output: [(-22 -96 -17 -98) -98]
Test Case: 909 | Input/Output: [(21 98 89 93) 21]
Test Case: 910 | Input/Output: [(35 44 -33 58) -33]
Test Case: 911 | Input/Output: [(58 10 44 -22) -22]
Test Case: 912 | Input/Output: [(-82 9 88 -3) -82]
Test Case: 913 | Input/Output: [(67 1 -44 72) -44]
Test Case: 914 | Input/Output: [(40 -12 -93 -74) -93]
Test Case: 915 | Input/Output: [(-50 -23 -90 -82) -90]
Test Case: 916 | Input/Output: [(25 -75 -81 -5) -81]
Test Case: 917 | Input/Output: [(-20 4 -92 9) -92]
Test Case: 918 | Input/Output: [(-41 -60 -49 49) -60]
Test Case: 919 | Input/Output: [(7 -11 -95 -29) -95]
Test Case: 920 | Input/Output: [(73 29 75 -67) -67]
Test Case: 921 | Input/Output: [(38 -67 -98 95) -98]
Test Case: 922 | Input/Output: [(26 -95 -39 -75) -95]
Test Case: 923 | Input/Output: [(66 33 75 -83) -83]
Test Case: 924 | Input/Output: [(43 -7 66 81) -7]
Test Case: 925 | Input/Output: [(6 -43 -15 -71) -71]
Test Case: 926 | Input/Output: [(-43 -48 33 -14) -48]
Test Case: 927 | Input/Output: [(40 70 -47 -71) -71]
Test Case: 928 | Input/Output: [(4 -16 -40 17) -40]
Test Case: 929 | Input/Output: [(-61 -42 -61 89) -61]
Test Case: 930 | Input/Output: [(-46 -50 9 -49) -50]
Test Case: 931 | Input/Output: [(40 -64 23 16) -64]
Test Case: 932 | Input/Output: [(70 82 7 -23) -23]
Test Case: 933 | Input/Output: [(-81 99 -36 -23) -81]
Test Case: 934 | Input/Output: [(10 -89 -26 23) -89]
Test Case: 935 | Input/Output: [(-86 59 8 -53) -86]
Test Case: 936 | Input/Output: [(-75 -93 79 49) -93]
Test Case: 937 | Input/Output: [(22 98 42 82) 22]
Test Case: 938 | Input/Output: [(68 -7 8 84) -7]
Test Case: 939 | Input/Output: [(-37 48 -26 23) -37]
Test Case: 940 | Input/Output: [(53 1 35 74) 1]
Test Case: 941 | Input/Output: [(-69 23 -9 96) -69]
Test Case: 942 | Input/Output: [(-70 60 14 26) -70]
Test Case: 943 | Input/Output: [(33 30 33 53) 30]
Test Case: 944 | Input/Output: [(69 -49 -58 98) -58]
Test Case: 945 | Input/Output: [(-56 -63 -34 -43) -63]
Test Case: 946 | Input/Output: [(67 34 -43 46) -43]
Test Case: 947 | Input/Output: [(-11 91 8 1) -11]
Test Case: 948 | Input/Output: [(12 -58 25 88) -58]
Test Case: 949 | Input/Output: [(49 88 -92 75) -92]
Test Case: 950 | Input/Output: [(95 96 89 78) 78]
Test Case: 951 | Input/Output: [(-84 100 -32 71) -84]
Test Case: 952 | Input/Output: [(-64 -71 -48 51) -71]
Test Case: 953 | Input/Output: [(40 67 62 15) 15]
Test Case: 954 | Input/Output: [(33 18 32 35) 18]
Test Case: 955 | Input/Output: [(78 -96 -97 -88) -97]
Test Case: 956 | Input/Output: [(99 -94 -17 16) -94]
Test Case: 957 | Input/Output: [(14 -55 49 -15) -55]
Test Case: 958 | Input/Output: [(-56 -70 -2 93) -70]
Test Case: 959 | Input/Output: [(46 61 -54 21) -54]
Test Case: 960 | Input/Output: [(15 -46 41 75) -46]
Test Case: 961 | Input/Output: [(65 55 90 -52) -52]
Test Case: 962 | Input/Output: [(87 63 95 -16) -16]
Test Case: 963 | Input/Output: [(62 -56 -33 -5) -56]
Test Case: 964 | Input/Output: [(-45 71 41 99) -45]
Test Case: 965 | Input/Output: [(-23 -73 -61 -40) -73]
Test Case: 966 | Input/Output: [(-21 -16 -88 23) -88]
Test Case: 967 | Input/Output: [(90 17 -97 23) -97]
Test Case: 968 | Input/Output: [(-36 -67 74 -46) -67]
Test Case: 969 | Input/Output: [(-90 -34 82 -79) -90]
Test Case: 970 | Input/Output: [(36 70 64 -28) -28]
Test Case: 971 | Input/Output: [(-64 15 -22 -86) -86]
Test Case: 972 | Input/Output: [(69 83 5 -45) -45]
Test Case: 973 | Input/Output: [(34 -30 -88 -2) -88]
Test Case: 974 | Input/Output: [(62 86 -24 27) -24]
Test Case: 975 | Input/Output: [(-94 47 -96 89) -96]
Test Case: 976 | Input/Output: [(-88 43 -69 54) -88]
Test Case: 977 | Input/Output: [(-53 31 34 42) -53]
Test Case: 978 | Input/Output: [(-62 -50 -84 -38) -84]
Test Case: 979 | Input/Output: [(61 82 100 -84) -84]
Test Case: 980 | Input/Output: [(80 13 -76 28) -76]
Test Case: 981 | Input/Output: [(-33 37 -42 -60) -60]
Test Case: 982 | Input/Output: [(-23 -23 -10 24) -23]
Test Case: 983 | Input/Output: [(-6 18 15 56) -6]
Test Case: 984 | Input/Output: [(12 -48 -86 -98) -98]
Test Case: 985 | Input/Output: [(-85 63 -82 -16) -85]
Test Case: 986 | Input/Output: [(6 -20 -34 -65) -65]
Test Case: 987 | Input/Output: [(88 -3 -72 76) -72]
Test Case: 988 | Input/Output: [(-17 -35 -77 76) -77]
Test Case: 989 | Input/Output: [(-23 -74 95 -47) -74]
Test Case: 990 | Input/Output: [(63 -23 -1 -99) -99]
Test Case: 991 | Input/Output: [(-55 -43 -35 -15) -55]
Test Case: 992 | Input/Output: [(57 13 78 92) 13]
Test Case: 993 | Input/Output: [(78 -88 -91 -94) -94]
Test Case: 994 | Input/Output: [(-83 -81 -80 -71) -83]
Test Case: 995 | Input/Output: [(-14 44 1 73) -14]
Test Case: 996 | Input/Output: [(-7 72 -79 25) -79]
Test Case: 997 | Input/Output: [(34 89 -79 75) -79]
Test Case: 998 | Input/Output: [(-70 -11 32 -31) -70]
Test Case: 999 | Input/Output: [(93 36 60 -8) -8]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 78 -24 115 100 95 107 112 41 -123 111 63 78 126 9 -64 -108
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-16 -16 -16 17] -16] [[18 77 18 18] 18] [[54 26 54 54] 26] [[-64 -5 -64 -64] -64] [[6 6 6 85] 6] [[85 85 90 85] 85] [[57 57 57 71] 57] [[54 32 32 32] 32] [[47 22 47 47] 22] [[85 -79 -79 -79] -79] [(61 61 61 61) 61] [(65 65 65 65) 65] [(-55 -55 -55 -55) -55] [(62 62 62 62) 62] [(99 99 99 99) 99] [(33 84 33 24) 24] [(90 60 20 22) 20] [(43 17 69 48) 17] [(91 76 23 41) 23] [(97 78 43 99) 43] [(63 80 31 66) 31] [(88 97 18 11) 11] [(99 53 6 37) 6] [(56 62 70 21) 21] [(24 57 87 62) 24] [(55 70 65 9) 9] [(5 84 82 9) 5] [(74 17 96 32) 17] [(12 54 98 60) 12] [(25 83 8 52) 8] [(7 35 71 64) 7] [(41 88 60 0) 0] [(79 99 62 4) 4] [(44 41 32 33) 32] [(83 88 31 47) 31] [(-96 30 100 -26) -96] [(64 -95 -69 -46) -95] [(90 -40 0 -23) -40] [(-28 70 84 -64) -64] [(36 97 73 1) 1] [(-47 99 -61 50) -61] [(58 -21 -2 36) -21] [(-39 -62 -25 52) -62] [(84 68 57 47) 47] [(90 0 -65 78) -65] [(-10 -91 -62 86) -91] [(99 -78 -88 -33) -88] [(6 5 73 -54) -54] [(12 59 -46 -35) -46] [(60 -23 -25 62) -25] [(-41 -48 79 -43) -48] [(-78 -88 -21 -82) -88] [(97 -11 -92 93) -92] [(-98 35 -25 8) -98] [(61 -24 74 91) -24] [(-57 54 -62 -79) -79] [(-58 -31 -1 31) -58] [(29 -17 -92 16) -92] [(51 25 -29 28) -29] [(-12 -35 23 27) -35] [(78 32 -64 -87) -87] [(-65 41 77 50) -65] [(-73 17 1 -80) -80] [(3 43 6 -25) -25] [(-59 87 -51 12) -59] [(-92 -50 -30 41) -92] [(49 11 81 71) 11] [(71 97 -36 71) -36] [(24 79 44 10) 10] [(21 8 -63 -89) -89] [(82 -47 -67 -14) -67] [(64 -18 -55 0) -55] [(-91 27 -82 76) -91] [(60 -52 -50 -95) -95] [(-20 31 -3 92) -20] [(-91 76 -24 55) -91] [(21 27 -52 14) -52] [(25 -3 -95 -70) -95] [(61 -30 -34 31) -34] [(-77 -23 -23 -81) -81] [(-67 -99 29 -91) -99] [(11 -69 25 15) -69] [(-16 7 -20 -68) -68] [(-14 81 21 -24) -24] [(-56 86 -3 18) -56] [(97 51 -29 -98) -98] [(95 99 46 49) 46] [(68 -30 62 -78) -78] [(-71 69 86 51) -71] [(-97 68 -26 -83) -97] [(59 24 -14 21) -14] [(-42 65 -39 19) -42] [(46 -37 -5 -19) -37] [(0 98 -53 -13) -53] [(-98 70 -50 -100) -100])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -5                 
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 84                 
Correct output: 20                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 76                 
Correct output: 43                  | Program output: 78                 
Correct output: 31                  | Program output: 80                 
Correct output: 11                  | Program output: 97                 
Correct output: 6                   | Program output: 53                 
Correct output: 21                  | Program output: 62                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 70                 
Correct output: 5                   | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 83                 
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 88                 
Correct output: 4                   | Program output: 99                 
Correct output: 32                  | Program output: 41                 
Correct output: 31                  | Program output: 88                 
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: 70                 
Correct output: 1                   | Program output: 97                 
Correct output: -61                 | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 68                 
Correct output: -65                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -78                
Correct output: -54                 | Program output: 5                  
Correct output: -46                 | Program output: 59                 
Correct output: -25                 | Program output: -23                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -11                
Correct output: -98                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: 54                 
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -17                
Correct output: -29                 | Program output: 25                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: 32                 
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: 17                 
Correct output: -25                 | Program output: 43                 
Correct output: -59                 | Program output: 87                 
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: 97                 
Correct output: 10                  | Program output: 79                 
Correct output: -89                 | Program output: 8                  
Correct output: -67                 | Program output: -47                
Correct output: -55                 | Program output: -18                
Correct output: -91                 | Program output: 27                 
Correct output: -95                 | Program output: -52                
Correct output: -20                 | Program output: 31                 
Correct output: -91                 | Program output: 76                 
Correct output: -52                 | Program output: 27                 
Correct output: -95                 | Program output: -3                 
Correct output: -34                 | Program output: -30                
Correct output: -81                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: 7                  
Correct output: -24                 | Program output: 81                 
Correct output: -56                 | Program output: 86                 
Correct output: -98                 | Program output: 51                 
Correct output: 46                  | Program output: 99                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: 69                 
Correct output: -97                 | Program output: 68                 
Correct output: -14                 | Program output: 24                 
Correct output: -42                 | Program output: 65                 
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: 98                 
Correct output: -100                | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_154} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction -42} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction 38} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty})
Lexicase best program: (boolean_invert_second_then_and integer_rot tagged_154 print_boolean exec_do*while (integer_lte integer_sub boolean_rot integer_gt) exec_shove (exec_pop (in1)) boolean_xor integer_inc -42 exec_y_when_autoconstructing () in3 integer_gt exec_dup (boolean_dup_times integer_fromboolean) integer_rot boolean_frominteger boolean_dup_times integer_max exec_rot (integer_add exec_eq) (in3 integer_shove print_boolean exec_do*count () integer_mod in1 integer_inc boolean_rot) (integer_lte) integer_yankdup exec_s () (boolean_dup exec_s (in2 exec_if (in4 integer_mod) (integer_mult exec_swap (integer_pop) (print_integer boolean_or boolean_shove integer_min exec_y_when_autoconstructing (exec_shove (exec_s_when_autoconstructing (exec_y (integer_mod) integer_fromboolean) () (boolean_stackdepth) exec_flush) in2) integer_lt boolean_dup_items) exec_eq boolean_pop boolean_yank boolean_frominteger integer_dup_items exec_s (integer_stackdepth integer_add integer_shove print_newline boolean_invert_first_then_and boolean_frominteger) (exec_yankdup) (integer_shove 38) boolean_shove exec_pop (boolean_empty boolean_yankdup boolean_and boolean_swap integer_sub exec_do*times (integer_rot boolean_xor integer_shove integer_rot print_boolean integer_div) exec_dup (exec_empty)))) () ()) ())
Lexicase best errors: [0 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 126
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_rot} {:close 0, :instruction tagged_154} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 2, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction -42} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction exec_flush} {:close 1, :instruction in2} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_shove} {:close 1, :instruction 38} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_empty})
Zero cases best program: (boolean_invert_second_then_and integer_rot tagged_154 print_boolean exec_do*while (integer_lte integer_sub boolean_rot integer_gt) exec_shove (exec_pop (in1)) boolean_xor integer_inc -42 exec_y_when_autoconstructing () in3 integer_gt exec_dup (boolean_dup_times integer_fromboolean) integer_rot boolean_frominteger boolean_dup_times integer_max exec_rot (integer_add exec_eq) (in3 integer_shove print_boolean exec_do*count () integer_mod in1 integer_inc boolean_rot) (integer_lte) integer_yankdup exec_s () (boolean_dup exec_s (in2 exec_if (in4 integer_mod) (integer_mult exec_swap (integer_pop) (print_integer boolean_or boolean_shove integer_min exec_y_when_autoconstructing (exec_shove (exec_s_when_autoconstructing (exec_y (integer_mod) integer_fromboolean) () (boolean_stackdepth) exec_flush) in2) integer_lt boolean_dup_items) exec_eq boolean_pop boolean_yank boolean_frominteger integer_dup_items exec_s (integer_stackdepth integer_add integer_shove print_newline boolean_invert_first_then_and boolean_frominteger) (exec_yankdup) (integer_shove 38) boolean_shove exec_pop (boolean_empty boolean_yankdup boolean_and boolean_swap integer_sub exec_do*times (integer_rot boolean_xor integer_shove integer_rot print_boolean integer_div) exec_dup (exec_empty)))) () ()) ())
Zero cases best errors: [0 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 126
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 3 3 5 6 3 3 10 3 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 3 3 5 6 3 3 10 3 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_empty} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_add} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_integer_325} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 0, :instruction tag_exec_153} {:close 1, :instruction -24} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_dup} {:close 0, :instruction -40} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_noop})
Best program: (exec_do*while (integer_pop boolean_yank print_integer) exec_dup_times (exec_k_when_autoconstructing (exec_yankdup exec_dup (exec_yankdup exec_empty exec_do*count () integer_rot exec_yankdup) boolean_yankdup print_integer in2 boolean_and exec_k (integer_min) (integer_dec exec_empty) print_integer) (integer_eq integer_shove) exec_y (exec_s (boolean_dup exec_do*range (exec_flush boolean_flush boolean_eq in3) exec_dup_times (exec_shove (boolean_shove integer_mult exec_do*while (exec_dup_times (integer_empty boolean_frominteger) integer_empty) boolean_invert_first_then_and exec_yank exec_k (integer_dup) (integer_eq boolean_rot integer_lte exec_y_when_autoconstructing () integer_max) exec_do*count (integer_rot boolean_swap boolean_and integer_swap integer_swap exec_flush integer_add exec_do*count () exec_do*range (boolean_and exec_while (exec_yank integer_yank boolean_yankdup boolean_swap exec_y_when_autoconstructing (tag_integer_325 boolean_and boolean_and) tag_exec_153 (-24) boolean_swap)) exec_flush integer_lte exec_if (integer_sub integer_fromboolean integer_yank print_newline integer_yank in2 boolean_dup exec_dup_items integer_max) (exec_s (exec_y_when_autoconstructing (exec_when (boolean_dup) -40 exec_do*times (exec_y (exec_flush boolean_eq exec_noop)))) () ()))))) () ())))
Errors: [0 0 1 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 95
Size: 131
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 9.959
Median total errors in population: 10
Error averages by case: (0.998 0.997 0.997 0.995 0.994 0.997 0.997 0.99 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.238
Average program size in population (points): 70.339
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.291
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 500765
--- Timings ---
Current time: 1559314321564 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 28.6%
Fitness Testing:      1.8 seconds, 67.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -5                 
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: 70                 
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: 99                 
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: 35                 
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: 54                 
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: 17                 
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: 87                 
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 27                 
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: 31                 
Correct output: -91                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: 7                  
Correct output: -24                 | Program output: 81                 
Correct output: -56                 | Program output: 86                 
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: 69                 
Correct output: -97                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: 65                 
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 98                 
Correct output: -100                | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_s () (boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) ()) () ()) () ()))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.411
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_s () (boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) ()) () ()) () ()))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.411
--- Lexicase Population Statistics ---
Count of elite individuals by case: (842 406 56 836 375 375 56 1000 375 1000)
Population mean number of elite cases: 5.32
Count of perfect (error zero) individuals by case: (842 406 56 836 375 375 56 0 375 0)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_s () (boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) ()) () ()) () ()))
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 90
Percent parens: 0.411
--- Population Statistics ---
Average total errors in population: 6.679
Median total errors in population: 7
Error averages by case: (0.158 0.594 0.944 0.164 0.625 0.625 0.944 1.0 0.625 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 68.153
Average program size in population (points): 96.517
Average percent parens in population: 0.296
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.516
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1175454
--- Timings ---
Current time: 1559314324927 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.5 seconds, 43.0%
Fitness Testing:      2.7 seconds, 47.3%
Report:               0.5 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -39                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -10                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -41                
Correct output: -88                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -12                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -67                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 92
Percent parens: 0.380
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 92
Percent parens: 0.380
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 12 903 273 1000 3 899 613 3 273)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (273 12 903 273 0 3 899 613 3 273)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 92
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 6.748
Median total errors in population: 7
Error averages by case: (0.727 0.988 0.097 0.727 1.0 0.997 0.101 0.387 0.997 0.727)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 60.694
Average program size in population (points): 94.415
Average percent parens in population: 0.362
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.3635
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 312
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 312
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2126773
--- Timings ---
Current time: 1559314328974 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.6 seconds, 46.5%
Fitness Testing:      4.0 seconds, 40.6%
Report:               1.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -39                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -10                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -41                
Correct output: -88                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -12                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -67                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.380
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.380
--- Lexicase Population Statistics ---
Count of elite individuals by case: (525 913 494 134 525 5 523 525 517 867)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (525 913 494 134 525 5 523 525 517 867)
Population mean number of perfect (error zero) cases: 5.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction tagged_505} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (tagged_505 integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 57
Size: 92
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 4.972
Median total errors in population: 4
Error averages by case: (0.475 0.087 0.506 0.866 0.475 0.995 0.477 0.475 0.483 0.133)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.235
Average program size in population (points): 95.674
Average percent parens in population: 0.383
Minimum age in population: 4.0
Maximum age in population: 6.0
Average age in population: 5.27775
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3334957
--- Timings ---
Current time: 1559314332671 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.5 seconds, 47.7%
Fitness Testing:      5.1 seconds, 37.8%
Report:               1.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 537
Test mean error for best: 0.53700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -39                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -10                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -41                
Correct output: -88                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -12                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -67                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 707 706 706 28 676 177 698 15 525)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (15 707 706 706 28 676 177 698 15 525)
Population mean number of perfect (error zero) cases: 4.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_s () (boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))))) () ()) () ())))
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 59
Size: 97
Percent parens: 0.392
--- Population Statistics ---
Average total errors in population: 5.747
Median total errors in population: 5
Error averages by case: (0.985 0.293 0.294 0.294 0.972 0.324 0.823 0.302 0.985 0.475)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.882
Average program size in population (points): 93.038
Average percent parens in population: 0.378
Minimum age in population: 5.5
Maximum age in population: 8.0
Average age in population: 6.94825
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4491647
--- Timings ---
Current time: 1559314336420 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.4 seconds, 48.6%
Fitness Testing:      6.2 seconds, 36.0%
Report:               2.6 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -5                 
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: 70                 
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: 99                 
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: 35                 
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: 54                 
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: 17                 
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: 87                 
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 27                 
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: 31                 
Correct output: -91                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: 7                  
Correct output: -24                 | Program output: 81                 
Correct output: -56                 | Program output: 86                 
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: 69                 
Correct output: -97                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: 65                 
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 98                 
Correct output: -100                | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank boolean_eq boolean_rot) in1 boolean_shove integer_yank exec_do*while (boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 101
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank boolean_eq boolean_rot) in1 boolean_shove integer_yank exec_do*while (boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 101
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 7 212 12 508 7 402 282 259 507)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (8 7 212 12 508 7 402 282 259 507)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction print_boolean})
Best program: (exec_s () (integer_pop) (in3) integer_rot boolean_eq in2 in1 integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () print_boolean))))) () ()) () ())) ()) ()) () ()) () ()))
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 105
Percent parens: 0.419
--- Population Statistics ---
Average total errors in population: 7.796
Median total errors in population: 7
Error averages by case: (0.992 0.993 0.788 0.988 0.492 0.993 0.598 0.718 0.741 0.493)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.551
Average program size in population (points): 91.068
Average percent parens in population: 0.379
Minimum age in population: 6.5
Maximum age in population: 10.0
Average age in population: 8.798125
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5584828
--- Timings ---
Current time: 1559314340226 milliseconds
Total Time:          21.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.4 seconds, 49.4%
Fitness Testing:      7.3 seconds, 34.8%
Report:               3.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 562
Test mean error for best: 0.56200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 77                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -5                 
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 84                 
Correct output: 20                  | Program output: 60                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 76                 
Correct output: 43                  | Program output: 78                 
Correct output: 31                  | Program output: 80                 
Correct output: 11                  | Program output: 97                 
Correct output: 6                   | Program output: 53                 
Correct output: 21                  | Program output: 62                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 70                 
Correct output: 5                   | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 83                 
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 88                 
Correct output: 4                   | Program output: 99                 
Correct output: 32                  | Program output: 41                 
Correct output: 31                  | Program output: 88                 
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: 70                 
Correct output: 1                   | Program output: 97                 
Correct output: -61                 | Program output: 99                 
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 68                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 5                  
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: 35                 
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: 54                 
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: 17                 
Correct output: -25                 | Program output: 43                 
Correct output: -59                 | Program output: 87                 
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 79                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 27                 
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: 31                 
Correct output: -91                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: 7                  
Correct output: -24                 | Program output: 81                 
Correct output: -56                 | Program output: 86                 
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 99                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: 69                 
Correct output: -97                 | Program output: 68                 
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: 65                 
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 98                 
Correct output: -100                | Program output: 70                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () (integer_pop) in3 integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction integer_pop} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () (integer_pop) in3 integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (387 31 415 413 209 901 659 383 387 239)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (387 31 415 413 209 901 659 383 387 239)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (integer_shove) (in3) integer_rot boolean_eq in2 in1 -38 integer_yank exec_do*while (in1 boolean_shove integer_yank boolean_eq boolean_rot) in1 boolean_shove integer_yank exec_do*while (boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times boolean_swap integer_dup_times exec_k () (integer_add exec_dup_times () boolean_pop boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 65
Size: 101
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 5.976
Median total errors in population: 6
Error averages by case: (0.613 0.969 0.585 0.587 0.791 0.099 0.341 0.617 0.613 0.761)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.629
Average program size in population (points): 92.969
Average percent parens in population: 0.380
Minimum age in population: 8.0
Maximum age in population: 12.0
Average age in population: 10.3905625
Median age in population: 10.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.009
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6649362
--- Timings ---
Current time: 1559314344014 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 49.9%
Fitness Testing:      8.4 seconds, 33.9%
Report:               3.9 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 488
Test mean error for best: 0.48800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 54                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 90                 
Correct output: 17                  | Program output: 43                 
Correct output: 23                  | Program output: 91                 
Correct output: 43                  | Program output: 97                 
Correct output: 31                  | Program output: 63                 
Correct output: 11                  | Program output: 88                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 56                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 74                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 41                 
Correct output: 4                   | Program output: 79                 
Correct output: 32                  | Program output: 44                 
Correct output: 31                  | Program output: 83                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 36                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 84                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 6                  
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -41                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 61                 
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -12                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 49                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 24                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -67                
Correct output: -69                 | Program output: 11                 
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 95                 
Correct output: -78                 | Program output: 68                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (exec_yank) (in3) integer_rot integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 96
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (exec_yank) (in3) integer_rot integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 96
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (358 872 36 10 752 750 748 10 6 364)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (358 872 36 10 752 750 748 10 6 364)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (exec_yank) (in3) integer_rot integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 96
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 6.094
Median total errors in population: 6
Error averages by case: (0.642 0.128 0.964 0.99 0.248 0.25 0.252 0.99 0.994 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.59
Average program size in population (points): 99.49
Average percent parens in population: 0.360
Minimum age in population: 10.0
Maximum age in population: 13.625
Average age in population: 12.42578125
Median age in population: 12.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7834538
--- Timings ---
Current time: 1559314347812 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 50.2%
Fitness Testing:      9.6 seconds, 33.3%
Report:               4.6 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 462
Test mean error for best: 0.46200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 54                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 90                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 47                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 69                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 70                 
Correct output: 24                  | Program output: 87                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 96                 
Correct output: 12                  | Program output: 98                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 71                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -69                
Correct output: -40                 | Program output: 0                  
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -2                 
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 73                 
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: 74                 
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 81                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -50                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: 25                 
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: 62                 
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -5                 
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s () (exec_yank in3) (integer_rot) integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 96
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s () (exec_yank in3) (integer_rot) integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 96
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 857 27 498 558 695 665 499 668 27)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (497 857 27 498 558 695 665 499 668 27)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s (exec_yank) (in3) (integer_rot) integer_rot integer_lte in2 in1 boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 96
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 5.009
Median total errors in population: 5
Error averages by case: (0.503 0.143 0.973 0.502 0.442 0.305 0.335 0.501 0.332 0.973)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.949
Average program size in population (points): 95.88
Average percent parens in population: 0.364
Minimum age in population: 11.0
Maximum age in population: 15.1875
Average age in population: 14.091109375
Median age in population: 14.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8895186
--- Timings ---
Current time: 1559314351570 milliseconds
Total Time:          32.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.3 seconds, 50.4%
Fitness Testing:     10.7 seconds, 32.8%
Report:               5.3 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 420
Test mean error for best: 0.42000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 62                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: 30                 
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: 70                 
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 5                  
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -62                
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: 1                  
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -51                
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -52                
Correct output: -20                 | Program output: -3                 
Correct output: -91                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -23                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -20                
Correct output: -24                 | Program output: 21                 
Correct output: -56                 | Program output: -3                 
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: 69                 
Correct output: -97                 | Program output: -26                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -50                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth exec_noop integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))) ()) () ()) () ())))
Lexicase best errors: [1 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 97
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth exec_noop integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))) ()) () ()) () ())))
Zero cases best errors: [1 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 97
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 846 867 864 573 853 62 62 15 40)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (304 846 867 864 573 853 62 62 15 40)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_noop} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec})
Best program: (exec_noop exec_yank in3 integer_rot integer_rot integer_sub in2 exec_empty integer_shove in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec ()))))) () ()) () ())))
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 56
Size: 83
Percent parens: 0.325
--- Population Statistics ---
Average total errors in population: 5.514
Median total errors in population: 5
Error averages by case: (0.696 0.154 0.133 0.136 0.427 0.147 0.938 0.938 0.985 0.96)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.657
Average program size in population (points): 95.179
Average percent parens in population: 0.362
Minimum age in population: 13.59375
Maximum age in population: 17.1875
Average age in population: 15.7943203125
Median age in population: 15.890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10031956
--- Timings ---
Current time: 1559314355326 milliseconds
Total Time:          36.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 50.5%
Fitness Testing:     11.8 seconds, 32.6%
Report:               6.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 62                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -39                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -10                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 5                  
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -41                
Correct output: -88                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -12                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -52                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -67                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop integer_swap boolean_flush) (integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 99
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop integer_swap boolean_flush) (integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 99
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 694 312 526 787 451 893 40 40 694)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (312 694 312 526 787 451 893 40 40 694)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop integer_swap boolean_flush) (integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 63
Size: 99
Percent parens: 0.364
--- Population Statistics ---
Average total errors in population: 5.251
Median total errors in population: 4
Error averages by case: (0.688 0.306 0.688 0.474 0.213 0.549 0.107 0.96 0.96 0.306)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.565
Average program size in population (points): 92.413
Average percent parens in population: 0.366
Minimum age in population: 15.75
Maximum age in population: 18.7734375
Average age in population: 17.75863671875
Median age in population: 17.73046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11095976
--- Timings ---
Current time: 1559314359083 milliseconds
Total Time:          39.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 50.6%
Fitness Testing:     12.9 seconds, 32.3%
Report:               6.7 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 41                 
Correct output: 43                  | Program output: 78                 
Correct output: 31                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 33                 
Correct output: 31                  | Program output: 47                 
Correct output: -96                 | Program output: -26                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: 50                 
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -35                
Correct output: -25                 | Program output: -23                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -11                
Correct output: -98                 | Program output: 8                  
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -17                
Correct output: -29                 | Program output: 25                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: 12                 
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -47                
Correct output: -55                 | Program output: -18                
Correct output: -91                 | Program output: 27                 
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: 31                 
Correct output: -91                 | Program output: 55                 
Correct output: -52                 | Program output: 14                 
Correct output: -95                 | Program output: -70                
Correct output: -34                 | Program output: -30                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: 18                 
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 49                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 51                 
Correct output: -97                 | Program output: -83                
Correct output: -14                 | Program output: 21                 
Correct output: -42                 | Program output: 19                 
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -13                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) (boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth integer_pop print_exec () exec_s_when_autoconstructing (integer_max exec_swap () (exec_k_when_autoconstructing (boolean_dup_items) ())) () ())))) ()) () ()) () ())))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.392
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) (boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth integer_pop print_exec () exec_s_when_autoconstructing (integer_max exec_swap () (exec_k_when_autoconstructing (boolean_dup_items) ())) () ())))) ()) () ()) () ())))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.392
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 87 127 606 884 84 616 28 370 862)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (624 87 127 606 884 84 616 28 370 862)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (boolean_dup_times exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times () exec_empty boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth integer_pop print_exec () exec_s_when_autoconstructing (integer_max exec_swap () (exec_k_when_autoconstructing (boolean_dup_items) ())) () ())))) () ())))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 58
Size: 91
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 5.712
Median total errors in population: 5
Error averages by case: (0.376 0.913 0.873 0.394 0.116 0.916 0.384 0.972 0.63 0.138)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.208
Average program size in population (points): 98.48
Average percent parens in population: 0.368
Minimum age in population: 18.21484375
Maximum age in population: 20.46875
Average age in population: 19.77230859375
Median age in population: 19.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 203
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.007
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12143571
--- Timings ---
Current time: 1559314362849 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.1 seconds, 50.7%
Fitness Testing:     14.0 seconds, 32.1%
Report:               7.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 303
Test mean error for best: 0.30300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 18                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 62                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 65                 
Correct output: 5                   | Program output: 82                 
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 60                 
Correct output: 4                   | Program output: 62                 
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 73                 
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 57                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: 5                  
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: 6                  
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 44                 
Correct output: -89                 | Program output: -63                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -52                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -29                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -30                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in1 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop integer_swap boolean_flush integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times ()) exec_empty boolean_dup_times) (boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 99
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in1 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop integer_swap boolean_flush integer_dup_times in1 integer_dup_times exec_k () (integer_add exec_dup_times ()) exec_empty boolean_dup_times) (boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())))))) () ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 99
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (784 517 205 755 486 486 843 200 381 442)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (784 517 205 755 486 486 843 200 381 442)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in2} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction tag_exec_505} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s (exec_yank) (in3) (integer_rot integer_rot) integer_lte in2 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove in1 boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) integer_max boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times integer_dup_times exec_k () (integer_add exec_dup_times () integer_dup_items boolean_dup_times) boolean_swap print_exec (exec_do*count (integer_stackdepth tag_exec_505 (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) () ()) () ())))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 108
Percent parens: 0.343
--- Population Statistics ---
Average total errors in population: 4.901
Median total errors in population: 6
Error averages by case: (0.216 0.483 0.795 0.245 0.514 0.514 0.157 0.8 0.619 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.286
Average program size in population (points): 97.957
Average percent parens in population: 0.364
Minimum age in population: 19.75
Maximum age in population: 22.453125
Average age in population: 21.227103515625
Median age in population: 21.3466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13208126
--- Timings ---
Current time: 1559314366650 milliseconds
Total Time:          47.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.1 seconds, 50.7%
Fitness Testing:     15.1 seconds, 31.9%
Report:               8.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 304
Test mean error for best: 0.30400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 41                 
Correct output: 43                  | Program output: 78                 
Correct output: 31                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 37                 
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 52                 
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 33                 
Correct output: 31                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -28                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: -47                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: 0                  
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -78                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -35                
Correct output: -25                 | Program output: -23                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -11                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -57                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -17                
Correct output: -29                 | Program output: 25                 
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -73                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -47                
Correct output: -55                 | Program output: -18                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: 14                 
Correct output: -95                 | Program output: -70                
Correct output: -34                 | Program output: -30                
Correct output: -81                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -16                
Correct output: -24                 | Program output: -14                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 49                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: 21                 
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: 0                  
Correct output: -100                | Program output: -98                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min integer_rot integer_lte in1 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove) integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_do*count (boolean_flush integer_min exec_s () (exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (boolean_swap) (integer_dup_times exec_k () (integer_add exec_dup_times () integer_yank boolean_dup_times) boolean_swap print_exec (exec_do*count (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) ()) () ()) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 111
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_750} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min integer_rot integer_lte in1 tag_exec_750 (boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove in1 boolean_shove) integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) boolean_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (exec_do*count (boolean_flush integer_min exec_s () (exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (boolean_swap) (integer_dup_times exec_k () (integer_add exec_dup_times () integer_yank boolean_dup_times) boolean_swap print_exec (exec_do*count (print_exec () exec_s_when_autoconstructing (integer_max boolean_rot) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()))))) ()) () ()) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 111
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (814 350 2 68 8 8 8 662 810 864)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (814 350 2 68 8 8 8 662 810 864)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (boolean_dup_times) (in1 boolean_eq in2) integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush exec_stackdepth integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ())) () ()) () ())))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 94
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.406
Median total errors in population: 6
Error averages by case: (0.186 0.65 0.998 0.932 0.992 0.992 0.992 0.338 0.19 0.136)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.718
Average program size in population (points): 101.392
Average percent parens in population: 0.351
Minimum age in population: 21.84375
Maximum age in population: 24.42333984375
Average age in population: 23.2150234375
Median age in population: 23.349609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14319386
--- Timings ---
Current time: 1559314370469 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.0 seconds, 50.8%
Fitness Testing:     16.2 seconds, 31.7%
Report:               8.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -26                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: -51                
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -3                 
Correct output: -91                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 51                 
Correct output: -97                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 110
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 110
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (757 311 534 180 263 534 252 680 434 171)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (757 311 534 180 263 534 252 680 434 171)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 72
Size: 110
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 5.884
Median total errors in population: 5
Error averages by case: (0.243 0.689 0.466 0.82 0.737 0.466 0.748 0.32 0.566 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.148
Average program size in population (points): 97.208
Average percent parens in population: 0.349
Minimum age in population: 23.2490234375
Maximum age in population: 25.93896484375
Average age in population: 24.65566748046875
Median age in population: 24.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.01
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 15465662
--- Timings ---
Current time: 1559314374265 milliseconds
Total Time:          55.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 50.8%
Fitness Testing:     17.3 seconds, 31.5%
Report:               9.6 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 222
Test mean error for best: 0.22200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 57                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 54                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -26                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -25                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -58                 | Program output: -31                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: -51                
Correct output: -92                 | Program output: -50                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -82                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -3                 
Correct output: -91                 | Program output: -24                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -3                 
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 51                 
Correct output: -97                 | Program output: -83                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -39                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () () boolean_dup_times integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) (boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k (integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()) () ()))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 110
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 3, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () () boolean_dup_times integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) (boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k (integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty boolean_invert_first_then_and) exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()) () ()))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 110
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (644 583 675 362 666 771 565 561 585 348)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (644 583 675 362 666 771 565 561 585 348)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 72
Size: 110
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 4.24
Median total errors in population: 3
Error averages by case: (0.356 0.417 0.325 0.638 0.334 0.229 0.435 0.439 0.415 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.887
Average program size in population (points): 106.709
Average percent parens in population: 0.345
Minimum age in population: 24.4375
Maximum age in population: 27.875732421875
Average age in population: 25.8890849609375
Median age in population: 26.055419921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 181
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.009
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 16547208
--- Timings ---
Current time: 1559314378016 milliseconds
Total Time:          58.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 50.8%
Fitness Testing:     18.5 seconds, 31.4%
Report:              10.4 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -80                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 exec_k_when_autoconstructing (integer_min -38 integer_yank boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ())) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 116
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 exec_k_when_autoconstructing (integer_min -38 integer_yank boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ())) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 116
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 851 568 568 464 560 402 742 840 688)
Population mean number of elite cases: 6.28
Count of perfect (error zero) individuals by case: (593 851 568 568 464 560 402 742 840 688)
Population mean number of perfect (error zero) cases: 6.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in4} {:close 0, :instruction boolean_and} {:close 2, :instruction exec_s} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction -38} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 2, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 2, :instruction exec_stackdepth} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items})
Best program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 81
Size: 122
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 3.724
Median total errors in population: 3
Error averages by case: (0.407 0.149 0.432 0.432 0.536 0.44 0.598 0.258 0.16 0.312)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.605
Average program size in population (points): 104.79
Average percent parens in population: 0.345
Minimum age in population: 25.4375
Maximum age in population: 29.259033203125
Average age in population: 27.40314562988281
Median age in population: 27.465576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.011
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 17630396
--- Timings ---
Current time: 1559314381852 milliseconds
Total Time:          62.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.9 seconds, 50.9%
Fitness Testing:     19.6 seconds, 31.3%
Report:              11.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 16
Successful program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 122


Auto-simplifying with starting size: 122
step: 0
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 500
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 1000
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 1500
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 2000
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 2500
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 3000
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 3500
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 4000
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 4500
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

step: 5000
program: (in4 boolean_and exec_s () () (boolean_dup_times) integer_eq boolean_eq in2 integer_min -38 exec_do*times (exec_do*while (exec_yank) in3) integer_rot integer_rot exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_eq) integer_rot) (integer_rot) exec_k_when_autoconstructing (integer_min -38 integer_yank exec_do*while (in1 boolean_shove integer_yank exec_do*while (print_integer exec_s_when_autoconstructing (exec_rot (exec_k_when_autoconstructing () () exec_s_when_autoconstructing (boolean_frominteger) (exec_k (exec_do*count (boolean_flush integer_min integer_div) exec_stackdepth boolean_dup integer_eq integer_dec exec_y (exec_stackdepth)) (integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times exec_k () (integer_eq integer_dec exec_y (exec_stackdepth)) integer_empty) boolean_invert_first_then_and) (exec_eq exec_k_when_autoconstructing (exec_noop) (integer_swap boolean_flush) integer_dup_times in1 integer_dup_times print_exec () exec_s_when_autoconstructing (integer_max integer_sub) (exec_k_when_autoconstructing (boolean_dup_items) ()) ()) ()) () ()))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 122

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: -64                 | Program output: -64                
Correct output: 6                   | Program output: 6                  
Correct output: 85                  | Program output: 85                 
Correct output: 57                  | Program output: 57                 
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: -79                 | Program output: -79                
Correct output: 61                  | Program output: 61                 
Correct output: 65                  | Program output: 65                 
Correct output: -55                 | Program output: -55                
Correct output: 62                  | Program output: 62                 
Correct output: 99                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 43                  | Program output: 43                 
Correct output: 31                  | Program output: 31                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 21                  | Program output: 21                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 5                   | Program output: 5                  
Correct output: 17                  | Program output: 17                 
Correct output: 12                  | Program output: 12                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 32                  | Program output: 32                 
Correct output: 31                  | Program output: 31                 
Correct output: -96                 | Program output: -96                
Correct output: -95                 | Program output: -95                
Correct output: -40                 | Program output: -40                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -61                 | Program output: -61                
Correct output: -21                 | Program output: -21                
Correct output: -62                 | Program output: -62                
Correct output: 47                  | Program output: 47                 
Correct output: -65                 | Program output: -65                
Correct output: -91                 | Program output: -91                
Correct output: -88                 | Program output: -88                
Correct output: -54                 | Program output: -54                
Correct output: -46                 | Program output: -46                
Correct output: -25                 | Program output: -25                
Correct output: -48                 | Program output: -48                
Correct output: -88                 | Program output: -88                
Correct output: -92                 | Program output: -92                
Correct output: -98                 | Program output: -98                
Correct output: -24                 | Program output: -24                
Correct output: -79                 | Program output: -79                
Correct output: -58                 | Program output: -58                
Correct output: -92                 | Program output: -92                
Correct output: -29                 | Program output: -29                
Correct output: -35                 | Program output: -35                
Correct output: -87                 | Program output: -87                
Correct output: -65                 | Program output: -65                
Correct output: -80                 | Program output: -80                
Correct output: -25                 | Program output: -25                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: 11                  | Program output: 11                 
Correct output: -36                 | Program output: -36                
Correct output: 10                  | Program output: 10                 
Correct output: -89                 | Program output: -89                
Correct output: -67                 | Program output: -67                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -34                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -99                 | Program output: -99                
Correct output: -69                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -24                 | Program output: -24                
Correct output: -56                 | Program output: -56                
Correct output: -98                 | Program output: -98                
Correct output: 46                  | Program output: 46                 
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -97                 | Program output: -97                
Correct output: -14                 | Program output: -14                
Correct output: -42                 | Program output: -42                
Correct output: -37                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -100                | Program output: -100               
;;******************************
