Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[81 81 81 -82] -82] [[-40 -68 -40 -40] -68] [[60 41 41 41] 41] [[6 50 50 50] 6] [[33 -77 33 33] -77] [[91 -96 -96 -96] -96] [[25 -61 -61 -61] -61] [[41 41 41 58] 41] [[4 4 -43 4] -43] [[-77 -6 -77 -77] -77] [(2 2 2 2) 2] [(-90 -90 -90 -90) -90] [(-5 -5 -5 -5) -5] [(-29 -29 -29 -29) -29] [(-95 -95 -95 -95) -95] [(32 44 68 88) 32] [(65 64 68 88) 64] [(56 82 61 42) 42] [(28 69 68 28) 28] [(59 68 17 68) 17] [(17 21 70 49) 17] [(2 32 46 40) 2] [(19 16 42 47) 16] [(51 88 90 67) 51] [(9 18 8 39) 8] [(75 79 0 79) 0] [(73 25 43 38) 25] [(54 33 21 80) 21] [(98 82 25 100) 25] [(90 51 91 0) 0] [(47 16 88 37) 16] [(65 8 21 48) 8] [(91 98 66 2) 2] [(25 81 43 18) 18] [(89 54 100 15) 15] [(73 -89 7 -25) -89] [(36 85 -26 54) -26] [(-23 -49 48 -45) -49] [(66 58 -17 97) -17] [(16 96 -62 -58) -62] [(41 -89 2 -71) -89] [(-55 -64 73 -34) -64] [(-15 87 -65 0) -65] [(7 92 -47 71) -47] [(20 -64 95 -15) -64] [(78 -100 -67 51) -100] [(-14 78 -24 -33) -33] [(9 -11 2 74) -11] [(64 -17 77 -47) -47] [(-97 -37 54 -97) -97] [(-50 -42 -57 95) -57] [(93 51 -77 -74) -77] [(86 -47 -67 -24) -67] [(-27 -8 -37 36) -37] [(-60 -1 96 9) -60] [(0 -8 -56 -49) -56] [(-79 -54 86 64) -79] [(-38 -68 -97 -23) -97] [(-68 -53 -95 17) -95] [(-81 -63 -34 -100) -100] [(-58 14 76 -19) -58] [(12 -65 -31 8) -65] [(36 -14 37 53) -14] [(51 -93 32 -32) -93] [(-22 -15 14 -13) -22] [(-57 -66 15 83) -66] [(-79 41 -84 61) -84] [(-94 -73 50 -74) -94] [(45 62 63 -97) -97] [(4 64 -68 -35) -68] [(23 12 34 -44) -44] [(19 -7 -7 -61) -61] [(93 26 25 22) 22] [(53 -78 90 -10) -78] [(34 78 93 -35) -35] [(7 -48 -20 -22) -48] [(43 -85 -35 -51) -85] [(85 -100 95 8) -100] [(-73 1 43 7) -73] [(61 -76 -76 70) -76] [(-41 -1 24 72) -41] [(99 16 65 28) 16] [(-59 90 77 -90) -90] [(70 84 -54 71) -54] [(-97 -89 -50 72) -97] [(-48 -8 17 -17) -48] [(38 -4 -64 -60) -64] [(14 -2 43 80) -2] [(32 96 -71 -64) -71] [(40 26 12 8) 8] [(-43 83 14 -51) -51] [(-59 -16 -57 -2) -59] [(-40 65 -39 -17) -40] [(36 8 64 -72) -72] [(-4 -73 -95 -35) -95])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[81 81 81 -82] -82]
Train Case:   6 | Input/Output: [[-40 -68 -40 -40] -68]
Train Case:   7 | Input/Output: [[60 41 41 41] 41]
Train Case:   8 | Input/Output: [[6 50 50 50] 6]
Train Case:   9 | Input/Output: [[33 -77 33 33] -77]
Train Case:  10 | Input/Output: [[91 -96 -96 -96] -96]
Train Case:  11 | Input/Output: [[25 -61 -61 -61] -61]
Train Case:  12 | Input/Output: [[41 41 41 58] 41]
Train Case:  13 | Input/Output: [[4 4 -43 4] -43]
Train Case:  14 | Input/Output: [[-77 -6 -77 -77] -77]
Train Case:  15 | Input/Output: [(2 2 2 2) 2]
Train Case:  16 | Input/Output: [(-90 -90 -90 -90) -90]
Train Case:  17 | Input/Output: [(-5 -5 -5 -5) -5]
Train Case:  18 | Input/Output: [(-29 -29 -29 -29) -29]
Train Case:  19 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  20 | Input/Output: [(32 44 68 88) 32]
Train Case:  21 | Input/Output: [(65 64 68 88) 64]
Train Case:  22 | Input/Output: [(56 82 61 42) 42]
Train Case:  23 | Input/Output: [(28 69 68 28) 28]
Train Case:  24 | Input/Output: [(59 68 17 68) 17]
Train Case:  25 | Input/Output: [(17 21 70 49) 17]
Train Case:  26 | Input/Output: [(2 32 46 40) 2]
Train Case:  27 | Input/Output: [(19 16 42 47) 16]
Train Case:  28 | Input/Output: [(51 88 90 67) 51]
Train Case:  29 | Input/Output: [(9 18 8 39) 8]
Train Case:  30 | Input/Output: [(75 79 0 79) 0]
Train Case:  31 | Input/Output: [(73 25 43 38) 25]
Train Case:  32 | Input/Output: [(54 33 21 80) 21]
Train Case:  33 | Input/Output: [(98 82 25 100) 25]
Train Case:  34 | Input/Output: [(90 51 91 0) 0]
Train Case:  35 | Input/Output: [(47 16 88 37) 16]
Train Case:  36 | Input/Output: [(65 8 21 48) 8]
Train Case:  37 | Input/Output: [(91 98 66 2) 2]
Train Case:  38 | Input/Output: [(25 81 43 18) 18]
Train Case:  39 | Input/Output: [(89 54 100 15) 15]
Train Case:  40 | Input/Output: [(73 -89 7 -25) -89]
Train Case:  41 | Input/Output: [(36 85 -26 54) -26]
Train Case:  42 | Input/Output: [(-23 -49 48 -45) -49]
Train Case:  43 | Input/Output: [(66 58 -17 97) -17]
Train Case:  44 | Input/Output: [(16 96 -62 -58) -62]
Train Case:  45 | Input/Output: [(41 -89 2 -71) -89]
Train Case:  46 | Input/Output: [(-55 -64 73 -34) -64]
Train Case:  47 | Input/Output: [(-15 87 -65 0) -65]
Train Case:  48 | Input/Output: [(7 92 -47 71) -47]
Train Case:  49 | Input/Output: [(20 -64 95 -15) -64]
Train Case:  50 | Input/Output: [(78 -100 -67 51) -100]
Train Case:  51 | Input/Output: [(-14 78 -24 -33) -33]
Train Case:  52 | Input/Output: [(9 -11 2 74) -11]
Train Case:  53 | Input/Output: [(64 -17 77 -47) -47]
Train Case:  54 | Input/Output: [(-97 -37 54 -97) -97]
Train Case:  55 | Input/Output: [(-50 -42 -57 95) -57]
Train Case:  56 | Input/Output: [(93 51 -77 -74) -77]
Train Case:  57 | Input/Output: [(86 -47 -67 -24) -67]
Train Case:  58 | Input/Output: [(-27 -8 -37 36) -37]
Train Case:  59 | Input/Output: [(-60 -1 96 9) -60]
Train Case:  60 | Input/Output: [(0 -8 -56 -49) -56]
Train Case:  61 | Input/Output: [(-79 -54 86 64) -79]
Train Case:  62 | Input/Output: [(-38 -68 -97 -23) -97]
Train Case:  63 | Input/Output: [(-68 -53 -95 17) -95]
Train Case:  64 | Input/Output: [(-81 -63 -34 -100) -100]
Train Case:  65 | Input/Output: [(-58 14 76 -19) -58]
Train Case:  66 | Input/Output: [(12 -65 -31 8) -65]
Train Case:  67 | Input/Output: [(36 -14 37 53) -14]
Train Case:  68 | Input/Output: [(51 -93 32 -32) -93]
Train Case:  69 | Input/Output: [(-22 -15 14 -13) -22]
Train Case:  70 | Input/Output: [(-57 -66 15 83) -66]
Train Case:  71 | Input/Output: [(-79 41 -84 61) -84]
Train Case:  72 | Input/Output: [(-94 -73 50 -74) -94]
Train Case:  73 | Input/Output: [(45 62 63 -97) -97]
Train Case:  74 | Input/Output: [(4 64 -68 -35) -68]
Train Case:  75 | Input/Output: [(23 12 34 -44) -44]
Train Case:  76 | Input/Output: [(19 -7 -7 -61) -61]
Train Case:  77 | Input/Output: [(93 26 25 22) 22]
Train Case:  78 | Input/Output: [(53 -78 90 -10) -78]
Train Case:  79 | Input/Output: [(34 78 93 -35) -35]
Train Case:  80 | Input/Output: [(7 -48 -20 -22) -48]
Train Case:  81 | Input/Output: [(43 -85 -35 -51) -85]
Train Case:  82 | Input/Output: [(85 -100 95 8) -100]
Train Case:  83 | Input/Output: [(-73 1 43 7) -73]
Train Case:  84 | Input/Output: [(61 -76 -76 70) -76]
Train Case:  85 | Input/Output: [(-41 -1 24 72) -41]
Train Case:  86 | Input/Output: [(99 16 65 28) 16]
Train Case:  87 | Input/Output: [(-59 90 77 -90) -90]
Train Case:  88 | Input/Output: [(70 84 -54 71) -54]
Train Case:  89 | Input/Output: [(-97 -89 -50 72) -97]
Train Case:  90 | Input/Output: [(-48 -8 17 -17) -48]
Train Case:  91 | Input/Output: [(38 -4 -64 -60) -64]
Train Case:  92 | Input/Output: [(14 -2 43 80) -2]
Train Case:  93 | Input/Output: [(32 96 -71 -64) -71]
Train Case:  94 | Input/Output: [(40 26 12 8) 8]
Train Case:  95 | Input/Output: [(-43 83 14 -51) -51]
Train Case:  96 | Input/Output: [(-59 -16 -57 -2) -59]
Train Case:  97 | Input/Output: [(-40 65 -39 -17) -40]
Train Case:  98 | Input/Output: [(36 8 64 -72) -72]
Train Case:  99 | Input/Output: [(-4 -73 -95 -35) -95]
Test Case:   0 | Input/Output: [[12 12 12 29] 12]
Test Case:   1 | Input/Output: [[64 -72 -72 -72] -72]
Test Case:   2 | Input/Output: [[-45 -45 -45 -44] -45]
Test Case:   3 | Input/Output: [[-53 74 74 74] -53]
Test Case:   4 | Input/Output: [[-89 -89 49 -89] -89]
Test Case:   5 | Input/Output: [[-39 -39 -13 -39] -39]
Test Case:   6 | Input/Output: [[-72 91 91 91] -72]
Test Case:   7 | Input/Output: [[-89 23 -89 -89] -89]
Test Case:   8 | Input/Output: [[-82 -82 -82 31] -82]
Test Case:   9 | Input/Output: [[-59 -63 -59 -59] -63]
Test Case:  10 | Input/Output: [[-51 -51 -51 -78] -78]
Test Case:  11 | Input/Output: [[-43 4 4 4] -43]
Test Case:  12 | Input/Output: [[96 96 63 96] 63]
Test Case:  13 | Input/Output: [[71 71 -37 71] -37]
Test Case:  14 | Input/Output: [[51 51 51 -61] -61]
Test Case:  15 | Input/Output: [[-44 -6 -6 -6] -44]
Test Case:  16 | Input/Output: [[-10 2 -10 -10] -10]
Test Case:  17 | Input/Output: [[6 -33 -33 -33] -33]
Test Case:  18 | Input/Output: [[88 36 88 88] 36]
Test Case:  19 | Input/Output: [[-32 -32 -32 -52] -52]
Test Case:  20 | Input/Output: [[83 69 83 83] 69]
Test Case:  21 | Input/Output: [[-64 -64 -6 -64] -64]
Test Case:  22 | Input/Output: [[14 97 97 97] 14]
Test Case:  23 | Input/Output: [[97 3 3 3] 3]
Test Case:  24 | Input/Output: [[32 18 18 18] 18]
Test Case:  25 | Input/Output: [[-52 81 81 81] -52]
Test Case:  26 | Input/Output: [[-11 -11 -81 -11] -81]
Test Case:  27 | Input/Output: [[-43 -43 -43 5] -43]
Test Case:  28 | Input/Output: [[-51 87 87 87] -51]
Test Case:  29 | Input/Output: [[71 71 -2 71] -2]
Test Case:  30 | Input/Output: [[-50 -50 -50 -19] -50]
Test Case:  31 | Input/Output: [[-42 -42 -42 -77] -77]
Test Case:  32 | Input/Output: [[94 94 94 70] 70]
Test Case:  33 | Input/Output: [[37 37 -50 37] -50]
Test Case:  34 | Input/Output: [[25 25 25 -53] -53]
Test Case:  35 | Input/Output: [[9 9 9 96] 9]
Test Case:  36 | Input/Output: [[35 35 35 -52] -52]
Test Case:  37 | Input/Output: [[-32 -65 -32 -32] -65]
Test Case:  38 | Input/Output: [[49 7 7 7] 7]
Test Case:  39 | Input/Output: [[91 83 91 91] 83]
Test Case:  40 | Input/Output: [[-57 -57 -34 -57] -57]
Test Case:  41 | Input/Output: [[-29 -29 -29 47] -29]
Test Case:  42 | Input/Output: [[-41 -86 -41 -41] -86]
Test Case:  43 | Input/Output: [[7 7 7 93] 7]
Test Case:  44 | Input/Output: [[-84 87 -84 -84] -84]
Test Case:  45 | Input/Output: [[25 25 95 25] 25]
Test Case:  46 | Input/Output: [[94 -90 -90 -90] -90]
Test Case:  47 | Input/Output: [[83 83 83 -88] -88]
Test Case:  48 | Input/Output: [[64 64 64 18] 18]
Test Case:  49 | Input/Output: [[93 93 93 -27] -27]
Test Case:  50 | Input/Output: [[99 18 18 18] 18]
Test Case:  51 | Input/Output: [[100 -80 100 100] -80]
Test Case:  52 | Input/Output: [[78 78 -71 78] -71]
Test Case:  53 | Input/Output: [[19 -34 19 19] -34]
Test Case:  54 | Input/Output: [[-85 -44 -44 -44] -85]
Test Case:  55 | Input/Output: [[-92 72 72 72] -92]
Test Case:  56 | Input/Output: [[-31 12 12 12] -31]
Test Case:  57 | Input/Output: [[-10 -89 -89 -89] -89]
Test Case:  58 | Input/Output: [[71 71 0 71] 0]
Test Case:  59 | Input/Output: [[59 59 59 -70] -70]
Test Case:  60 | Input/Output: [[45 45 10 45] 10]
Test Case:  61 | Input/Output: [[-66 -78 -66 -66] -78]
Test Case:  62 | Input/Output: [[50 50 50 -91] -91]
Test Case:  63 | Input/Output: [[-62 44 -62 -62] -62]
Test Case:  64 | Input/Output: [[-10 32 -10 -10] -10]
Test Case:  65 | Input/Output: [[-68 -21 -68 -68] -68]
Test Case:  66 | Input/Output: [[-22 97 -22 -22] -22]
Test Case:  67 | Input/Output: [[-62 -13 -62 -62] -62]
Test Case:  68 | Input/Output: [[85 -61 -61 -61] -61]
Test Case:  69 | Input/Output: [[-69 -37 -37 -37] -69]
Test Case:  70 | Input/Output: [[-28 -28 -28 -89] -89]
Test Case:  71 | Input/Output: [[-21 -21 53 -21] -21]
Test Case:  72 | Input/Output: [[67 67 -5 67] -5]
Test Case:  73 | Input/Output: [[55 -66 -66 -66] -66]
Test Case:  74 | Input/Output: [[71 78 71 71] 71]
Test Case:  75 | Input/Output: [[56 -2 -2 -2] -2]
Test Case:  76 | Input/Output: [[11 11 11 -83] -83]
Test Case:  77 | Input/Output: [[-2 -2 -2 55] -2]
Test Case:  78 | Input/Output: [[-94 -94 23 -94] -94]
Test Case:  79 | Input/Output: [[-70 -70 -70 -65] -70]
Test Case:  80 | Input/Output: [[-75 -75 -75 -5] -75]
Test Case:  81 | Input/Output: [[73 73 73 -24] -24]
Test Case:  82 | Input/Output: [[38 -65 38 38] -65]
Test Case:  83 | Input/Output: [[68 68 68 18] 18]
Test Case:  84 | Input/Output: [[92 92 10 92] 10]
Test Case:  85 | Input/Output: [[-56 -56 -56 28] -56]
Test Case:  86 | Input/Output: [[-1 -1 -1 -67] -67]
Test Case:  87 | Input/Output: [[17 -44 17 17] -44]
Test Case:  88 | Input/Output: [[91 91 91 -24] -24]
Test Case:  89 | Input/Output: [[-96 -93 -93 -93] -96]
Test Case:  90 | Input/Output: [[70 -80 -80 -80] -80]
Test Case:  91 | Input/Output: [[-36 -36 48 -36] -36]
Test Case:  92 | Input/Output: [[75 75 75 40] 40]
Test Case:  93 | Input/Output: [[-33 -33 -46 -33] -46]
Test Case:  94 | Input/Output: [[8 8 8 48] 8]
Test Case:  95 | Input/Output: [[3 59 3 3] 3]
Test Case:  96 | Input/Output: [[5 5 71 5] 5]
Test Case:  97 | Input/Output: [[89 83 89 89] 83]
Test Case:  98 | Input/Output: [[-66 14 14 14] -66]
Test Case:  99 | Input/Output: [[-81 89 89 89] -81]
Test Case: 100 | Input/Output: [(82 82 82 82) 82]
Test Case: 101 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 102 | Input/Output: [(6 6 6 6) 6]
Test Case: 103 | Input/Output: [(9 9 9 9) 9]
Test Case: 104 | Input/Output: [(23 23 23 23) 23]
Test Case: 105 | Input/Output: [(88 88 88 88) 88]
Test Case: 106 | Input/Output: [(78 78 78 78) 78]
Test Case: 107 | Input/Output: [(33 33 33 33) 33]
Test Case: 108 | Input/Output: [(19 19 19 19) 19]
Test Case: 109 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 110 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 111 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 112 | Input/Output: [(97 97 97 97) 97]
Test Case: 113 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 114 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 115 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 116 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 117 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 118 | Input/Output: [(18 18 18 18) 18]
Test Case: 119 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 120 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 121 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 122 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 123 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 124 | Input/Output: [(62 62 62 62) 62]
Test Case: 125 | Input/Output: [(95 95 95 95) 95]
Test Case: 126 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 127 | Input/Output: [(84 84 84 84) 84]
Test Case: 128 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 129 | Input/Output: [(38 38 38 38) 38]
Test Case: 130 | Input/Output: [(1 1 1 1) 1]
Test Case: 131 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 132 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 133 | Input/Output: [(32 32 32 32) 32]
Test Case: 134 | Input/Output: [(82 82 82 82) 82]
Test Case: 135 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 136 | Input/Output: [(2 2 2 2) 2]
Test Case: 137 | Input/Output: [(3 3 3 3) 3]
Test Case: 138 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 139 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 140 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 141 | Input/Output: [(93 93 93 93) 93]
Test Case: 142 | Input/Output: [(89 89 89 89) 89]
Test Case: 143 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 144 | Input/Output: [(44 44 44 44) 44]
Test Case: 145 | Input/Output: [(16 16 16 16) 16]
Test Case: 146 | Input/Output: [(62 62 62 62) 62]
Test Case: 147 | Input/Output: [(80 80 80 80) 80]
Test Case: 148 | Input/Output: [(54 54 54 54) 54]
Test Case: 149 | Input/Output: [(21 21 21 21) 21]
Test Case: 150 | Input/Output: [(14 14 14 14) 14]
Test Case: 151 | Input/Output: [(65 65 65 65) 65]
Test Case: 152 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 153 | Input/Output: [(62 62 62 62) 62]
Test Case: 154 | Input/Output: [(53 53 53 53) 53]
Test Case: 155 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 156 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 157 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 158 | Input/Output: [(1 1 1 1) 1]
Test Case: 159 | Input/Output: [(79 79 79 79) 79]
Test Case: 160 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 161 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 162 | Input/Output: [(70 70 70 70) 70]
Test Case: 163 | Input/Output: [(17 17 17 17) 17]
Test Case: 164 | Input/Output: [(42 42 42 42) 42]
Test Case: 165 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 166 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 167 | Input/Output: [(13 13 13 13) 13]
Test Case: 168 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 169 | Input/Output: [(58 58 58 58) 58]
Test Case: 170 | Input/Output: [(21 21 21 21) 21]
Test Case: 171 | Input/Output: [(94 94 94 94) 94]
Test Case: 172 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 173 | Input/Output: [(77 77 77 77) 77]
Test Case: 174 | Input/Output: [(45 45 45 45) 45]
Test Case: 175 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 176 | Input/Output: [(57 57 57 57) 57]
Test Case: 177 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 178 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 179 | Input/Output: [(18 18 18 18) 18]
Test Case: 180 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 181 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 182 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 183 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 184 | Input/Output: [(60 60 60 60) 60]
Test Case: 185 | Input/Output: [(80 80 80 80) 80]
Test Case: 186 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 187 | Input/Output: [(6 6 6 6) 6]
Test Case: 188 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 189 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 190 | Input/Output: [(89 89 89 89) 89]
Test Case: 191 | Input/Output: [(80 80 80 80) 80]
Test Case: 192 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 193 | Input/Output: [(14 14 14 14) 14]
Test Case: 194 | Input/Output: [(24 24 24 24) 24]
Test Case: 195 | Input/Output: [(66 66 66 66) 66]
Test Case: 196 | Input/Output: [(25 25 25 25) 25]
Test Case: 197 | Input/Output: [(26 26 26 26) 26]
Test Case: 198 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 199 | Input/Output: [(58 58 58 58) 58]
Test Case: 200 | Input/Output: [(6 86 28 62) 6]
Test Case: 201 | Input/Output: [(88 24 40 68) 24]
Test Case: 202 | Input/Output: [(13 52 81 55) 13]
Test Case: 203 | Input/Output: [(97 79 62 73) 62]
Test Case: 204 | Input/Output: [(65 76 31 73) 31]
Test Case: 205 | Input/Output: [(25 91 100 67) 25]
Test Case: 206 | Input/Output: [(18 23 81 15) 15]
Test Case: 207 | Input/Output: [(93 78 85 30) 30]
Test Case: 208 | Input/Output: [(46 44 59 81) 44]
Test Case: 209 | Input/Output: [(89 15 58 56) 15]
Test Case: 210 | Input/Output: [(66 47 99 16) 16]
Test Case: 211 | Input/Output: [(42 9 62 26) 9]
Test Case: 212 | Input/Output: [(26 90 77 97) 26]
Test Case: 213 | Input/Output: [(68 15 51 51) 15]
Test Case: 214 | Input/Output: [(24 28 40 91) 24]
Test Case: 215 | Input/Output: [(57 96 100 17) 17]
Test Case: 216 | Input/Output: [(70 36 11 77) 11]
Test Case: 217 | Input/Output: [(22 7 22 35) 7]
Test Case: 218 | Input/Output: [(52 36 93 52) 36]
Test Case: 219 | Input/Output: [(17 37 33 71) 17]
Test Case: 220 | Input/Output: [(48 13 57 5) 5]
Test Case: 221 | Input/Output: [(94 95 40 88) 40]
Test Case: 222 | Input/Output: [(31 77 86 51) 31]
Test Case: 223 | Input/Output: [(26 87 54 50) 26]
Test Case: 224 | Input/Output: [(55 16 75 98) 16]
Test Case: 225 | Input/Output: [(80 14 20 15) 14]
Test Case: 226 | Input/Output: [(38 81 96 6) 6]
Test Case: 227 | Input/Output: [(73 51 98 25) 25]
Test Case: 228 | Input/Output: [(94 24 18 87) 18]
Test Case: 229 | Input/Output: [(23 65 59 71) 23]
Test Case: 230 | Input/Output: [(37 33 39 92) 33]
Test Case: 231 | Input/Output: [(74 51 93 39) 39]
Test Case: 232 | Input/Output: [(94 66 93 19) 19]
Test Case: 233 | Input/Output: [(44 43 42 37) 37]
Test Case: 234 | Input/Output: [(79 99 81 48) 48]
Test Case: 235 | Input/Output: [(99 70 76 16) 16]
Test Case: 236 | Input/Output: [(78 4 38 45) 4]
Test Case: 237 | Input/Output: [(13 90 50 52) 13]
Test Case: 238 | Input/Output: [(6 50 52 8) 6]
Test Case: 239 | Input/Output: [(43 51 71 84) 43]
Test Case: 240 | Input/Output: [(19 53 57 43) 19]
Test Case: 241 | Input/Output: [(53 62 11 8) 8]
Test Case: 242 | Input/Output: [(48 62 52 51) 48]
Test Case: 243 | Input/Output: [(1 64 2 54) 1]
Test Case: 244 | Input/Output: [(53 77 27 1) 1]
Test Case: 245 | Input/Output: [(0 3 50 48) 0]
Test Case: 246 | Input/Output: [(41 34 59 54) 34]
Test Case: 247 | Input/Output: [(69 2 91 38) 2]
Test Case: 248 | Input/Output: [(42 67 57 0) 0]
Test Case: 249 | Input/Output: [(91 99 11 36) 11]
Test Case: 250 | Input/Output: [(56 85 30 68) 30]
Test Case: 251 | Input/Output: [(24 94 45 86) 24]
Test Case: 252 | Input/Output: [(47 45 72 1) 1]
Test Case: 253 | Input/Output: [(81 62 4 52) 4]
Test Case: 254 | Input/Output: [(62 8 94 1) 1]
Test Case: 255 | Input/Output: [(45 68 63 77) 45]
Test Case: 256 | Input/Output: [(0 54 35 18) 0]
Test Case: 257 | Input/Output: [(43 74 76 78) 43]
Test Case: 258 | Input/Output: [(87 58 32 63) 32]
Test Case: 259 | Input/Output: [(11 87 19 52) 11]
Test Case: 260 | Input/Output: [(74 18 11 94) 11]
Test Case: 261 | Input/Output: [(58 9 62 67) 9]
Test Case: 262 | Input/Output: [(99 19 22 89) 19]
Test Case: 263 | Input/Output: [(43 50 73 0) 0]
Test Case: 264 | Input/Output: [(63 52 16 61) 16]
Test Case: 265 | Input/Output: [(35 92 17 90) 17]
Test Case: 266 | Input/Output: [(14 63 14 37) 14]
Test Case: 267 | Input/Output: [(87 18 23 19) 18]
Test Case: 268 | Input/Output: [(60 26 67 65) 26]
Test Case: 269 | Input/Output: [(44 73 95 9) 9]
Test Case: 270 | Input/Output: [(95 63 81 59) 59]
Test Case: 271 | Input/Output: [(34 92 85 81) 34]
Test Case: 272 | Input/Output: [(61 63 3 64) 3]
Test Case: 273 | Input/Output: [(81 31 70 43) 31]
Test Case: 274 | Input/Output: [(14 61 24 32) 14]
Test Case: 275 | Input/Output: [(35 55 60 45) 35]
Test Case: 276 | Input/Output: [(77 17 87 1) 1]
Test Case: 277 | Input/Output: [(82 96 16 38) 16]
Test Case: 278 | Input/Output: [(84 19 12 95) 12]
Test Case: 279 | Input/Output: [(89 73 7 47) 7]
Test Case: 280 | Input/Output: [(81 57 76 40) 40]
Test Case: 281 | Input/Output: [(85 52 70 17) 17]
Test Case: 282 | Input/Output: [(84 93 20 81) 20]
Test Case: 283 | Input/Output: [(17 22 81 21) 17]
Test Case: 284 | Input/Output: [(65 63 99 48) 48]
Test Case: 285 | Input/Output: [(69 22 77 20) 20]
Test Case: 286 | Input/Output: [(77 5 77 96) 5]
Test Case: 287 | Input/Output: [(2 10 57 78) 2]
Test Case: 288 | Input/Output: [(19 41 28 100) 19]
Test Case: 289 | Input/Output: [(38 100 78 98) 38]
Test Case: 290 | Input/Output: [(89 61 71 49) 49]
Test Case: 291 | Input/Output: [(71 79 22 15) 15]
Test Case: 292 | Input/Output: [(15 8 54 69) 8]
Test Case: 293 | Input/Output: [(48 43 100 95) 43]
Test Case: 294 | Input/Output: [(77 13 70 72) 13]
Test Case: 295 | Input/Output: [(29 96 4 22) 4]
Test Case: 296 | Input/Output: [(9 66 62 45) 9]
Test Case: 297 | Input/Output: [(45 1 14 96) 1]
Test Case: 298 | Input/Output: [(8 32 93 72) 8]
Test Case: 299 | Input/Output: [(3 9 70 26) 3]
Test Case: 300 | Input/Output: [(17 94 91 82) 17]
Test Case: 301 | Input/Output: [(98 10 83 29) 10]
Test Case: 302 | Input/Output: [(34 44 59 46) 34]
Test Case: 303 | Input/Output: [(76 77 24 55) 24]
Test Case: 304 | Input/Output: [(96 68 45 40) 40]
Test Case: 305 | Input/Output: [(92 50 9 45) 9]
Test Case: 306 | Input/Output: [(99 1 96 34) 1]
Test Case: 307 | Input/Output: [(4 8 74 48) 4]
Test Case: 308 | Input/Output: [(30 64 76 15) 15]
Test Case: 309 | Input/Output: [(47 66 22 76) 22]
Test Case: 310 | Input/Output: [(70 58 16 40) 16]
Test Case: 311 | Input/Output: [(35 68 87 74) 35]
Test Case: 312 | Input/Output: [(80 30 9 64) 9]
Test Case: 313 | Input/Output: [(62 86 42 19) 19]
Test Case: 314 | Input/Output: [(92 27 66 77) 27]
Test Case: 315 | Input/Output: [(82 2 22 71) 2]
Test Case: 316 | Input/Output: [(60 7 32 81) 7]
Test Case: 317 | Input/Output: [(47 22 40 30) 22]
Test Case: 318 | Input/Output: [(59 34 94 10) 10]
Test Case: 319 | Input/Output: [(26 18 32 58) 18]
Test Case: 320 | Input/Output: [(23 23 56 28) 23]
Test Case: 321 | Input/Output: [(84 55 95 40) 40]
Test Case: 322 | Input/Output: [(4 11 46 37) 4]
Test Case: 323 | Input/Output: [(61 63 57 29) 29]
Test Case: 324 | Input/Output: [(45 9 25 21) 9]
Test Case: 325 | Input/Output: [(45 60 8 22) 8]
Test Case: 326 | Input/Output: [(40 23 94 41) 23]
Test Case: 327 | Input/Output: [(21 69 44 90) 21]
Test Case: 328 | Input/Output: [(82 8 12 91) 8]
Test Case: 329 | Input/Output: [(17 23 70 54) 17]
Test Case: 330 | Input/Output: [(58 33 66 26) 26]
Test Case: 331 | Input/Output: [(40 93 62 86) 40]
Test Case: 332 | Input/Output: [(68 69 62 48) 48]
Test Case: 333 | Input/Output: [(11 41 86 18) 11]
Test Case: 334 | Input/Output: [(42 71 95 20) 20]
Test Case: 335 | Input/Output: [(84 65 91 72) 65]
Test Case: 336 | Input/Output: [(23 7 12 28) 7]
Test Case: 337 | Input/Output: [(56 19 29 74) 19]
Test Case: 338 | Input/Output: [(4 22 66 92) 4]
Test Case: 339 | Input/Output: [(17 56 2 92) 2]
Test Case: 340 | Input/Output: [(31 57 40 95) 31]
Test Case: 341 | Input/Output: [(89 26 32 59) 26]
Test Case: 342 | Input/Output: [(86 7 49 17) 7]
Test Case: 343 | Input/Output: [(10 5 100 93) 5]
Test Case: 344 | Input/Output: [(98 30 1 97) 1]
Test Case: 345 | Input/Output: [(79 56 22 48) 22]
Test Case: 346 | Input/Output: [(42 55 66 39) 39]
Test Case: 347 | Input/Output: [(92 39 72 64) 39]
Test Case: 348 | Input/Output: [(22 32 6 8) 6]
Test Case: 349 | Input/Output: [(53 10 33 74) 10]
Test Case: 350 | Input/Output: [(36 96 100 18) 18]
Test Case: 351 | Input/Output: [(71 52 15 28) 15]
Test Case: 352 | Input/Output: [(60 82 61 27) 27]
Test Case: 353 | Input/Output: [(49 49 4 96) 4]
Test Case: 354 | Input/Output: [(31 91 29 56) 29]
Test Case: 355 | Input/Output: [(53 8 39 98) 8]
Test Case: 356 | Input/Output: [(4 62 80 93) 4]
Test Case: 357 | Input/Output: [(49 62 54 41) 41]
Test Case: 358 | Input/Output: [(30 17 91 44) 17]
Test Case: 359 | Input/Output: [(40 81 21 5) 5]
Test Case: 360 | Input/Output: [(84 34 51 15) 15]
Test Case: 361 | Input/Output: [(11 32 91 90) 11]
Test Case: 362 | Input/Output: [(18 37 3 8) 3]
Test Case: 363 | Input/Output: [(27 43 53 52) 27]
Test Case: 364 | Input/Output: [(42 26 15 2) 2]
Test Case: 365 | Input/Output: [(21 96 77 48) 21]
Test Case: 366 | Input/Output: [(88 70 36 83) 36]
Test Case: 367 | Input/Output: [(80 33 47 68) 33]
Test Case: 368 | Input/Output: [(37 52 87 63) 37]
Test Case: 369 | Input/Output: [(76 99 16 59) 16]
Test Case: 370 | Input/Output: [(65 48 48 23) 23]
Test Case: 371 | Input/Output: [(20 20 53 46) 20]
Test Case: 372 | Input/Output: [(67 10 5 100) 5]
Test Case: 373 | Input/Output: [(52 24 9 87) 9]
Test Case: 374 | Input/Output: [(97 75 96 88) 75]
Test Case: 375 | Input/Output: [(38 79 75 4) 4]
Test Case: 376 | Input/Output: [(44 48 26 79) 26]
Test Case: 377 | Input/Output: [(45 77 57 61) 45]
Test Case: 378 | Input/Output: [(10 80 75 32) 10]
Test Case: 379 | Input/Output: [(34 38 10 79) 10]
Test Case: 380 | Input/Output: [(58 26 66 21) 21]
Test Case: 381 | Input/Output: [(86 93 55 60) 55]
Test Case: 382 | Input/Output: [(9 12 14 33) 9]
Test Case: 383 | Input/Output: [(17 15 31 54) 15]
Test Case: 384 | Input/Output: [(81 38 50 43) 38]
Test Case: 385 | Input/Output: [(13 36 50 25) 13]
Test Case: 386 | Input/Output: [(94 5 16 54) 5]
Test Case: 387 | Input/Output: [(59 95 11 75) 11]
Test Case: 388 | Input/Output: [(83 69 53 78) 53]
Test Case: 389 | Input/Output: [(84 45 70 10) 10]
Test Case: 390 | Input/Output: [(5 89 3 84) 3]
Test Case: 391 | Input/Output: [(93 4 55 50) 4]
Test Case: 392 | Input/Output: [(84 20 78 27) 20]
Test Case: 393 | Input/Output: [(63 32 64 50) 32]
Test Case: 394 | Input/Output: [(16 32 7 13) 7]
Test Case: 395 | Input/Output: [(94 27 96 21) 21]
Test Case: 396 | Input/Output: [(11 84 95 72) 11]
Test Case: 397 | Input/Output: [(0 20 60 15) 0]
Test Case: 398 | Input/Output: [(97 98 100 60) 60]
Test Case: 399 | Input/Output: [(25 4 94 74) 4]
Test Case: 400 | Input/Output: [(90 0 48 -76) -76]
Test Case: 401 | Input/Output: [(-38 -54 65 5) -54]
Test Case: 402 | Input/Output: [(20 -48 -96 53) -96]
Test Case: 403 | Input/Output: [(84 -84 -37 31) -84]
Test Case: 404 | Input/Output: [(-7 7 55 -56) -56]
Test Case: 405 | Input/Output: [(-76 55 98 86) -76]
Test Case: 406 | Input/Output: [(4 -13 66 -88) -88]
Test Case: 407 | Input/Output: [(-74 54 -54 -20) -74]
Test Case: 408 | Input/Output: [(78 87 -72 -6) -72]
Test Case: 409 | Input/Output: [(92 -21 -75 65) -75]
Test Case: 410 | Input/Output: [(59 10 78 -36) -36]
Test Case: 411 | Input/Output: [(-96 -90 69 -62) -96]
Test Case: 412 | Input/Output: [(70 20 61 -66) -66]
Test Case: 413 | Input/Output: [(-92 35 56 19) -92]
Test Case: 414 | Input/Output: [(-100 -58 -57 -70) -100]
Test Case: 415 | Input/Output: [(51 -49 31 100) -49]
Test Case: 416 | Input/Output: [(16 89 41 -51) -51]
Test Case: 417 | Input/Output: [(-35 87 7 99) -35]
Test Case: 418 | Input/Output: [(53 -83 31 -75) -83]
Test Case: 419 | Input/Output: [(28 51 -68 39) -68]
Test Case: 420 | Input/Output: [(90 99 -20 99) -20]
Test Case: 421 | Input/Output: [(-1 -14 84 38) -14]
Test Case: 422 | Input/Output: [(-63 -25 -42 -80) -80]
Test Case: 423 | Input/Output: [(-99 -21 14 29) -99]
Test Case: 424 | Input/Output: [(86 16 4 84) 4]
Test Case: 425 | Input/Output: [(100 1 -33 48) -33]
Test Case: 426 | Input/Output: [(88 86 22 52) 22]
Test Case: 427 | Input/Output: [(18 -39 -44 -69) -69]
Test Case: 428 | Input/Output: [(-17 -50 80 -92) -92]
Test Case: 429 | Input/Output: [(-37 -58 8 12) -58]
Test Case: 430 | Input/Output: [(-11 54 53 -82) -82]
Test Case: 431 | Input/Output: [(-60 9 -11 -20) -60]
Test Case: 432 | Input/Output: [(25 12 -89 -67) -89]
Test Case: 433 | Input/Output: [(72 81 -11 -93) -93]
Test Case: 434 | Input/Output: [(91 -59 91 -35) -59]
Test Case: 435 | Input/Output: [(-27 72 -91 96) -91]
Test Case: 436 | Input/Output: [(-44 -54 97 -48) -54]
Test Case: 437 | Input/Output: [(93 33 20 -66) -66]
Test Case: 438 | Input/Output: [(51 -50 13 65) -50]
Test Case: 439 | Input/Output: [(85 -88 28 35) -88]
Test Case: 440 | Input/Output: [(-69 -89 72 33) -89]
Test Case: 441 | Input/Output: [(-4 -36 -45 -34) -45]
Test Case: 442 | Input/Output: [(98 41 -26 100) -26]
Test Case: 443 | Input/Output: [(-53 64 -6 5) -53]
Test Case: 444 | Input/Output: [(-8 14 14 76) -8]
Test Case: 445 | Input/Output: [(84 1 21 -60) -60]
Test Case: 446 | Input/Output: [(-39 72 56 -50) -50]
Test Case: 447 | Input/Output: [(38 -73 6 -92) -92]
Test Case: 448 | Input/Output: [(44 100 -69 36) -69]
Test Case: 449 | Input/Output: [(1 -36 15 50) -36]
Test Case: 450 | Input/Output: [(-18 -85 -4 -66) -85]
Test Case: 451 | Input/Output: [(19 8 -71 -3) -71]
Test Case: 452 | Input/Output: [(69 81 -17 -12) -17]
Test Case: 453 | Input/Output: [(-57 40 84 -52) -57]
Test Case: 454 | Input/Output: [(-19 69 -88 59) -88]
Test Case: 455 | Input/Output: [(81 53 -13 0) -13]
Test Case: 456 | Input/Output: [(82 -28 -33 68) -33]
Test Case: 457 | Input/Output: [(-96 9 1 -37) -96]
Test Case: 458 | Input/Output: [(83 29 -78 -25) -78]
Test Case: 459 | Input/Output: [(20 25 86 -29) -29]
Test Case: 460 | Input/Output: [(54 100 0 3) 0]
Test Case: 461 | Input/Output: [(-97 -63 -9 -69) -97]
Test Case: 462 | Input/Output: [(-92 -1 -96 26) -96]
Test Case: 463 | Input/Output: [(22 -70 -85 26) -85]
Test Case: 464 | Input/Output: [(44 -88 43 100) -88]
Test Case: 465 | Input/Output: [(-10 8 71 -67) -67]
Test Case: 466 | Input/Output: [(57 46 -47 -10) -47]
Test Case: 467 | Input/Output: [(19 -45 55 -54) -54]
Test Case: 468 | Input/Output: [(26 2 89 71) 2]
Test Case: 469 | Input/Output: [(92 -10 -64 -21) -64]
Test Case: 470 | Input/Output: [(12 97 -84 71) -84]
Test Case: 471 | Input/Output: [(62 93 7 -27) -27]
Test Case: 472 | Input/Output: [(-28 82 75 -76) -76]
Test Case: 473 | Input/Output: [(47 99 97 78) 47]
Test Case: 474 | Input/Output: [(-74 55 60 52) -74]
Test Case: 475 | Input/Output: [(-52 -16 -87 73) -87]
Test Case: 476 | Input/Output: [(-15 -89 -85 27) -89]
Test Case: 477 | Input/Output: [(-17 47 96 -84) -84]
Test Case: 478 | Input/Output: [(-64 94 -71 -27) -71]
Test Case: 479 | Input/Output: [(-14 71 -80 -46) -80]
Test Case: 480 | Input/Output: [(19 -59 18 13) -59]
Test Case: 481 | Input/Output: [(-44 9 -36 -75) -75]
Test Case: 482 | Input/Output: [(-71 48 -27 -9) -71]
Test Case: 483 | Input/Output: [(-32 31 70 97) -32]
Test Case: 484 | Input/Output: [(-92 96 -13 -89) -92]
Test Case: 485 | Input/Output: [(-45 56 -86 -58) -86]
Test Case: 486 | Input/Output: [(-94 22 -55 21) -94]
Test Case: 487 | Input/Output: [(-25 -4 -41 -38) -41]
Test Case: 488 | Input/Output: [(-50 -55 24 -72) -72]
Test Case: 489 | Input/Output: [(-38 -57 46 -57) -57]
Test Case: 490 | Input/Output: [(-29 87 69 76) -29]
Test Case: 491 | Input/Output: [(-50 11 -53 15) -53]
Test Case: 492 | Input/Output: [(-21 -87 -9 -66) -87]
Test Case: 493 | Input/Output: [(46 20 -68 -7) -68]
Test Case: 494 | Input/Output: [(53 97 88 -23) -23]
Test Case: 495 | Input/Output: [(-54 -11 -72 74) -72]
Test Case: 496 | Input/Output: [(-14 31 -29 96) -29]
Test Case: 497 | Input/Output: [(-95 38 -63 -52) -95]
Test Case: 498 | Input/Output: [(-51 -42 41 9) -51]
Test Case: 499 | Input/Output: [(64 -10 75 71) -10]
Test Case: 500 | Input/Output: [(-20 80 -55 -65) -65]
Test Case: 501 | Input/Output: [(-64 -30 -49 -93) -93]
Test Case: 502 | Input/Output: [(-59 61 49 -69) -69]
Test Case: 503 | Input/Output: [(-86 70 -44 51) -86]
Test Case: 504 | Input/Output: [(-92 -3 -52 9) -92]
Test Case: 505 | Input/Output: [(63 3 61 -64) -64]
Test Case: 506 | Input/Output: [(93 71 -45 -39) -45]
Test Case: 507 | Input/Output: [(11 27 55 49) 11]
Test Case: 508 | Input/Output: [(-29 -48 -49 22) -49]
Test Case: 509 | Input/Output: [(88 51 -20 -26) -26]
Test Case: 510 | Input/Output: [(98 -24 -45 8) -45]
Test Case: 511 | Input/Output: [(99 -71 25 9) -71]
Test Case: 512 | Input/Output: [(93 97 -93 -1) -93]
Test Case: 513 | Input/Output: [(60 69 -40 18) -40]
Test Case: 514 | Input/Output: [(-13 -38 26 17) -38]
Test Case: 515 | Input/Output: [(-59 94 -90 18) -90]
Test Case: 516 | Input/Output: [(78 -5 -90 82) -90]
Test Case: 517 | Input/Output: [(2 -81 18 2) -81]
Test Case: 518 | Input/Output: [(-38 43 67 55) -38]
Test Case: 519 | Input/Output: [(63 -8 66 -16) -16]
Test Case: 520 | Input/Output: [(-17 58 -35 -99) -99]
Test Case: 521 | Input/Output: [(25 57 22 -44) -44]
Test Case: 522 | Input/Output: [(68 83 12 23) 12]
Test Case: 523 | Input/Output: [(-74 72 69 -19) -74]
Test Case: 524 | Input/Output: [(-7 70 45 -58) -58]
Test Case: 525 | Input/Output: [(59 -42 64 13) -42]
Test Case: 526 | Input/Output: [(75 -2 91 6) -2]
Test Case: 527 | Input/Output: [(88 -75 -3 43) -75]
Test Case: 528 | Input/Output: [(34 86 96 88) 34]
Test Case: 529 | Input/Output: [(24 -74 -51 70) -74]
Test Case: 530 | Input/Output: [(65 64 -73 94) -73]
Test Case: 531 | Input/Output: [(-61 60 -82 -63) -82]
Test Case: 532 | Input/Output: [(-60 -42 76 -34) -60]
Test Case: 533 | Input/Output: [(54 32 64 -83) -83]
Test Case: 534 | Input/Output: [(85 84 39 44) 39]
Test Case: 535 | Input/Output: [(-62 -62 -92 -60) -92]
Test Case: 536 | Input/Output: [(-16 56 83 -45) -45]
Test Case: 537 | Input/Output: [(-63 67 -71 44) -71]
Test Case: 538 | Input/Output: [(64 -95 -1 6) -95]
Test Case: 539 | Input/Output: [(-17 -19 39 46) -19]
Test Case: 540 | Input/Output: [(68 59 3 -40) -40]
Test Case: 541 | Input/Output: [(-22 -9 64 -59) -59]
Test Case: 542 | Input/Output: [(-94 84 -81 29) -94]
Test Case: 543 | Input/Output: [(61 9 -81 -64) -81]
Test Case: 544 | Input/Output: [(-20 -89 -14 19) -89]
Test Case: 545 | Input/Output: [(44 54 -91 -45) -91]
Test Case: 546 | Input/Output: [(72 58 75 7) 7]
Test Case: 547 | Input/Output: [(-80 22 28 17) -80]
Test Case: 548 | Input/Output: [(-91 76 -12 95) -91]
Test Case: 549 | Input/Output: [(-59 -46 -93 71) -93]
Test Case: 550 | Input/Output: [(42 81 20 -51) -51]
Test Case: 551 | Input/Output: [(-83 -36 -43 92) -83]
Test Case: 552 | Input/Output: [(-71 -87 55 -16) -87]
Test Case: 553 | Input/Output: [(-52 -81 -57 43) -81]
Test Case: 554 | Input/Output: [(-55 43 15 5) -55]
Test Case: 555 | Input/Output: [(-76 -87 -60 53) -87]
Test Case: 556 | Input/Output: [(77 99 -5 -15) -15]
Test Case: 557 | Input/Output: [(-80 -34 26 51) -80]
Test Case: 558 | Input/Output: [(33 72 -15 -65) -65]
Test Case: 559 | Input/Output: [(-98 8 6 -36) -98]
Test Case: 560 | Input/Output: [(-18 -35 98 -64) -64]
Test Case: 561 | Input/Output: [(8 -16 -4 9) -16]
Test Case: 562 | Input/Output: [(34 70 0 -15) -15]
Test Case: 563 | Input/Output: [(-24 40 -2 -4) -24]
Test Case: 564 | Input/Output: [(59 8 50 -14) -14]
Test Case: 565 | Input/Output: [(-76 -85 -59 47) -85]
Test Case: 566 | Input/Output: [(-99 9 74 -10) -99]
Test Case: 567 | Input/Output: [(-74 36 -94 -67) -94]
Test Case: 568 | Input/Output: [(-59 5 53 -1) -59]
Test Case: 569 | Input/Output: [(-18 -29 -2 69) -29]
Test Case: 570 | Input/Output: [(-49 59 -2 15) -49]
Test Case: 571 | Input/Output: [(-33 90 -3 17) -33]
Test Case: 572 | Input/Output: [(-51 -10 -80 -52) -80]
Test Case: 573 | Input/Output: [(47 -47 -16 -67) -67]
Test Case: 574 | Input/Output: [(-23 96 17 89) -23]
Test Case: 575 | Input/Output: [(46 87 25 61) 25]
Test Case: 576 | Input/Output: [(-30 1 96 74) -30]
Test Case: 577 | Input/Output: [(-36 65 -51 49) -51]
Test Case: 578 | Input/Output: [(51 59 11 -54) -54]
Test Case: 579 | Input/Output: [(-87 -92 -39 56) -92]
Test Case: 580 | Input/Output: [(59 12 62 -65) -65]
Test Case: 581 | Input/Output: [(-42 -66 -55 70) -66]
Test Case: 582 | Input/Output: [(72 -99 -41 -20) -99]
Test Case: 583 | Input/Output: [(-26 -33 -61 41) -61]
Test Case: 584 | Input/Output: [(4 -50 96 61) -50]
Test Case: 585 | Input/Output: [(-19 61 -50 88) -50]
Test Case: 586 | Input/Output: [(-15 -25 -49 18) -49]
Test Case: 587 | Input/Output: [(-98 -53 -2 39) -98]
Test Case: 588 | Input/Output: [(-23 95 95 51) -23]
Test Case: 589 | Input/Output: [(95 -42 37 -14) -42]
Test Case: 590 | Input/Output: [(-64 -26 -52 1) -64]
Test Case: 591 | Input/Output: [(24 -48 -47 22) -48]
Test Case: 592 | Input/Output: [(26 22 5 -67) -67]
Test Case: 593 | Input/Output: [(-58 -93 -89 6) -93]
Test Case: 594 | Input/Output: [(-17 -76 -21 8) -76]
Test Case: 595 | Input/Output: [(-61 86 89 84) -61]
Test Case: 596 | Input/Output: [(72 24 34 22) 22]
Test Case: 597 | Input/Output: [(87 98 6 97) 6]
Test Case: 598 | Input/Output: [(-23 -90 -91 -20) -91]
Test Case: 599 | Input/Output: [(9 -30 7 79) -30]
Test Case: 600 | Input/Output: [(58 98 58 -33) -33]
Test Case: 601 | Input/Output: [(35 -54 66 56) -54]
Test Case: 602 | Input/Output: [(38 26 75 -38) -38]
Test Case: 603 | Input/Output: [(-51 64 85 78) -51]
Test Case: 604 | Input/Output: [(-83 -96 65 23) -96]
Test Case: 605 | Input/Output: [(-69 88 35 30) -69]
Test Case: 606 | Input/Output: [(-65 -85 -53 -49) -85]
Test Case: 607 | Input/Output: [(-59 -8 79 33) -59]
Test Case: 608 | Input/Output: [(86 75 94 -78) -78]
Test Case: 609 | Input/Output: [(-54 75 3 32) -54]
Test Case: 610 | Input/Output: [(-74 -98 -31 -58) -98]
Test Case: 611 | Input/Output: [(0 -20 48 34) -20]
Test Case: 612 | Input/Output: [(-58 53 -51 -73) -73]
Test Case: 613 | Input/Output: [(95 35 -84 51) -84]
Test Case: 614 | Input/Output: [(-12 -11 -4 -79) -79]
Test Case: 615 | Input/Output: [(-59 -81 -61 80) -81]
Test Case: 616 | Input/Output: [(-54 69 55 -75) -75]
Test Case: 617 | Input/Output: [(76 -63 20 64) -63]
Test Case: 618 | Input/Output: [(63 36 -43 9) -43]
Test Case: 619 | Input/Output: [(35 -68 -30 26) -68]
Test Case: 620 | Input/Output: [(99 -54 16 -3) -54]
Test Case: 621 | Input/Output: [(21 -45 7 -87) -87]
Test Case: 622 | Input/Output: [(-77 8 -37 -46) -77]
Test Case: 623 | Input/Output: [(-4 -46 22 -55) -55]
Test Case: 624 | Input/Output: [(-93 -66 -16 -94) -94]
Test Case: 625 | Input/Output: [(0 -96 46 73) -96]
Test Case: 626 | Input/Output: [(-16 51 -4 72) -16]
Test Case: 627 | Input/Output: [(-49 34 47 78) -49]
Test Case: 628 | Input/Output: [(-11 -37 23 -47) -47]
Test Case: 629 | Input/Output: [(29 -88 59 -16) -88]
Test Case: 630 | Input/Output: [(7 55 21 -58) -58]
Test Case: 631 | Input/Output: [(-6 -36 85 31) -36]
Test Case: 632 | Input/Output: [(-82 -30 -3 -4) -82]
Test Case: 633 | Input/Output: [(86 -90 80 43) -90]
Test Case: 634 | Input/Output: [(-94 42 -43 42) -94]
Test Case: 635 | Input/Output: [(78 80 23 -95) -95]
Test Case: 636 | Input/Output: [(-17 -9 -6 17) -17]
Test Case: 637 | Input/Output: [(-66 -59 -97 -78) -97]
Test Case: 638 | Input/Output: [(15 -37 -82 59) -82]
Test Case: 639 | Input/Output: [(-62 -54 82 -51) -62]
Test Case: 640 | Input/Output: [(25 -19 97 -88) -88]
Test Case: 641 | Input/Output: [(-4 -11 -62 86) -62]
Test Case: 642 | Input/Output: [(-61 -22 -68 -29) -68]
Test Case: 643 | Input/Output: [(27 -72 -35 -67) -72]
Test Case: 644 | Input/Output: [(9 37 -59 -79) -79]
Test Case: 645 | Input/Output: [(-8 -94 76 63) -94]
Test Case: 646 | Input/Output: [(2 73 -25 2) -25]
Test Case: 647 | Input/Output: [(98 -15 -2 -49) -49]
Test Case: 648 | Input/Output: [(-21 29 97 67) -21]
Test Case: 649 | Input/Output: [(2 20 39 9) 2]
Test Case: 650 | Input/Output: [(-59 76 -8 -12) -59]
Test Case: 651 | Input/Output: [(13 17 -80 -17) -80]
Test Case: 652 | Input/Output: [(11 -32 21 -95) -95]
Test Case: 653 | Input/Output: [(69 51 62 32) 32]
Test Case: 654 | Input/Output: [(-98 10 37 32) -98]
Test Case: 655 | Input/Output: [(-72 47 -80 12) -80]
Test Case: 656 | Input/Output: [(6 -1 51 -85) -85]
Test Case: 657 | Input/Output: [(-15 -88 -95 -37) -95]
Test Case: 658 | Input/Output: [(-68 61 78 45) -68]
Test Case: 659 | Input/Output: [(20 5 -24 80) -24]
Test Case: 660 | Input/Output: [(68 28 60 8) 8]
Test Case: 661 | Input/Output: [(50 65 -78 70) -78]
Test Case: 662 | Input/Output: [(24 60 3 47) 3]
Test Case: 663 | Input/Output: [(-61 81 10 46) -61]
Test Case: 664 | Input/Output: [(15 6 99 -93) -93]
Test Case: 665 | Input/Output: [(11 32 100 14) 11]
Test Case: 666 | Input/Output: [(45 -97 -21 57) -97]
Test Case: 667 | Input/Output: [(23 68 -72 69) -72]
Test Case: 668 | Input/Output: [(52 -48 -1 43) -48]
Test Case: 669 | Input/Output: [(60 -52 -2 -100) -100]
Test Case: 670 | Input/Output: [(-17 17 -73 -63) -73]
Test Case: 671 | Input/Output: [(-44 71 -2 -100) -100]
Test Case: 672 | Input/Output: [(-44 8 81 9) -44]
Test Case: 673 | Input/Output: [(-49 96 38 60) -49]
Test Case: 674 | Input/Output: [(-25 -60 -71 -61) -71]
Test Case: 675 | Input/Output: [(73 98 42 -93) -93]
Test Case: 676 | Input/Output: [(40 73 41 93) 40]
Test Case: 677 | Input/Output: [(-34 15 -39 58) -39]
Test Case: 678 | Input/Output: [(-44 66 59 -12) -44]
Test Case: 679 | Input/Output: [(-89 -31 15 4) -89]
Test Case: 680 | Input/Output: [(-100 -69 -35 76) -100]
Test Case: 681 | Input/Output: [(-95 3 -34 52) -95]
Test Case: 682 | Input/Output: [(40 66 -85 -5) -85]
Test Case: 683 | Input/Output: [(87 -28 83 -100) -100]
Test Case: 684 | Input/Output: [(-64 35 -72 -99) -99]
Test Case: 685 | Input/Output: [(-71 92 55 -20) -71]
Test Case: 686 | Input/Output: [(64 -61 -20 -47) -61]
Test Case: 687 | Input/Output: [(-54 92 -39 -8) -54]
Test Case: 688 | Input/Output: [(-60 12 -49 -78) -78]
Test Case: 689 | Input/Output: [(-28 99 3 1) -28]
Test Case: 690 | Input/Output: [(48 45 -83 68) -83]
Test Case: 691 | Input/Output: [(-55 -28 93 31) -55]
Test Case: 692 | Input/Output: [(53 47 72 22) 22]
Test Case: 693 | Input/Output: [(59 -39 56 11) -39]
Test Case: 694 | Input/Output: [(96 -31 -60 -100) -100]
Test Case: 695 | Input/Output: [(54 -82 -86 8) -86]
Test Case: 696 | Input/Output: [(98 25 -17 56) -17]
Test Case: 697 | Input/Output: [(67 93 -24 -85) -85]
Test Case: 698 | Input/Output: [(-16 2 -31 34) -31]
Test Case: 699 | Input/Output: [(-11 68 -42 -88) -88]
Test Case: 700 | Input/Output: [(-12 -48 -84 -100) -100]
Test Case: 701 | Input/Output: [(-63 28 24 29) -63]
Test Case: 702 | Input/Output: [(-72 97 1 22) -72]
Test Case: 703 | Input/Output: [(16 57 -46 -90) -90]
Test Case: 704 | Input/Output: [(35 -55 -56 -61) -61]
Test Case: 705 | Input/Output: [(72 -4 -93 84) -93]
Test Case: 706 | Input/Output: [(-28 6 -82 83) -82]
Test Case: 707 | Input/Output: [(79 -18 -16 76) -18]
Test Case: 708 | Input/Output: [(40 -73 9 -56) -73]
Test Case: 709 | Input/Output: [(-48 -52 88 -70) -70]
Test Case: 710 | Input/Output: [(-86 35 -90 0) -90]
Test Case: 711 | Input/Output: [(-65 -32 83 -70) -70]
Test Case: 712 | Input/Output: [(-82 -71 -72 -20) -82]
Test Case: 713 | Input/Output: [(71 -41 21 -6) -41]
Test Case: 714 | Input/Output: [(-6 -29 -94 -50) -94]
Test Case: 715 | Input/Output: [(-20 -85 -30 64) -85]
Test Case: 716 | Input/Output: [(25 95 88 34) 25]
Test Case: 717 | Input/Output: [(-42 3 -80 -68) -80]
Test Case: 718 | Input/Output: [(5 9 -11 99) -11]
Test Case: 719 | Input/Output: [(25 26 -63 -61) -63]
Test Case: 720 | Input/Output: [(-92 81 62 62) -92]
Test Case: 721 | Input/Output: [(91 -73 47 34) -73]
Test Case: 722 | Input/Output: [(-10 82 -59 61) -59]
Test Case: 723 | Input/Output: [(47 -20 16 23) -20]
Test Case: 724 | Input/Output: [(-26 11 34 91) -26]
Test Case: 725 | Input/Output: [(-40 -74 22 -16) -74]
Test Case: 726 | Input/Output: [(9 -62 -39 -61) -62]
Test Case: 727 | Input/Output: [(36 -11 -61 -92) -92]
Test Case: 728 | Input/Output: [(4 20 -36 82) -36]
Test Case: 729 | Input/Output: [(59 -88 -99 -16) -99]
Test Case: 730 | Input/Output: [(88 -34 -97 2) -97]
Test Case: 731 | Input/Output: [(-77 78 88 -79) -79]
Test Case: 732 | Input/Output: [(22 67 -5 2) -5]
Test Case: 733 | Input/Output: [(54 -31 -60 67) -60]
Test Case: 734 | Input/Output: [(-74 -32 30 -82) -82]
Test Case: 735 | Input/Output: [(-7 16 -79 -1) -79]
Test Case: 736 | Input/Output: [(24 38 -7 -51) -51]
Test Case: 737 | Input/Output: [(65 -75 -23 93) -75]
Test Case: 738 | Input/Output: [(-57 -16 -34 -92) -92]
Test Case: 739 | Input/Output: [(-74 33 -23 -70) -74]
Test Case: 740 | Input/Output: [(-19 42 70 48) -19]
Test Case: 741 | Input/Output: [(70 91 -47 94) -47]
Test Case: 742 | Input/Output: [(-77 9 47 -33) -77]
Test Case: 743 | Input/Output: [(16 46 81 -48) -48]
Test Case: 744 | Input/Output: [(46 88 -19 -4) -19]
Test Case: 745 | Input/Output: [(6 -40 -10 2) -40]
Test Case: 746 | Input/Output: [(33 -98 -40 38) -98]
Test Case: 747 | Input/Output: [(35 36 18 83) 18]
Test Case: 748 | Input/Output: [(-26 -70 98 -28) -70]
Test Case: 749 | Input/Output: [(31 98 -33 87) -33]
Test Case: 750 | Input/Output: [(-50 -45 92 -72) -72]
Test Case: 751 | Input/Output: [(-21 1 30 -98) -98]
Test Case: 752 | Input/Output: [(46 17 74 25) 17]
Test Case: 753 | Input/Output: [(-55 31 25 26) -55]
Test Case: 754 | Input/Output: [(-60 13 -97 -13) -97]
Test Case: 755 | Input/Output: [(-93 -70 84 -16) -93]
Test Case: 756 | Input/Output: [(-10 91 -47 -70) -70]
Test Case: 757 | Input/Output: [(-94 -63 41 -28) -94]
Test Case: 758 | Input/Output: [(50 -5 75 82) -5]
Test Case: 759 | Input/Output: [(-26 46 19 -48) -48]
Test Case: 760 | Input/Output: [(55 -13 -5 -51) -51]
Test Case: 761 | Input/Output: [(-62 -100 66 63) -100]
Test Case: 762 | Input/Output: [(-42 -55 -77 -61) -77]
Test Case: 763 | Input/Output: [(-15 66 -87 -86) -87]
Test Case: 764 | Input/Output: [(68 34 -31 -68) -68]
Test Case: 765 | Input/Output: [(-64 79 48 91) -64]
Test Case: 766 | Input/Output: [(-8 4 -80 19) -80]
Test Case: 767 | Input/Output: [(-30 -11 -49 18) -49]
Test Case: 768 | Input/Output: [(73 -25 42 35) -25]
Test Case: 769 | Input/Output: [(46 -65 99 -52) -65]
Test Case: 770 | Input/Output: [(45 -76 27 -83) -83]
Test Case: 771 | Input/Output: [(-95 65 49 29) -95]
Test Case: 772 | Input/Output: [(15 58 -1 -50) -50]
Test Case: 773 | Input/Output: [(63 -2 -74 -63) -74]
Test Case: 774 | Input/Output: [(-50 -13 -78 -57) -78]
Test Case: 775 | Input/Output: [(-89 69 -35 -59) -89]
Test Case: 776 | Input/Output: [(-42 16 -7 92) -42]
Test Case: 777 | Input/Output: [(72 26 79 39) 26]
Test Case: 778 | Input/Output: [(-29 12 7 -24) -29]
Test Case: 779 | Input/Output: [(52 -38 -52 77) -52]
Test Case: 780 | Input/Output: [(-14 84 -31 -41) -41]
Test Case: 781 | Input/Output: [(-98 81 -52 25) -98]
Test Case: 782 | Input/Output: [(59 73 17 19) 17]
Test Case: 783 | Input/Output: [(-38 -36 4 -30) -38]
Test Case: 784 | Input/Output: [(29 -47 37 -46) -47]
Test Case: 785 | Input/Output: [(46 67 -81 33) -81]
Test Case: 786 | Input/Output: [(-60 34 35 -31) -60]
Test Case: 787 | Input/Output: [(-4 -68 -1 82) -68]
Test Case: 788 | Input/Output: [(-44 55 -29 -68) -68]
Test Case: 789 | Input/Output: [(40 19 -49 100) -49]
Test Case: 790 | Input/Output: [(41 -32 -10 28) -32]
Test Case: 791 | Input/Output: [(40 0 -77 90) -77]
Test Case: 792 | Input/Output: [(78 62 83 -74) -74]
Test Case: 793 | Input/Output: [(36 -15 35 93) -15]
Test Case: 794 | Input/Output: [(-99 6 -95 -68) -99]
Test Case: 795 | Input/Output: [(-57 -31 92 -85) -85]
Test Case: 796 | Input/Output: [(-8 -67 2 -95) -95]
Test Case: 797 | Input/Output: [(-40 -95 -84 92) -95]
Test Case: 798 | Input/Output: [(-1 81 98 83) -1]
Test Case: 799 | Input/Output: [(-40 48 -81 -45) -81]
Test Case: 800 | Input/Output: [(10 64 -26 -56) -56]
Test Case: 801 | Input/Output: [(33 56 -92 -13) -92]
Test Case: 802 | Input/Output: [(57 -84 -22 28) -84]
Test Case: 803 | Input/Output: [(-96 80 -45 -42) -96]
Test Case: 804 | Input/Output: [(-84 84 -13 36) -84]
Test Case: 805 | Input/Output: [(88 68 -92 27) -92]
Test Case: 806 | Input/Output: [(-62 76 -38 65) -62]
Test Case: 807 | Input/Output: [(-59 -79 11 87) -79]
Test Case: 808 | Input/Output: [(-60 17 -94 13) -94]
Test Case: 809 | Input/Output: [(38 23 -36 37) -36]
Test Case: 810 | Input/Output: [(-81 36 66 55) -81]
Test Case: 811 | Input/Output: [(-43 21 -88 35) -88]
Test Case: 812 | Input/Output: [(-3 -50 -77 18) -77]
Test Case: 813 | Input/Output: [(-31 -53 -19 -81) -81]
Test Case: 814 | Input/Output: [(55 100 -9 83) -9]
Test Case: 815 | Input/Output: [(-65 -74 -31 15) -74]
Test Case: 816 | Input/Output: [(52 12 -51 -75) -75]
Test Case: 817 | Input/Output: [(-50 -88 -20 25) -88]
Test Case: 818 | Input/Output: [(22 86 -27 -11) -27]
Test Case: 819 | Input/Output: [(59 -56 -100 -74) -100]
Test Case: 820 | Input/Output: [(11 -65 29 96) -65]
Test Case: 821 | Input/Output: [(-11 46 17 -81) -81]
Test Case: 822 | Input/Output: [(-29 -71 -23 -79) -79]
Test Case: 823 | Input/Output: [(-11 48 -63 -11) -63]
Test Case: 824 | Input/Output: [(-19 -19 62 68) -19]
Test Case: 825 | Input/Output: [(-59 7 99 78) -59]
Test Case: 826 | Input/Output: [(50 52 -46 -85) -85]
Test Case: 827 | Input/Output: [(-5 23 -81 -75) -81]
Test Case: 828 | Input/Output: [(49 61 37 32) 32]
Test Case: 829 | Input/Output: [(-99 -63 -38 -46) -99]
Test Case: 830 | Input/Output: [(-16 4 -80 9) -80]
Test Case: 831 | Input/Output: [(27 -30 -89 -82) -89]
Test Case: 832 | Input/Output: [(33 96 -72 -48) -72]
Test Case: 833 | Input/Output: [(-30 -39 -95 -98) -98]
Test Case: 834 | Input/Output: [(32 -54 92 39) -54]
Test Case: 835 | Input/Output: [(-54 9 -7 -79) -79]
Test Case: 836 | Input/Output: [(47 -10 27 -53) -53]
Test Case: 837 | Input/Output: [(-40 30 11 -10) -40]
Test Case: 838 | Input/Output: [(-27 16 -40 -49) -49]
Test Case: 839 | Input/Output: [(42 26 15 -84) -84]
Test Case: 840 | Input/Output: [(94 -38 38 89) -38]
Test Case: 841 | Input/Output: [(75 -63 -20 55) -63]
Test Case: 842 | Input/Output: [(93 -16 -88 -76) -88]
Test Case: 843 | Input/Output: [(30 -90 -90 4) -90]
Test Case: 844 | Input/Output: [(-73 -55 -4 -30) -73]
Test Case: 845 | Input/Output: [(64 100 51 63) 51]
Test Case: 846 | Input/Output: [(37 -9 79 -84) -84]
Test Case: 847 | Input/Output: [(83 50 14 53) 14]
Test Case: 848 | Input/Output: [(52 74 -16 40) -16]
Test Case: 849 | Input/Output: [(-39 -77 67 -8) -77]
Test Case: 850 | Input/Output: [(90 52 -83 15) -83]
Test Case: 851 | Input/Output: [(-3 46 85 19) -3]
Test Case: 852 | Input/Output: [(92 18 77 -82) -82]
Test Case: 853 | Input/Output: [(-90 -5 48 -41) -90]
Test Case: 854 | Input/Output: [(-42 -66 -67 62) -67]
Test Case: 855 | Input/Output: [(-92 -50 -61 10) -92]
Test Case: 856 | Input/Output: [(84 -13 90 91) -13]
Test Case: 857 | Input/Output: [(-60 98 89 -83) -83]
Test Case: 858 | Input/Output: [(85 -15 -21 -70) -70]
Test Case: 859 | Input/Output: [(91 94 -76 -23) -76]
Test Case: 860 | Input/Output: [(-28 39 93 -90) -90]
Test Case: 861 | Input/Output: [(-5 46 32 -2) -5]
Test Case: 862 | Input/Output: [(-62 6 66 88) -62]
Test Case: 863 | Input/Output: [(-54 -43 -15 7) -54]
Test Case: 864 | Input/Output: [(-80 -23 -74 73) -80]
Test Case: 865 | Input/Output: [(-85 -87 82 45) -87]
Test Case: 866 | Input/Output: [(28 35 42 3) 3]
Test Case: 867 | Input/Output: [(15 -9 19 78) -9]
Test Case: 868 | Input/Output: [(88 31 -2 4) -2]
Test Case: 869 | Input/Output: [(-3 -8 -48 100) -48]
Test Case: 870 | Input/Output: [(40 46 40 5) 5]
Test Case: 871 | Input/Output: [(-27 88 -77 -2) -77]
Test Case: 872 | Input/Output: [(-94 27 3 35) -94]
Test Case: 873 | Input/Output: [(57 94 -50 -54) -54]
Test Case: 874 | Input/Output: [(28 42 33 -46) -46]
Test Case: 875 | Input/Output: [(-63 -9 72 39) -63]
Test Case: 876 | Input/Output: [(58 -22 -6 -88) -88]
Test Case: 877 | Input/Output: [(-99 73 -58 -48) -99]
Test Case: 878 | Input/Output: [(83 -47 51 16) -47]
Test Case: 879 | Input/Output: [(58 -57 -42 53) -57]
Test Case: 880 | Input/Output: [(60 82 -64 -24) -64]
Test Case: 881 | Input/Output: [(-9 48 -73 32) -73]
Test Case: 882 | Input/Output: [(42 52 -53 22) -53]
Test Case: 883 | Input/Output: [(-71 -23 9 31) -71]
Test Case: 884 | Input/Output: [(89 -70 -37 1) -70]
Test Case: 885 | Input/Output: [(-15 -33 -38 -31) -38]
Test Case: 886 | Input/Output: [(-97 90 -27 46) -97]
Test Case: 887 | Input/Output: [(-84 -11 -6 35) -84]
Test Case: 888 | Input/Output: [(67 54 -93 -76) -93]
Test Case: 889 | Input/Output: [(-34 38 7 -49) -49]
Test Case: 890 | Input/Output: [(77 -44 -71 -68) -71]
Test Case: 891 | Input/Output: [(10 90 21 -84) -84]
Test Case: 892 | Input/Output: [(1 80 -96 8) -96]
Test Case: 893 | Input/Output: [(72 5 -38 77) -38]
Test Case: 894 | Input/Output: [(62 -17 -93 18) -93]
Test Case: 895 | Input/Output: [(-99 -11 -84 72) -99]
Test Case: 896 | Input/Output: [(-46 58 -85 -74) -85]
Test Case: 897 | Input/Output: [(-57 74 -71 22) -71]
Test Case: 898 | Input/Output: [(19 -50 -12 98) -50]
Test Case: 899 | Input/Output: [(92 -22 15 27) -22]
Test Case: 900 | Input/Output: [(-2 -39 -59 -58) -59]
Test Case: 901 | Input/Output: [(-48 33 64 6) -48]
Test Case: 902 | Input/Output: [(86 10 -15 -82) -82]
Test Case: 903 | Input/Output: [(-97 8 -29 64) -97]
Test Case: 904 | Input/Output: [(-51 -87 -10 25) -87]
Test Case: 905 | Input/Output: [(-18 -66 51 65) -66]
Test Case: 906 | Input/Output: [(19 -16 -55 -82) -82]
Test Case: 907 | Input/Output: [(-33 -87 80 76) -87]
Test Case: 908 | Input/Output: [(-65 -88 -84 87) -88]
Test Case: 909 | Input/Output: [(-29 49 89 14) -29]
Test Case: 910 | Input/Output: [(51 43 -28 23) -28]
Test Case: 911 | Input/Output: [(-88 52 -32 54) -88]
Test Case: 912 | Input/Output: [(-78 32 -80 48) -80]
Test Case: 913 | Input/Output: [(17 -4 38 -57) -57]
Test Case: 914 | Input/Output: [(60 14 -13 -83) -83]
Test Case: 915 | Input/Output: [(85 -91 -80 -4) -91]
Test Case: 916 | Input/Output: [(34 59 -31 25) -31]
Test Case: 917 | Input/Output: [(-77 71 -16 -87) -87]
Test Case: 918 | Input/Output: [(27 25 70 52) 25]
Test Case: 919 | Input/Output: [(-13 -51 9 -15) -51]
Test Case: 920 | Input/Output: [(-97 -62 -27 58) -97]
Test Case: 921 | Input/Output: [(-40 -59 -71 -29) -71]
Test Case: 922 | Input/Output: [(-11 -9 -54 9) -54]
Test Case: 923 | Input/Output: [(-52 -42 49 -51) -52]
Test Case: 924 | Input/Output: [(-30 -76 -62 -79) -79]
Test Case: 925 | Input/Output: [(99 15 15 69) 15]
Test Case: 926 | Input/Output: [(55 -41 82 2) -41]
Test Case: 927 | Input/Output: [(-43 -14 71 11) -43]
Test Case: 928 | Input/Output: [(27 8 -52 -32) -52]
Test Case: 929 | Input/Output: [(48 28 18 44) 18]
Test Case: 930 | Input/Output: [(68 -54 34 2) -54]
Test Case: 931 | Input/Output: [(-55 -29 41 81) -55]
Test Case: 932 | Input/Output: [(40 -69 56 37) -69]
Test Case: 933 | Input/Output: [(37 73 81 -79) -79]
Test Case: 934 | Input/Output: [(9 -31 37 -81) -81]
Test Case: 935 | Input/Output: [(-17 42 30 -61) -61]
Test Case: 936 | Input/Output: [(50 20 -61 46) -61]
Test Case: 937 | Input/Output: [(35 -87 -45 -18) -87]
Test Case: 938 | Input/Output: [(28 7 40 -12) -12]
Test Case: 939 | Input/Output: [(48 12 -8 -28) -28]
Test Case: 940 | Input/Output: [(4 -29 90 -91) -91]
Test Case: 941 | Input/Output: [(-9 25 -7 -27) -27]
Test Case: 942 | Input/Output: [(48 39 54 -91) -91]
Test Case: 943 | Input/Output: [(-78 -73 -45 80) -78]
Test Case: 944 | Input/Output: [(82 -82 40 1) -82]
Test Case: 945 | Input/Output: [(-99 44 4 -62) -99]
Test Case: 946 | Input/Output: [(42 29 -57 40) -57]
Test Case: 947 | Input/Output: [(-10 90 -52 -65) -65]
Test Case: 948 | Input/Output: [(-2 20 99 53) -2]
Test Case: 949 | Input/Output: [(-94 -88 -66 -8) -94]
Test Case: 950 | Input/Output: [(71 84 -15 24) -15]
Test Case: 951 | Input/Output: [(-23 -39 -57 51) -57]
Test Case: 952 | Input/Output: [(7 37 -92 16) -92]
Test Case: 953 | Input/Output: [(43 -79 -42 -46) -79]
Test Case: 954 | Input/Output: [(21 98 29 76) 21]
Test Case: 955 | Input/Output: [(-58 13 -9 -26) -58]
Test Case: 956 | Input/Output: [(-43 -52 92 -83) -83]
Test Case: 957 | Input/Output: [(39 42 -61 66) -61]
Test Case: 958 | Input/Output: [(-19 55 -73 -7) -73]
Test Case: 959 | Input/Output: [(-78 36 -100 -25) -100]
Test Case: 960 | Input/Output: [(-22 77 -100 34) -100]
Test Case: 961 | Input/Output: [(0 -61 29 -38) -61]
Test Case: 962 | Input/Output: [(-55 65 59 -55) -55]
Test Case: 963 | Input/Output: [(-15 -100 -64 68) -100]
Test Case: 964 | Input/Output: [(19 -7 7 7) -7]
Test Case: 965 | Input/Output: [(16 -69 35 100) -69]
Test Case: 966 | Input/Output: [(28 -44 15 -98) -98]
Test Case: 967 | Input/Output: [(10 -40 -74 10) -74]
Test Case: 968 | Input/Output: [(-60 -65 -71 -99) -99]
Test Case: 969 | Input/Output: [(81 58 -3 -57) -57]
Test Case: 970 | Input/Output: [(-28 -100 80 -72) -100]
Test Case: 971 | Input/Output: [(-7 -22 27 -55) -55]
Test Case: 972 | Input/Output: [(-91 33 82 69) -91]
Test Case: 973 | Input/Output: [(38 -25 82 -44) -44]
Test Case: 974 | Input/Output: [(75 11 30 12) 11]
Test Case: 975 | Input/Output: [(-46 -48 -40 30) -48]
Test Case: 976 | Input/Output: [(10 8 -21 1) -21]
Test Case: 977 | Input/Output: [(31 55 11 1) 1]
Test Case: 978 | Input/Output: [(89 46 7 -91) -91]
Test Case: 979 | Input/Output: [(24 -40 -74 60) -74]
Test Case: 980 | Input/Output: [(-27 4 -70 87) -70]
Test Case: 981 | Input/Output: [(-64 72 58 46) -64]
Test Case: 982 | Input/Output: [(37 -51 -41 -86) -86]
Test Case: 983 | Input/Output: [(-21 83 -64 31) -64]
Test Case: 984 | Input/Output: [(-85 -98 96 84) -98]
Test Case: 985 | Input/Output: [(24 -24 -47 74) -47]
Test Case: 986 | Input/Output: [(-58 -61 76 -80) -80]
Test Case: 987 | Input/Output: [(-76 4 -96 -66) -96]
Test Case: 988 | Input/Output: [(84 79 -68 -87) -87]
Test Case: 989 | Input/Output: [(70 64 78 17) 17]
Test Case: 990 | Input/Output: [(48 30 30 -92) -92]
Test Case: 991 | Input/Output: [(7 -20 49 26) -20]
Test Case: 992 | Input/Output: [(-83 -14 -65 -11) -83]
Test Case: 993 | Input/Output: [(44 43 -14 6) -14]
Test Case: 994 | Input/Output: [(-11 -56 -89 19) -89]
Test Case: 995 | Input/Output: [(26 70 -17 96) -17]
Test Case: 996 | Input/Output: [(-76 -65 -28 -28) -76]
Test Case: 997 | Input/Output: [(-15 35 -71 55) -71]
Test Case: 998 | Input/Output: [(-61 0 -84 41) -84]
Test Case: 999 | Input/Output: [(-53 48 90 89) -53]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 62 40 -84 66 -47 10 81 4 90 -66 30 7 36 93 32 -80
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[81 81 81 -82] -82] [[-40 -68 -40 -40] -68] [[60 41 41 41] 41] [[6 50 50 50] 6] [[33 -77 33 33] -77] [[91 -96 -96 -96] -96] [[25 -61 -61 -61] -61] [[41 41 41 58] 41] [[4 4 -43 4] -43] [[-77 -6 -77 -77] -77] [(2 2 2 2) 2] [(-90 -90 -90 -90) -90] [(-5 -5 -5 -5) -5] [(-29 -29 -29 -29) -29] [(-95 -95 -95 -95) -95] [(32 44 68 88) 32] [(65 64 68 88) 64] [(56 82 61 42) 42] [(28 69 68 28) 28] [(59 68 17 68) 17] [(17 21 70 49) 17] [(2 32 46 40) 2] [(19 16 42 47) 16] [(51 88 90 67) 51] [(9 18 8 39) 8] [(75 79 0 79) 0] [(73 25 43 38) 25] [(54 33 21 80) 21] [(98 82 25 100) 25] [(90 51 91 0) 0] [(47 16 88 37) 16] [(65 8 21 48) 8] [(91 98 66 2) 2] [(25 81 43 18) 18] [(89 54 100 15) 15] [(73 -89 7 -25) -89] [(36 85 -26 54) -26] [(-23 -49 48 -45) -49] [(66 58 -17 97) -17] [(16 96 -62 -58) -62] [(41 -89 2 -71) -89] [(-55 -64 73 -34) -64] [(-15 87 -65 0) -65] [(7 92 -47 71) -47] [(20 -64 95 -15) -64] [(78 -100 -67 51) -100] [(-14 78 -24 -33) -33] [(9 -11 2 74) -11] [(64 -17 77 -47) -47] [(-97 -37 54 -97) -97] [(-50 -42 -57 95) -57] [(93 51 -77 -74) -77] [(86 -47 -67 -24) -67] [(-27 -8 -37 36) -37] [(-60 -1 96 9) -60] [(0 -8 -56 -49) -56] [(-79 -54 86 64) -79] [(-38 -68 -97 -23) -97] [(-68 -53 -95 17) -95] [(-81 -63 -34 -100) -100] [(-58 14 76 -19) -58] [(12 -65 -31 8) -65] [(36 -14 37 53) -14] [(51 -93 32 -32) -93] [(-22 -15 14 -13) -22] [(-57 -66 15 83) -66] [(-79 41 -84 61) -84] [(-94 -73 50 -74) -94] [(45 62 63 -97) -97] [(4 64 -68 -35) -68] [(23 12 34 -44) -44] [(19 -7 -7 -61) -61] [(93 26 25 22) 22] [(53 -78 90 -10) -78] [(34 78 93 -35) -35] [(7 -48 -20 -22) -48] [(43 -85 -35 -51) -85] [(85 -100 95 8) -100] [(-73 1 43 7) -73] [(61 -76 -76 70) -76] [(-41 -1 24 72) -41] [(99 16 65 28) 16] [(-59 90 77 -90) -90] [(70 84 -54 71) -54] [(-97 -89 -50 72) -97] [(-48 -8 17 -17) -48] [(38 -4 -64 -60) -64] [(14 -2 43 80) -2] [(32 96 -71 -64) -71] [(40 26 12 8) 8] [(-43 83 14 -51) -51] [(-59 -16 -57 -2) -59] [(-40 65 -39 -17) -40] [(36 8 64 -72) -72] [(-4 -73 -95 -35) -95])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 68                 
Correct output: 64                  | Program output: 68                 
Correct output: 42                  | Program output: 61                 
Correct output: 28                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 70                 
Correct output: 2                   | Program output: 46                 
Correct output: 16                  | Program output: 42                 
Correct output: 51                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 43                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 88                 
Correct output: 8                   | Program output: 21                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 15                  | Program output: 100                
Correct output: -89                 | Program output: 7                  
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: 48                 
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: 2                  
Correct output: -64                 | Program output: 73                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 95                 
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -24                
Correct output: -11                 | Program output: 2                  
Correct output: -47                 | Program output: 77                 
Correct output: -97                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 96                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 86                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -34                
Correct output: -58                 | Program output: 76                 
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 37                 
Correct output: -93                 | Program output: 32                 
Correct output: -22                 | Program output: 14                 
Correct output: -66                 | Program output: 15                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 50                 
Correct output: -97                 | Program output: 63                 
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: 34                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -78                 | Program output: 90                 
Correct output: -35                 | Program output: 93                 
Correct output: -48                 | Program output: -20                
Correct output: -85                 | Program output: -35                
Correct output: -100                | Program output: 95                 
Correct output: -73                 | Program output: 43                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 24                 
Correct output: 16                  | Program output: 65                 
Correct output: -90                 | Program output: 77                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -50                
Correct output: -48                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 12                 
Correct output: -51                 | Program output: 14                 
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: 64                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_484} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_217} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction 20} {:close 0, :instruction print_boolean})
Lexicase best program: (boolean_frominteger integer_sub exec_when (boolean_eq exec_dup_times () exec_pop (integer_swap) tagged_484 exec_yankdup boolean_invert_first_then_and boolean_invert_second_then_and exec_do*times (in3 exec_do*while (print_integer integer_div integer_flush) integer_yank integer_swap integer_mult integer_sub) exec_y (tag_exec_217 (integer_shove boolean_stackdepth exec_do*times (exec_do*times ()) boolean_yankdup) integer_dec exec_shove (exec_yankdup integer_gt boolean_pop boolean_flush integer_eq in3 exec_do*count (integer_max boolean_or) exec_rot (integer_yankdup) (exec_noop integer_flush exec_empty exec_flush integer_rot) (integer_max exec_dup_items boolean_shove) print_boolean exec_swap (exec_k (boolean_yankdup exec_do*while () integer_yank exec_swap (exec_if () (exec_do*count (integer_dec integer_gt exec_dup_times (boolean_invert_second_then_and) integer_fromboolean integer_inc) boolean_pop) exec_s (integer_lt integer_dec exec_k_when_autoconstructing (integer_gte boolean_empty integer_add boolean_not integer_yank exec_flush boolean_eq integer_shove in1 exec_empty exec_if () (integer_empty boolean_pop boolean_invert_first_then_and integer_inc integer_gte integer_div exec_y_when_autoconstructing (exec_stackdepth integer_gte)) 20 print_boolean) ()) () ()) ()) ()) ()))))
Lexicase best errors: [1 0 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 125
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_484} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_217} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 2, :instruction integer_gte} {:close 0, :instruction 20} {:close 0, :instruction print_boolean})
Zero cases best program: (boolean_frominteger integer_sub exec_when (boolean_eq exec_dup_times () exec_pop (integer_swap) tagged_484 exec_yankdup boolean_invert_first_then_and boolean_invert_second_then_and exec_do*times (in3 exec_do*while (print_integer integer_div integer_flush) integer_yank integer_swap integer_mult integer_sub) exec_y (tag_exec_217 (integer_shove boolean_stackdepth exec_do*times (exec_do*times ()) boolean_yankdup) integer_dec exec_shove (exec_yankdup integer_gt boolean_pop boolean_flush integer_eq in3 exec_do*count (integer_max boolean_or) exec_rot (integer_yankdup) (exec_noop integer_flush exec_empty exec_flush integer_rot) (integer_max exec_dup_items boolean_shove) print_boolean exec_swap (exec_k (boolean_yankdup exec_do*while () integer_yank exec_swap (exec_if () (exec_do*count (integer_dec integer_gt exec_dup_times (boolean_invert_second_then_and) integer_fromboolean integer_inc) boolean_pop) exec_s (integer_lt integer_dec exec_k_when_autoconstructing (integer_gte boolean_empty integer_add boolean_not integer_yank exec_flush boolean_eq integer_shove in1 exec_empty exec_if () (integer_empty boolean_pop boolean_invert_first_then_and integer_inc integer_gte integer_div exec_y_when_autoconstructing (exec_stackdepth integer_gte)) 20 print_boolean) ()) () ()) ()) ()) ()))))
Zero cases best errors: [1 0 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 125
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 4 4 6 4 2 14 5 5 5)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 4 4 6 4 2 14 5 5 5)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_605} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte})
Best program: (integer_dup_times integer_inc in3 exec_noop tagged_605 exec_dup (boolean_frominteger exec_if (integer_dup_items exec_shove (boolean_shove boolean_swap exec_shove (integer_stackdepth exec_s (in3 print_integer boolean_flush) (in3) (exec_k (boolean_yank exec_when (integer_dup_items print_boolean exec_dup_items boolean_or) integer_flush integer_shove integer_mod) (print_integer print_boolean exec_eq) boolean_swap) boolean_dup exec_when (exec_dup_times (exec_flush exec_pop (boolean_invert_second_then_and in2 exec_pop (in2 exec_y (in3) exec_k_when_autoconstructing (boolean_invert_second_then_and integer_eq integer_max exec_rot (exec_noop exec_s (integer_mult integer_lte integer_yankdup) (exec_eq exec_noop integer_gte boolean_not boolean_stackdepth exec_noop boolean_shove) (integer_gte) exec_when () integer_gte integer_div exec_yank exec_empty boolean_pop exec_dup_times (integer_sub exec_yankdup exec_stackdepth) integer_mult exec_shove (boolean_yank exec_s_when_autoconstructing (print_integer boolean_not integer_dup integer_dup_items) (integer_gte exec_if (integer_mult integer_stackdepth integer_max exec_k_when_autoconstructing (print_exec () boolean_not exec_eq integer_gte) ()) ()) ())) () ()) ()))))))) ()))
Errors: [1 0 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 90
Size: 126
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 9.946
Median total errors in population: 10
Error averages by case: (0.995 0.996 0.996 0.994 0.996 0.998 0.986 0.995 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.848
Average program size in population (points): 68.703
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 478509
--- Timings ---
Current time: 1559314316168 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.8 seconds, 27.7%
Fitness Testing:      1.9 seconds, 68.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 68                 
Correct output: 64                  | Program output: 68                 
Correct output: 42                  | Program output: 61                 
Correct output: 28                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 70                 
Correct output: 2                   | Program output: 46                 
Correct output: 16                  | Program output: 42                 
Correct output: 51                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 43                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 88                 
Correct output: 8                   | Program output: 21                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 15                  | Program output: 100                
Correct output: -89                 | Program output: 7                  
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: 48                 
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: 2                  
Correct output: -64                 | Program output: 73                 
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 95                 
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -24                
Correct output: -11                 | Program output: 2                  
Correct output: -47                 | Program output: 77                 
Correct output: -97                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 96                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 86                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -34                
Correct output: -58                 | Program output: 76                 
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 37                 
Correct output: -93                 | Program output: 32                 
Correct output: -22                 | Program output: 14                 
Correct output: -66                 | Program output: 15                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: 50                 
Correct output: -97                 | Program output: 63                 
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: 34                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -78                 | Program output: 90                 
Correct output: -35                 | Program output: 93                 
Correct output: -48                 | Program output: -20                
Correct output: -85                 | Program output: -35                
Correct output: -100                | Program output: 95                 
Correct output: -73                 | Program output: 43                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 24                 
Correct output: 16                  | Program output: 65                 
Correct output: -90                 | Program output: 77                 
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -50                
Correct output: -48                 | Program output: 17                 
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 12                 
Correct output: -51                 | Program output: 14                 
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: 64                 
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_605} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte})
Lexicase best program: (integer_dup_times integer_inc in3 exec_noop tagged_605 exec_dup (boolean_frominteger exec_if (integer_dup_items exec_shove (boolean_shove boolean_swap exec_shove (integer_stackdepth exec_s (in3 print_integer boolean_flush) (in3) (exec_k (boolean_yank exec_when (integer_dup_items print_boolean exec_dup_items boolean_or) integer_flush integer_max integer_mod) (print_integer print_boolean exec_eq) boolean_swap) boolean_dup exec_when (exec_dup_times (exec_flush exec_pop (boolean_invert_second_then_and in2 exec_pop (in2 exec_y (in3) exec_k_when_autoconstructing (boolean_invert_second_then_and integer_eq integer_max exec_rot (exec_noop exec_s (integer_mult integer_lte integer_yankdup) (integer_pop exec_noop integer_gte boolean_not boolean_stackdepth exec_noop boolean_shove) (integer_gte) exec_when () integer_gte integer_div exec_yank exec_empty boolean_pop exec_dup_times (integer_sub exec_yankdup exec_stackdepth) integer_mult exec_shove (boolean_yank exec_s_when_autoconstructing (print_integer boolean_not integer_dup integer_dup_items) (integer_gte exec_if (integer_mult integer_stackdepth integer_max exec_k_when_autoconstructing (print_exec () boolean_not exec_eq integer_gte) ()) ()) ())) () ()) ()))))))) ()))
Lexicase best errors: [0 1 0 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 126
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction tagged_605} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte})
Zero cases best program: (integer_dup_times integer_inc in3 exec_noop tagged_605 exec_dup (boolean_frominteger exec_if (integer_dup_items exec_shove (boolean_shove boolean_swap exec_shove (integer_stackdepth exec_s (in3 print_integer boolean_flush) (in3) (exec_k (boolean_yank exec_when (integer_dup_items print_boolean exec_dup_items boolean_or) integer_flush integer_max integer_mod) (print_integer print_boolean exec_eq) boolean_swap) boolean_dup exec_when (exec_dup_times (exec_flush exec_pop (boolean_invert_second_then_and in2 exec_pop (in2 exec_y (in3) exec_k_when_autoconstructing (boolean_invert_second_then_and integer_eq integer_max exec_rot (exec_noop exec_s (integer_mult integer_lte integer_yankdup) (integer_pop exec_noop integer_gte boolean_not boolean_stackdepth exec_noop boolean_shove) (integer_gte) exec_when () integer_gte integer_div exec_yank exec_empty boolean_pop exec_dup_times (integer_sub exec_yankdup exec_stackdepth) integer_mult exec_shove (boolean_yank exec_s_when_autoconstructing (print_integer boolean_not integer_dup integer_dup_items) (integer_gte exec_if (integer_mult integer_stackdepth integer_max exec_k_when_autoconstructing (print_exec () boolean_not exec_eq integer_gte) ()) ()) ())) () ()) ()))))))) ()))
Zero cases best errors: [0 1 0 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 126
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 108 503 504 107 395 382 1000 1000 396)
Population mean number of elite cases: 5.28
Count of perfect (error zero) individuals by case: (885 108 503 504 107 395 382 0 0 396)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_484} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y} {:close 0, :instruction tag_exec_217} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 2, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction 65} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction tagged_984} {:close 0, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_yank})
Best program: (boolean_frominteger integer_sub exec_when (boolean_eq exec_dup_times () exec_pop (integer_swap) tagged_484 exec_yankdup boolean_invert_first_then_and boolean_invert_second_then_and exec_do*times (in3 exec_do*while (print_integer integer_div integer_flush) integer_yank integer_swap integer_mult integer_sub) exec_y (tag_exec_217 (integer_shove boolean_stackdepth exec_do*times (exec_do*times ()) boolean_yankdup) integer_dec exec_shove (exec_yankdup integer_gt boolean_pop boolean_flush integer_eq in3 exec_do*count (integer_max boolean_or) exec_rot (integer_yankdup) (exec_noop integer_flush exec_empty exec_flush integer_rot) (integer_max exec_dup_items boolean_shove) print_boolean exec_swap (exec_k (boolean_yankdup exec_do*while () integer_yank exec_swap (exec_if () (exec_do*count (integer_dec integer_gt exec_dup_times (boolean_yankdup integer_pop boolean_not integer_pop) integer_gt boolean_empty boolean_invert_second_then_and integer_mult boolean_empty integer_shove 65 integer_yank) integer_sub integer_lt in2 tagged_984 exec_when (in4 boolean_yank boolean_frominteger) integer_dup_times integer_mult exec_y (integer_mod exec_eq) boolean_invert_first_then_and integer_shove print_newline exec_s_when_autoconstructing (exec_swap () (integer_yank exec_eq integer_dec integer_yank)) () ())) ()) ()) ()))))
Errors: [0 1 0 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 95
Size: 128
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.72
Median total errors in population: 5
Error averages by case: (0.115 0.892 0.497 0.496 0.893 0.605 0.618 1.0 1.0 0.604)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 56.824
Average program size in population (points): 77.965
Average percent parens in population: 0.266
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1236445
--- Timings ---
Current time: 1559314319751 milliseconds
Total Time:           6.2 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.5 seconds, 41.0%
Fitness Testing:      3.0 seconds, 48.6%
Report:               0.5 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -68                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: 4                  
Correct output: -77                 | Program output: -6                 
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 44                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 82                 
Correct output: 28                  | Program output: 69                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 21                 
Correct output: 2                   | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 98                 
Correct output: 18                  | Program output: 81                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 85                 
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: 58                 
Correct output: -62                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: 87                 
Correct output: -47                 | Program output: 92                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: 78                 
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -17                
Correct output: -97                 | Program output: -37                
Correct output: -57                 | Program output: -42                
Correct output: -77                 | Program output: 51                 
Correct output: -67                 | Program output: -47                
Correct output: -37                 | Program output: -8                 
Correct output: -60                 | Program output: -1                 
Correct output: -56                 | Program output: -8                 
Correct output: -79                 | Program output: -54                
Correct output: -97                 | Program output: -68                
Correct output: -95                 | Program output: -53                
Correct output: -100                | Program output: -63                
Correct output: -58                 | Program output: 14                 
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -15                
Correct output: -66                 | Program output: -66                
Correct output: -84                 | Program output: 41                 
Correct output: -94                 | Program output: -73                
Correct output: -97                 | Program output: 62                 
Correct output: -68                 | Program output: 64                 
Correct output: -44                 | Program output: 12                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: 78                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: 90                 
Correct output: -54                 | Program output: 84                 
Correct output: -97                 | Program output: -89                
Correct output: -48                 | Program output: -8                 
Correct output: -64                 | Program output: -4                 
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: 83                 
Correct output: -59                 | Program output: -16                
Correct output: -40                 | Program output: 65                 
Correct output: -72                 | Program output: 8                  
Correct output: -95                 | Program output: -73                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_gt) (integer_dec tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (integer_swap boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) integer_mod boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))) () ())
Lexicase best errors: [1 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 68
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_gt) (integer_dec tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (integer_swap boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) integer_mod boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))) () ())
Zero cases best errors: [1 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 68
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 373 356 68 373 64 360 356 9 356)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (64 373 356 68 373 64 360 356 9 356)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items})
Best program: (in2 integer_div print_integer boolean_invert_first_then_and exec_k_when_autoconstructing (integer_mod integer_flush) (boolean_shove boolean_shove boolean_dup) boolean_xor exec_s (exec_k_when_autoconstructing (exec_yankdup boolean_swap integer_max integer_sub integer_yank) (exec_s_when_autoconstructing () (exec_if (exec_pop (boolean_xor in2 boolean_stackdepth integer_stackdepth print_boolean boolean_not in3 boolean_not)) (integer_mult exec_do*times () in3 exec_empty exec_do*count (boolean_invert_first_then_and exec_flush) exec_dup_items)) ())) () ())
Errors: [1 1 0 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 53
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.621
Median total errors in population: 8
Error averages by case: (0.936 0.627 0.644 0.932 0.627 0.936 0.64 0.644 0.991 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.362
Average program size in population (points): 71.133
Average percent parens in population: 0.276
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9245
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1925854
--- Timings ---
Current time: 1559314322958 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.7 seconds, 47.9%
Fitness Testing:      3.8 seconds, 38.7%
Report:               1.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 68                 
Correct output: 64                  | Program output: 68                 
Correct output: 42                  | Program output: 61                 
Correct output: 28                  | Program output: 68                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 70                 
Correct output: 2                   | Program output: 46                 
Correct output: 16                  | Program output: 42                 
Correct output: 51                  | Program output: 90                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 43                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 88                 
Correct output: 8                   | Program output: 21                 
Correct output: 2                   | Program output: 66                 
Correct output: 18                  | Program output: 43                 
Correct output: 15                  | Program output: 100                
Correct output: -89                 | Program output: 7                  
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -23                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: 2                  
Correct output: -64                 | Program output: -55                
Correct output: -65                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: 95                 
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -14                
Correct output: -11                 | Program output: 2                  
Correct output: -47                 | Program output: 77                 
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -27                
Correct output: -60                 | Program output: -60                
Correct output: -56                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -38                
Correct output: -95                 | Program output: -68                
Correct output: -100                | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 37                 
Correct output: -93                 | Program output: 32                 
Correct output: -22                 | Program output: -22                
Correct output: -66                 | Program output: -57                
Correct output: -84                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 63                 
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: 34                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 25                 
Correct output: -78                 | Program output: 90                 
Correct output: -35                 | Program output: 93                 
Correct output: -48                 | Program output: -20                
Correct output: -85                 | Program output: -35                
Correct output: -100                | Program output: 95                 
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 16                  | Program output: 65                 
Correct output: -90                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 12                 
Correct output: -51                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: 64                 
Correct output: -95                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ())
Lexicase best errors: [1 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ())
Zero cases best errors: [1 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (314 375 815 172 859 170 218 372 172 267)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (314 375 815 172 859 170 218 372 172 267)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ())
Errors: [1 1 0 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.266
Median total errors in population: 6
Error averages by case: (0.686 0.625 0.185 0.828 0.141 0.83 0.782 0.628 0.828 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.846
Average program size in population (points): 68.537
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5535
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2757230
--- Timings ---
Current time: 1559314326598 milliseconds
Total Time:          13.0 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.8 seconds, 51.9%
Fitness Testing:      4.7 seconds, 35.9%
Report:               1.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 570
Test mean error for best: 0.57000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: 4                  
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 44                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 82                 
Correct output: 28                  | Program output: 69                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 21                 
Correct output: 2                   | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 98                 
Correct output: 18                  | Program output: 81                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 85                 
Correct output: -49                 | Program output: -23                
Correct output: -17                 | Program output: 58                 
Correct output: -62                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -55                
Correct output: -65                 | Program output: -15                
Correct output: -47                 | Program output: 92                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -14                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -17                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -50                
Correct output: -77                 | Program output: 51                 
Correct output: -67                 | Program output: -47                
Correct output: -37                 | Program output: -27                
Correct output: -60                 | Program output: -60                
Correct output: -56                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -38                
Correct output: -95                 | Program output: -68                
Correct output: -100                | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -22                
Correct output: -66                 | Program output: -57                
Correct output: -84                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 62                 
Correct output: -68                 | Program output: 64                 
Correct output: -44                 | Program output: 12                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: 78                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: -59                
Correct output: -54                 | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -4                 
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: 8                  
Correct output: -95                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_do*count (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))))) () ())
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_do*count (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))))) () ())
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 14 18 223 226 21 357 225 776 190)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (648 14 18 223 226 21 357 225 776 190)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ())
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.302
Median total errors in population: 7
Error averages by case: (0.352 0.986 0.982 0.777 0.774 0.979 0.643 0.775 0.224 0.81)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.472
Average program size in population (points): 68.135
Average percent parens in population: 0.273
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.518125
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 183
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3840950
--- Timings ---
Current time: 1559314330574 milliseconds
Total Time:          17.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.9 seconds, 52.6%
Fitness Testing:      5.8 seconds, 34.1%
Report:               2.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 58                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 88                 
Correct output: 64                  | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 49                 
Correct output: 2                   | Program output: 40                 
Correct output: 16                  | Program output: 47                 
Correct output: 51                  | Program output: 67                 
Correct output: 8                   | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 38                 
Correct output: 21                  | Program output: 80                 
Correct output: 25                  | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 37                 
Correct output: 8                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: -89                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -71                
Correct output: -64                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -15                
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -24                
Correct output: -11                 | Program output: 74                 
Correct output: -47                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 9                  
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -34                
Correct output: -58                 | Program output: -19                
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 53                 
Correct output: -93                 | Program output: -32                
Correct output: -22                 | Program output: -13                
Correct output: -66                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: -44                
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -78                 | Program output: -10                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -20                
Correct output: -85                 | Program output: -35                
Correct output: -100                | Program output: 8                  
Correct output: -73                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 72                 
Correct output: 16                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -50                
Correct output: -48                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 80                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 8                  
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Lexicase best errors: [0 0 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 70
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Zero cases best errors: [0 0 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 70
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (828 220 92 392 93 93 375 92 520 349)
Population mean number of elite cases: 3.05
Count of perfect (error zero) individuals by case: (828 220 92 392 93 93 375 92 520 349)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Errors: [0 0 0 0 0 1 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 70
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.946
Median total errors in population: 7
Error averages by case: (0.172 0.78 0.908 0.608 0.907 0.907 0.625 0.908 0.48 0.651)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.945
Average program size in population (points): 74.679
Average percent parens in population: 0.265
Minimum age in population: 5.0
Maximum age in population: 9.5625
Average age in population: 8.3589375
Median age in population: 8.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4981617
--- Timings ---
Current time: 1559314334414 milliseconds
Total Time:          20.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.0 seconds, 52.7%
Fitness Testing:      6.9 seconds, 33.2%
Report:               2.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 570
Test mean error for best: 0.57000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: 4                  
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 44                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 82                 
Correct output: 28                  | Program output: 69                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 21                 
Correct output: 2                   | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 0                   | Program output: 79                 
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 98                 
Correct output: 18                  | Program output: 81                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: 85                 
Correct output: -49                 | Program output: -23                
Correct output: -17                 | Program output: 58                 
Correct output: -62                 | Program output: 96                 
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -55                
Correct output: -65                 | Program output: -15                
Correct output: -47                 | Program output: 92                 
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -14                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -17                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -50                
Correct output: -77                 | Program output: 51                 
Correct output: -67                 | Program output: -47                
Correct output: -37                 | Program output: -27                
Correct output: -60                 | Program output: -60                
Correct output: -56                 | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -38                
Correct output: -95                 | Program output: -68                
Correct output: -100                | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -22                
Correct output: -66                 | Program output: -57                
Correct output: -84                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 62                 
Correct output: -68                 | Program output: 64                 
Correct output: -44                 | Program output: 12                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: 78                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: -59                
Correct output: -54                 | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -4                 
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: 96                 
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: -43                
Correct output: -59                 | Program output: -59                
Correct output: -40                 | Program output: -40                
Correct output: -72                 | Program output: 8                  
Correct output: -95                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (integer_dup_times exec_do*while ()) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))))) () ())
Lexicase best errors: [1 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_do*count (integer_dup_times) in1 integer_yankdup exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (integer_dup_times exec_do*while ()) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove))))) () ())
Zero cases best errors: [1 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (472 851 4 466 316 337 336 370 264 5)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (472 851 4 466 316 337 336 370 264 5)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_times} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_s (integer_dup_times) (in1) () exec_do*while (exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (integer_dup_times integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ()))
Errors: [1 0 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 6.579
Median total errors in population: 6
Error averages by case: (0.528 0.149 0.996 0.534 0.684 0.663 0.664 0.63 0.736 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.55
Average program size in population (points): 71.921
Average percent parens in population: 0.254
Minimum age in population: 7.0
Maximum age in population: 11.4375
Average age in population: 9.66271875
Median age in population: 9.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6064120
--- Timings ---
Current time: 1559314338406 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 53.2%
Fitness Testing:      8.1 seconds, 32.4%
Report:               3.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 58                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 88                 
Correct output: 64                  | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 49                 
Correct output: 2                   | Program output: 40                 
Correct output: 16                  | Program output: 47                 
Correct output: 51                  | Program output: 67                 
Correct output: 8                   | Program output: 39                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 38                 
Correct output: 21                  | Program output: 80                 
Correct output: 25                  | Program output: 100                
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 37                 
Correct output: 8                   | Program output: 48                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: -89                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -71                
Correct output: -64                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -15                
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -24                
Correct output: -11                 | Program output: 74                 
Correct output: -47                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 9                  
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -34                
Correct output: -58                 | Program output: -19                
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 53                 
Correct output: -93                 | Program output: -32                
Correct output: -22                 | Program output: -13                
Correct output: -66                 | Program output: 83                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: -44                
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 22                 
Correct output: -78                 | Program output: -10                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -20                
Correct output: -85                 | Program output: -35                
Correct output: -100                | Program output: 8                  
Correct output: -73                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 72                 
Correct output: 16                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -50                
Correct output: -48                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 80                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 8                  
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.243
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.243
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 404 206 28 258 407 339 67 545 252)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (846 404 206 28 258 407 339 67 545 252)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_965} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_965 boolean_eq) (integer_min integer_lte integer_eq integer_shove) (integer_dup_items tag_integer_701 boolean_dup print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 53
Size: 70
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.648
Median total errors in population: 7
Error averages by case: (0.154 0.596 0.794 0.972 0.742 0.593 0.661 0.933 0.455 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.485
Average program size in population (points): 73.736
Average percent parens in population: 0.274
Minimum age in population: 9.375
Maximum age in population: 12.609375
Average age in population: 11.168828125
Median age in population: 11.296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.008
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7255107
--- Timings ---
Current time: 1559314342345 milliseconds
Total Time:          28.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.3 seconds, 53.0%
Fitness Testing:      9.3 seconds, 32.2%
Report:               4.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 339
Test mean error for best: 0.33900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: 81                 
Correct output: -68                 | Program output: -68                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 6                  
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 32                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 56                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 59                 
Correct output: 17                  | Program output: 17                 
Correct output: 2                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 51                 
Correct output: 8                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 51                 
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 91                 
Correct output: 18                  | Program output: 25                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -24                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -17                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -60                
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -79                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -63                
Correct output: -58                 | Program output: -58                
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -22                
Correct output: -66                 | Program output: -66                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: -97                 | Program output: 45                 
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: 12                 
Correct output: -61                 | Program output: -7                 
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: 34                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: -73                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: -59                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -89                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: -43                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: 8                  
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_dup_items boolean_and in3 integer_dup_times in1 exec_do*while (exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth integer_dup integer_lte boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (boolean_shove integer_max tagged_398 boolean_eq) (integer_min integer_lte boolean_or integer_shove) (integer_dup_items tag_integer_701 integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove)))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_dup_items boolean_and in3 integer_dup_times in1 exec_do*while (exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth integer_dup integer_lte boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (boolean_shove integer_max tagged_398 boolean_eq) (integer_min integer_lte boolean_or integer_shove) (integer_dup_items tag_integer_701 integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove)))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 216 50 814 742 50 735 259 832 50)
Population mean number of elite cases: 4.32
Count of perfect (error zero) individuals by case: (573 216 50 814 742 50 735 259 832 50)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_dup_items boolean_and in3 integer_dup_times in1 exec_do*while (exec_s (integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) () ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 70
Percent parens: 0.271
--- Population Statistics ---
Average total errors in population: 5.679
Median total errors in population: 5
Error averages by case: (0.427 0.784 0.95 0.186 0.258 0.95 0.265 0.741 0.168 0.95)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.452
Average program size in population (points): 72.219
Average percent parens in population: 0.260
Minimum age in population: 10.71875
Maximum age in population: 14.359375
Average age in population: 13.173890625
Median age in population: 13.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.01
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8399944
--- Timings ---
Current time: 1559314346168 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 53.1%
Fitness Testing:     10.5 seconds, 32.0%
Report:               4.8 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 398
Test mean error for best: 0.39800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -40                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: 33                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 68                 
Correct output: 64                  | Program output: 68                 
Correct output: 42                  | Program output: 42                 
Correct output: 28                  | Program output: 28                 
Correct output: 17                  | Program output: 17                 
Correct output: 17                  | Program output: 49                 
Correct output: 2                   | Program output: 40                 
Correct output: 16                  | Program output: 42                 
Correct output: 51                  | Program output: 67                 
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 38                 
Correct output: 21                  | Program output: 21                 
Correct output: 25                  | Program output: 25                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 37                 
Correct output: 8                   | Program output: 21                 
Correct output: 2                   | Program output: 2                  
Correct output: 18                  | Program output: 18                 
Correct output: 15                  | Program output: 15                 
Correct output: -89                 | Program output: -25                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -45                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -71                
Correct output: -64                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -15                
Correct output: -100                | Program output: -67                
Correct output: -33                 | Program output: -33                
Correct output: -11                 | Program output: 2                  
Correct output: -47                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: 9                  
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: 64                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -19                
Correct output: -65                 | Program output: -31                
Correct output: -14                 | Program output: 37                 
Correct output: -93                 | Program output: -32                
Correct output: -22                 | Program output: -13                
Correct output: -66                 | Program output: 15                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: -44                
Correct output: -61                 | Program output: -61                
Correct output: 22                  | Program output: 22                 
Correct output: -78                 | Program output: -10                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -22                
Correct output: -85                 | Program output: -51                
Correct output: -100                | Program output: 8                  
Correct output: -73                 | Program output: 7                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 24                 
Correct output: 16                  | Program output: 28                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -50                
Correct output: -48                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: 43                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 8                  
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_eq integer_shove) (integer_dup_items tag_integer_701 integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.239
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_eq integer_shove) (integer_dup_items tag_integer_701 integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.239
--- Lexicase Population Statistics ---
Count of elite individuals by case: (59 580 616 826 170 25 165 840 835 831)
Population mean number of elite cases: 4.95
Count of perfect (error zero) individuals by case: (59 580 616 826 170 25 165 840 835 831)
Population mean number of perfect (error zero) cases: 4.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_701} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_dup_items exec_eq boolean_swap exec_k (in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (boolean_and in3 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_min integer_lte integer_eq integer_eq integer_shove) (integer_dup_items tag_integer_701 integer_min print_integer exec_dup_times () exec_do*while (exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))) ())
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 5.053
Median total errors in population: 4
Error averages by case: (0.941 0.42 0.384 0.174 0.83 0.975 0.835 0.16 0.165 0.169)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.841
Average program size in population (points): 73.838
Average percent parens in population: 0.257
Minimum age in population: 13.0859375
Maximum age in population: 16.1953125
Average age in population: 15.32238671875
Median age in population: 15.1953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.008
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 9610729
--- Timings ---
Current time: 1559314350067 milliseconds
Total Time:          36.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 53.1%
Fitness Testing:     11.6 seconds, 31.9%
Report:               5.4 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 328
Test mean error for best: 0.32800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 44                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 82                 
Correct output: 28                  | Program output: 69                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 21                 
Correct output: 2                   | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 98                 
Correct output: 18                  | Program output: 81                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -1                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -19                
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -15                
Correct output: -66                 | Program output: -66                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: -44                
Correct output: -61                 | Program output: -61                
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -89                
Correct output: -48                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 70
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 70
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (544 830 546 862 308 507 506 862 790 790)
Population mean number of elite cases: 6.55
Count of perfect (error zero) individuals by case: (544 830 546 862 308 507 506 862 790 790)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_and} {:close 0, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_398} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_max} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 2, :instruction integer_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_exec_354} {:close 0, :instruction boolean_shove})
Best program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 54
Size: 70
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 3.455
Median total errors in population: 3
Error averages by case: (0.456 0.17 0.454 0.138 0.692 0.493 0.494 0.138 0.21 0.21)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.118
Average program size in population (points): 72.83
Average percent parens in population: 0.243
Minimum age in population: 14.4140625
Maximum age in population: 18.025390625
Average age in population: 16.74755859375
Median age in population: 16.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.011
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10809843
--- Timings ---
Current time: 1559314353997 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.4 seconds, 53.0%
Fitness Testing:     12.8 seconds, 31.8%
Report:               6.0 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 10
Successful program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 70


Auto-simplifying with starting size: 70
step: 0
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 500
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1000
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 1500
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2000
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 2500
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3000
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 3500
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4000
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 4500
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

step: 5000
program: (exec_dup_items in4 integer_lte integer_gt integer_min boolean_and in3 exec_do*times (exec_do*while (integer_min integer_empty integer_swap exec_do*times (boolean_and in2 exec_stackdepth exec_rot (integer_fromboolean integer_max tagged_398 boolean_eq) (integer_dup integer_lte integer_eq integer_shove) (integer_dup_items integer_min print_integer exec_dup_times () integer_dup_times exec_pop (boolean_dup integer_fromboolean integer_max) exec_dup (exec_do*count (boolean_eq integer_fromboolean)) exec_s (boolean_frominteger integer_dup integer_pop exec_noop exec_y (integer_inc integer_max) exec_flush boolean_frominteger boolean_yank) (integer_pop) () boolean_dup_items) integer_shove tag_exec_354 (boolean_shove)))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 70

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 328
Test mean error for best: 0.32800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 1
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 1
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 1
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 1
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: 41                  | Program output: 41                 
Correct output: 6                   | Program output: 50                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: 41                  | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -77                 | Program output: -77                
Correct output: 2                   | Program output: 2                  
Correct output: -90                 | Program output: -90                
Correct output: -5                  | Program output: -5                 
Correct output: -29                 | Program output: -29                
Correct output: -95                 | Program output: -95                
Correct output: 32                  | Program output: 44                 
Correct output: 64                  | Program output: 64                 
Correct output: 42                  | Program output: 82                 
Correct output: 28                  | Program output: 69                 
Correct output: 17                  | Program output: 68                 
Correct output: 17                  | Program output: 21                 
Correct output: 2                   | Program output: 32                 
Correct output: 16                  | Program output: 16                 
Correct output: 51                  | Program output: 88                 
Correct output: 8                   | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: 25                  | Program output: 25                 
Correct output: 21                  | Program output: 33                 
Correct output: 25                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 8                   | Program output: 8                  
Correct output: 2                   | Program output: 98                 
Correct output: 18                  | Program output: 81                 
Correct output: 15                  | Program output: 54                 
Correct output: -89                 | Program output: -89                
Correct output: -26                 | Program output: -26                
Correct output: -49                 | Program output: -49                
Correct output: -17                 | Program output: -17                
Correct output: -62                 | Program output: -62                
Correct output: -89                 | Program output: -89                
Correct output: -64                 | Program output: -64                
Correct output: -65                 | Program output: -65                
Correct output: -47                 | Program output: -47                
Correct output: -64                 | Program output: -64                
Correct output: -100                | Program output: -100               
Correct output: -33                 | Program output: -33                
Correct output: -11                 | Program output: -11                
Correct output: -47                 | Program output: -47                
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: -77                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -37                 | Program output: -37                
Correct output: -60                 | Program output: -1                 
Correct output: -56                 | Program output: -56                
Correct output: -79                 | Program output: -54                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: -58                 | Program output: -19                
Correct output: -65                 | Program output: -65                
Correct output: -14                 | Program output: -14                
Correct output: -93                 | Program output: -93                
Correct output: -22                 | Program output: -15                
Correct output: -66                 | Program output: -66                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -74                
Correct output: -97                 | Program output: -97                
Correct output: -68                 | Program output: -68                
Correct output: -44                 | Program output: -44                
Correct output: -61                 | Program output: -61                
Correct output: 22                  | Program output: 26                 
Correct output: -78                 | Program output: -78                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -100                | Program output: -100               
Correct output: -73                 | Program output: 1                  
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -1                 
Correct output: 16                  | Program output: 16                 
Correct output: -90                 | Program output: -90                
Correct output: -54                 | Program output: -54                
Correct output: -97                 | Program output: -89                
Correct output: -48                 | Program output: -17                
Correct output: -64                 | Program output: -64                
Correct output: -2                  | Program output: -2                 
Correct output: -71                 | Program output: -71                
Correct output: 8                   | Program output: 26                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -57                
Correct output: -40                 | Program output: -39                
Correct output: -72                 | Program output: -72                
Correct output: -95                 | Program output: -95                
;;******************************
