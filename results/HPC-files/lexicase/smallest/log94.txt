Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[6 6 6 -13] -13] [[-71 -71 -71 17] -71] [[8 -36 -36 -36] -36] [[-72 -72 -66 -72] -72] [[-62 -62 -62 -83] -83] [[98 -53 -53 -53] -53] [[-69 -69 -69 -88] -88] [[-11 -32 -11 -11] -32] [[-63 -63 76 -63] -63] [[-73 28 28 28] -73] [(50 50 50 50) 50] [(-82 -82 -82 -82) -82] [(9 9 9 9) 9] [(-1 -1 -1 -1) -1] [(-35 -35 -35 -35) -35] [(24 17 45 24) 17] [(23 83 33 26) 23] [(32 75 2 95) 2] [(11 29 69 58) 11] [(16 40 80 63) 16] [(84 20 52 89) 20] [(78 37 44 93) 37] [(40 9 59 5) 5] [(54 83 68 52) 52] [(45 19 75 62) 19] [(25 59 25 62) 25] [(56 38 67 81) 38] [(93 8 15 92) 8] [(99 36 65 12) 12] [(36 100 85 72) 36] [(57 91 61 36) 36] [(65 77 92 62) 62] [(53 53 68 98) 53] [(41 31 21 18) 18] [(77 14 30 4) 4] [(-56 -75 73 -100) -100] [(-63 -15 35 34) -63] [(-68 69 20 76) -68] [(-47 56 -38 9) -47] [(-95 -33 97 -99) -99] [(97 -30 -14 85) -30] [(-67 -12 -59 34) -67] [(39 4 -46 13) -46] [(-27 15 -15 59) -27] [(15 33 -88 -19) -88] [(49 51 -93 -5) -93] [(40 -14 1 -53) -53] [(95 -97 -95 -97) -97] [(-17 -78 3 -86) -86] [(68 48 29 25) 25] [(-79 -27 -91 -24) -91] [(-64 94 89 24) -64] [(58 -39 100 -44) -44] [(87 -49 -7 -4) -49] [(56 -52 -74 -37) -74] [(20 -92 -58 1) -92] [(-76 60 -87 -13) -87] [(15 61 -13 30) -13] [(27 -95 -71 85) -95] [(53 -78 -95 -88) -95] [(-16 75 88 -35) -35] [(64 -99 37 -48) -99] [(100 3 -12 33) -12] [(95 -28 28 -67) -67] [(64 -70 -35 -46) -70] [(3 59 -62 -43) -62] [(-9 77 3 -74) -74] [(-61 -46 -100 14) -100] [(-93 2 -24 100) -93] [(-14 74 23 50) -14] [(63 -31 2 -59) -59] [(-8 -29 42 87) -29] [(26 27 -65 -87) -87] [(7 -91 98 -99) -99] [(65 15 -10 16) -10] [(-24 19 -26 71) -26] [(-73 -59 -50 74) -73] [(19 -60 39 6) -60] [(24 -94 55 -2) -94] [(-66 87 98 -57) -66] [(86 68 94 -16) -16] [(-70 -59 -3 99) -70] [(-33 1 37 74) -33] [(-62 -7 -7 -84) -84] [(-98 -65 -80 -43) -98] [(13 -31 -78 60) -78] [(58 -14 -89 -31) -89] [(-58 20 -91 -24) -91] [(-24 79 60 57) -24] [(-6 -33 88 -33) -33] [(-84 15 5 4) -84] [(-41 15 -71 -72) -72] [(77 63 77 -64) -64] [(90 -20 -51 71) -51] [(-32 -25 -41 33) -41])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[6 6 6 -13] -13]
Train Case:   6 | Input/Output: [[-71 -71 -71 17] -71]
Train Case:   7 | Input/Output: [[8 -36 -36 -36] -36]
Train Case:   8 | Input/Output: [[-72 -72 -66 -72] -72]
Train Case:   9 | Input/Output: [[-62 -62 -62 -83] -83]
Train Case:  10 | Input/Output: [[98 -53 -53 -53] -53]
Train Case:  11 | Input/Output: [[-69 -69 -69 -88] -88]
Train Case:  12 | Input/Output: [[-11 -32 -11 -11] -32]
Train Case:  13 | Input/Output: [[-63 -63 76 -63] -63]
Train Case:  14 | Input/Output: [[-73 28 28 28] -73]
Train Case:  15 | Input/Output: [(50 50 50 50) 50]
Train Case:  16 | Input/Output: [(-82 -82 -82 -82) -82]
Train Case:  17 | Input/Output: [(9 9 9 9) 9]
Train Case:  18 | Input/Output: [(-1 -1 -1 -1) -1]
Train Case:  19 | Input/Output: [(-35 -35 -35 -35) -35]
Train Case:  20 | Input/Output: [(24 17 45 24) 17]
Train Case:  21 | Input/Output: [(23 83 33 26) 23]
Train Case:  22 | Input/Output: [(32 75 2 95) 2]
Train Case:  23 | Input/Output: [(11 29 69 58) 11]
Train Case:  24 | Input/Output: [(16 40 80 63) 16]
Train Case:  25 | Input/Output: [(84 20 52 89) 20]
Train Case:  26 | Input/Output: [(78 37 44 93) 37]
Train Case:  27 | Input/Output: [(40 9 59 5) 5]
Train Case:  28 | Input/Output: [(54 83 68 52) 52]
Train Case:  29 | Input/Output: [(45 19 75 62) 19]
Train Case:  30 | Input/Output: [(25 59 25 62) 25]
Train Case:  31 | Input/Output: [(56 38 67 81) 38]
Train Case:  32 | Input/Output: [(93 8 15 92) 8]
Train Case:  33 | Input/Output: [(99 36 65 12) 12]
Train Case:  34 | Input/Output: [(36 100 85 72) 36]
Train Case:  35 | Input/Output: [(57 91 61 36) 36]
Train Case:  36 | Input/Output: [(65 77 92 62) 62]
Train Case:  37 | Input/Output: [(53 53 68 98) 53]
Train Case:  38 | Input/Output: [(41 31 21 18) 18]
Train Case:  39 | Input/Output: [(77 14 30 4) 4]
Train Case:  40 | Input/Output: [(-56 -75 73 -100) -100]
Train Case:  41 | Input/Output: [(-63 -15 35 34) -63]
Train Case:  42 | Input/Output: [(-68 69 20 76) -68]
Train Case:  43 | Input/Output: [(-47 56 -38 9) -47]
Train Case:  44 | Input/Output: [(-95 -33 97 -99) -99]
Train Case:  45 | Input/Output: [(97 -30 -14 85) -30]
Train Case:  46 | Input/Output: [(-67 -12 -59 34) -67]
Train Case:  47 | Input/Output: [(39 4 -46 13) -46]
Train Case:  48 | Input/Output: [(-27 15 -15 59) -27]
Train Case:  49 | Input/Output: [(15 33 -88 -19) -88]
Train Case:  50 | Input/Output: [(49 51 -93 -5) -93]
Train Case:  51 | Input/Output: [(40 -14 1 -53) -53]
Train Case:  52 | Input/Output: [(95 -97 -95 -97) -97]
Train Case:  53 | Input/Output: [(-17 -78 3 -86) -86]
Train Case:  54 | Input/Output: [(68 48 29 25) 25]
Train Case:  55 | Input/Output: [(-79 -27 -91 -24) -91]
Train Case:  56 | Input/Output: [(-64 94 89 24) -64]
Train Case:  57 | Input/Output: [(58 -39 100 -44) -44]
Train Case:  58 | Input/Output: [(87 -49 -7 -4) -49]
Train Case:  59 | Input/Output: [(56 -52 -74 -37) -74]
Train Case:  60 | Input/Output: [(20 -92 -58 1) -92]
Train Case:  61 | Input/Output: [(-76 60 -87 -13) -87]
Train Case:  62 | Input/Output: [(15 61 -13 30) -13]
Train Case:  63 | Input/Output: [(27 -95 -71 85) -95]
Train Case:  64 | Input/Output: [(53 -78 -95 -88) -95]
Train Case:  65 | Input/Output: [(-16 75 88 -35) -35]
Train Case:  66 | Input/Output: [(64 -99 37 -48) -99]
Train Case:  67 | Input/Output: [(100 3 -12 33) -12]
Train Case:  68 | Input/Output: [(95 -28 28 -67) -67]
Train Case:  69 | Input/Output: [(64 -70 -35 -46) -70]
Train Case:  70 | Input/Output: [(3 59 -62 -43) -62]
Train Case:  71 | Input/Output: [(-9 77 3 -74) -74]
Train Case:  72 | Input/Output: [(-61 -46 -100 14) -100]
Train Case:  73 | Input/Output: [(-93 2 -24 100) -93]
Train Case:  74 | Input/Output: [(-14 74 23 50) -14]
Train Case:  75 | Input/Output: [(63 -31 2 -59) -59]
Train Case:  76 | Input/Output: [(-8 -29 42 87) -29]
Train Case:  77 | Input/Output: [(26 27 -65 -87) -87]
Train Case:  78 | Input/Output: [(7 -91 98 -99) -99]
Train Case:  79 | Input/Output: [(65 15 -10 16) -10]
Train Case:  80 | Input/Output: [(-24 19 -26 71) -26]
Train Case:  81 | Input/Output: [(-73 -59 -50 74) -73]
Train Case:  82 | Input/Output: [(19 -60 39 6) -60]
Train Case:  83 | Input/Output: [(24 -94 55 -2) -94]
Train Case:  84 | Input/Output: [(-66 87 98 -57) -66]
Train Case:  85 | Input/Output: [(86 68 94 -16) -16]
Train Case:  86 | Input/Output: [(-70 -59 -3 99) -70]
Train Case:  87 | Input/Output: [(-33 1 37 74) -33]
Train Case:  88 | Input/Output: [(-62 -7 -7 -84) -84]
Train Case:  89 | Input/Output: [(-98 -65 -80 -43) -98]
Train Case:  90 | Input/Output: [(13 -31 -78 60) -78]
Train Case:  91 | Input/Output: [(58 -14 -89 -31) -89]
Train Case:  92 | Input/Output: [(-58 20 -91 -24) -91]
Train Case:  93 | Input/Output: [(-24 79 60 57) -24]
Train Case:  94 | Input/Output: [(-6 -33 88 -33) -33]
Train Case:  95 | Input/Output: [(-84 15 5 4) -84]
Train Case:  96 | Input/Output: [(-41 15 -71 -72) -72]
Train Case:  97 | Input/Output: [(77 63 77 -64) -64]
Train Case:  98 | Input/Output: [(90 -20 -51 71) -51]
Train Case:  99 | Input/Output: [(-32 -25 -41 33) -41]
Test Case:   0 | Input/Output: [[-26 -26 -26 67] -26]
Test Case:   1 | Input/Output: [[40 -38 40 40] -38]
Test Case:   2 | Input/Output: [[81 75 75 75] 75]
Test Case:   3 | Input/Output: [[-57 58 58 58] -57]
Test Case:   4 | Input/Output: [[-53 -53 -58 -53] -58]
Test Case:   5 | Input/Output: [[-40 -40 27 -40] -40]
Test Case:   6 | Input/Output: [[18 18 18 21] 18]
Test Case:   7 | Input/Output: [[-38 -38 2 -38] -38]
Test Case:   8 | Input/Output: [[-56 -66 -56 -56] -66]
Test Case:   9 | Input/Output: [[-39 -16 -39 -39] -39]
Test Case:  10 | Input/Output: [[-59 -39 -39 -39] -59]
Test Case:  11 | Input/Output: [[-13 -13 -13 -92] -92]
Test Case:  12 | Input/Output: [[24 72 24 24] 24]
Test Case:  13 | Input/Output: [[43 43 43 -73] -73]
Test Case:  14 | Input/Output: [[-12 -12 -12 -13] -13]
Test Case:  15 | Input/Output: [[54 -20 -20 -20] -20]
Test Case:  16 | Input/Output: [[-29 -11 -11 -11] -29]
Test Case:  17 | Input/Output: [[65 65 69 65] 65]
Test Case:  18 | Input/Output: [[58 98 58 58] 58]
Test Case:  19 | Input/Output: [[51 51 -54 51] -54]
Test Case:  20 | Input/Output: [[-19 -19 -19 -19] -19]
Test Case:  21 | Input/Output: [[-97 -94 -97 -97] -97]
Test Case:  22 | Input/Output: [[-51 26 -51 -51] -51]
Test Case:  23 | Input/Output: [[28 98 28 28] 28]
Test Case:  24 | Input/Output: [[31 31 48 31] 31]
Test Case:  25 | Input/Output: [[7 7 75 7] 7]
Test Case:  26 | Input/Output: [[-51 84 84 84] -51]
Test Case:  27 | Input/Output: [[-86 -86 89 -86] -86]
Test Case:  28 | Input/Output: [[-93 -78 -78 -78] -93]
Test Case:  29 | Input/Output: [[-73 -73 -73 11] -73]
Test Case:  30 | Input/Output: [[63 63 63 -16] -16]
Test Case:  31 | Input/Output: [[67 67 -76 67] -76]
Test Case:  32 | Input/Output: [[94 61 94 94] 61]
Test Case:  33 | Input/Output: [[67 -31 -31 -31] -31]
Test Case:  34 | Input/Output: [[59 59 59 98] 59]
Test Case:  35 | Input/Output: [[-62 -62 -62 58] -62]
Test Case:  36 | Input/Output: [[-76 -76 10 -76] -76]
Test Case:  37 | Input/Output: [[45 45 82 45] 45]
Test Case:  38 | Input/Output: [[70 97 97 97] 70]
Test Case:  39 | Input/Output: [[49 49 41 49] 41]
Test Case:  40 | Input/Output: [[15 -54 15 15] -54]
Test Case:  41 | Input/Output: [[-7 -7 -7 49] -7]
Test Case:  42 | Input/Output: [[-25 -11 -11 -11] -25]
Test Case:  43 | Input/Output: [[-46 -2 -46 -46] -46]
Test Case:  44 | Input/Output: [[-6 -33 -6 -6] -33]
Test Case:  45 | Input/Output: [[-25 63 63 63] -25]
Test Case:  46 | Input/Output: [[-53 53 -53 -53] -53]
Test Case:  47 | Input/Output: [[-26 84 84 84] -26]
Test Case:  48 | Input/Output: [[79 -48 79 79] -48]
Test Case:  49 | Input/Output: [[-94 -3 -3 -3] -94]
Test Case:  50 | Input/Output: [[81 81 -32 81] -32]
Test Case:  51 | Input/Output: [[84 84 -6 84] -6]
Test Case:  52 | Input/Output: [[80 -92 -92 -92] -92]
Test Case:  53 | Input/Output: [[87 4 4 4] 4]
Test Case:  54 | Input/Output: [[41 66 41 41] 41]
Test Case:  55 | Input/Output: [[12 -10 -10 -10] -10]
Test Case:  56 | Input/Output: [[13 13 -35 13] -35]
Test Case:  57 | Input/Output: [[-57 -57 -82 -57] -82]
Test Case:  58 | Input/Output: [[91 91 49 91] 49]
Test Case:  59 | Input/Output: [[36 36 -66 36] -66]
Test Case:  60 | Input/Output: [[-46 50 50 50] -46]
Test Case:  61 | Input/Output: [[25 25 -81 25] -81]
Test Case:  62 | Input/Output: [[72 30 72 72] 30]
Test Case:  63 | Input/Output: [[-51 73 -51 -51] -51]
Test Case:  64 | Input/Output: [[67 67 29 67] 29]
Test Case:  65 | Input/Output: [[32 32 32 -80] -80]
Test Case:  66 | Input/Output: [[-60 -60 -60 -16] -60]
Test Case:  67 | Input/Output: [[19 19 6 19] 6]
Test Case:  68 | Input/Output: [[10 10 10 -44] -44]
Test Case:  69 | Input/Output: [[65 65 61 65] 61]
Test Case:  70 | Input/Output: [[-3 47 47 47] -3]
Test Case:  71 | Input/Output: [[5 5 22 5] 5]
Test Case:  72 | Input/Output: [[92 2 92 92] 2]
Test Case:  73 | Input/Output: [[-65 98 -65 -65] -65]
Test Case:  74 | Input/Output: [[-84 -80 -84 -84] -84]
Test Case:  75 | Input/Output: [[90 90 65 90] 65]
Test Case:  76 | Input/Output: [[-47 -47 -47 -8] -47]
Test Case:  77 | Input/Output: [[55 55 55 -50] -50]
Test Case:  78 | Input/Output: [[-37 -37 -46 -37] -46]
Test Case:  79 | Input/Output: [[47 64 64 64] 47]
Test Case:  80 | Input/Output: [[93 93 93 -26] -26]
Test Case:  81 | Input/Output: [[-61 35 -61 -61] -61]
Test Case:  82 | Input/Output: [[13 13 -64 13] -64]
Test Case:  83 | Input/Output: [[95 95 95 97] 95]
Test Case:  84 | Input/Output: [[-74 69 69 69] -74]
Test Case:  85 | Input/Output: [[-16 59 59 59] -16]
Test Case:  86 | Input/Output: [[-30 55 55 55] -30]
Test Case:  87 | Input/Output: [[99 -21 -21 -21] -21]
Test Case:  88 | Input/Output: [[5 5 5 83] 5]
Test Case:  89 | Input/Output: [[-78 27 27 27] -78]
Test Case:  90 | Input/Output: [[-25 -25 -25 -89] -89]
Test Case:  91 | Input/Output: [[-73 -73 27 -73] -73]
Test Case:  92 | Input/Output: [[-61 9 9 9] -61]
Test Case:  93 | Input/Output: [[90 90 -74 90] -74]
Test Case:  94 | Input/Output: [[28 -70 -70 -70] -70]
Test Case:  95 | Input/Output: [[63 -37 -37 -37] -37]
Test Case:  96 | Input/Output: [[-24 44 -24 -24] -24]
Test Case:  97 | Input/Output: [[99 99 39 99] 39]
Test Case:  98 | Input/Output: [[-55 -55 -55 19] -55]
Test Case:  99 | Input/Output: [[78 -37 78 78] -37]
Test Case: 100 | Input/Output: [(96 96 96 96) 96]
Test Case: 101 | Input/Output: [(83 83 83 83) 83]
Test Case: 102 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 103 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 104 | Input/Output: [(98 98 98 98) 98]
Test Case: 105 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 106 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 107 | Input/Output: [(47 47 47 47) 47]
Test Case: 108 | Input/Output: [(4 4 4 4) 4]
Test Case: 109 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 110 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 111 | Input/Output: [(96 96 96 96) 96]
Test Case: 112 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 113 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 114 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 115 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 116 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 117 | Input/Output: [(91 91 91 91) 91]
Test Case: 118 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 119 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 120 | Input/Output: [(56 56 56 56) 56]
Test Case: 121 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 122 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 123 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 124 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 125 | Input/Output: [(55 55 55 55) 55]
Test Case: 126 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 127 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 128 | Input/Output: [(43 43 43 43) 43]
Test Case: 129 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 130 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 131 | Input/Output: [(51 51 51 51) 51]
Test Case: 132 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 133 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 134 | Input/Output: [(85 85 85 85) 85]
Test Case: 135 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 136 | Input/Output: [(57 57 57 57) 57]
Test Case: 137 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 138 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 139 | Input/Output: [(94 94 94 94) 94]
Test Case: 140 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 141 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 142 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 143 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 144 | Input/Output: [(68 68 68 68) 68]
Test Case: 145 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 146 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 147 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 148 | Input/Output: [(53 53 53 53) 53]
Test Case: 149 | Input/Output: [(98 98 98 98) 98]
Test Case: 150 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 151 | Input/Output: [(61 61 61 61) 61]
Test Case: 152 | Input/Output: [(33 33 33 33) 33]
Test Case: 153 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 154 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 155 | Input/Output: [(41 41 41 41) 41]
Test Case: 156 | Input/Output: [(52 52 52 52) 52]
Test Case: 157 | Input/Output: [(10 10 10 10) 10]
Test Case: 158 | Input/Output: [(42 42 42 42) 42]
Test Case: 159 | Input/Output: [(24 24 24 24) 24]
Test Case: 160 | Input/Output: [(99 99 99 99) 99]
Test Case: 161 | Input/Output: [(67 67 67 67) 67]
Test Case: 162 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 163 | Input/Output: [(100 100 100 100) 100]
Test Case: 164 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 165 | Input/Output: [(50 50 50 50) 50]
Test Case: 166 | Input/Output: [(71 71 71 71) 71]
Test Case: 167 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 168 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 169 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 170 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 171 | Input/Output: [(65 65 65 65) 65]
Test Case: 172 | Input/Output: [(50 50 50 50) 50]
Test Case: 173 | Input/Output: [(57 57 57 57) 57]
Test Case: 174 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 175 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 176 | Input/Output: [(69 69 69 69) 69]
Test Case: 177 | Input/Output: [(2 2 2 2) 2]
Test Case: 178 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 179 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 180 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 181 | Input/Output: [(56 56 56 56) 56]
Test Case: 182 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 183 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 184 | Input/Output: [(68 68 68 68) 68]
Test Case: 185 | Input/Output: [(73 73 73 73) 73]
Test Case: 186 | Input/Output: [(35 35 35 35) 35]
Test Case: 187 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 188 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 189 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 190 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 191 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 192 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 193 | Input/Output: [(93 93 93 93) 93]
Test Case: 194 | Input/Output: [(69 69 69 69) 69]
Test Case: 195 | Input/Output: [(63 63 63 63) 63]
Test Case: 196 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 197 | Input/Output: [(95 95 95 95) 95]
Test Case: 198 | Input/Output: [(30 30 30 30) 30]
Test Case: 199 | Input/Output: [(65 65 65 65) 65]
Test Case: 200 | Input/Output: [(30 42 13 7) 7]
Test Case: 201 | Input/Output: [(46 11 76 6) 6]
Test Case: 202 | Input/Output: [(16 88 63 13) 13]
Test Case: 203 | Input/Output: [(52 45 15 15) 15]
Test Case: 204 | Input/Output: [(62 90 79 96) 62]
Test Case: 205 | Input/Output: [(79 66 70 35) 35]
Test Case: 206 | Input/Output: [(59 98 67 40) 40]
Test Case: 207 | Input/Output: [(79 9 74 90) 9]
Test Case: 208 | Input/Output: [(43 93 55 18) 18]
Test Case: 209 | Input/Output: [(61 79 30 6) 6]
Test Case: 210 | Input/Output: [(4 3 21 59) 3]
Test Case: 211 | Input/Output: [(26 36 70 85) 26]
Test Case: 212 | Input/Output: [(22 44 63 74) 22]
Test Case: 213 | Input/Output: [(9 44 17 18) 9]
Test Case: 214 | Input/Output: [(83 8 33 43) 8]
Test Case: 215 | Input/Output: [(5 72 45 51) 5]
Test Case: 216 | Input/Output: [(43 1 87 99) 1]
Test Case: 217 | Input/Output: [(63 25 80 4) 4]
Test Case: 218 | Input/Output: [(31 53 4 76) 4]
Test Case: 219 | Input/Output: [(21 13 41 60) 13]
Test Case: 220 | Input/Output: [(58 21 61 86) 21]
Test Case: 221 | Input/Output: [(63 18 56 31) 18]
Test Case: 222 | Input/Output: [(49 95 51 33) 33]
Test Case: 223 | Input/Output: [(80 63 4 7) 4]
Test Case: 224 | Input/Output: [(26 19 74 18) 18]
Test Case: 225 | Input/Output: [(19 13 67 45) 13]
Test Case: 226 | Input/Output: [(58 29 37 98) 29]
Test Case: 227 | Input/Output: [(12 29 11 37) 11]
Test Case: 228 | Input/Output: [(28 75 6 28) 6]
Test Case: 229 | Input/Output: [(42 35 87 62) 35]
Test Case: 230 | Input/Output: [(6 28 98 89) 6]
Test Case: 231 | Input/Output: [(66 42 4 28) 4]
Test Case: 232 | Input/Output: [(44 69 48 25) 25]
Test Case: 233 | Input/Output: [(4 12 92 17) 4]
Test Case: 234 | Input/Output: [(7 63 22 64) 7]
Test Case: 235 | Input/Output: [(73 99 72 47) 47]
Test Case: 236 | Input/Output: [(40 5 30 82) 5]
Test Case: 237 | Input/Output: [(19 14 23 73) 14]
Test Case: 238 | Input/Output: [(100 62 46 12) 12]
Test Case: 239 | Input/Output: [(69 25 63 5) 5]
Test Case: 240 | Input/Output: [(97 47 50 21) 21]
Test Case: 241 | Input/Output: [(62 34 54 51) 34]
Test Case: 242 | Input/Output: [(90 64 66 89) 64]
Test Case: 243 | Input/Output: [(26 56 95 73) 26]
Test Case: 244 | Input/Output: [(10 84 16 14) 10]
Test Case: 245 | Input/Output: [(55 40 21 52) 21]
Test Case: 246 | Input/Output: [(69 66 47 69) 47]
Test Case: 247 | Input/Output: [(44 16 57 9) 9]
Test Case: 248 | Input/Output: [(18 67 14 46) 14]
Test Case: 249 | Input/Output: [(34 93 98 100) 34]
Test Case: 250 | Input/Output: [(41 19 26 71) 19]
Test Case: 251 | Input/Output: [(82 12 72 71) 12]
Test Case: 252 | Input/Output: [(25 24 77 39) 24]
Test Case: 253 | Input/Output: [(65 20 32 48) 20]
Test Case: 254 | Input/Output: [(47 18 46 75) 18]
Test Case: 255 | Input/Output: [(35 69 9 10) 9]
Test Case: 256 | Input/Output: [(91 22 34 33) 22]
Test Case: 257 | Input/Output: [(87 55 24 5) 5]
Test Case: 258 | Input/Output: [(20 76 70 31) 20]
Test Case: 259 | Input/Output: [(78 86 100 6) 6]
Test Case: 260 | Input/Output: [(44 14 82 14) 14]
Test Case: 261 | Input/Output: [(55 35 17 82) 17]
Test Case: 262 | Input/Output: [(54 6 26 78) 6]
Test Case: 263 | Input/Output: [(12 64 23 16) 12]
Test Case: 264 | Input/Output: [(8 38 99 56) 8]
Test Case: 265 | Input/Output: [(20 6 86 24) 6]
Test Case: 266 | Input/Output: [(28 70 97 78) 28]
Test Case: 267 | Input/Output: [(25 48 19 23) 19]
Test Case: 268 | Input/Output: [(44 61 56 1) 1]
Test Case: 269 | Input/Output: [(65 31 59 80) 31]
Test Case: 270 | Input/Output: [(16 9 90 53) 9]
Test Case: 271 | Input/Output: [(74 9 51 42) 9]
Test Case: 272 | Input/Output: [(80 89 91 50) 50]
Test Case: 273 | Input/Output: [(31 79 56 6) 6]
Test Case: 274 | Input/Output: [(1 41 37 29) 1]
Test Case: 275 | Input/Output: [(40 51 57 35) 35]
Test Case: 276 | Input/Output: [(81 27 7 53) 7]
Test Case: 277 | Input/Output: [(62 7 47 84) 7]
Test Case: 278 | Input/Output: [(72 33 31 0) 0]
Test Case: 279 | Input/Output: [(58 11 0 48) 0]
Test Case: 280 | Input/Output: [(44 70 50 30) 30]
Test Case: 281 | Input/Output: [(31 17 53 64) 17]
Test Case: 282 | Input/Output: [(82 94 27 37) 27]
Test Case: 283 | Input/Output: [(0 13 54 53) 0]
Test Case: 284 | Input/Output: [(18 71 77 33) 18]
Test Case: 285 | Input/Output: [(80 84 3 47) 3]
Test Case: 286 | Input/Output: [(44 52 73 30) 30]
Test Case: 287 | Input/Output: [(38 5 61 76) 5]
Test Case: 288 | Input/Output: [(84 80 53 50) 50]
Test Case: 289 | Input/Output: [(79 88 81 19) 19]
Test Case: 290 | Input/Output: [(19 21 4 24) 4]
Test Case: 291 | Input/Output: [(54 64 39 67) 39]
Test Case: 292 | Input/Output: [(12 93 53 3) 3]
Test Case: 293 | Input/Output: [(86 26 30 76) 26]
Test Case: 294 | Input/Output: [(92 8 25 12) 8]
Test Case: 295 | Input/Output: [(29 21 50 33) 21]
Test Case: 296 | Input/Output: [(59 58 57 83) 57]
Test Case: 297 | Input/Output: [(71 30 21 39) 21]
Test Case: 298 | Input/Output: [(2 25 26 5) 2]
Test Case: 299 | Input/Output: [(64 90 70 73) 64]
Test Case: 300 | Input/Output: [(72 68 22 47) 22]
Test Case: 301 | Input/Output: [(36 49 26 89) 26]
Test Case: 302 | Input/Output: [(61 95 82 46) 46]
Test Case: 303 | Input/Output: [(10 14 32 33) 10]
Test Case: 304 | Input/Output: [(22 50 47 12) 12]
Test Case: 305 | Input/Output: [(95 43 7 71) 7]
Test Case: 306 | Input/Output: [(89 97 26 16) 16]
Test Case: 307 | Input/Output: [(19 35 7 47) 7]
Test Case: 308 | Input/Output: [(67 7 63 69) 7]
Test Case: 309 | Input/Output: [(1 55 28 69) 1]
Test Case: 310 | Input/Output: [(81 75 18 57) 18]
Test Case: 311 | Input/Output: [(19 51 9 89) 9]
Test Case: 312 | Input/Output: [(99 91 16 2) 2]
Test Case: 313 | Input/Output: [(100 79 51 1) 1]
Test Case: 314 | Input/Output: [(6 51 12 41) 6]
Test Case: 315 | Input/Output: [(19 91 10 20) 10]
Test Case: 316 | Input/Output: [(0 18 42 24) 0]
Test Case: 317 | Input/Output: [(86 92 71 62) 62]
Test Case: 318 | Input/Output: [(43 68 11 63) 11]
Test Case: 319 | Input/Output: [(59 6 35 37) 6]
Test Case: 320 | Input/Output: [(70 0 0 60) 0]
Test Case: 321 | Input/Output: [(90 75 27 91) 27]
Test Case: 322 | Input/Output: [(74 69 90 25) 25]
Test Case: 323 | Input/Output: [(80 72 87 43) 43]
Test Case: 324 | Input/Output: [(28 80 49 98) 28]
Test Case: 325 | Input/Output: [(85 22 16 18) 16]
Test Case: 326 | Input/Output: [(28 5 75 26) 5]
Test Case: 327 | Input/Output: [(14 88 62 2) 2]
Test Case: 328 | Input/Output: [(42 66 50 63) 42]
Test Case: 329 | Input/Output: [(22 93 52 25) 22]
Test Case: 330 | Input/Output: [(87 97 23 65) 23]
Test Case: 331 | Input/Output: [(33 2 59 33) 2]
Test Case: 332 | Input/Output: [(52 33 44 99) 33]
Test Case: 333 | Input/Output: [(44 14 47 6) 6]
Test Case: 334 | Input/Output: [(53 91 94 36) 36]
Test Case: 335 | Input/Output: [(66 40 51 82) 40]
Test Case: 336 | Input/Output: [(66 22 57 93) 22]
Test Case: 337 | Input/Output: [(50 60 34 53) 34]
Test Case: 338 | Input/Output: [(18 35 91 99) 18]
Test Case: 339 | Input/Output: [(5 71 98 57) 5]
Test Case: 340 | Input/Output: [(42 40 81 18) 18]
Test Case: 341 | Input/Output: [(26 1 57 14) 1]
Test Case: 342 | Input/Output: [(76 2 23 58) 2]
Test Case: 343 | Input/Output: [(28 54 94 18) 18]
Test Case: 344 | Input/Output: [(71 52 90 46) 46]
Test Case: 345 | Input/Output: [(35 3 85 55) 3]
Test Case: 346 | Input/Output: [(90 75 0 91) 0]
Test Case: 347 | Input/Output: [(21 69 50 78) 21]
Test Case: 348 | Input/Output: [(48 65 37 99) 37]
Test Case: 349 | Input/Output: [(78 43 78 40) 40]
Test Case: 350 | Input/Output: [(70 13 18 92) 13]
Test Case: 351 | Input/Output: [(76 22 51 32) 22]
Test Case: 352 | Input/Output: [(14 55 23 20) 14]
Test Case: 353 | Input/Output: [(56 8 72 74) 8]
Test Case: 354 | Input/Output: [(96 64 31 7) 7]
Test Case: 355 | Input/Output: [(15 13 69 9) 9]
Test Case: 356 | Input/Output: [(46 99 34 2) 2]
Test Case: 357 | Input/Output: [(15 66 90 54) 15]
Test Case: 358 | Input/Output: [(60 43 94 82) 43]
Test Case: 359 | Input/Output: [(40 100 8 23) 8]
Test Case: 360 | Input/Output: [(31 39 27 28) 27]
Test Case: 361 | Input/Output: [(73 18 80 33) 18]
Test Case: 362 | Input/Output: [(8 48 71 99) 8]
Test Case: 363 | Input/Output: [(93 77 28 32) 28]
Test Case: 364 | Input/Output: [(34 53 35 13) 13]
Test Case: 365 | Input/Output: [(43 91 11 70) 11]
Test Case: 366 | Input/Output: [(63 69 97 17) 17]
Test Case: 367 | Input/Output: [(81 58 48 58) 48]
Test Case: 368 | Input/Output: [(63 11 35 21) 11]
Test Case: 369 | Input/Output: [(6 35 56 89) 6]
Test Case: 370 | Input/Output: [(69 51 77 33) 33]
Test Case: 371 | Input/Output: [(98 62 87 33) 33]
Test Case: 372 | Input/Output: [(3 88 61 50) 3]
Test Case: 373 | Input/Output: [(7 63 79 60) 7]
Test Case: 374 | Input/Output: [(6 37 18 32) 6]
Test Case: 375 | Input/Output: [(69 76 80 78) 69]
Test Case: 376 | Input/Output: [(23 51 79 41) 23]
Test Case: 377 | Input/Output: [(86 68 42 52) 42]
Test Case: 378 | Input/Output: [(86 97 65 1) 1]
Test Case: 379 | Input/Output: [(74 91 75 12) 12]
Test Case: 380 | Input/Output: [(4 18 78 56) 4]
Test Case: 381 | Input/Output: [(81 18 73 43) 18]
Test Case: 382 | Input/Output: [(88 39 34 16) 16]
Test Case: 383 | Input/Output: [(58 51 15 66) 15]
Test Case: 384 | Input/Output: [(3 18 93 68) 3]
Test Case: 385 | Input/Output: [(31 81 89 80) 31]
Test Case: 386 | Input/Output: [(54 14 78 53) 14]
Test Case: 387 | Input/Output: [(99 96 9 58) 9]
Test Case: 388 | Input/Output: [(57 21 14 53) 14]
Test Case: 389 | Input/Output: [(39 10 37 16) 10]
Test Case: 390 | Input/Output: [(9 7 12 31) 7]
Test Case: 391 | Input/Output: [(3 33 97 69) 3]
Test Case: 392 | Input/Output: [(47 13 52 6) 6]
Test Case: 393 | Input/Output: [(1 89 100 59) 1]
Test Case: 394 | Input/Output: [(59 89 19 26) 19]
Test Case: 395 | Input/Output: [(68 48 4 86) 4]
Test Case: 396 | Input/Output: [(12 62 55 8) 8]
Test Case: 397 | Input/Output: [(90 57 27 46) 27]
Test Case: 398 | Input/Output: [(99 35 70 68) 35]
Test Case: 399 | Input/Output: [(40 39 74 69) 39]
Test Case: 400 | Input/Output: [(79 5 -36 -19) -36]
Test Case: 401 | Input/Output: [(-56 38 16 23) -56]
Test Case: 402 | Input/Output: [(4 -96 70 -53) -96]
Test Case: 403 | Input/Output: [(-64 -85 18 49) -85]
Test Case: 404 | Input/Output: [(5 -4 -33 48) -33]
Test Case: 405 | Input/Output: [(-68 -71 -99 54) -99]
Test Case: 406 | Input/Output: [(48 76 96 -5) -5]
Test Case: 407 | Input/Output: [(-10 -54 -61 -37) -61]
Test Case: 408 | Input/Output: [(84 68 -75 36) -75]
Test Case: 409 | Input/Output: [(-49 0 58 49) -49]
Test Case: 410 | Input/Output: [(-68 -96 -27 -63) -96]
Test Case: 411 | Input/Output: [(-28 -19 72 -27) -28]
Test Case: 412 | Input/Output: [(-42 72 86 78) -42]
Test Case: 413 | Input/Output: [(-92 -54 -99 65) -99]
Test Case: 414 | Input/Output: [(54 -52 32 61) -52]
Test Case: 415 | Input/Output: [(-1 4 44 -27) -27]
Test Case: 416 | Input/Output: [(47 -17 47 -22) -22]
Test Case: 417 | Input/Output: [(-38 -20 20 5) -38]
Test Case: 418 | Input/Output: [(26 -45 44 22) -45]
Test Case: 419 | Input/Output: [(-78 74 32 -97) -97]
Test Case: 420 | Input/Output: [(-88 92 98 -39) -88]
Test Case: 421 | Input/Output: [(-87 43 -50 -80) -87]
Test Case: 422 | Input/Output: [(36 -80 -23 -49) -80]
Test Case: 423 | Input/Output: [(-81 -66 -93 -57) -93]
Test Case: 424 | Input/Output: [(-37 54 63 94) -37]
Test Case: 425 | Input/Output: [(-83 -78 27 30) -83]
Test Case: 426 | Input/Output: [(-8 -76 -72 10) -76]
Test Case: 427 | Input/Output: [(-87 -28 -27 -48) -87]
Test Case: 428 | Input/Output: [(-50 -56 60 99) -56]
Test Case: 429 | Input/Output: [(59 -30 64 -86) -86]
Test Case: 430 | Input/Output: [(41 -52 -34 -17) -52]
Test Case: 431 | Input/Output: [(10 -50 -88 -56) -88]
Test Case: 432 | Input/Output: [(7 -85 20 -80) -85]
Test Case: 433 | Input/Output: [(31 -35 -26 71) -35]
Test Case: 434 | Input/Output: [(52 83 93 -49) -49]
Test Case: 435 | Input/Output: [(8 -34 2 -62) -62]
Test Case: 436 | Input/Output: [(-34 32 -57 80) -57]
Test Case: 437 | Input/Output: [(74 71 89 -11) -11]
Test Case: 438 | Input/Output: [(71 -45 27 90) -45]
Test Case: 439 | Input/Output: [(-9 21 -21 49) -21]
Test Case: 440 | Input/Output: [(-53 -49 13 -82) -82]
Test Case: 441 | Input/Output: [(73 -77 34 35) -77]
Test Case: 442 | Input/Output: [(63 89 44 -48) -48]
Test Case: 443 | Input/Output: [(-5 -4 -67 89) -67]
Test Case: 444 | Input/Output: [(100 -34 28 78) -34]
Test Case: 445 | Input/Output: [(-78 89 -72 -3) -78]
Test Case: 446 | Input/Output: [(-100 81 4 16) -100]
Test Case: 447 | Input/Output: [(-54 1 38 -48) -54]
Test Case: 448 | Input/Output: [(-29 -32 15 -11) -32]
Test Case: 449 | Input/Output: [(-14 -26 -74 64) -74]
Test Case: 450 | Input/Output: [(-1 77 -82 27) -82]
Test Case: 451 | Input/Output: [(-74 63 20 67) -74]
Test Case: 452 | Input/Output: [(66 34 -68 -29) -68]
Test Case: 453 | Input/Output: [(71 21 41 -41) -41]
Test Case: 454 | Input/Output: [(-98 35 26 68) -98]
Test Case: 455 | Input/Output: [(61 -45 -69 100) -69]
Test Case: 456 | Input/Output: [(90 -1 -34 12) -34]
Test Case: 457 | Input/Output: [(-31 10 -79 13) -79]
Test Case: 458 | Input/Output: [(-10 -1 -74 -77) -77]
Test Case: 459 | Input/Output: [(39 59 15 -19) -19]
Test Case: 460 | Input/Output: [(88 47 23 -44) -44]
Test Case: 461 | Input/Output: [(-52 -7 -51 -74) -74]
Test Case: 462 | Input/Output: [(99 2 38 38) 2]
Test Case: 463 | Input/Output: [(32 -60 -32 57) -60]
Test Case: 464 | Input/Output: [(82 -25 -56 45) -56]
Test Case: 465 | Input/Output: [(49 -97 -45 18) -97]
Test Case: 466 | Input/Output: [(-93 -69 -4 99) -93]
Test Case: 467 | Input/Output: [(-76 85 66 29) -76]
Test Case: 468 | Input/Output: [(-69 -31 73 68) -69]
Test Case: 469 | Input/Output: [(38 25 -91 6) -91]
Test Case: 470 | Input/Output: [(48 -11 62 82) -11]
Test Case: 471 | Input/Output: [(-42 -48 -82 14) -82]
Test Case: 472 | Input/Output: [(38 -54 -78 -34) -78]
Test Case: 473 | Input/Output: [(-54 -9 25 35) -54]
Test Case: 474 | Input/Output: [(-52 -66 -45 24) -66]
Test Case: 475 | Input/Output: [(-11 -55 3 -76) -76]
Test Case: 476 | Input/Output: [(-33 100 14 -63) -63]
Test Case: 477 | Input/Output: [(-43 -36 86 38) -43]
Test Case: 478 | Input/Output: [(-99 42 -33 78) -99]
Test Case: 479 | Input/Output: [(-3 -44 52 96) -44]
Test Case: 480 | Input/Output: [(73 27 -77 64) -77]
Test Case: 481 | Input/Output: [(-44 81 10 9) -44]
Test Case: 482 | Input/Output: [(-50 -18 95 -83) -83]
Test Case: 483 | Input/Output: [(59 -99 -89 -25) -99]
Test Case: 484 | Input/Output: [(-23 -76 -14 89) -76]
Test Case: 485 | Input/Output: [(-44 93 -99 3) -99]
Test Case: 486 | Input/Output: [(-7 -40 55 -12) -40]
Test Case: 487 | Input/Output: [(28 -86 -25 85) -86]
Test Case: 488 | Input/Output: [(85 -39 75 -43) -43]
Test Case: 489 | Input/Output: [(24 75 8 0) 0]
Test Case: 490 | Input/Output: [(86 13 37 -37) -37]
Test Case: 491 | Input/Output: [(90 -88 -57 26) -88]
Test Case: 492 | Input/Output: [(-50 64 12 17) -50]
Test Case: 493 | Input/Output: [(-38 -7 -45 -51) -51]
Test Case: 494 | Input/Output: [(-95 -60 82 -72) -95]
Test Case: 495 | Input/Output: [(-17 17 51 -75) -75]
Test Case: 496 | Input/Output: [(65 -98 -65 -9) -98]
Test Case: 497 | Input/Output: [(25 -38 27 -25) -38]
Test Case: 498 | Input/Output: [(12 71 45 -17) -17]
Test Case: 499 | Input/Output: [(-25 84 33 -57) -57]
Test Case: 500 | Input/Output: [(99 -64 -1 -65) -65]
Test Case: 501 | Input/Output: [(21 -34 -28 28) -34]
Test Case: 502 | Input/Output: [(59 34 1 91) 1]
Test Case: 503 | Input/Output: [(0 69 -7 -91) -91]
Test Case: 504 | Input/Output: [(-54 7 -87 48) -87]
Test Case: 505 | Input/Output: [(-2 72 -22 46) -22]
Test Case: 506 | Input/Output: [(-52 57 10 -98) -98]
Test Case: 507 | Input/Output: [(-2 -16 -67 99) -67]
Test Case: 508 | Input/Output: [(20 64 32 7) 7]
Test Case: 509 | Input/Output: [(16 -6 -34 57) -34]
Test Case: 510 | Input/Output: [(87 57 3 -5) -5]
Test Case: 511 | Input/Output: [(-96 -87 19 28) -96]
Test Case: 512 | Input/Output: [(15 52 70 65) 15]
Test Case: 513 | Input/Output: [(-3 33 21 75) -3]
Test Case: 514 | Input/Output: [(-20 37 71 -98) -98]
Test Case: 515 | Input/Output: [(56 2 47 2) 2]
Test Case: 516 | Input/Output: [(-50 7 41 74) -50]
Test Case: 517 | Input/Output: [(-97 58 -90 -52) -97]
Test Case: 518 | Input/Output: [(-52 -16 -59 -6) -59]
Test Case: 519 | Input/Output: [(-21 -30 33 -31) -31]
Test Case: 520 | Input/Output: [(-63 -82 -65 -40) -82]
Test Case: 521 | Input/Output: [(-21 89 -41 -3) -41]
Test Case: 522 | Input/Output: [(99 61 -84 -58) -84]
Test Case: 523 | Input/Output: [(-9 -64 67 99) -64]
Test Case: 524 | Input/Output: [(94 -43 54 87) -43]
Test Case: 525 | Input/Output: [(-1 -90 29 59) -90]
Test Case: 526 | Input/Output: [(61 -66 -54 99) -66]
Test Case: 527 | Input/Output: [(-87 66 44 21) -87]
Test Case: 528 | Input/Output: [(83 73 25 65) 25]
Test Case: 529 | Input/Output: [(-31 47 38 33) -31]
Test Case: 530 | Input/Output: [(-89 -19 -72 -3) -89]
Test Case: 531 | Input/Output: [(-25 -6 56 14) -25]
Test Case: 532 | Input/Output: [(-3 62 -87 -4) -87]
Test Case: 533 | Input/Output: [(-17 -12 -60 44) -60]
Test Case: 534 | Input/Output: [(-95 41 2 35) -95]
Test Case: 535 | Input/Output: [(-21 -24 97 54) -24]
Test Case: 536 | Input/Output: [(1 -84 35 64) -84]
Test Case: 537 | Input/Output: [(-69 17 -12 -39) -69]
Test Case: 538 | Input/Output: [(39 68 -100 76) -100]
Test Case: 539 | Input/Output: [(51 -66 -4 -47) -66]
Test Case: 540 | Input/Output: [(-82 33 87 38) -82]
Test Case: 541 | Input/Output: [(34 77 -2 -28) -28]
Test Case: 542 | Input/Output: [(-21 -25 -49 73) -49]
Test Case: 543 | Input/Output: [(-86 2 14 54) -86]
Test Case: 544 | Input/Output: [(78 18 -32 26) -32]
Test Case: 545 | Input/Output: [(-100 -74 45 81) -100]
Test Case: 546 | Input/Output: [(100 -36 94 27) -36]
Test Case: 547 | Input/Output: [(-75 57 32 83) -75]
Test Case: 548 | Input/Output: [(69 93 63 58) 58]
Test Case: 549 | Input/Output: [(-17 73 51 57) -17]
Test Case: 550 | Input/Output: [(-40 -83 -22 -50) -83]
Test Case: 551 | Input/Output: [(17 92 33 49) 17]
Test Case: 552 | Input/Output: [(74 -20 -66 35) -66]
Test Case: 553 | Input/Output: [(-8 -40 -72 -3) -72]
Test Case: 554 | Input/Output: [(-21 75 -91 -64) -91]
Test Case: 555 | Input/Output: [(-80 37 -42 24) -80]
Test Case: 556 | Input/Output: [(0 -33 -8 80) -33]
Test Case: 557 | Input/Output: [(46 -29 28 -76) -76]
Test Case: 558 | Input/Output: [(78 -49 -83 -22) -83]
Test Case: 559 | Input/Output: [(75 7 -84 -40) -84]
Test Case: 560 | Input/Output: [(78 52 -23 -14) -23]
Test Case: 561 | Input/Output: [(-44 27 53 -59) -59]
Test Case: 562 | Input/Output: [(46 -80 -1 -76) -80]
Test Case: 563 | Input/Output: [(85 -31 0 98) -31]
Test Case: 564 | Input/Output: [(-8 63 -97 62) -97]
Test Case: 565 | Input/Output: [(-94 45 -66 79) -94]
Test Case: 566 | Input/Output: [(86 -27 47 34) -27]
Test Case: 567 | Input/Output: [(-81 77 -67 -99) -99]
Test Case: 568 | Input/Output: [(60 90 50 -85) -85]
Test Case: 569 | Input/Output: [(-12 52 -35 73) -35]
Test Case: 570 | Input/Output: [(-79 -94 37 81) -94]
Test Case: 571 | Input/Output: [(-43 -29 10 48) -43]
Test Case: 572 | Input/Output: [(-52 -49 -3 59) -52]
Test Case: 573 | Input/Output: [(-20 86 43 -47) -47]
Test Case: 574 | Input/Output: [(-78 90 52 -37) -78]
Test Case: 575 | Input/Output: [(-11 -47 -80 69) -80]
Test Case: 576 | Input/Output: [(-63 -45 37 -64) -64]
Test Case: 577 | Input/Output: [(-94 20 79 43) -94]
Test Case: 578 | Input/Output: [(2 42 31 0) 0]
Test Case: 579 | Input/Output: [(-45 98 57 -14) -45]
Test Case: 580 | Input/Output: [(-74 -70 -56 -4) -74]
Test Case: 581 | Input/Output: [(29 -24 -58 -69) -69]
Test Case: 582 | Input/Output: [(15 33 -13 58) -13]
Test Case: 583 | Input/Output: [(-92 74 -43 -30) -92]
Test Case: 584 | Input/Output: [(62 99 41 -3) -3]
Test Case: 585 | Input/Output: [(76 -47 -37 79) -47]
Test Case: 586 | Input/Output: [(-60 32 -69 23) -69]
Test Case: 587 | Input/Output: [(49 -70 95 56) -70]
Test Case: 588 | Input/Output: [(76 3 62 64) 3]
Test Case: 589 | Input/Output: [(48 12 -36 -93) -93]
Test Case: 590 | Input/Output: [(-45 -23 -8 70) -45]
Test Case: 591 | Input/Output: [(94 -7 -81 67) -81]
Test Case: 592 | Input/Output: [(15 -76 -88 -59) -88]
Test Case: 593 | Input/Output: [(54 96 -89 -74) -89]
Test Case: 594 | Input/Output: [(-9 -14 13 -33) -33]
Test Case: 595 | Input/Output: [(91 -66 38 87) -66]
Test Case: 596 | Input/Output: [(67 83 -2 -42) -42]
Test Case: 597 | Input/Output: [(-10 -15 -77 35) -77]
Test Case: 598 | Input/Output: [(87 -73 -75 -34) -75]
Test Case: 599 | Input/Output: [(27 -53 -81 -80) -81]
Test Case: 600 | Input/Output: [(8 -18 -66 84) -66]
Test Case: 601 | Input/Output: [(10 88 -39 -15) -39]
Test Case: 602 | Input/Output: [(57 52 -56 82) -56]
Test Case: 603 | Input/Output: [(-38 17 42 -90) -90]
Test Case: 604 | Input/Output: [(-45 65 60 33) -45]
Test Case: 605 | Input/Output: [(-74 -23 100 61) -74]
Test Case: 606 | Input/Output: [(-13 -62 -79 -22) -79]
Test Case: 607 | Input/Output: [(-59 66 96 -15) -59]
Test Case: 608 | Input/Output: [(37 -68 39 -39) -68]
Test Case: 609 | Input/Output: [(37 -58 77 32) -58]
Test Case: 610 | Input/Output: [(19 33 -76 -8) -76]
Test Case: 611 | Input/Output: [(-46 -96 29 5) -96]
Test Case: 612 | Input/Output: [(-19 -71 -24 -83) -83]
Test Case: 613 | Input/Output: [(-70 39 86 52) -70]
Test Case: 614 | Input/Output: [(-47 -80 -43 93) -80]
Test Case: 615 | Input/Output: [(93 -54 73 89) -54]
Test Case: 616 | Input/Output: [(24 82 -32 -73) -73]
Test Case: 617 | Input/Output: [(51 22 4 -91) -91]
Test Case: 618 | Input/Output: [(81 50 -50 32) -50]
Test Case: 619 | Input/Output: [(13 -30 -4 -84) -84]
Test Case: 620 | Input/Output: [(87 -50 -32 52) -50]
Test Case: 621 | Input/Output: [(-59 17 -10 9) -59]
Test Case: 622 | Input/Output: [(-90 -82 71 60) -90]
Test Case: 623 | Input/Output: [(-57 -84 -9 -74) -84]
Test Case: 624 | Input/Output: [(-42 -55 46 10) -55]
Test Case: 625 | Input/Output: [(40 -80 74 -50) -80]
Test Case: 626 | Input/Output: [(-15 -25 24 -74) -74]
Test Case: 627 | Input/Output: [(16 70 -49 82) -49]
Test Case: 628 | Input/Output: [(89 -9 35 42) -9]
Test Case: 629 | Input/Output: [(23 53 -72 -99) -99]
Test Case: 630 | Input/Output: [(65 -42 82 58) -42]
Test Case: 631 | Input/Output: [(-90 72 -51 -94) -94]
Test Case: 632 | Input/Output: [(78 13 24 -18) -18]
Test Case: 633 | Input/Output: [(-93 -16 7 89) -93]
Test Case: 634 | Input/Output: [(73 -90 23 -62) -90]
Test Case: 635 | Input/Output: [(-80 58 64 34) -80]
Test Case: 636 | Input/Output: [(-98 -32 -55 -54) -98]
Test Case: 637 | Input/Output: [(36 -50 41 80) -50]
Test Case: 638 | Input/Output: [(35 46 33 27) 27]
Test Case: 639 | Input/Output: [(-69 -54 -11 -50) -69]
Test Case: 640 | Input/Output: [(-72 -82 -16 86) -82]
Test Case: 641 | Input/Output: [(8 12 -20 -16) -20]
Test Case: 642 | Input/Output: [(74 -94 10 -85) -94]
Test Case: 643 | Input/Output: [(-28 -94 -71 19) -94]
Test Case: 644 | Input/Output: [(13 -42 -68 -10) -68]
Test Case: 645 | Input/Output: [(-60 -16 -19 -34) -60]
Test Case: 646 | Input/Output: [(34 -6 -45 40) -45]
Test Case: 647 | Input/Output: [(62 -81 50 69) -81]
Test Case: 648 | Input/Output: [(83 42 -6 -73) -73]
Test Case: 649 | Input/Output: [(87 -45 27 -55) -55]
Test Case: 650 | Input/Output: [(-82 51 45 12) -82]
Test Case: 651 | Input/Output: [(-64 97 -30 -1) -64]
Test Case: 652 | Input/Output: [(31 56 -77 -61) -77]
Test Case: 653 | Input/Output: [(-48 -40 -53 -58) -58]
Test Case: 654 | Input/Output: [(-47 -43 -100 -7) -100]
Test Case: 655 | Input/Output: [(28 23 -1 -32) -32]
Test Case: 656 | Input/Output: [(-72 45 54 72) -72]
Test Case: 657 | Input/Output: [(56 61 74 21) 21]
Test Case: 658 | Input/Output: [(55 -65 15 -87) -87]
Test Case: 659 | Input/Output: [(-98 -87 -96 -69) -98]
Test Case: 660 | Input/Output: [(97 44 54 13) 13]
Test Case: 661 | Input/Output: [(-52 -1 -83 -26) -83]
Test Case: 662 | Input/Output: [(51 -52 -48 59) -52]
Test Case: 663 | Input/Output: [(-12 -65 -32 -56) -65]
Test Case: 664 | Input/Output: [(-85 97 -85 -96) -96]
Test Case: 665 | Input/Output: [(93 -10 88 38) -10]
Test Case: 666 | Input/Output: [(65 90 -6 22) -6]
Test Case: 667 | Input/Output: [(44 -27 -65 36) -65]
Test Case: 668 | Input/Output: [(-85 -67 50 17) -85]
Test Case: 669 | Input/Output: [(48 -80 6 85) -80]
Test Case: 670 | Input/Output: [(84 100 -53 -26) -53]
Test Case: 671 | Input/Output: [(50 82 -16 78) -16]
Test Case: 672 | Input/Output: [(-19 -70 29 52) -70]
Test Case: 673 | Input/Output: [(38 -40 -15 -98) -98]
Test Case: 674 | Input/Output: [(68 78 -33 73) -33]
Test Case: 675 | Input/Output: [(36 -34 -7 79) -34]
Test Case: 676 | Input/Output: [(38 52 -54 -70) -70]
Test Case: 677 | Input/Output: [(-9 5 96 65) -9]
Test Case: 678 | Input/Output: [(-92 -80 -62 83) -92]
Test Case: 679 | Input/Output: [(17 -49 -74 4) -74]
Test Case: 680 | Input/Output: [(-5 12 58 -57) -57]
Test Case: 681 | Input/Output: [(48 -52 35 -69) -69]
Test Case: 682 | Input/Output: [(50 57 20 52) 20]
Test Case: 683 | Input/Output: [(99 -79 59 -73) -79]
Test Case: 684 | Input/Output: [(-54 47 -23 -16) -54]
Test Case: 685 | Input/Output: [(57 20 -16 -48) -48]
Test Case: 686 | Input/Output: [(26 61 -92 -65) -92]
Test Case: 687 | Input/Output: [(-61 61 -18 82) -61]
Test Case: 688 | Input/Output: [(-86 94 -81 -17) -86]
Test Case: 689 | Input/Output: [(24 -11 -87 3) -87]
Test Case: 690 | Input/Output: [(-100 27 53 81) -100]
Test Case: 691 | Input/Output: [(84 54 77 -85) -85]
Test Case: 692 | Input/Output: [(22 -29 -33 -34) -34]
Test Case: 693 | Input/Output: [(-44 45 -24 50) -44]
Test Case: 694 | Input/Output: [(59 27 -16 -4) -16]
Test Case: 695 | Input/Output: [(-89 70 46 100) -89]
Test Case: 696 | Input/Output: [(-26 45 64 -39) -39]
Test Case: 697 | Input/Output: [(-1 76 -89 -25) -89]
Test Case: 698 | Input/Output: [(73 -63 -57 -66) -66]
Test Case: 699 | Input/Output: [(54 -66 -34 47) -66]
Test Case: 700 | Input/Output: [(84 74 -40 24) -40]
Test Case: 701 | Input/Output: [(-69 69 11 -80) -80]
Test Case: 702 | Input/Output: [(0 -15 44 -53) -53]
Test Case: 703 | Input/Output: [(-21 -82 -58 14) -82]
Test Case: 704 | Input/Output: [(-21 5 -4 30) -21]
Test Case: 705 | Input/Output: [(87 -73 29 25) -73]
Test Case: 706 | Input/Output: [(-86 -22 -90 -50) -90]
Test Case: 707 | Input/Output: [(78 80 15 2) 2]
Test Case: 708 | Input/Output: [(21 49 16 -94) -94]
Test Case: 709 | Input/Output: [(10 18 -100 -52) -100]
Test Case: 710 | Input/Output: [(47 58 90 26) 26]
Test Case: 711 | Input/Output: [(-72 29 85 -13) -72]
Test Case: 712 | Input/Output: [(-45 97 -16 -14) -45]
Test Case: 713 | Input/Output: [(60 47 62 1) 1]
Test Case: 714 | Input/Output: [(-81 35 85 95) -81]
Test Case: 715 | Input/Output: [(-86 18 25 -20) -86]
Test Case: 716 | Input/Output: [(37 -77 -64 93) -77]
Test Case: 717 | Input/Output: [(-46 -19 14 -70) -70]
Test Case: 718 | Input/Output: [(72 38 -91 -4) -91]
Test Case: 719 | Input/Output: [(-79 -3 89 -2) -79]
Test Case: 720 | Input/Output: [(-8 -27 8 -8) -27]
Test Case: 721 | Input/Output: [(26 53 44 31) 26]
Test Case: 722 | Input/Output: [(48 -68 -29 44) -68]
Test Case: 723 | Input/Output: [(90 98 85 -92) -92]
Test Case: 724 | Input/Output: [(-60 -52 100 27) -60]
Test Case: 725 | Input/Output: [(-62 92 -1 42) -62]
Test Case: 726 | Input/Output: [(34 -93 -34 -68) -93]
Test Case: 727 | Input/Output: [(45 21 -51 -55) -55]
Test Case: 728 | Input/Output: [(79 13 54 -67) -67]
Test Case: 729 | Input/Output: [(-36 71 40 30) -36]
Test Case: 730 | Input/Output: [(83 65 -76 51) -76]
Test Case: 731 | Input/Output: [(87 -22 22 -6) -22]
Test Case: 732 | Input/Output: [(-82 -18 43 -4) -82]
Test Case: 733 | Input/Output: [(-32 -98 -97 -81) -98]
Test Case: 734 | Input/Output: [(32 34 -35 -98) -98]
Test Case: 735 | Input/Output: [(-88 32 26 -30) -88]
Test Case: 736 | Input/Output: [(-83 -9 -29 57) -83]
Test Case: 737 | Input/Output: [(70 49 80 75) 49]
Test Case: 738 | Input/Output: [(67 23 78 -81) -81]
Test Case: 739 | Input/Output: [(-53 33 -37 52) -53]
Test Case: 740 | Input/Output: [(49 -90 -42 -58) -90]
Test Case: 741 | Input/Output: [(64 -44 43 30) -44]
Test Case: 742 | Input/Output: [(63 -64 -88 -51) -88]
Test Case: 743 | Input/Output: [(55 -85 -16 73) -85]
Test Case: 744 | Input/Output: [(12 85 -7 92) -7]
Test Case: 745 | Input/Output: [(65 98 92 58) 58]
Test Case: 746 | Input/Output: [(-62 -77 -74 74) -77]
Test Case: 747 | Input/Output: [(-49 63 76 62) -49]
Test Case: 748 | Input/Output: [(94 -55 -71 -11) -71]
Test Case: 749 | Input/Output: [(-35 -91 52 61) -91]
Test Case: 750 | Input/Output: [(-63 10 -1 -8) -63]
Test Case: 751 | Input/Output: [(-60 -40 100 -18) -60]
Test Case: 752 | Input/Output: [(49 10 87 -99) -99]
Test Case: 753 | Input/Output: [(55 90 -24 3) -24]
Test Case: 754 | Input/Output: [(-31 65 -43 -83) -83]
Test Case: 755 | Input/Output: [(-30 99 -50 -73) -73]
Test Case: 756 | Input/Output: [(3 63 65 -17) -17]
Test Case: 757 | Input/Output: [(-20 -82 85 -61) -82]
Test Case: 758 | Input/Output: [(39 83 40 -42) -42]
Test Case: 759 | Input/Output: [(-27 -82 -98 -62) -98]
Test Case: 760 | Input/Output: [(-38 -21 83 -6) -38]
Test Case: 761 | Input/Output: [(36 -81 -19 40) -81]
Test Case: 762 | Input/Output: [(-47 -76 -61 -24) -76]
Test Case: 763 | Input/Output: [(-66 -59 30 41) -66]
Test Case: 764 | Input/Output: [(-40 -85 -21 -91) -91]
Test Case: 765 | Input/Output: [(14 8 13 34) 8]
Test Case: 766 | Input/Output: [(26 36 -51 41) -51]
Test Case: 767 | Input/Output: [(62 0 -7 15) -7]
Test Case: 768 | Input/Output: [(22 17 46 -15) -15]
Test Case: 769 | Input/Output: [(25 -78 -78 -76) -78]
Test Case: 770 | Input/Output: [(-54 -6 10 -38) -54]
Test Case: 771 | Input/Output: [(86 0 -60 66) -60]
Test Case: 772 | Input/Output: [(4 -78 49 -98) -98]
Test Case: 773 | Input/Output: [(42 -67 -75 11) -75]
Test Case: 774 | Input/Output: [(-24 90 -36 -80) -80]
Test Case: 775 | Input/Output: [(-48 89 -6 -2) -48]
Test Case: 776 | Input/Output: [(-70 -5 -98 -57) -98]
Test Case: 777 | Input/Output: [(76 61 51 -67) -67]
Test Case: 778 | Input/Output: [(-31 85 0 62) -31]
Test Case: 779 | Input/Output: [(90 -20 28 88) -20]
Test Case: 780 | Input/Output: [(20 19 67 13) 13]
Test Case: 781 | Input/Output: [(-5 61 -17 -42) -42]
Test Case: 782 | Input/Output: [(-91 -7 -60 74) -91]
Test Case: 783 | Input/Output: [(-10 23 -1 71) -10]
Test Case: 784 | Input/Output: [(62 22 -80 91) -80]
Test Case: 785 | Input/Output: [(52 39 91 -68) -68]
Test Case: 786 | Input/Output: [(63 25 -37 -94) -94]
Test Case: 787 | Input/Output: [(-13 44 -14 52) -14]
Test Case: 788 | Input/Output: [(-35 -65 32 56) -65]
Test Case: 789 | Input/Output: [(26 -59 24 -84) -84]
Test Case: 790 | Input/Output: [(-78 -82 11 14) -82]
Test Case: 791 | Input/Output: [(42 46 -24 70) -24]
Test Case: 792 | Input/Output: [(56 41 16 -64) -64]
Test Case: 793 | Input/Output: [(-9 23 -42 44) -42]
Test Case: 794 | Input/Output: [(-33 10 -3 -28) -33]
Test Case: 795 | Input/Output: [(-10 -74 75 -13) -74]
Test Case: 796 | Input/Output: [(0 -37 -47 -74) -74]
Test Case: 797 | Input/Output: [(-16 29 -8 9) -16]
Test Case: 798 | Input/Output: [(73 40 -21 14) -21]
Test Case: 799 | Input/Output: [(78 44 57 18) 18]
Test Case: 800 | Input/Output: [(86 -42 66 71) -42]
Test Case: 801 | Input/Output: [(-64 -37 13 79) -64]
Test Case: 802 | Input/Output: [(68 4 43 -32) -32]
Test Case: 803 | Input/Output: [(-75 72 -45 -70) -75]
Test Case: 804 | Input/Output: [(40 71 -3 21) -3]
Test Case: 805 | Input/Output: [(-30 77 -11 -40) -40]
Test Case: 806 | Input/Output: [(-34 -93 -53 -60) -93]
Test Case: 807 | Input/Output: [(-91 4 -46 -11) -91]
Test Case: 808 | Input/Output: [(63 -59 -31 12) -59]
Test Case: 809 | Input/Output: [(27 55 67 -88) -88]
Test Case: 810 | Input/Output: [(27 46 97 99) 27]
Test Case: 811 | Input/Output: [(-4 96 -58 -77) -77]
Test Case: 812 | Input/Output: [(-16 -95 -88 -38) -95]
Test Case: 813 | Input/Output: [(-81 -70 74 61) -81]
Test Case: 814 | Input/Output: [(-95 95 -14 61) -95]
Test Case: 815 | Input/Output: [(64 -86 -72 -75) -86]
Test Case: 816 | Input/Output: [(-14 58 8 -74) -74]
Test Case: 817 | Input/Output: [(-35 -31 26 89) -35]
Test Case: 818 | Input/Output: [(98 -45 -94 -58) -94]
Test Case: 819 | Input/Output: [(92 -97 -97 28) -97]
Test Case: 820 | Input/Output: [(-33 93 -5 -45) -45]
Test Case: 821 | Input/Output: [(-49 -65 24 67) -65]
Test Case: 822 | Input/Output: [(-26 83 25 -15) -26]
Test Case: 823 | Input/Output: [(25 69 -45 -17) -45]
Test Case: 824 | Input/Output: [(-50 -64 -24 81) -64]
Test Case: 825 | Input/Output: [(14 77 90 -25) -25]
Test Case: 826 | Input/Output: [(-95 -74 -93 -35) -95]
Test Case: 827 | Input/Output: [(-93 -32 16 7) -93]
Test Case: 828 | Input/Output: [(-90 -11 66 -73) -90]
Test Case: 829 | Input/Output: [(-54 74 -57 10) -57]
Test Case: 830 | Input/Output: [(-75 75 -32 64) -75]
Test Case: 831 | Input/Output: [(-19 23 18 -76) -76]
Test Case: 832 | Input/Output: [(39 -81 59 -80) -81]
Test Case: 833 | Input/Output: [(-26 -93 63 -27) -93]
Test Case: 834 | Input/Output: [(-27 -22 2 -43) -43]
Test Case: 835 | Input/Output: [(-3 -65 34 -78) -78]
Test Case: 836 | Input/Output: [(81 73 -42 10) -42]
Test Case: 837 | Input/Output: [(46 -88 -44 -74) -88]
Test Case: 838 | Input/Output: [(-58 33 -54 -51) -58]
Test Case: 839 | Input/Output: [(-3 -56 3 -73) -73]
Test Case: 840 | Input/Output: [(-91 37 79 -56) -91]
Test Case: 841 | Input/Output: [(-24 -96 -18 52) -96]
Test Case: 842 | Input/Output: [(-27 -17 -53 14) -53]
Test Case: 843 | Input/Output: [(-64 18 93 -3) -64]
Test Case: 844 | Input/Output: [(-43 71 -69 64) -69]
Test Case: 845 | Input/Output: [(56 98 -92 -50) -92]
Test Case: 846 | Input/Output: [(-13 66 30 64) -13]
Test Case: 847 | Input/Output: [(98 -82 72 -99) -99]
Test Case: 848 | Input/Output: [(7 -23 22 -14) -23]
Test Case: 849 | Input/Output: [(39 -55 99 -16) -55]
Test Case: 850 | Input/Output: [(-49 -49 -30 -15) -49]
Test Case: 851 | Input/Output: [(-28 72 52 78) -28]
Test Case: 852 | Input/Output: [(90 43 98 -59) -59]
Test Case: 853 | Input/Output: [(41 75 -60 -2) -60]
Test Case: 854 | Input/Output: [(-12 36 58 -72) -72]
Test Case: 855 | Input/Output: [(-88 77 -48 -29) -88]
Test Case: 856 | Input/Output: [(-83 -87 -90 -61) -90]
Test Case: 857 | Input/Output: [(-77 32 -79 82) -79]
Test Case: 858 | Input/Output: [(3 -83 55 28) -83]
Test Case: 859 | Input/Output: [(63 -20 80 24) -20]
Test Case: 860 | Input/Output: [(-62 -16 -54 -8) -62]
Test Case: 861 | Input/Output: [(18 -32 85 44) -32]
Test Case: 862 | Input/Output: [(-2 -9 16 -90) -90]
Test Case: 863 | Input/Output: [(-57 97 -10 1) -57]
Test Case: 864 | Input/Output: [(-5 -100 -5 0) -100]
Test Case: 865 | Input/Output: [(-84 98 -37 -99) -99]
Test Case: 866 | Input/Output: [(-26 -55 -96 -77) -96]
Test Case: 867 | Input/Output: [(-17 40 15 -99) -99]
Test Case: 868 | Input/Output: [(5 -14 -7 -52) -52]
Test Case: 869 | Input/Output: [(95 86 -17 81) -17]
Test Case: 870 | Input/Output: [(-40 66 68 96) -40]
Test Case: 871 | Input/Output: [(35 -31 -31 15) -31]
Test Case: 872 | Input/Output: [(-83 -2 -82 -32) -83]
Test Case: 873 | Input/Output: [(-32 -49 -8 6) -49]
Test Case: 874 | Input/Output: [(-45 89 6 -12) -45]
Test Case: 875 | Input/Output: [(-10 -15 -51 -33) -51]
Test Case: 876 | Input/Output: [(-26 -60 -33 34) -60]
Test Case: 877 | Input/Output: [(86 4 -61 -46) -61]
Test Case: 878 | Input/Output: [(-50 -17 -58 -56) -58]
Test Case: 879 | Input/Output: [(7 -32 -10 90) -32]
Test Case: 880 | Input/Output: [(-52 79 -97 -69) -97]
Test Case: 881 | Input/Output: [(59 65 -51 32) -51]
Test Case: 882 | Input/Output: [(98 -64 -24 93) -64]
Test Case: 883 | Input/Output: [(98 -15 -90 -33) -90]
Test Case: 884 | Input/Output: [(-47 -45 -14 66) -47]
Test Case: 885 | Input/Output: [(-71 53 65 -78) -78]
Test Case: 886 | Input/Output: [(-86 -45 46 78) -86]
Test Case: 887 | Input/Output: [(59 12 -14 -42) -42]
Test Case: 888 | Input/Output: [(100 -14 46 17) -14]
Test Case: 889 | Input/Output: [(93 80 76 -7) -7]
Test Case: 890 | Input/Output: [(-11 76 8 -48) -48]
Test Case: 891 | Input/Output: [(-53 84 16 -36) -53]
Test Case: 892 | Input/Output: [(95 65 68 -61) -61]
Test Case: 893 | Input/Output: [(-83 -41 70 -63) -83]
Test Case: 894 | Input/Output: [(-78 -10 20 25) -78]
Test Case: 895 | Input/Output: [(73 -16 46 42) -16]
Test Case: 896 | Input/Output: [(58 40 65 -76) -76]
Test Case: 897 | Input/Output: [(-70 50 -5 69) -70]
Test Case: 898 | Input/Output: [(-87 66 -29 24) -87]
Test Case: 899 | Input/Output: [(-83 46 58 72) -83]
Test Case: 900 | Input/Output: [(-39 -49 57 -96) -96]
Test Case: 901 | Input/Output: [(-9 -35 -47 92) -47]
Test Case: 902 | Input/Output: [(62 37 23 -31) -31]
Test Case: 903 | Input/Output: [(-81 23 54 56) -81]
Test Case: 904 | Input/Output: [(86 -21 33 -73) -73]
Test Case: 905 | Input/Output: [(50 -99 83 62) -99]
Test Case: 906 | Input/Output: [(-37 -41 87 -4) -41]
Test Case: 907 | Input/Output: [(-19 60 78 -29) -29]
Test Case: 908 | Input/Output: [(78 4 -62 -54) -62]
Test Case: 909 | Input/Output: [(14 -31 -58 36) -58]
Test Case: 910 | Input/Output: [(22 -79 15 5) -79]
Test Case: 911 | Input/Output: [(71 61 25 -29) -29]
Test Case: 912 | Input/Output: [(-28 79 -90 97) -90]
Test Case: 913 | Input/Output: [(94 -87 63 41) -87]
Test Case: 914 | Input/Output: [(45 23 -38 -24) -38]
Test Case: 915 | Input/Output: [(-52 -20 92 22) -52]
Test Case: 916 | Input/Output: [(86 65 98 -56) -56]
Test Case: 917 | Input/Output: [(-8 -80 -32 60) -80]
Test Case: 918 | Input/Output: [(74 79 -7 46) -7]
Test Case: 919 | Input/Output: [(63 -22 4 50) -22]
Test Case: 920 | Input/Output: [(-47 64 77 41) -47]
Test Case: 921 | Input/Output: [(-70 -28 -40 -82) -82]
Test Case: 922 | Input/Output: [(24 -16 76 -53) -53]
Test Case: 923 | Input/Output: [(-84 -34 4 35) -84]
Test Case: 924 | Input/Output: [(-97 -1 35 79) -97]
Test Case: 925 | Input/Output: [(23 -40 75 99) -40]
Test Case: 926 | Input/Output: [(-25 -23 -57 72) -57]
Test Case: 927 | Input/Output: [(22 -24 50 -76) -76]
Test Case: 928 | Input/Output: [(-30 76 70 -20) -30]
Test Case: 929 | Input/Output: [(75 -59 66 96) -59]
Test Case: 930 | Input/Output: [(-43 50 -96 72) -96]
Test Case: 931 | Input/Output: [(0 -77 39 -6) -77]
Test Case: 932 | Input/Output: [(30 62 -70 28) -70]
Test Case: 933 | Input/Output: [(-43 36 -30 -92) -92]
Test Case: 934 | Input/Output: [(20 -83 75 -52) -83]
Test Case: 935 | Input/Output: [(-4 85 16 57) -4]
Test Case: 936 | Input/Output: [(-46 10 -88 58) -88]
Test Case: 937 | Input/Output: [(91 2 -34 -87) -87]
Test Case: 938 | Input/Output: [(-37 -15 81 -35) -37]
Test Case: 939 | Input/Output: [(46 -28 90 14) -28]
Test Case: 940 | Input/Output: [(92 -14 -31 56) -31]
Test Case: 941 | Input/Output: [(50 13 -33 -17) -33]
Test Case: 942 | Input/Output: [(54 -88 10 -64) -88]
Test Case: 943 | Input/Output: [(18 41 -25 -74) -74]
Test Case: 944 | Input/Output: [(95 66 7 -47) -47]
Test Case: 945 | Input/Output: [(-100 38 99 91) -100]
Test Case: 946 | Input/Output: [(77 -27 42 88) -27]
Test Case: 947 | Input/Output: [(74 29 28 30) 28]
Test Case: 948 | Input/Output: [(45 70 -10 -65) -65]
Test Case: 949 | Input/Output: [(44 -56 87 63) -56]
Test Case: 950 | Input/Output: [(87 -48 -2 -41) -48]
Test Case: 951 | Input/Output: [(55 -26 51 75) -26]
Test Case: 952 | Input/Output: [(65 -69 22 -13) -69]
Test Case: 953 | Input/Output: [(75 81 18 82) 18]
Test Case: 954 | Input/Output: [(-94 51 50 -77) -94]
Test Case: 955 | Input/Output: [(20 54 -48 21) -48]
Test Case: 956 | Input/Output: [(-10 46 -70 92) -70]
Test Case: 957 | Input/Output: [(87 16 -93 -66) -93]
Test Case: 958 | Input/Output: [(98 -89 -92 64) -92]
Test Case: 959 | Input/Output: [(-90 -49 -95 32) -95]
Test Case: 960 | Input/Output: [(-83 7 23 -45) -83]
Test Case: 961 | Input/Output: [(-47 91 14 -62) -62]
Test Case: 962 | Input/Output: [(6 35 96 -87) -87]
Test Case: 963 | Input/Output: [(32 18 10 -35) -35]
Test Case: 964 | Input/Output: [(15 85 49 -43) -43]
Test Case: 965 | Input/Output: [(-50 8 13 9) -50]
Test Case: 966 | Input/Output: [(46 44 15 38) 15]
Test Case: 967 | Input/Output: [(-12 -90 54 99) -90]
Test Case: 968 | Input/Output: [(50 19 -71 -31) -71]
Test Case: 969 | Input/Output: [(50 55 66 89) 50]
Test Case: 970 | Input/Output: [(-47 -27 -82 23) -82]
Test Case: 971 | Input/Output: [(78 -69 -63 -35) -69]
Test Case: 972 | Input/Output: [(9 7 55 -4) -4]
Test Case: 973 | Input/Output: [(-3 -19 75 -72) -72]
Test Case: 974 | Input/Output: [(-68 -19 23 -65) -68]
Test Case: 975 | Input/Output: [(100 -43 30 27) -43]
Test Case: 976 | Input/Output: [(73 -12 19 88) -12]
Test Case: 977 | Input/Output: [(20 68 0 88) 0]
Test Case: 978 | Input/Output: [(18 -89 -52 -31) -89]
Test Case: 979 | Input/Output: [(69 20 62 100) 20]
Test Case: 980 | Input/Output: [(51 -5 66 -77) -77]
Test Case: 981 | Input/Output: [(31 1 66 -19) -19]
Test Case: 982 | Input/Output: [(-19 -49 8 50) -49]
Test Case: 983 | Input/Output: [(28 55 -3 -30) -30]
Test Case: 984 | Input/Output: [(-10 34 -28 -73) -73]
Test Case: 985 | Input/Output: [(-44 -86 -5 33) -86]
Test Case: 986 | Input/Output: [(-44 -50 35 -27) -50]
Test Case: 987 | Input/Output: [(55 27 70 -88) -88]
Test Case: 988 | Input/Output: [(-98 68 -93 -75) -98]
Test Case: 989 | Input/Output: [(-9 16 28 -47) -47]
Test Case: 990 | Input/Output: [(29 10 65 60) 10]
Test Case: 991 | Input/Output: [(-33 -78 88 27) -78]
Test Case: 992 | Input/Output: [(89 -81 76 81) -81]
Test Case: 993 | Input/Output: [(-61 -92 -8 -29) -92]
Test Case: 994 | Input/Output: [(-10 1 -71 22) -71]
Test Case: 995 | Input/Output: [(34 -97 44 55) -97]
Test Case: 996 | Input/Output: [(89 -53 -22 13) -53]
Test Case: 997 | Input/Output: [(46 -89 -48 -19) -89]
Test Case: 998 | Input/Output: [(96 31 49 -9) -9]
Test Case: 999 | Input/Output: [(79 59 -75 -16) -75]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 79 49 38 53 -120 -99 2 -99 97 102 13 -38 -45 3 -43 100
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[6 6 6 -13] -13] [[-71 -71 -71 17] -71] [[8 -36 -36 -36] -36] [[-72 -72 -66 -72] -72] [[-62 -62 -62 -83] -83] [[98 -53 -53 -53] -53] [[-69 -69 -69 -88] -88] [[-11 -32 -11 -11] -32] [[-63 -63 76 -63] -63] [[-73 28 28 28] -73] [(50 50 50 50) 50] [(-82 -82 -82 -82) -82] [(9 9 9 9) 9] [(-1 -1 -1 -1) -1] [(-35 -35 -35 -35) -35] [(24 17 45 24) 17] [(23 83 33 26) 23] [(32 75 2 95) 2] [(11 29 69 58) 11] [(16 40 80 63) 16] [(84 20 52 89) 20] [(78 37 44 93) 37] [(40 9 59 5) 5] [(54 83 68 52) 52] [(45 19 75 62) 19] [(25 59 25 62) 25] [(56 38 67 81) 38] [(93 8 15 92) 8] [(99 36 65 12) 12] [(36 100 85 72) 36] [(57 91 61 36) 36] [(65 77 92 62) 62] [(53 53 68 98) 53] [(41 31 21 18) 18] [(77 14 30 4) 4] [(-56 -75 73 -100) -100] [(-63 -15 35 34) -63] [(-68 69 20 76) -68] [(-47 56 -38 9) -47] [(-95 -33 97 -99) -99] [(97 -30 -14 85) -30] [(-67 -12 -59 34) -67] [(39 4 -46 13) -46] [(-27 15 -15 59) -27] [(15 33 -88 -19) -88] [(49 51 -93 -5) -93] [(40 -14 1 -53) -53] [(95 -97 -95 -97) -97] [(-17 -78 3 -86) -86] [(68 48 29 25) 25] [(-79 -27 -91 -24) -91] [(-64 94 89 24) -64] [(58 -39 100 -44) -44] [(87 -49 -7 -4) -49] [(56 -52 -74 -37) -74] [(20 -92 -58 1) -92] [(-76 60 -87 -13) -87] [(15 61 -13 30) -13] [(27 -95 -71 85) -95] [(53 -78 -95 -88) -95] [(-16 75 88 -35) -35] [(64 -99 37 -48) -99] [(100 3 -12 33) -12] [(95 -28 28 -67) -67] [(64 -70 -35 -46) -70] [(3 59 -62 -43) -62] [(-9 77 3 -74) -74] [(-61 -46 -100 14) -100] [(-93 2 -24 100) -93] [(-14 74 23 50) -14] [(63 -31 2 -59) -59] [(-8 -29 42 87) -29] [(26 27 -65 -87) -87] [(7 -91 98 -99) -99] [(65 15 -10 16) -10] [(-24 19 -26 71) -26] [(-73 -59 -50 74) -73] [(19 -60 39 6) -60] [(24 -94 55 -2) -94] [(-66 87 98 -57) -66] [(86 68 94 -16) -16] [(-70 -59 -3 99) -70] [(-33 1 37 74) -33] [(-62 -7 -7 -84) -84] [(-98 -65 -80 -43) -98] [(13 -31 -78 60) -78] [(58 -14 -89 -31) -89] [(-58 20 -91 -24) -91] [(-24 79 60 57) -24] [(-6 -33 88 -33) -33] [(-84 15 5 4) -84] [(-41 15 -71 -72) -72] [(77 63 77 -64) -64] [(90 -20 -51 71) -51] [(-32 -25 -41 33) -41])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 11                  | Program output: 29                 
Correct output: 16                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 9                  
Correct output: 52                  | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 36                 
Correct output: 36                  | Program output: 100                
Correct output: 36                  | Program output: 91                 
Correct output: 62                  | Program output: 77                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 31                 
Correct output: 4                   | Program output: 14                 
Correct output: -100                | Program output: -75                
Correct output: -63                 | Program output: -15                
Correct output: -68                 | Program output: 69                 
Correct output: -47                 | Program output: 56                 
Correct output: -99                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -12                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: 15                 
Correct output: -88                 | Program output: 33                 
Correct output: -93                 | Program output: 51                 
Correct output: -53                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -78                
Correct output: 25                  | Program output: 48                 
Correct output: -91                 | Program output: -27                
Correct output: -64                 | Program output: 94                 
Correct output: -44                 | Program output: -39                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: 60                 
Correct output: -13                 | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -78                
Correct output: -35                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 59                 
Correct output: -74                 | Program output: 77                 
Correct output: -100                | Program output: -46                
Correct output: -93                 | Program output: 2                  
Correct output: -14                 | Program output: 74                 
Correct output: -59                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: 27                 
Correct output: -99                 | Program output: -91                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: 19                 
Correct output: -73                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: 87                 
Correct output: -16                 | Program output: 68                 
Correct output: -70                 | Program output: -59                
Correct output: -33                 | Program output: 1                  
Correct output: -84                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -14                
Correct output: -91                 | Program output: 20                 
Correct output: -24                 | Program output: 79                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 15                 
Correct output: -72                 | Program output: 15                 
Correct output: -64                 | Program output: 63                 
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -100} {:close 1, :instruction integer_dec} {:close 1, :instruction -58} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction -70} {:close 1, :instruction tagged_893} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup})
Lexicase best program: (exec_do*times (in2 integer_mult) integer_eq print_integer integer_fromboolean exec_dup () exec_noop boolean_dup_items -100 integer_dec -58 boolean_dup_items exec_stackdepth boolean_stackdepth boolean_stackdepth boolean_rot exec_do*times (exec_swap (integer_dup_items) () boolean_dup) -70 tagged_893 exec_do*count (exec_pop () integer_mult boolean_dup) exec_empty integer_gte integer_inc boolean_pop exec_y_when_autoconstructing (boolean_eq) exec_if (boolean_and boolean_rot exec_y (exec_stackdepth) exec_shove () integer_stackdepth exec_k (integer_mult exec_swap () () boolean_yank integer_dup) (boolean_swap) exec_stackdepth) (exec_yankdup))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 1, :instruction integer_mult} {:close 1, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction -100} {:close 1, :instruction integer_dec} {:close 1, :instruction -58} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction -70} {:close 1, :instruction tagged_893} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mult} {:close 2, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_yankdup})
Zero cases best program: (exec_do*times (in2 integer_mult) integer_eq print_integer integer_fromboolean exec_dup () exec_noop boolean_dup_items -100 integer_dec -58 boolean_dup_items exec_stackdepth boolean_stackdepth boolean_stackdepth boolean_rot exec_do*times (exec_swap (integer_dup_items) () boolean_dup) -70 tagged_893 exec_do*count (exec_pop () integer_mult boolean_dup) exec_empty integer_gte integer_inc boolean_pop exec_y_when_autoconstructing (boolean_eq) exec_if (boolean_and boolean_rot exec_y (exec_stackdepth) exec_shove () integer_stackdepth exec_k (integer_mult exec_swap () () boolean_yank integer_dup) (boolean_swap) exec_stackdepth) (exec_yankdup))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 6 12 1 4 1 1 6 6 3)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 6 12 1 4 1 1 6 6 3)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction tagged_115} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_642} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq})
Best program: (integer_mult tagged_115 integer_shove integer_rot exec_while (integer_max boolean_not) exec_s_when_autoconstructing (exec_shove (in2 exec_k () (integer_rot in2) exec_empty integer_min) print_integer boolean_invert_second_then_and integer_stackdepth integer_swap integer_min) (integer_flush boolean_pop exec_k_when_autoconstructing (exec_pop (exec_empty exec_noop exec_swap () (exec_while (boolean_eq exec_eq tagged_642 integer_mult integer_pop exec_pop (boolean_flush boolean_flush integer_lte integer_swap exec_yank exec_dup_times () integer_mult) integer_shove exec_shove (integer_eq))))) ()) ())
Errors: [1 0 0 1 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 44
Size: 61
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.996 0.994 0.988 0.999 0.996 0.999 0.999 0.994 0.994 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.215
Average program size in population (points): 68.041
Average percent parens in population: 0.285
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 476671
--- Timings ---
Current time: 1559314754468 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.9 seconds, 33.1%
Fitness Testing:      1.7 seconds, 62.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction in1})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod boolean_dup) (integer_lte) boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) (exec_pop (exec_yank boolean_dup_times exec_s (boolean_empty) () (in1))))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.184
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction in1})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod boolean_dup) (integer_lte) boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) (exec_pop (exec_yank boolean_dup_times exec_s (boolean_empty) () (in1))))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.184
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 184 644 184 184 184 183 184 231 184)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (215 184 644 184 184 184 183 184 231 184)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction in1})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte integer_rot) in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod integer_gte) (integer_lte) boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) (exec_pop (exec_yank boolean_dup_times exec_s (boolean_empty) (in1) ())))
Errors: [1 0 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 87
Percent parens: 0.184
--- Population Statistics ---
Average total errors in population: 7.623
Median total errors in population: 8
Error averages by case: (0.785 0.816 0.356 0.816 0.816 0.816 0.817 0.816 0.769 0.816)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.053
Average program size in population (points): 67.982
Average percent parens in population: 0.230
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.505
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.563
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 977983
--- Timings ---
Current time: 1559314756930 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.5 seconds, 45.9%
Fitness Testing:      2.3 seconds, 42.1%
Report:               0.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -66                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: 76                 
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 45                 
Correct output: 23                  | Program output: 33                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 69                 
Correct output: 16                  | Program output: 80                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 59                 
Correct output: 52                  | Program output: 68                 
Correct output: 19                  | Program output: 75                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 65                 
Correct output: 36                  | Program output: 85                 
Correct output: 36                  | Program output: 61                 
Correct output: 62                  | Program output: 92                 
Correct output: 53                  | Program output: 68                 
Correct output: 18                  | Program output: 21                 
Correct output: 4                   | Program output: 30                 
Correct output: -100                | Program output: 73                 
Correct output: -63                 | Program output: 35                 
Correct output: -68                 | Program output: 20                 
Correct output: -47                 | Program output: -38                
Correct output: -99                 | Program output: 97                 
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: 1                  
Correct output: -97                 | Program output: -95                
Correct output: -86                 | Program output: 3                  
Correct output: 25                  | Program output: 29                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: 89                 
Correct output: -44                 | Program output: 100                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: 88                 
Correct output: -99                 | Program output: 37                 
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: 28                 
Correct output: -70                 | Program output: -35                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -24                
Correct output: -14                 | Program output: 23                 
Correct output: -59                 | Program output: 2                  
Correct output: -29                 | Program output: 42                 
Correct output: -87                 | Program output: -65                
Correct output: -99                 | Program output: 98                 
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -50                
Correct output: -60                 | Program output: 39                 
Correct output: -94                 | Program output: 55                 
Correct output: -66                 | Program output: 98                 
Correct output: -16                 | Program output: 94                 
Correct output: -70                 | Program output: -3                 
Correct output: -33                 | Program output: 37                 
Correct output: -84                 | Program output: -7                 
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 60                 
Correct output: -33                 | Program output: 88                 
Correct output: -84                 | Program output: 5                  
Correct output: -72                 | Program output: -71                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop boolean_frominteger exec_dup () integer_yankdup exec_stackdepth boolean_and) (integer_pop boolean_invert_first_then_and boolean_and integer_lte) in3 print_integer integer_empty) integer_lte boolean_dup_items integer_dup_times exec_yankdup exec_s_when_autoconstructing (in3 integer_div in2 integer_sub integer_min) () (exec_do*times (exec_y_when_autoconstructing (integer_dup_items))))
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop boolean_frominteger exec_dup () integer_yankdup exec_stackdepth boolean_and) (integer_pop boolean_invert_first_then_and boolean_and integer_lte) in3 print_integer integer_empty) integer_lte boolean_dup_items integer_dup_times exec_yankdup exec_s_when_autoconstructing (in3 integer_div in2 integer_sub integer_min) () (exec_do*times (exec_y_when_autoconstructing (integer_dup_items))))
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (116 201 201 92 512 201 92 92 92 116)
Population mean number of elite cases: 1.72
Count of perfect (error zero) individuals by case: (116 201 201 92 512 201 92 92 92 116)
Population mean number of perfect (error zero) cases: 1.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -26} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop boolean_frominteger exec_dup () integer_yankdup exec_stackdepth boolean_and) (integer_pop boolean_invert_first_then_and boolean_and integer_lte) in3 print_integer integer_empty) integer_lte boolean_dup_items integer_dup_times exec_yankdup -26 in3 integer_div in2 integer_sub integer_min exec_do*times (exec_y_when_autoconstructing (integer_dup_items)))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 8.285
Median total errors in population: 9
Error averages by case: (0.884 0.799 0.799 0.908 0.488 0.799 0.908 0.908 0.908 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.758
Average program size in population (points): 74.461
Average percent parens in population: 0.208
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.001
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1263950
--- Timings ---
Current time: 1559314761062 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         5.7 seconds, 61.3%
Fitness Testing:      2.7 seconds, 28.6%
Report:               0.8 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod integer_gte) (integer_lte) boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) (exec_pop (boolean_dup_times exec_s () () ())))
Lexicase best errors: [1 0 1 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 84
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod integer_gte) (integer_lte) boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) (exec_pop (boolean_dup_times exec_s () () ())))
Zero cases best errors: [1 0 1 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 84
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 80 370 266 81 157 267 370 157 80)
Population mean number of elite cases: 1.99
Count of perfect (error zero) individuals by case: (158 80 370 266 81 157 267 370 157 80)
Population mean number of perfect (error zero) cases: 1.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_gte} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction in1})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (boolean_empty) integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean print_integer integer_dup) (exec_do*times (integer_gte) integer_div) (boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) exec_pop (exec_yank boolean_dup_times exec_s (boolean_empty) () (in1))) ())
Errors: [1 0 1 1 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 71
Size: 88
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 8.014
Median total errors in population: 8
Error averages by case: (0.842 0.92 0.63 0.734 0.919 0.843 0.733 0.63 0.843 0.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.742
Average program size in population (points): 63.55
Average percent parens in population: 0.226
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5255
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1774516
--- Timings ---
Current time: 1559314764007 milliseconds
Total Time:          12.6 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         7.9 seconds, 62.5%
Fitness Testing:      3.2 seconds, 25.2%
Report:               1.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 11                  | Program output: 29                 
Correct output: 16                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 9                  
Correct output: 52                  | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 36                 
Correct output: 36                  | Program output: 100                
Correct output: 36                  | Program output: 91                 
Correct output: 62                  | Program output: 77                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 31                 
Correct output: 4                   | Program output: 14                 
Correct output: -100                | Program output: -75                
Correct output: -63                 | Program output: -15                
Correct output: -68                 | Program output: 69                 
Correct output: -47                 | Program output: 56                 
Correct output: -99                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -12                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: 15                 
Correct output: -88                 | Program output: 33                 
Correct output: -93                 | Program output: 51                 
Correct output: -53                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -78                
Correct output: 25                  | Program output: 48                 
Correct output: -91                 | Program output: -27                
Correct output: -64                 | Program output: 94                 
Correct output: -44                 | Program output: -39                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: 60                 
Correct output: -13                 | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -78                
Correct output: -35                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 59                 
Correct output: -74                 | Program output: 77                 
Correct output: -100                | Program output: -46                
Correct output: -93                 | Program output: 2                  
Correct output: -14                 | Program output: 74                 
Correct output: -59                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: 27                 
Correct output: -99                 | Program output: -91                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: 19                 
Correct output: -73                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: 87                 
Correct output: -16                 | Program output: 68                 
Correct output: -70                 | Program output: -59                
Correct output: -33                 | Program output: 1                  
Correct output: -84                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -14                
Correct output: -91                 | Program output: 20                 
Correct output: -24                 | Program output: 79                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 15                 
Correct output: -72                 | Program output: 15                 
Correct output: -64                 | Program output: 63                 
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction -64} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction -81} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_715} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap})
Lexicase best program: (boolean_and boolean_dup boolean_or exec_dup (boolean_invert_second_then_and) exec_do*times () exec_dup_items integer_max exec_do*count (boolean_and exec_y_when_autoconstructing (exec_k () (-64 exec_noop integer_mod boolean_yank) boolean_dup_items integer_empty boolean_eq boolean_and in2 print_integer)) integer_empty boolean_eq in2 boolean_rot boolean_frominteger boolean_xor exec_shove () integer_pop integer_eq in2 in4 exec_dup_items integer_max in3 integer_inc exec_k_when_autoconstructing (exec_while (boolean_or exec_stackdepth boolean_not) -81 boolean_dup_items) () exec_when () exec_do*while (boolean_eq tag_boolean_715) integer_rot exec_do*range (integer_lt integer_sub) exec_eq boolean_yankdup boolean_pop exec_noop integer_lte integer_yank boolean_dup_items in2 integer_eq exec_while (print_boolean integer_mod exec_do*while (integer_rot exec_do*while () exec_dup_times (boolean_swap))))
Lexicase best errors: [1 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.207
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_k} {:close 0, :instruction -64} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction -81} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 1, :instruction tag_boolean_715} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_swap})
Zero cases best program: (boolean_and boolean_dup boolean_or exec_dup (boolean_invert_second_then_and) exec_do*times () exec_dup_items integer_max exec_do*count (boolean_and exec_y_when_autoconstructing (exec_k () (-64 exec_noop integer_mod boolean_yank) boolean_dup_items integer_empty boolean_eq boolean_and in2 print_integer)) integer_empty boolean_eq in2 boolean_rot boolean_frominteger boolean_xor exec_shove () integer_pop integer_eq in2 in4 exec_dup_items integer_max in3 integer_inc exec_k_when_autoconstructing (exec_while (boolean_or exec_stackdepth boolean_not) -81 boolean_dup_items) () exec_when () exec_do*while (boolean_eq tag_boolean_715) integer_rot exec_do*range (integer_lt integer_sub) exec_eq boolean_yankdup boolean_pop exec_noop integer_lte integer_yank boolean_dup_items in2 integer_eq exec_while (print_boolean integer_mod exec_do*while (integer_rot exec_do*while () exec_dup_times (boolean_swap))))
Zero cases best errors: [1 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 270 285 442 156 277 171 156 556 431)
Population mean number of elite cases: 3.01
Count of perfect (error zero) individuals by case: (270 270 285 442 156 277 171 156 556 431)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction tagged_115} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_rot} {:close 1, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_642} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_eq})
Best program: (integer_mult tagged_115 integer_shove integer_rot exec_while (integer_max boolean_not) exec_s_when_autoconstructing (exec_shove (in2 exec_k () (integer_rot in2) exec_empty integer_min) print_integer exec_do*while (integer_stackdepth integer_swap integer_min) integer_flush boolean_pop exec_k_when_autoconstructing (exec_pop (exec_empty exec_noop exec_swap () (exec_while (boolean_eq exec_eq tagged_642 integer_mult integer_pop exec_pop (boolean_flush boolean_flush integer_lte integer_swap integer_yank exec_dup_times () integer_mult) integer_shove exec_shove (integer_eq))))) ()) () ())
Errors: [1 1 0 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 44
Size: 62
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.986
Median total errors in population: 7
Error averages by case: (0.73 0.73 0.715 0.558 0.844 0.723 0.829 0.844 0.444 0.569)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.047
Average program size in population (points): 68.816
Average percent parens in population: 0.226
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.0105
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2144093
--- Timings ---
Current time: 1559314767135 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:        10.3 seconds, 65.8%
Fitness Testing:      3.5 seconds, 22.6%
Report:               1.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 11                  | Program output: 29                 
Correct output: 16                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 9                  
Correct output: 52                  | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 36                 
Correct output: 36                  | Program output: 100                
Correct output: 36                  | Program output: 91                 
Correct output: 62                  | Program output: 77                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 31                 
Correct output: 4                   | Program output: 14                 
Correct output: -100                | Program output: -75                
Correct output: -63                 | Program output: -15                
Correct output: -68                 | Program output: 69                 
Correct output: -47                 | Program output: 56                 
Correct output: -99                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -12                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: 15                 
Correct output: -88                 | Program output: 33                 
Correct output: -93                 | Program output: 51                 
Correct output: -53                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -78                
Correct output: 25                  | Program output: 48                 
Correct output: -91                 | Program output: -27                
Correct output: -64                 | Program output: 94                 
Correct output: -44                 | Program output: -39                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: 60                 
Correct output: -13                 | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -78                
Correct output: -35                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 59                 
Correct output: -74                 | Program output: 77                 
Correct output: -100                | Program output: -46                
Correct output: -93                 | Program output: 2                  
Correct output: -14                 | Program output: 74                 
Correct output: -59                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: 27                 
Correct output: -99                 | Program output: -91                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: 19                 
Correct output: -73                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: 87                 
Correct output: -16                 | Program output: 68                 
Correct output: -70                 | Program output: -59                
Correct output: -33                 | Program output: 1                  
Correct output: -84                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -14                
Correct output: -91                 | Program output: 20                 
Correct output: -24                 | Program output: 79                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 15                 
Correct output: -72                 | Program output: 15                 
Correct output: -64                 | Program output: 63                 
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_222} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_178} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_178} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_add integer_empty in2 exec_k_when_autoconstructing (print_integer boolean_dup) (integer_mod boolean_not) print_integer exec_while (integer_dup_items exec_do*while () tag_exec_222 (integer_empty exec_when (exec_empty integer_gt exec_y (exec_do*times (exec_s_when_autoconstructing (exec_k (integer_shove integer_flush tag_exec_178 (print_newline integer_flush tag_exec_178 (print_newline boolean_swap boolean_dup_items exec_when () integer_yankdup) integer_yankdup exec_if (integer_sub exec_yank integer_gt) () boolean_flush boolean_dup boolean_eq exec_while (integer_div) exec_do*times (integer_gt))) ()) () ()))))))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 65
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_222} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_178} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_178} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_add integer_empty in2 exec_k_when_autoconstructing (print_integer boolean_dup) (integer_mod boolean_not) print_integer exec_while (integer_dup_items exec_do*while () tag_exec_222 (integer_empty exec_when (exec_empty integer_gt exec_y (exec_do*times (exec_s_when_autoconstructing (exec_k (integer_shove integer_flush tag_exec_178 (print_newline integer_flush tag_exec_178 (print_newline boolean_swap boolean_dup_items exec_when () integer_yankdup) integer_yankdup exec_if (integer_sub exec_yank integer_gt) () boolean_flush boolean_dup boolean_eq exec_while (integer_div) exec_do*times (integer_gt))) ()) () ()))))))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 65
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 85 221 555 332 891 86 334 582 334)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (85 85 221 555 332 891 86 334 582 334)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_not} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction tag_exec_222} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_178} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_shove} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction boolean_empty} {:close 0, :instruction in1})
Best program: (integer_add integer_empty in2 exec_k_when_autoconstructing (print_integer boolean_dup) (boolean_and boolean_not) print_integer exec_while (integer_dup_items exec_do*while () tag_exec_222 (integer_empty exec_when (exec_empty integer_gt exec_y (exec_do*times (exec_s_when_autoconstructing (exec_k (integer_shove integer_flush tag_exec_178 (print_newline boolean_swap boolean_dup_items exec_when () integer_yankdup) integer_yankdup exec_if (integer_sub integer_flush integer_gt) (boolean_flush integer_shove) boolean_dup_times) (integer_mod integer_yank integer_div exec_rot (integer_dup_items 21 in2 boolean_empty integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod exec_do*times () integer_lte) (boolean_or boolean_eq in1 integer_lt integer_dup boolean_yank integer_dup_items integer_eq boolean_frominteger) exec_pop (exec_yank boolean_dup_times exec_s (boolean_empty) () (in1)))) () ()))))))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 92
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 6.495
Median total errors in population: 7
Error averages by case: (0.915 0.915 0.779 0.445 0.668 0.109 0.914 0.666 0.418 0.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.523
Average program size in population (points): 68.726
Average percent parens in population: 0.231
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.4408125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2504031
--- Timings ---
Current time: 1559314770382 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        13.0 seconds, 68.3%
Fitness Testing:      3.9 seconds, 20.6%
Report:               2.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 93                 
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_min exec_do*times () exec_dup_times (exec_yank in2) exec_dup (in1) exec_eq exec_do*count () integer_inc boolean_empty integer_gt boolean_swap boolean_yank boolean_invert_first_then_and exec_stackdepth boolean_xor integer_yank exec_if (exec_if (integer_gt) (integer_swap integer_mult) integer_yankdup integer_mod) (integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_min exec_do*times () exec_dup_times (exec_yank in2) exec_dup (in1) exec_eq exec_do*count () integer_inc boolean_empty integer_gt boolean_swap boolean_yank boolean_invert_first_then_and exec_stackdepth boolean_xor integer_yank exec_if (exec_if (integer_gt) (integer_swap integer_mult) integer_yankdup integer_mod) (integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 1 485 1 1 1 312 312 103 103)
Population mean number of elite cases: 1.42
Count of perfect (error zero) individuals by case: (103 1 485 1 1 1 312 312 103 103)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction in2} {:close 0, :instruction exec_dup} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_min exec_do*times () exec_dup_times (exec_yank in2) exec_dup (in1) exec_eq exec_do*count () integer_inc boolean_empty integer_gt boolean_swap boolean_yank boolean_invert_first_then_and exec_stackdepth boolean_xor integer_yank exec_if (exec_if (integer_gt) (integer_swap integer_mult) integer_yankdup integer_mod) (integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 0 1 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 85
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 8.578
Median total errors in population: 9
Error averages by case: (0.897 0.999 0.515 0.999 0.999 0.999 0.688 0.688 0.897 0.897)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.133
Average program size in population (points): 65.106
Average percent parens in population: 0.242
Minimum age in population: 6.0
Maximum age in population: 10.78125
Average age in population: 9.01728125
Median age in population: 9.09375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2931237
--- Timings ---
Current time: 1559314773380 milliseconds
Total Time:          21.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        15.0 seconds, 69.3%
Fitness Testing:      4.3 seconds, 19.9%
Report:               2.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 300 309 473 172 309 840 302 110 110)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (247 300 309 473 172 309 840 302 110 110)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.828
Median total errors in population: 7
Error averages by case: (0.753 0.7 0.691 0.527 0.828 0.691 0.16 0.698 0.89 0.89)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.475
Average program size in population (points): 71.516
Average percent parens in population: 0.233
Minimum age in population: 7.0
Maximum age in population: 12.234375
Average age in population: 10.659421875
Median age in population: 10.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3377937
--- Timings ---
Current time: 1559314776471 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        17.1 seconds, 69.1%
Fitness Testing:      4.7 seconds, 19.1%
Report:               2.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952) exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) () integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952) exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) () integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (490 55 433 118 116 444 733 117 434 55)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (490 55 433 118 116 444 733 117 434 55)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.005
Median total errors in population: 7
Error averages by case: (0.51 0.945 0.567 0.882 0.884 0.556 0.267 0.883 0.566 0.945)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.526
Average program size in population (points): 79.829
Average percent parens in population: 0.262
Minimum age in population: 9.5
Maximum age in population: 13.5703125
Average age in population: 11.9238984375
Median age in population: 11.94140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3983703
--- Timings ---
Current time: 1559314779792 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.3 seconds, 68.7%
Fitness Testing:      5.3 seconds, 18.9%
Report:               3.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 93                 
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 82
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 82
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (290 815 815 293 86 86 290 294 200 86)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (290 815 815 293 86 86 290 294 200 86)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop exec_yankdup integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [0 0 0 0 1 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.745
Median total errors in population: 7
Error averages by case: (0.71 0.185 0.185 0.707 0.914 0.914 0.71 0.706 0.8 0.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.459
Average program size in population (points): 72.201
Average percent parens in population: 0.254
Minimum age in population: 10.75
Maximum age in population: 15.0625
Average age in population: 13.50553515625
Median age in population: 13.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4456639
--- Timings ---
Current time: 1559314782755 milliseconds
Total Time:          31.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.2 seconds, 68.4%
Fitness Testing:      5.7 seconds, 18.5%
Report:               3.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) exec_pop () in4 integer_yank boolean_not print_boolean print_integer exec_yankdup boolean_shove integer_dup_times boolean_swap exec_noop integer_yank integer_yank exec_flush exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) (print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop (boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) boolean_yank integer_dup_items integer_eq boolean_frominteger) exec_pop (exec_swap (boolean_dup_times exec_s (exec_yankdup) () (in1)) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 101
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in1})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) exec_pop () in4 integer_yank boolean_not print_boolean print_integer exec_yankdup boolean_shove integer_dup_times boolean_swap exec_noop integer_yank integer_yank exec_flush exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) (print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop (boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) boolean_yank integer_dup_items integer_eq boolean_frominteger) exec_pop (exec_swap (boolean_dup_times exec_s (exec_yankdup) () (in1)) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 101
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 332 728 332 332 332 457 5 332 391)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (332 332 728 332 332 332 457 5 332 391)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush exec_when (exec_empty integer_gt exec_y (exec_do*times (exec_s_when_autoconstructing (integer_mult integer_yankdup integer_mod) (integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1) tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_y (exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove integer_dup)))) ())))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 65
Size: 88
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 6.427
Median total errors in population: 8
Error averages by case: (0.668 0.668 0.272 0.668 0.668 0.668 0.543 0.995 0.668 0.609)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.403
Average program size in population (points): 74.366
Average percent parens in population: 0.248
Minimum age in population: 12.1875
Maximum age in population: 16.724609375
Average age in population: 14.85642578125
Median age in population: 14.908203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4887647
--- Timings ---
Current time: 1559314785661 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        23.4 seconds, 68.5%
Fitness Testing:      6.1 seconds, 17.9%
Report:               4.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (exec_s () (integer_sub) (boolean_shove) integer_dup) ()))) ()))
Lexicase best errors: [1 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.315
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (exec_s () (integer_sub) (boolean_shove) integer_dup) ()))) ()))
Zero cases best errors: [1 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.315
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 685 87 185 1000 96 685 685 146 87)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (0 685 87 185 0 96 685 685 146 87)
Population mean number of perfect (error zero) cases: 2.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_max} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (exec_yank integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (integer_max) (print_integer) boolean_shove) integer_dup)) ()))
Errors: [1 1 0 0 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.344
Median total errors in population: 7
Error averages by case: (1.0 0.315 0.913 0.815 1.0 0.904 0.315 0.315 0.854 0.913)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 54.843
Average program size in population (points): 71.602
Average percent parens in population: 0.226
Minimum age in population: 13.1875
Maximum age in population: 18.3525390625
Average age in population: 16.380630859375
Median age in population: 16.431640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5169566
--- Timings ---
Current time: 1559314788923 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.9 seconds, 69.5%
Fitness Testing:      6.4 seconds, 17.1%
Report:               4.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot})
Lexicase best program: (print_integer boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (boolean_eq integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ())) (in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec) exec_shove (integer_mod) boolean_flush integer_fromboolean) integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) boolean_not tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (integer_mod boolean_empty integer_lt) (print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot) ()))))
Lexicase best errors: [0 1 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot})
Zero cases best program: (print_integer boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (boolean_eq integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ())) (in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec) exec_shove (integer_mod) boolean_flush integer_fromboolean) integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) boolean_not tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (integer_mod boolean_empty integer_lt) (print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot) ()))))
Zero cases best errors: [0 1 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 326 317 10 162 488 324 317 330 10)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (161 326 317 10 162 488 324 317 330 10)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 2, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_262} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_add} {:close 0, :instruction 48} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_fromboolean})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_262 boolean_or exec_do*range () integer_max integer_add integer_gte integer_shove integer_yank boolean_shove integer_sub integer_add 48 boolean_eq integer_min exec_shove (boolean_empty integer_inc exec_do*count () boolean_yank integer_stackdepth boolean_dup_items integer_empty integer_div exec_rot () (integer_dup_items 21 in2 boolean_empty integer_fromboolean) ()))
Errors: [1 1 0 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 51
Size: 60
Percent parens: 0.150
--- Population Statistics ---
Average total errors in population: 7.555
Median total errors in population: 7
Error averages by case: (0.839 0.674 0.683 0.99 0.838 0.512 0.676 0.683 0.67 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.233
Average program size in population (points): 77.697
Average percent parens in population: 0.257
Minimum age in population: 15.296875
Maximum age in population: 20.00146484375
Average age in population: 17.80139599609375
Median age in population: 17.868408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5572631
--- Timings ---
Current time: 1559314791439 milliseconds
Total Time:          40.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.7 seconds, 69.3%
Fitness Testing:      6.7 seconds, 16.9%
Report:               5.4 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_573} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while ()) integer_inc integer_lte integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () boolean_empty integer_shove tag_integer_573 integer_dec integer_pop integer_eq boolean_dup_items in1 integer_yankdup integer_swap exec_yank exec_dup_times () integer_mult integer_shove in3 integer_eq)
Lexicase best errors: [0 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.109
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 2, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_integer_573} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while ()) integer_inc integer_lte integer_rot in4 integer_yank boolean_not print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range () boolean_empty integer_shove tag_integer_573 integer_dec integer_pop integer_eq boolean_dup_items in1 integer_yankdup integer_swap exec_yank exec_dup_times () integer_mult integer_shove in3 integer_eq)
Zero cases best errors: [0 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.109
--- Lexicase Population Statistics ---
Count of elite individuals by case: (802 382 246 422 175 808 406 218 219 218)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (802 382 246 422 175 808 406 218 219 218)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction tag_boolean_206} {:close 1, :instruction integer_rot} {:close 2, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in2} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) tag_boolean_206) integer_rot in4 integer_yank boolean_not boolean_and print_integer exec_yankdup exec_flush exec_y_when_autoconstructing () boolean_and in2 print_integer integer_empty boolean_eq in2 boolean_rot boolean_frominteger boolean_xor exec_shove () integer_pop integer_eq in2 in4 exec_s (integer_shove integer_yank in2) (in1) (tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ())))
Errors: [0 0 1 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 79
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.104
Median total errors in population: 6
Error averages by case: (0.198 0.618 0.754 0.578 0.825 0.192 0.594 0.782 0.781 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.499
Average program size in population (points): 77.281
Average percent parens in population: 0.263
Minimum age in population: 16.296875
Maximum age in population: 21.064208984375
Average age in population: 19.26976391601562
Median age in population: 19.2958984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.814
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5976561
--- Timings ---
Current time: 1559314794286 milliseconds
Total Time:          42.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.9 seconds, 69.8%
Fitness Testing:      7.1 seconds, 16.6%
Report:               5.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output:                    
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -26} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_s_when_autoconstructing (boolean_rot) (boolean_invert_second_then_and) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (exec_yankdup) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (boolean_invert_second_then_and exec_yankdup -26 in3 integer_div in2 integer_sub integer_min) () exec_do*times (exec_y_when_autoconstructing (integer_dup_items)))
Lexicase best errors: [1 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -26} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 2, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_s_when_autoconstructing (boolean_rot) (boolean_invert_second_then_and) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (exec_yankdup) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (boolean_invert_second_then_and exec_yankdup -26 in3 integer_div in2 integer_sub integer_min) () exec_do*times (exec_y_when_autoconstructing (integer_dup_items)))
Zero cases best errors: [1 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 232 51 437 232 124 232 121 845 353)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (124 232 51 437 232 124 232 121 845 353)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction in1})
Best program: (print_integer boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (boolean_eq integer_sub tag_integer_952 exec_noop integer_shove integer_mult) integer_yankdup integer_mod integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_s (boolean_empty) (in1) ()) ()))
Errors: [1 0 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 83
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.249
Median total errors in population: 8
Error averages by case: (0.876 0.768 0.949 0.563 0.768 0.876 0.768 0.879 0.155 0.647)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.801
Average program size in population (points): 73.072
Average percent parens in population: 0.242
Minimum age in population: 18.12890625
Maximum age in population: 22.953857421875
Average age in population: 20.73325830078125
Median age in population: 20.819580078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6307279
--- Timings ---
Current time: 1559314797181 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.9 seconds, 70.2%
Fitness Testing:      7.4 seconds, 16.3%
Report:               6.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 654
Test mean error for best: 0.65400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 93                 
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_eq) (integer_dup_times) print_integer) (boolean_and exec_do*count (in2) boolean_invert_second_then_and integer_empty) integer_dup_times) print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_eq) (integer_dup_times) print_integer) (boolean_and exec_do*count (in2) boolean_invert_second_then_and integer_empty) integer_dup_times) print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (393 99 295 295 98 99 97 328 327 295)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (393 99 295 295 98 99 97 328 327 295)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt) boolean_flush tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times) (print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (in1 integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when () exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove integer_dup)) ()))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 59
Size: 83
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.674
Median total errors in population: 8
Error averages by case: (0.607 0.901 0.705 0.705 0.902 0.901 0.903 0.672 0.673 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.748
Average program size in population (points): 76.895
Average percent parens in population: 0.272
Minimum age in population: 19.1484375
Maximum age in population: 24.03375244140625
Average age in population: 22.19120159912109
Median age in population: 22.26364135742188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6696174
--- Timings ---
Current time: 1559314800530 milliseconds
Total Time:          48.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        34.3 seconds, 70.4%
Fitness Testing:      7.8 seconds, 16.0%
Report:               6.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot})
Lexicase best program: (exec_if (boolean_pop in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush boolean_frominteger exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times print_integer) boolean_and exec_do*count (in2) in1) (tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot) ())))
Lexicase best errors: [1 1 1 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot})
Zero cases best program: (exec_if (boolean_pop in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush boolean_frominteger exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times print_integer) boolean_and exec_do*count (in2) in1) (tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot) ())))
Zero cases best errors: [1 1 1 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 271 156 154 313 313 157 313 271 313)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (268 271 156 154 313 313 157 313 271 313)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_do*range} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop integer_inc boolean_rot integer_dup_items exec_yankdup integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot boolean_and exec_dup (exec_swap (boolean_dup_items) (print_boolean boolean_shove integer_dup))) ()))
Errors: [1 1 1 1 0 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 82
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 7.471
Median total errors in population: 7
Error averages by case: (0.732 0.729 0.844 0.846 0.687 0.687 0.843 0.687 0.729 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.466
Average program size in population (points): 75.379
Average percent parens in population: 0.259
Minimum age in population: 20.1484375
Maximum age in population: 25.69366455078125
Average age in population: 23.68781436157227
Median age in population: 23.76292419433594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7079387
--- Timings ---
Current time: 1559314803837 milliseconds
Total Time:          52.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.7 seconds, 70.5%
Fitness Testing:      8.1 seconds, 15.6%
Report:               7.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 11                  | Program output: 29                 
Correct output: 16                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 9                  
Correct output: 52                  | Program output: 83                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 59                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 36                 
Correct output: 36                  | Program output: 100                
Correct output: 36                  | Program output: 91                 
Correct output: 62                  | Program output: 77                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 31                 
Correct output: 4                   | Program output: 14                 
Correct output: -100                | Program output: -75                
Correct output: -63                 | Program output: -15                
Correct output: -68                 | Program output: 69                 
Correct output: -47                 | Program output: 56                 
Correct output: -99                 | Program output: -33                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -12                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: 15                 
Correct output: -88                 | Program output: 33                 
Correct output: -93                 | Program output: 51                 
Correct output: -53                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -78                
Correct output: 25                  | Program output: 48                 
Correct output: -91                 | Program output: -27                
Correct output: -64                 | Program output: 94                 
Correct output: -44                 | Program output: -39                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: 60                 
Correct output: -13                 | Program output: 61                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -78                
Correct output: -35                 | Program output: 75                 
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: 59                 
Correct output: -74                 | Program output: 77                 
Correct output: -100                | Program output: -46                
Correct output: -93                 | Program output: 2                  
Correct output: -14                 | Program output: 74                 
Correct output: -59                 | Program output: -31                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: 27                 
Correct output: -99                 | Program output: -91                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: 19                 
Correct output: -73                 | Program output: -59                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: 87                 
Correct output: -16                 | Program output: 68                 
Correct output: -70                 | Program output: -59                
Correct output: -33                 | Program output: 1                  
Correct output: -84                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -14                
Correct output: -91                 | Program output: 20                 
Correct output: -24                 | Program output: 79                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 15                 
Correct output: -72                 | Program output: 15                 
Correct output: -64                 | Program output: 63                 
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -25                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty exec_k (print_boolean exec_dup_items exec_pop () boolean_rot integer_min exec_dup () exec_swap (boolean_dup_items) (print_boolean) boolean_shove) (integer_dup)))))
Lexicase best errors: [1 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty exec_k (print_boolean exec_dup_items exec_pop () boolean_rot integer_min exec_dup () exec_swap (boolean_dup_items) (print_boolean) boolean_shove) (integer_dup)))))
Zero cases best errors: [1 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (316 270 241 4 552 518 100 4 321 274)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (316 270 241 4 552 518 100 4 321 274)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction tag_boolean_230} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 2, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty integer_lt exec_s_when_autoconstructing (boolean_rot) (tag_boolean_230) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_add integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_shove integer_add exec_empty in2) (in1) tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) () tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap () (boolean_dup_items) print_boolean) boolean_shove) integer_dup) ()))
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 79
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.4
Median total errors in population: 7
Error averages by case: (0.684 0.73 0.759 0.996 0.448 0.482 0.9 0.996 0.679 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.646
Average program size in population (points): 74.332
Average percent parens in population: 0.260
Minimum age in population: 21.1484375
Maximum age in population: 27.11856079101562
Average age in population: 25.17018064880371
Median age in population: 25.21952056884766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7431059
--- Timings ---
Current time: 1559314807023 milliseconds
Total Time:          55.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 70.5%
Fitness Testing:      8.5 seconds, 15.3%
Report:               7.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (integer_lt) print_integer exec_if (integer_mult integer_yankdup) ())
Lexicase best errors: [0 0 0 1 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and exec_do*count (in2) in1 tag_exec_458 (integer_lt) print_integer exec_if (integer_mult integer_yankdup) ())
Zero cases best errors: [0 0 0 1 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (252 257 669 271 154 252 271 275 136 252)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (252 257 669 271 154 252 271 275 136 252)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_sub} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_empty} {:close 0, :instruction in1})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952 exec_do*range (integer_sub)) (in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range () in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup boolean_not) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times) (print_integer) boolean_and exec_do*count (in2) in1) tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_mult exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_s (boolean_empty) (in1) ()) ())) ())
Errors: [0 0 0 1 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 85
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.211
Median total errors in population: 6
Error averages by case: (0.748 0.743 0.331 0.729 0.846 0.748 0.729 0.725 0.864 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.115
Average program size in population (points): 76.226
Average percent parens in population: 0.275
Minimum age in population: 23.9976806640625
Maximum age in population: 28.48784637451172
Average age in population: 26.64936600494385
Median age in population: 26.72499084472656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7834173
--- Timings ---
Current time: 1559314809772 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.9 seconds, 70.4%
Fitness Testing:      8.8 seconds, 15.2%
Report:               8.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 655
Test mean error for best: 0.65500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: 6                  
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: 8                  
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -62                
Correct output: -53                 | Program output: 98                 
Correct output: -88                 | Program output: -69                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 40                 
Correct output: 52                  | Program output: 54                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 99                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 57                 
Correct output: 62                  | Program output: 65                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 41                 
Correct output: 4                   | Program output: 77                 
Correct output: -100                | Program output: -56                
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -95                
Correct output: -30                 | Program output: 97                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: 15                 
Correct output: -93                 | Program output: 49                 
Correct output: -53                 | Program output: 40                 
Correct output: -97                 | Program output: 95                 
Correct output: -86                 | Program output: -17                
Correct output: 25                  | Program output: 68                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: 58                 
Correct output: -49                 | Program output: 87                 
Correct output: -74                 | Program output: 56                 
Correct output: -92                 | Program output: 20                 
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: 53                 
Correct output: -35                 | Program output: -16                
Correct output: -99                 | Program output: 64                 
Correct output: -12                 | Program output: 100                
Correct output: -67                 | Program output: 95                 
Correct output: -70                 | Program output: 64                 
Correct output: -62                 | Program output: 3                  
Correct output: -74                 | Program output: -9                 
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: 63                 
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: 26                 
Correct output: -99                 | Program output: 7                  
Correct output: -10                 | Program output: 65                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 19                 
Correct output: -94                 | Program output: 24                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: 86                 
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -62                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: 58                 
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -6                 
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -41                
Correct output: -64                 | Program output: 77                 
Correct output: -51                 | Program output: 90                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) boolean_pop exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and boolean_shove in2 in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items integer_add) (boolean_rot exec_when (exec_dup (exec_swap (boolean_yankdup) (print_boolean) boolean_shove) integer_dup))) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 exec_do*range (exec_do*range ()) boolean_pop exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer) boolean_and boolean_shove in2 in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items integer_add) (boolean_rot exec_when (exec_dup (exec_swap (boolean_yankdup) (print_boolean) boolean_shove) integer_dup))) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 343 95 812 337 95 96 291 337 813)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (518 343 95 812 337 95 96 291 337 813)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction tag_integer_952} {:close 0, :instruction integer_yankdup} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub tag_integer_952 integer_yankdup exec_do*range ()) in3 exec_k (exec_noop tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_sub exec_empty boolean_invert_second_then_and integer_empty) (integer_dup_times) print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_swap) (tag_exec_469 (exec_empty) exec_k () ()))
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.263
Median total errors in population: 6
Error averages by case: (0.482 0.657 0.905 0.188 0.663 0.905 0.904 0.709 0.663 0.187)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.065
Average program size in population (points): 77.796
Average percent parens in population: 0.278
Minimum age in population: 25.63803100585938
Maximum age in population: 29.99863433837891
Average age in population: 28.10145820236206
Median age in population: 28.13751029968262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8245760
--- Timings ---
Current time: 1559314813035 milliseconds
Total Time:          61.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 70.6%
Fitness Testing:      9.2 seconds, 15.0%
Report:               8.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 2, :instruction integer_lte} {:close 2, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if})
Lexicase best program: (integer_stackdepth integer_eq integer_gte exec_dup_times (boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte)) integer_rot in4 integer_yank boolean_not integer_mod print_integer exec_yankdup exec_flush integer_dup_times in3 boolean_yank integer_mod print_newline integer_fromboolean integer_gte integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if () ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 48
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 2, :instruction integer_lte} {:close 2, :instruction integer_rot} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 1, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in3} {:close 1, :instruction boolean_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction print_newline} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if})
Zero cases best program: (integer_stackdepth integer_eq integer_gte exec_dup_times (boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte)) integer_rot in4 integer_yank boolean_not integer_mod print_integer exec_yankdup exec_flush integer_dup_times in3 boolean_yank integer_mod print_newline integer_fromboolean integer_gte integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_empty integer_lt) print_integer exec_if () ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 374 6 317 6 375 831 320 317 128)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (126 374 6 317 6 375 831 320 317 128)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction integer_eq})
Best program: (integer_dup boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_lte integer_rot) (in4) integer_yank exec_rot (exec_y_when_autoconstructing (print_integer exec_yankdup tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k (exec_noop exec_flush integer_dup_times) (boolean_swap exec_noop integer_yank) tagged_292 boolean_or exec_do*range () integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_sub integer_add boolean_dup boolean_eq integer_min) (exec_shove (exec_shove () integer_lte exec_do*times (exec_yank exec_dup_times () integer_mult) integer_shove in3 integer_eq)) ())) () ())
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 49
Size: 69
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.2
Median total errors in population: 7
Error averages by case: (0.874 0.626 0.994 0.683 0.994 0.625 0.169 0.68 0.683 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.991
Average program size in population (points): 76.188
Average percent parens in population: 0.261
Minimum age in population: 26.63803100585938
Maximum age in population: 31.23991203308105
Average age in population: 29.47376167678833
Median age in population: 29.54748344421387
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8626831
--- Timings ---
Current time: 1559314815603 milliseconds
Total Time:          64.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 70.6%
Fitness Testing:      9.6 seconds, 14.9%
Report:               9.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_999} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k () (exec_noop tag_integer_952 exec_do*range (exec_do*range () exec_do*count (exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec) boolean_not) integer_yankdup integer_mod) integer_dec exec_do*while (integer_mod) boolean_flush integer_fromboolean integer_flush tag_exec_999 (exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) exec_pop (tag_exec_458 (boolean_swap) integer_lt) print_integer exec_if (integer_dup_items integer_yankdup exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) ())
Lexicase best errors: [1 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 79
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 2, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_999} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items) (integer_gt integer_sub) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_k () (exec_noop tag_integer_952 exec_do*range (exec_do*range () exec_do*count (exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec) boolean_not) integer_yankdup integer_mod) integer_dec exec_do*while (integer_mod) boolean_flush integer_fromboolean integer_flush tag_exec_999 (exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) exec_pop (tag_exec_458 (boolean_swap) integer_lt) print_integer exec_if (integer_dup_items integer_yankdup exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) ())
Zero cases best errors: [1 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 79
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 299 134 299 174 136 134 196 174 300)
Population mean number of elite cases: 1.86
Count of perfect (error zero) individuals by case: (15 299 134 299 174 136 134 196 174 300)
Population mean number of perfect (error zero) cases: 1.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_yank} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_eq})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot boolean_rot) (integer_gte) (integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while () exec_yank) integer_lte exec_do*times () boolean_frominteger print_boolean integer_dup_items) exec_shove () boolean_xor print_boolean integer_dec integer_rot in4 integer_yank boolean_not integer_sub print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop integer_yank tagged_292 boolean_or exec_do*range (integer_max integer_add) exec_s (integer_shove) (integer_yank integer_flush integer_sub integer_add boolean_dup integer_swap integer_gt integer_eq) ())
Errors: [1 0 1 0 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 48
Size: 60
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 8.139
Median total errors in population: 7
Error averages by case: (0.985 0.701 0.866 0.701 0.826 0.864 0.866 0.804 0.826 0.7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.548
Average program size in population (points): 77.497
Average percent parens in population: 0.266
Minimum age in population: 27.88909912109375
Maximum age in population: 33.08180046081543
Average age in population: 31.35253304672241
Median age in population: 31.53436088562012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9180035
--- Timings ---
Current time: 1559314818389 milliseconds
Total Time:          66.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.2 seconds, 70.6%
Fitness Testing:     10.0 seconds, 15.0%
Report:               9.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: 17                 
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 95                 
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 89                 
Correct output: 37                  | Program output: 93                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 62                 
Correct output: 38                  | Program output: 81                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 76                 
Correct output: -47                 | Program output: 9                  
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: 34                 
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: 59                 
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -24                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -13                
Correct output: -13                 | Program output: 30                 
Correct output: -95                 | Program output: 85                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 14                 
Correct output: -93                 | Program output: 100                
Correct output: -14                 | Program output: 50                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 87                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: 71                 
Correct output: -73                 | Program output: 74                 
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: 99                 
Correct output: -33                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -43                
Correct output: -78                 | Program output: 60                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -24                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: 33                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte integer_rot) in4 integer_yank integer_lte print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop boolean_dup tagged_292 boolean_or integer_lt integer_max integer_add exec_s (integer_shove integer_yank) (boolean_shove integer_flush exec_eq exec_empty boolean_invert_second_then_and integer_empty) (boolean_shove) print_integer boolean_and exec_do*count (in2) integer_yankdup tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (exec_y (integer_yankdup boolean_empty) tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (boolean_or)) boolean_shove) integer_dup) ()) ())
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 83
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction boolean_or} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte integer_rot) in4 integer_yank integer_lte print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop boolean_dup tagged_292 boolean_or integer_lt integer_max integer_add exec_s (integer_shove integer_yank) (boolean_shove integer_flush exec_eq exec_empty boolean_invert_second_then_and integer_empty) (boolean_shove) print_integer boolean_and exec_do*count (in2) integer_yankdup tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (exec_y (integer_yankdup boolean_empty) tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (boolean_or)) boolean_shove) integer_dup) ()) ())
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 83
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (182 679 855 174 276 274 398 827 174 182)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (182 679 855 174 276 274 398 827 174 182)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_292} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_max} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_mult) integer_lte integer_rot) in4 integer_yank integer_lte print_boolean print_integer exec_yankdup exec_flush integer_dup_times boolean_swap exec_noop boolean_dup tagged_292 boolean_or integer_lt integer_max integer_add exec_s (integer_shove integer_yank boolean_shove integer_flush exec_eq exec_empty boolean_invert_second_then_and integer_empty) (boolean_shove) (print_integer) boolean_and exec_do*count (in2) integer_yankdup tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (exec_y (integer_yankdup boolean_empty) tag_exec_469 (exec_empty) exec_k (print_boolean exec_dup_items exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()) ())
Errors: [1 0 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 83
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 5.979
Median total errors in population: 5
Error averages by case: (0.818 0.321 0.145 0.826 0.724 0.726 0.602 0.173 0.826 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.75
Average program size in population (points): 75.04
Average percent parens in population: 0.267
Minimum age in population: 28.88909912109375
Maximum age in population: 34.6756649017334
Average age in population: 32.77644793987274
Median age in population: 32.86506676673889
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.814
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 9611541
--- Timings ---
Current time: 1559314821143 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.3 seconds, 70.8%
Fitness Testing:     10.4 seconds, 14.9%
Report:               9.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 68                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 20                 
Correct output: -47                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -24                
Correct output: -14                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 42                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -50                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -3                 
Correct output: -33                 | Program output: 37                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 1 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 73
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 1 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 73
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (53 52 291 264 239 225 267 51 290 608)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (53 52 291 264 239 225 267 51 290 608)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 1 0 0 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 54
Size: 73
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.66
Median total errors in population: 7
Error averages by case: (0.947 0.948 0.709 0.736 0.761 0.775 0.733 0.949 0.71 0.392)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.632
Average program size in population (points): 73.258
Average percent parens in population: 0.264
Minimum age in population: 30.79801106452942
Maximum age in population: 36.34754133224487
Average age in population: 34.2548782980442
Median age in population: 34.33821547031403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10038677
--- Timings ---
Current time: 1559314824482 milliseconds
Total Time:          72.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.3 seconds, 70.9%
Fitness Testing:     10.8 seconds, 14.9%
Report:              10.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 68                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 20                 
Correct output: -47                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -24                
Correct output: -14                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 42                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -50                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -3                 
Correct output: -33                 | Program output: 37                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 73
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 73
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (404 403 403 403 403 278 277 403 403 403)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (404 403 403 403 403 278 277 403 403 403)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction in2} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in3 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_and exec_do*count (in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_rot exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) in2) integer_dup)) ()))
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 73
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 6.22
Median total errors in population: 8
Error averages by case: (0.596 0.597 0.597 0.597 0.597 0.722 0.723 0.597 0.597 0.597)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.032
Average program size in population (points): 75.63
Average percent parens in population: 0.271
Minimum age in population: 32.28066873550415
Maximum age in population: 37.37144160270691
Average age in population: 35.98659816014767
Median age in population: 35.8394593000412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10914028
--- Timings ---
Current time: 1559314828581 milliseconds
Total Time:          76.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.7 seconds, 70.2%
Fitness Testing:     11.5 seconds, 15.1%
Report:              11.1 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 10 10 164 10 698 166 11 699 698)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (165 10 10 164 10 698 166 11 699 698)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.369
Median total errors in population: 7
Error averages by case: (0.835 0.99 0.99 0.836 0.99 0.302 0.834 0.989 0.301 0.302)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.459
Average program size in population (points): 74.035
Average percent parens in population: 0.264
Minimum age in population: 34.90779876708984
Maximum age in population: 39.07708334922791
Average age in population: 37.62150964134932
Median age in population: 37.79947924613953
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12118373
--- Timings ---
Current time: 1559314832653 milliseconds
Total Time:          80.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        55.8 seconds, 69.3%
Fitness Testing:     12.5 seconds, 15.5%
Report:              12.1 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_empty integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_empty integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (851 276 855 860 587 583 583 584 586 582)
Population mean number of elite cases: 6.35
Count of perfect (error zero) individuals by case: (851 276 855 860 587 583 583 584 586 582)
Population mean number of perfect (error zero) cases: 6.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 3.653
Median total errors in population: 1
Error averages by case: (0.149 0.724 0.145 0.14 0.413 0.417 0.417 0.416 0.414 0.418)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.478
Average program size in population (points): 70.451
Average percent parens in population: 0.269
Minimum age in population: 35.90779876708984
Maximum age in population: 40.68329960107803
Average age in population: 39.48937936735153
Median age in population: 39.30808067321777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 282
Genome diversity (% unique genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13203740
--- Timings ---
Current time: 1559314836309 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 68.5%
Fitness Testing:     13.4 seconds, 15.9%
Report:              13.1 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_999} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_exec_458} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_inc integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (integer_dec exec_do*while (integer_mod) boolean_flush integer_fromboolean integer_flush tag_exec_999 (exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times) print_integer boolean_and exec_do*count (in2 exec_pop (tag_exec_458 () boolean_swap integer_lt) print_integer exec_if (integer_dup_items integer_yankdup exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) ())))
Lexicase best errors: [1 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction tag_exec_999} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 1, :instruction tag_exec_458} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_inc integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (integer_dec exec_do*while (integer_mod) boolean_flush integer_fromboolean integer_flush tag_exec_999 (exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times) print_integer boolean_and exec_do*count (in2 exec_pop (tag_exec_458 () boolean_swap integer_lt) print_integer exec_if (integer_dup_items integer_yankdup exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup) ())))
Zero cases best errors: [1 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 771 771 3 771 768 3 3 116 772)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (3 771 771 3 771 768 3 3 116 772)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 2, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 integer_add boolean_stackdepth integer_lt print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) () print_boolean) boolean_shove) integer_dup) ()))
Errors: [1 0 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.019
Median total errors in population: 5
Error averages by case: (0.997 0.229 0.229 0.997 0.229 0.232 0.997 0.997 0.884 0.228)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.296
Average program size in population (points): 68.655
Average percent parens in population: 0.267
Minimum age in population: 38.4719979763031
Maximum age in population: 42.4956901371479
Average age in population: 41.14245754054189
Median age in population: 41.30808067321777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 14478647
--- Timings ---
Current time: 1559314840342 milliseconds
Total Time:          88.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 67.7%
Fitness Testing:     14.4 seconds, 16.3%
Report:              14.0 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction 21} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction 31} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () 21 integer_mod exec_eq integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod integer_gte integer_lte) integer_yank exec_if (in1 integer_lt integer_dup exec_y_when_autoconstructing (integer_yank integer_eq 31) exec_pop ()) ()))
Lexicase best errors: [0 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction 21} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 1, :instruction 31} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () 21 integer_mod exec_eq integer_fromboolean boolean_invert_first_then_and integer_dup) (integer_mod integer_gte integer_lte) integer_yank exec_if (in1 integer_lt integer_dup exec_y_when_autoconstructing (integer_yank integer_eq 31) exec_pop ()) ()))
Zero cases best errors: [0 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (872 866 361 361 505 76 432 882 76 429)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (872 866 361 361 505 76 432 882 76 429)
Population mean number of perfect (error zero) cases: 4.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 2, :instruction exec_yank} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth exec_yank integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer integer_pop boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [0 0 1 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.14
Median total errors in population: 5
Error averages by case: (0.128 0.134 0.639 0.639 0.495 0.924 0.568 0.118 0.924 0.571)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.767
Average program size in population (points): 70.833
Average percent parens in population: 0.282
Minimum age in population: 39.65320599079132
Maximum age in population: 44.36671652644873
Average age in population: 42.627955610618
Median age in population: 42.75279889255762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 15764045
--- Timings ---
Current time: 1559314844155 milliseconds
Total Time:          92.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.5 seconds, 66.8%
Fitness Testing:     15.4 seconds, 16.7%
Report:              15.0 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 boolean_yank in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) in1 in2 exec_pop () tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_sub exec_dup (exec_swap (boolean_stackdepth) (print_boolean boolean_shove) integer_dup)) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction boolean_yank} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 1, :instruction in2} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 boolean_yank in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (exec_noop integer_swap integer_mult) (integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty) integer_dup_times print_integer boolean_and exec_do*count (in2) in1 in2 exec_pop () tag_exec_458 (boolean_empty integer_lt) print_integer exec_if (integer_mult integer_sub exec_dup (exec_swap (boolean_stackdepth) (print_boolean boolean_shove) integer_dup)) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 557 556 549 557 554 265 265 265 557)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (294 557 556 549 557 554 265 265 265 557)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_stackdepth integer_eq integer_gte boolean_frominteger boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 69
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.581
Median total errors in population: 4
Error averages by case: (0.706 0.443 0.444 0.451 0.443 0.446 0.735 0.735 0.735 0.443)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.49
Average program size in population (points): 74.222
Average percent parens in population: 0.277
Minimum age in population: 41.50594007968903
Maximum age in population: 45.8551950417459
Average age in population: 44.35071401917562
Median age in population: 44.53746420145035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 16807591
--- Timings ---
Current time: 1559314848258 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.8 seconds, 66.4%
Fitness Testing:     16.3 seconds, 16.9%
Report:              16.0 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (in1) (integer_gt integer_mult boolean_invert_first_then_and) integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (integer_dup_times) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (in1) (integer_gt integer_mult boolean_invert_first_then_and) integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (integer_dup_times) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 903 810 3 3 810 912 887 805 880)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (3 903 810 3 3 810 912 887 805 880)
Population mean number of perfect (error zero) cases: 6.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 3.984
Median total errors in population: 3
Error averages by case: (0.997 0.097 0.19 0.997 0.997 0.19 0.088 0.113 0.195 0.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.466
Average program size in population (points): 68.843
Average percent parens in population: 0.266
Minimum age in population: 42.50594007968903
Maximum age in population: 47.55332918092608
Average age in population: 45.58698811592907
Median age in population: 45.62967154942453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 18115100
--- Timings ---
Current time: 1559314852191 milliseconds
Total Time:         100.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.7 seconds, 65.7%
Fitness Testing:     17.3 seconds, 17.3%
Report:              16.9 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_yank boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean integer_mod exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (exec_when () boolean_shove) integer_dup))) ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction exec_when} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_yank boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean integer_mod exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (exec_when () boolean_shove) integer_dup))) ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 1000 531 529 525 531 531 526 368 364)
Population mean number of elite cases: 5.43
Count of perfect (error zero) individuals by case: (522 0 531 529 525 531 531 526 368 364)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_501} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_668} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_501 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_668 (exec_empty) exec_empty print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)))
Errors: [0 1 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 5.573
Median total errors in population: 3
Error averages by case: (0.478 1.0 0.469 0.471 0.475 0.469 0.469 0.474 0.632 0.636)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.01
Average program size in population (points): 77.128
Average percent parens in population: 0.282
Minimum age in population: 43.50594007968903
Maximum age in population: 48.75143287330866
Average age in population: 47.17449179109745
Median age in population: 47.26842013373971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 19348723
--- Timings ---
Current time: 1559314856090 milliseconds
Total Time:         104.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 65.1%
Fitness Testing:     18.3 seconds, 17.6%
Report:              17.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 71
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 71
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (704 592 1000 1000 707 707 592 703 590 1000)
Population mean number of elite cases: 7.59
Count of perfect (error zero) individuals by case: (704 592 0 0 707 707 592 703 590 0)
Population mean number of perfect (error zero) cases: 4.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction boolean_swap} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction tag_exec_2} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_if} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty exec_empty integer_flush exec_s_when_autoconstructing (boolean_rot) (exec_do*range (exec_do*range ()) in1 exec_pop () in4) (integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_swap boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (in2) (in1) tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (integer_empty) exec_rot () (print_integer boolean_and exec_do*count (in2 exec_pop (tag_exec_458 (boolean_swap) integer_fromboolean) print_integer) exec_if (tag_exec_2 (integer_yankdup exec_dup (exec_swap (boolean_not) (exec_if (exec_s (integer_yankdup boolean_empty) (tag_exec_469 (exec_empty exec_k (print_boolean exec_dup_items exec_pop () boolean_rot integer_min exec_dup (exec_swap (boolean_dup_items) (print_boolean)) boolean_shove) (integer_dup))) ()) ())))) ()) ())) ()) ())
Errors: [0 0 1 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 78
Size: 121
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 5.405
Median total errors in population: 6
Error averages by case: (0.296 0.408 1.0 1.0 0.293 0.293 0.408 0.297 0.41 1.0)
Error minima by case: (0 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 53.667
Average program size in population (points): 73.882
Average percent parens in population: 0.273
Minimum age in population: 44.50594007968903
Maximum age in population: 50.34252260671929
Average age in population: 48.67468784015113
Median age in population: 48.77423509769142
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 20737073
--- Timings ---
Current time: 1559314860169 milliseconds
Total Time:         108.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.7 seconds, 64.5%
Fitness Testing:     19.4 seconds, 18.0%
Report:              18.9 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 84                 
Correct output: 37                  | Program output: 78                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 92                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: 85                 
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 13                 
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -4                 
Correct output: -74                 | Program output: -37                
Correct output: -92                 | Program output: 1                  
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: 27                 
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: 33                 
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 16                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: 13                 
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: 71                 
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq exec_if () (integer_mult boolean_invert_first_then_and) integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 boolean_shove exec_do*range () in1 exec_pop () exec_pop () in4 integer_min integer_yankdup exec_y (exec_y (print_integer exec_yankdup boolean_shove boolean_pop) integer_yankdup boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_flush exec_when (exec_dup (exec_swap (boolean_dup_items) (boolean_dup_times) boolean_shove) integer_dup)) ()))
Lexicase best errors: [1 1 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq exec_if () (integer_mult boolean_invert_first_then_and) integer_pop exec_pop (exec_do*while (integer_inc) integer_lte) tag_integer_952 boolean_shove exec_do*range () in1 exec_pop () exec_pop () in4 integer_min integer_yankdup exec_y (exec_y (print_integer exec_yankdup boolean_shove boolean_pop) integer_yankdup boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_flush exec_when (exec_dup (exec_swap (boolean_dup_items) (boolean_dup_times) boolean_shove) integer_dup)) ()))
Zero cases best errors: [1 1 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 898 896 900 897 918 918 2 2)
Population mean number of elite cases: 6.43
Count of perfect (error zero) individuals by case: (1 0 898 896 900 897 918 918 2 2)
Population mean number of perfect (error zero) cases: 5.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 1, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (integer_mod exec_do*range (exec_do*range () in1 exec_pop () in4) integer_min integer_mod exec_y (print_integer exec_yankdup boolean_shove) boolean_pop boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth exec_do*range (exec_dup () exec_yankdup integer_swap integer_mult) integer_yankdup integer_mod) integer_dec exec_shove (integer_mod) boolean_flush integer_fromboolean integer_flush integer_add exec_empty boolean_invert_second_then_and integer_empty integer_dup_times print_integer boolean_empty tag_exec_469 () exec_empty exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup) (print_boolean boolean_shove) integer_dup))) ())
Errors: [1 1 0 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 53
Size: 70
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 4.568
Median total errors in population: 4
Error averages by case: (0.999 1.0 0.102 0.104 0.1 0.103 0.082 0.082 0.998 0.998)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.263
Average program size in population (points): 70.012
Average percent parens in population: 0.267
Minimum age in population: 47.35564333200455
Maximum age in population: 52.01583507843316
Average age in population: 50.15271888009273
Median age in population: 50.19440962839872
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 22132764
--- Timings ---
Current time: 1559314864324 milliseconds
Total Time:         112.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.8 seconds, 64.0%
Fitness Testing:     20.5 seconds, 18.3%
Report:              19.8 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 431
Test mean error for best: 0.43100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -136               
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -360               
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: 28                 
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 26                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 58                 
Correct output: 16                  | Program output: 63                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 62                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 67                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 68                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: 34                 
Correct output: -68                 | Program output: 20                 
Correct output: -47                 | Program output: -38                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -59                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -15                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: 24                 
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -24                
Correct output: -14                 | Program output: 23                 
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: 42                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -50                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -57                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -3                 
Correct output: -33                 | Program output: 37                 
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -80                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: 57                 
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: 4                  
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Lexicase best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952) (exec_do*range (exec_do*range ()) in3 integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) exec_do*range () in1 in3 in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 73
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Zero cases best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952) (exec_do*range (exec_do*range ()) in3 integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) exec_do*range () in1 in3 in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 73
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 530 529 530 2 1 530 383 913 1)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (2 530 529 530 2 1 530 383 913 1)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952) (exec_do*range (exec_do*range ()) in3 integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) exec_do*range () in1 in3 in4 integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2 in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (exec_empty) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))
Errors: [0 0 1 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 52
Size: 73
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.579
Median total errors in population: 5
Error averages by case: (0.998 0.47 0.471 0.47 0.998 0.999 0.47 0.617 0.087 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.361
Average program size in population (points): 62.638
Average percent parens in population: 0.258
Minimum age in population: 49.11253764480352
Maximum age in population: 54.01583507843316
Average age in population: 52.48300380763109
Median age in population: 52.75774757936597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 221
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 23022698
--- Timings ---
Current time: 1559314867761 milliseconds
Total Time:         115.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 63.6%
Fitness Testing:     21.3 seconds, 18.4%
Report:              20.7 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove exec_do*range () in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (in3 exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove exec_do*range () in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (in3 exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (121 649 905 124 449 318 122 122 667 317)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (121 649 905 124 449 318 122 122 667 317)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952) (exec_do*range (exec_do*range ()) in3 integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) exec_do*range () in1 in3 in4 integer_min boolean_not exec_y (integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (boolean_not) tag_integer_952 exec_k (exec_noop integer_lt) (print_integer exec_if (integer_mult integer_pop exec_empty integer_mult integer_yankdup boolean_empty) (tag_exec_469 (in3) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))))
Errors: [1 0 0 1 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 96
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 6.206
Median total errors in population: 6
Error averages by case: (0.879 0.351 0.095 0.876 0.551 0.682 0.878 0.878 0.333 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.289
Average program size in population (points): 69.691
Average percent parens in population: 0.277
Minimum age in population: 50.9990161024034
Maximum age in population: 55.51583507843316
Average age in population: 53.21466512767604
Median age in population: 53.14314544491936
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 24246297
--- Timings ---
Current time: 1559314871626 milliseconds
Total Time:         119.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.5 seconds, 63.2%
Fitness Testing:     22.2 seconds, 18.6%
Report:              21.7 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 213
Test mean error for best: 0.21300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -11                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 24                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 52                 
Correct output: 37                  | Program output: 44                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 45                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 56                 
Correct output: 8                   | Program output: 15                 
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -14                
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: -46                
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -88                
Correct output: -93                 | Program output: -93                
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -91                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -7                 
Correct output: -74                 | Program output: -74                
Correct output: -92                 | Program output: -58                
Correct output: -87                 | Program output: -87                
Correct output: -13                 | Program output: -13                
Correct output: -95                 | Program output: -71                
Correct output: -95                 | Program output: -95                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -48                
Correct output: -12                 | Program output: -12                
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -46                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: -10                
Correct output: -26                 | Program output: -26                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: 6                  
Correct output: -94                 | Program output: -2                 
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -78                
Correct output: -89                 | Program output: -89                
Correct output: -91                 | Program output: -91                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup})
Lexicase best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove exec_do*range () in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (in3 exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_rot} {:close 0, :instruction in3} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup})
Zero cases best program: (integer_stackdepth integer_eq integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove exec_do*range () in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (in3 exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 442 412 463 449 450 412 888 884 415)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (442 442 412 463 449 450 412 888 884 415)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in3} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_dup})
Best program: (exec_empty boolean_pop exec_s_when_autoconstructing (boolean_rot) (integer_dup_items integer_gt integer_sub tag_integer_952) (exec_do*range (exec_do*range ()) in3 integer_lte) tag_integer_952 exec_do*range (exec_do*range ()) exec_do*range () in1 in3 in4 integer_min boolean_not exec_y (integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (boolean_not) tag_integer_952 exec_k (exec_noop integer_lt) (print_integer exec_if (integer_mult integer_pop exec_empty integer_mult integer_yankdup boolean_empty) (tag_exec_469 (in3) exec_k (print_boolean exec_noop exec_pop () boolean_not exec_when (exec_dup (exec_swap (boolean_dup_items) (print_boolean) boolean_shove) integer_dup)) ()))))
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 69
Size: 96
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 4.743
Median total errors in population: 5
Error averages by case: (0.558 0.558 0.588 0.537 0.551 0.55 0.588 0.112 0.116 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.636
Average program size in population (points): 71.335
Average percent parens in population: 0.272
Minimum age in population: 53.83091809903271
Maximum age in population: 57.17917241138639
Average age in population: 55.43072592238928
Median age in population: 55.522916228947
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.008
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 25121240
--- Timings ---
Current time: 1559314875255 milliseconds
Total Time:         123.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.4 seconds, 62.9%
Fitness Testing:     22.9 seconds, 18.6%
Report:              22.6 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 206
Test mean error for best: 0.20600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -32                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (in3) in4) integer_min boolean_not exec_y (integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (boolean_not) tag_integer_952 exec_k (exec_noop integer_lt) (print_integer exec_if (integer_mult integer_pop exec_empty) ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 79
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction tag_exec_458} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction tag_exec_469} {:close 1, :instruction boolean_not} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (in3) in4) integer_min boolean_not exec_y (integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove boolean_pop) boolean_swap boolean_invert_second_then_and in2) in1 tag_exec_458 (boolean_stackdepth integer_lt) print_integer exec_if (integer_mult integer_yankdup boolean_empty) (tag_exec_469 (boolean_not) tag_integer_952 exec_k (exec_noop integer_lt) (print_integer exec_if (integer_mult integer_pop exec_empty) ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 79
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (855 140 438 818 136 711 825 880 857 436)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (855 140 438 818 136 711 825 880 857 436)
Population mean number of perfect (error zero) cases: 6.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction print_boolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction tag_integer_952} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 2, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k} {:close 0, :instruction exec_noop} {:close 0, :instruction tag_integer_952} {:close 1, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in3} {:close 1, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup})
Best program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 75
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 3.904
Median total errors in population: 2
Error averages by case: (0.145 0.86 0.562 0.182 0.864 0.289 0.175 0.12 0.143 0.564)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.259
Average program size in population (points): 76.898
Average percent parens in population: 0.280
Minimum age in population: 55.43206427781843
Maximum age in population: 58.4585296553123
Average age in population: 56.89659591410356
Median age in population: 56.94830077179358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.01
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 26384939
--- Timings ---
Current time: 1559314879228 milliseconds
Total Time:         127.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.3 seconds, 62.5%
Fitness Testing:     23.9 seconds, 18.9%
Report:              23.6 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 37
Successful program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 75


Auto-simplifying with starting size: 75
step: 0
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 500
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1000
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1500
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2000
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2500
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3000
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3500
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4000
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4500
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 5000
program: (integer_stackdepth print_boolean integer_gte integer_mult boolean_invert_first_then_and integer_pop exec_pop (exec_do*while (integer_inc)) integer_lte tag_integer_952 exec_do*range (exec_do*range ()) in1 exec_pop () in4 integer_min boolean_shove in2 in1 exec_pop () exec_pop () exec_pop (exec_do*while (integer_inc) integer_lte) exec_do*range (exec_rot () () (boolean_empty exec_k () (exec_noop tag_integer_952 in4) integer_min boolean_not exec_y (print_integer exec_yankdup boolean_shove integer_empty integer_dup_times) print_integer boolean_rot exec_do*count (in2 exec_pop (tag_exec_458 (in3) integer_lt) print_integer exec_if (integer_dup_items integer_dup) ()))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 206
Test mean error for best: 0.20600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 1
Test Case   57 | Error: 1
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 1
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -13                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -88                 | Program output: -88                
Correct output: -32                 | Program output: -32                
Correct output: -63                 | Program output: -63                
Correct output: -73                 | Program output: -73                
Correct output: 50                  | Program output: 50                 
Correct output: -82                 | Program output: -82                
Correct output: 9                   | Program output: 9                  
Correct output: -1                  | Program output: -1                 
Correct output: -35                 | Program output: -35                
Correct output: 17                  | Program output: 17                 
Correct output: 23                  | Program output: 23                 
Correct output: 2                   | Program output: 32                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 20                  | Program output: 20                 
Correct output: 37                  | Program output: 37                 
Correct output: 5                   | Program output: 5                  
Correct output: 52                  | Program output: 52                 
Correct output: 19                  | Program output: 19                 
Correct output: 25                  | Program output: 25                 
Correct output: 38                  | Program output: 38                 
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 36                  | Program output: 36                 
Correct output: 36                  | Program output: 36                 
Correct output: 62                  | Program output: 62                 
Correct output: 53                  | Program output: 53                 
Correct output: 18                  | Program output: 18                 
Correct output: 4                   | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -63                 | Program output: -63                
Correct output: -68                 | Program output: -68                
Correct output: -47                 | Program output: -47                
Correct output: -99                 | Program output: -99                
Correct output: -30                 | Program output: -30                
Correct output: -67                 | Program output: -67                
Correct output: -46                 | Program output: 4                  
Correct output: -27                 | Program output: -27                
Correct output: -88                 | Program output: -19                
Correct output: -93                 | Program output: -5                 
Correct output: -53                 | Program output: -53                
Correct output: -97                 | Program output: -97                
Correct output: -86                 | Program output: -86                
Correct output: 25                  | Program output: 25                 
Correct output: -91                 | Program output: -79                
Correct output: -64                 | Program output: -64                
Correct output: -44                 | Program output: -44                
Correct output: -49                 | Program output: -49                
Correct output: -74                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -87                 | Program output: -76                
Correct output: -13                 | Program output: 15                 
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -88                
Correct output: -35                 | Program output: -35                
Correct output: -99                 | Program output: -99                
Correct output: -12                 | Program output: 3                  
Correct output: -67                 | Program output: -67                
Correct output: -70                 | Program output: -70                
Correct output: -62                 | Program output: -43                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -14                 | Program output: -14                
Correct output: -59                 | Program output: -59                
Correct output: -29                 | Program output: -29                
Correct output: -87                 | Program output: -87                
Correct output: -99                 | Program output: -99                
Correct output: -10                 | Program output: 15                 
Correct output: -26                 | Program output: -24                
Correct output: -73                 | Program output: -73                
Correct output: -60                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: -66                 | Program output: -66                
Correct output: -16                 | Program output: -16                
Correct output: -70                 | Program output: -70                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -78                 | Program output: -31                
Correct output: -89                 | Program output: -31                
Correct output: -91                 | Program output: -58                
Correct output: -24                 | Program output: -24                
Correct output: -33                 | Program output: -33                
Correct output: -84                 | Program output: -84                
Correct output: -72                 | Program output: -72                
Correct output: -64                 | Program output: -64                
Correct output: -51                 | Program output: -20                
Correct output: -41                 | Program output: -32                
;;******************************
