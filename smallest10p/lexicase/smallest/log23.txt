Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-81 -81 -99 -81] -99] [[31 21 21 21] 21] [[16 -48 16 16] -48] [[75 -82 -82 -82] -82] [[78 -17 78 78] -17] [[68 68 91 68] 68] [[29 29 49 29] 29] [[-55 -55 -55 -14] -55] [[-27 -9 -9 -9] -27] [[41 -53 41 41] -53] [(3 3 3 3) 3] [(49 49 49 49) 49] [(24 24 24 24) 24] [(-40 -40 -40 -40) -40] [(-32 -32 -32 -32) -32] [(28 66 49 23) 23] [(100 80 15 10) 10] [(90 70 13 16) 13] [(27 2 27 29) 2] [(9 59 61 52) 9] [(6 69 31 23) 6] [(9 51 52 33) 9] [(0 46 79 58) 0] [(72 19 34 62) 19] [(36 41 70 52) 36] [(45 13 32 66) 13] [(74 32 61 19) 19] [(70 51 78 64) 51] [(68 11 83 79) 11] [(4 31 37 49) 4] [(11 68 24 51) 11] [(95 50 68 55) 50] [(36 26 13 2) 2] [(24 63 72 96) 24] [(7 54 60 65) 7] [(-6 -68 -80 -16) -80] [(16 45 -67 37) -67] [(-4 -12 -72 -76) -76] [(-55 100 53 -69) -69] [(99 -87 -77 38) -87] [(45 95 73 39) 39] [(-93 -44 99 -33) -93] [(65 -8 -29 30) -29] [(-92 -17 -34 82) -92] [(86 79 -89 -90) -90] [(-64 87 -7 -59) -64] [(44 -95 52 -18) -95] [(-24 60 28 -50) -50] [(52 94 17 -48) -48] [(28 -47 -19 51) -47] [(-32 -78 -5 -4) -78] [(-9 -49 2 -16) -49] [(69 75 -73 19) -73] [(-11 3 42 28) -11] [(44 -100 -43 16) -100] [(19 35 -70 80) -70] [(31 -35 -28 60) -35] [(24 99 5 -45) -45] [(-64 -50 29 -24) -64] [(-39 3 93 78) -39] [(44 -79 25 -9) -79] [(53 42 62 -87) -87] [(-31 -7 91 -45) -45] [(47 -73 95 -3) -73] [(57 14 18 -48) -48] [(-26 43 -28 -25) -28] [(-19 -94 40 -7) -94] [(-39 -62 78 8) -62] [(-64 -88 88 -7) -88] [(33 -12 84 -33) -33] [(90 -55 -26 24) -55] [(-35 55 25 -63) -63] [(-96 -41 -29 -75) -96] [(46 -44 56 -35) -44] [(-22 82 33 5) -22] [(57 91 -79 -10) -79] [(-81 41 83 -92) -92] [(-24 -4 82 -71) -71] [(85 100 15 -59) -59] [(-71 85 54 -12) -71] [(49 -66 77 -78) -78] [(55 -52 -71 99) -71] [(-95 -87 37 -60) -95] [(40 73 -71 16) -71] [(-59 64 38 39) -59] [(47 43 14 -69) -69] [(-19 -32 -51 67) -51] [(-85 -92 -96 -42) -96] [(-88 72 -56 -94) -94] [(22 -3 1 95) -3] [(-87 7 -65 92) -87] [(-51 -61 39 100) -61] [(29 13 14 -27) -27] [(97 -3 28 -36) -36] [(41 46 71 90) 41])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-81 -81 -99 -81] -99]
Train Case:   6 | Input/Output: [[31 21 21 21] 21]
Train Case:   7 | Input/Output: [[16 -48 16 16] -48]
Train Case:   8 | Input/Output: [[75 -82 -82 -82] -82]
Train Case:   9 | Input/Output: [[78 -17 78 78] -17]
Train Case:  10 | Input/Output: [[68 68 91 68] 68]
Train Case:  11 | Input/Output: [[29 29 49 29] 29]
Train Case:  12 | Input/Output: [[-55 -55 -55 -14] -55]
Train Case:  13 | Input/Output: [[-27 -9 -9 -9] -27]
Train Case:  14 | Input/Output: [[41 -53 41 41] -53]
Train Case:  15 | Input/Output: [(3 3 3 3) 3]
Train Case:  16 | Input/Output: [(49 49 49 49) 49]
Train Case:  17 | Input/Output: [(24 24 24 24) 24]
Train Case:  18 | Input/Output: [(-40 -40 -40 -40) -40]
Train Case:  19 | Input/Output: [(-32 -32 -32 -32) -32]
Train Case:  20 | Input/Output: [(28 66 49 23) 23]
Train Case:  21 | Input/Output: [(100 80 15 10) 10]
Train Case:  22 | Input/Output: [(90 70 13 16) 13]
Train Case:  23 | Input/Output: [(27 2 27 29) 2]
Train Case:  24 | Input/Output: [(9 59 61 52) 9]
Train Case:  25 | Input/Output: [(6 69 31 23) 6]
Train Case:  26 | Input/Output: [(9 51 52 33) 9]
Train Case:  27 | Input/Output: [(0 46 79 58) 0]
Train Case:  28 | Input/Output: [(72 19 34 62) 19]
Train Case:  29 | Input/Output: [(36 41 70 52) 36]
Train Case:  30 | Input/Output: [(45 13 32 66) 13]
Train Case:  31 | Input/Output: [(74 32 61 19) 19]
Train Case:  32 | Input/Output: [(70 51 78 64) 51]
Train Case:  33 | Input/Output: [(68 11 83 79) 11]
Train Case:  34 | Input/Output: [(4 31 37 49) 4]
Train Case:  35 | Input/Output: [(11 68 24 51) 11]
Train Case:  36 | Input/Output: [(95 50 68 55) 50]
Train Case:  37 | Input/Output: [(36 26 13 2) 2]
Train Case:  38 | Input/Output: [(24 63 72 96) 24]
Train Case:  39 | Input/Output: [(7 54 60 65) 7]
Train Case:  40 | Input/Output: [(-6 -68 -80 -16) -80]
Train Case:  41 | Input/Output: [(16 45 -67 37) -67]
Train Case:  42 | Input/Output: [(-4 -12 -72 -76) -76]
Train Case:  43 | Input/Output: [(-55 100 53 -69) -69]
Train Case:  44 | Input/Output: [(99 -87 -77 38) -87]
Train Case:  45 | Input/Output: [(45 95 73 39) 39]
Train Case:  46 | Input/Output: [(-93 -44 99 -33) -93]
Train Case:  47 | Input/Output: [(65 -8 -29 30) -29]
Train Case:  48 | Input/Output: [(-92 -17 -34 82) -92]
Train Case:  49 | Input/Output: [(86 79 -89 -90) -90]
Train Case:  50 | Input/Output: [(-64 87 -7 -59) -64]
Train Case:  51 | Input/Output: [(44 -95 52 -18) -95]
Train Case:  52 | Input/Output: [(-24 60 28 -50) -50]
Train Case:  53 | Input/Output: [(52 94 17 -48) -48]
Train Case:  54 | Input/Output: [(28 -47 -19 51) -47]
Train Case:  55 | Input/Output: [(-32 -78 -5 -4) -78]
Train Case:  56 | Input/Output: [(-9 -49 2 -16) -49]
Train Case:  57 | Input/Output: [(69 75 -73 19) -73]
Train Case:  58 | Input/Output: [(-11 3 42 28) -11]
Train Case:  59 | Input/Output: [(44 -100 -43 16) -100]
Train Case:  60 | Input/Output: [(19 35 -70 80) -70]
Train Case:  61 | Input/Output: [(31 -35 -28 60) -35]
Train Case:  62 | Input/Output: [(24 99 5 -45) -45]
Train Case:  63 | Input/Output: [(-64 -50 29 -24) -64]
Train Case:  64 | Input/Output: [(-39 3 93 78) -39]
Train Case:  65 | Input/Output: [(44 -79 25 -9) -79]
Train Case:  66 | Input/Output: [(53 42 62 -87) -87]
Train Case:  67 | Input/Output: [(-31 -7 91 -45) -45]
Train Case:  68 | Input/Output: [(47 -73 95 -3) -73]
Train Case:  69 | Input/Output: [(57 14 18 -48) -48]
Train Case:  70 | Input/Output: [(-26 43 -28 -25) -28]
Train Case:  71 | Input/Output: [(-19 -94 40 -7) -94]
Train Case:  72 | Input/Output: [(-39 -62 78 8) -62]
Train Case:  73 | Input/Output: [(-64 -88 88 -7) -88]
Train Case:  74 | Input/Output: [(33 -12 84 -33) -33]
Train Case:  75 | Input/Output: [(90 -55 -26 24) -55]
Train Case:  76 | Input/Output: [(-35 55 25 -63) -63]
Train Case:  77 | Input/Output: [(-96 -41 -29 -75) -96]
Train Case:  78 | Input/Output: [(46 -44 56 -35) -44]
Train Case:  79 | Input/Output: [(-22 82 33 5) -22]
Train Case:  80 | Input/Output: [(57 91 -79 -10) -79]
Train Case:  81 | Input/Output: [(-81 41 83 -92) -92]
Train Case:  82 | Input/Output: [(-24 -4 82 -71) -71]
Train Case:  83 | Input/Output: [(85 100 15 -59) -59]
Train Case:  84 | Input/Output: [(-71 85 54 -12) -71]
Train Case:  85 | Input/Output: [(49 -66 77 -78) -78]
Train Case:  86 | Input/Output: [(55 -52 -71 99) -71]
Train Case:  87 | Input/Output: [(-95 -87 37 -60) -95]
Train Case:  88 | Input/Output: [(40 73 -71 16) -71]
Train Case:  89 | Input/Output: [(-59 64 38 39) -59]
Train Case:  90 | Input/Output: [(47 43 14 -69) -69]
Train Case:  91 | Input/Output: [(-19 -32 -51 67) -51]
Train Case:  92 | Input/Output: [(-85 -92 -96 -42) -96]
Train Case:  93 | Input/Output: [(-88 72 -56 -94) -94]
Train Case:  94 | Input/Output: [(22 -3 1 95) -3]
Train Case:  95 | Input/Output: [(-87 7 -65 92) -87]
Train Case:  96 | Input/Output: [(-51 -61 39 100) -61]
Train Case:  97 | Input/Output: [(29 13 14 -27) -27]
Train Case:  98 | Input/Output: [(97 -3 28 -36) -36]
Train Case:  99 | Input/Output: [(41 46 71 90) 41]
Test Case:   0 | Input/Output: [[65 65 65 -72] -72]
Test Case:   1 | Input/Output: [[-96 -96 -96 -47] -96]
Test Case:   2 | Input/Output: [[-14 -14 -14 -29] -29]
Test Case:   3 | Input/Output: [[-51 -51 10 -51] -51]
Test Case:   4 | Input/Output: [[-16 20 20 20] -16]
Test Case:   5 | Input/Output: [[94 -28 94 94] -28]
Test Case:   6 | Input/Output: [[-65 -75 -75 -75] -75]
Test Case:   7 | Input/Output: [[-25 -25 84 -25] -25]
Test Case:   8 | Input/Output: [[69 69 69 -79] -79]
Test Case:   9 | Input/Output: [[-29 100 -29 -29] -29]
Test Case:  10 | Input/Output: [[39 84 84 84] 39]
Test Case:  11 | Input/Output: [[-4 -4 -42 -4] -42]
Test Case:  12 | Input/Output: [[28 28 14 28] 14]
Test Case:  13 | Input/Output: [[46 46 33 46] 33]
Test Case:  14 | Input/Output: [[-65 -65 43 -65] -65]
Test Case:  15 | Input/Output: [[-61 85 -61 -61] -61]
Test Case:  16 | Input/Output: [[68 68 68 -44] -44]
Test Case:  17 | Input/Output: [[-78 -42 -78 -78] -78]
Test Case:  18 | Input/Output: [[29 29 29 97] 29]
Test Case:  19 | Input/Output: [[99 99 99 20] 20]
Test Case:  20 | Input/Output: [[12 39 39 39] 12]
Test Case:  21 | Input/Output: [[89 38 38 38] 38]
Test Case:  22 | Input/Output: [[60 77 77 77] 60]
Test Case:  23 | Input/Output: [[28 71 28 28] 28]
Test Case:  24 | Input/Output: [[-62 -62 -62 8] -62]
Test Case:  25 | Input/Output: [[34 34 82 34] 34]
Test Case:  26 | Input/Output: [[99 67 67 67] 67]
Test Case:  27 | Input/Output: [[-60 -77 -60 -60] -77]
Test Case:  28 | Input/Output: [[19 -60 19 19] -60]
Test Case:  29 | Input/Output: [[26 -14 -14 -14] -14]
Test Case:  30 | Input/Output: [[96 -92 96 96] -92]
Test Case:  31 | Input/Output: [[28 47 28 28] 28]
Test Case:  32 | Input/Output: [[-39 -39 -39 -99] -99]
Test Case:  33 | Input/Output: [[65 79 65 65] 65]
Test Case:  34 | Input/Output: [[-90 44 -90 -90] -90]
Test Case:  35 | Input/Output: [[39 -7 -7 -7] -7]
Test Case:  36 | Input/Output: [[-12 11 -12 -12] -12]
Test Case:  37 | Input/Output: [[-59 45 -59 -59] -59]
Test Case:  38 | Input/Output: [[-25 -25 -25 15] -25]
Test Case:  39 | Input/Output: [[-41 87 -41 -41] -41]
Test Case:  40 | Input/Output: [[93 93 93 -45] -45]
Test Case:  41 | Input/Output: [[-60 -60 -60 -70] -70]
Test Case:  42 | Input/Output: [[70 70 70 4] 4]
Test Case:  43 | Input/Output: [[76 49 49 49] 49]
Test Case:  44 | Input/Output: [[-77 -38 -77 -77] -77]
Test Case:  45 | Input/Output: [[-77 -77 -19 -77] -77]
Test Case:  46 | Input/Output: [[4 83 4 4] 4]
Test Case:  47 | Input/Output: [[-98 62 -98 -98] -98]
Test Case:  48 | Input/Output: [[-46 88 -46 -46] -46]
Test Case:  49 | Input/Output: [[-4 47 -4 -4] -4]
Test Case:  50 | Input/Output: [[7 -32 -32 -32] -32]
Test Case:  51 | Input/Output: [[-8 -8 -69 -8] -69]
Test Case:  52 | Input/Output: [[-23 43 43 43] -23]
Test Case:  53 | Input/Output: [[27 27 -56 27] -56]
Test Case:  54 | Input/Output: [[-91 -91 64 -91] -91]
Test Case:  55 | Input/Output: [[10 10 10 9] 9]
Test Case:  56 | Input/Output: [[24 49 24 24] 24]
Test Case:  57 | Input/Output: [[-89 -89 -89 -51] -89]
Test Case:  58 | Input/Output: [[-73 82 82 82] -73]
Test Case:  59 | Input/Output: [[21 56 56 56] 21]
Test Case:  60 | Input/Output: [[86 94 86 86] 86]
Test Case:  61 | Input/Output: [[-98 -32 -32 -32] -98]
Test Case:  62 | Input/Output: [[58 -37 -37 -37] -37]
Test Case:  63 | Input/Output: [[-44 94 -44 -44] -44]
Test Case:  64 | Input/Output: [[66 66 66 -78] -78]
Test Case:  65 | Input/Output: [[-20 -5 -20 -20] -20]
Test Case:  66 | Input/Output: [[2 0 2 2] 0]
Test Case:  67 | Input/Output: [[-45 6 -45 -45] -45]
Test Case:  68 | Input/Output: [[-90 -90 -90 87] -90]
Test Case:  69 | Input/Output: [[83 -67 83 83] -67]
Test Case:  70 | Input/Output: [[-25 -38 -25 -25] -38]
Test Case:  71 | Input/Output: [[-46 -29 -29 -29] -46]
Test Case:  72 | Input/Output: [[99 99 53 99] 53]
Test Case:  73 | Input/Output: [[61 61 49 61] 49]
Test Case:  74 | Input/Output: [[38 -66 -66 -66] -66]
Test Case:  75 | Input/Output: [[-99 -99 -25 -99] -99]
Test Case:  76 | Input/Output: [[-85 -85 10 -85] -85]
Test Case:  77 | Input/Output: [[-25 -25 -25 -10] -25]
Test Case:  78 | Input/Output: [[24 -1 -1 -1] -1]
Test Case:  79 | Input/Output: [[-50 -50 28 -50] -50]
Test Case:  80 | Input/Output: [[-29 15 15 15] -29]
Test Case:  81 | Input/Output: [[-39 25 -39 -39] -39]
Test Case:  82 | Input/Output: [[-47 -47 -47 90] -47]
Test Case:  83 | Input/Output: [[-36 -78 -78 -78] -78]
Test Case:  84 | Input/Output: [[65 -87 -87 -87] -87]
Test Case:  85 | Input/Output: [[2 95 95 95] 2]
Test Case:  86 | Input/Output: [[80 -50 80 80] -50]
Test Case:  87 | Input/Output: [[-80 -59 -59 -59] -80]
Test Case:  88 | Input/Output: [[77 77 77 15] 15]
Test Case:  89 | Input/Output: [[79 94 94 94] 79]
Test Case:  90 | Input/Output: [[-19 -8 -8 -8] -19]
Test Case:  91 | Input/Output: [[-25 -25 -25 57] -25]
Test Case:  92 | Input/Output: [[-95 -95 -95 32] -95]
Test Case:  93 | Input/Output: [[33 33 33 -5] -5]
Test Case:  94 | Input/Output: [[27 -26 -26 -26] -26]
Test Case:  95 | Input/Output: [[-64 -39 -39 -39] -64]
Test Case:  96 | Input/Output: [[84 84 -98 84] -98]
Test Case:  97 | Input/Output: [[-71 -71 -71 -69] -71]
Test Case:  98 | Input/Output: [[81 81 76 81] 76]
Test Case:  99 | Input/Output: [[97 97 31 97] 31]
Test Case: 100 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 101 | Input/Output: [(23 23 23 23) 23]
Test Case: 102 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 103 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 104 | Input/Output: [(51 51 51 51) 51]
Test Case: 105 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 106 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 107 | Input/Output: [(23 23 23 23) 23]
Test Case: 108 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 109 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 110 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 111 | Input/Output: [(69 69 69 69) 69]
Test Case: 112 | Input/Output: [(21 21 21 21) 21]
Test Case: 113 | Input/Output: [(90 90 90 90) 90]
Test Case: 114 | Input/Output: [(93 93 93 93) 93]
Test Case: 115 | Input/Output: [(19 19 19 19) 19]
Test Case: 116 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 117 | Input/Output: [(59 59 59 59) 59]
Test Case: 118 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 119 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 120 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 121 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 122 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 123 | Input/Output: [(29 29 29 29) 29]
Test Case: 124 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 125 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 126 | Input/Output: [(10 10 10 10) 10]
Test Case: 127 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 128 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 129 | Input/Output: [(79 79 79 79) 79]
Test Case: 130 | Input/Output: [(82 82 82 82) 82]
Test Case: 131 | Input/Output: [(28 28 28 28) 28]
Test Case: 132 | Input/Output: [(95 95 95 95) 95]
Test Case: 133 | Input/Output: [(38 38 38 38) 38]
Test Case: 134 | Input/Output: [(13 13 13 13) 13]
Test Case: 135 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 136 | Input/Output: [(39 39 39 39) 39]
Test Case: 137 | Input/Output: [(3 3 3 3) 3]
Test Case: 138 | Input/Output: [(59 59 59 59) 59]
Test Case: 139 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 140 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 141 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 142 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 143 | Input/Output: [(92 92 92 92) 92]
Test Case: 144 | Input/Output: [(77 77 77 77) 77]
Test Case: 145 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 146 | Input/Output: [(9 9 9 9) 9]
Test Case: 147 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 148 | Input/Output: [(95 95 95 95) 95]
Test Case: 149 | Input/Output: [(60 60 60 60) 60]
Test Case: 150 | Input/Output: [(56 56 56 56) 56]
Test Case: 151 | Input/Output: [(61 61 61 61) 61]
Test Case: 152 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 153 | Input/Output: [(86 86 86 86) 86]
Test Case: 154 | Input/Output: [(6 6 6 6) 6]
Test Case: 155 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 156 | Input/Output: [(49 49 49 49) 49]
Test Case: 157 | Input/Output: [(6 6 6 6) 6]
Test Case: 158 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 159 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 160 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 161 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 162 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 163 | Input/Output: [(38 38 38 38) 38]
Test Case: 164 | Input/Output: [(16 16 16 16) 16]
Test Case: 165 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 166 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 167 | Input/Output: [(38 38 38 38) 38]
Test Case: 168 | Input/Output: [(7 7 7 7) 7]
Test Case: 169 | Input/Output: [(64 64 64 64) 64]
Test Case: 170 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 171 | Input/Output: [(68 68 68 68) 68]
Test Case: 172 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 173 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 174 | Input/Output: [(97 97 97 97) 97]
Test Case: 175 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 176 | Input/Output: [(21 21 21 21) 21]
Test Case: 177 | Input/Output: [(16 16 16 16) 16]
Test Case: 178 | Input/Output: [(97 97 97 97) 97]
Test Case: 179 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 180 | Input/Output: [(56 56 56 56) 56]
Test Case: 181 | Input/Output: [(37 37 37 37) 37]
Test Case: 182 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 183 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 184 | Input/Output: [(12 12 12 12) 12]
Test Case: 185 | Input/Output: [(58 58 58 58) 58]
Test Case: 186 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 187 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 188 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 189 | Input/Output: [(79 79 79 79) 79]
Test Case: 190 | Input/Output: [(93 93 93 93) 93]
Test Case: 191 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 192 | Input/Output: [(60 60 60 60) 60]
Test Case: 193 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 194 | Input/Output: [(22 22 22 22) 22]
Test Case: 195 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 196 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 197 | Input/Output: [(1 1 1 1) 1]
Test Case: 198 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 199 | Input/Output: [(4 4 4 4) 4]
Test Case: 200 | Input/Output: [(72 28 87 28) 28]
Test Case: 201 | Input/Output: [(4 11 44 44) 4]
Test Case: 202 | Input/Output: [(16 61 92 58) 16]
Test Case: 203 | Input/Output: [(14 19 95 46) 14]
Test Case: 204 | Input/Output: [(77 24 8 53) 8]
Test Case: 205 | Input/Output: [(29 56 16 55) 16]
Test Case: 206 | Input/Output: [(4 63 39 75) 4]
Test Case: 207 | Input/Output: [(99 21 4 4) 4]
Test Case: 208 | Input/Output: [(41 63 98 16) 16]
Test Case: 209 | Input/Output: [(76 34 5 84) 5]
Test Case: 210 | Input/Output: [(73 60 21 26) 21]
Test Case: 211 | Input/Output: [(24 78 48 83) 24]
Test Case: 212 | Input/Output: [(46 97 40 8) 8]
Test Case: 213 | Input/Output: [(12 20 76 53) 12]
Test Case: 214 | Input/Output: [(42 59 48 35) 35]
Test Case: 215 | Input/Output: [(23 36 16 0) 0]
Test Case: 216 | Input/Output: [(41 70 52 29) 29]
Test Case: 217 | Input/Output: [(58 62 66 83) 58]
Test Case: 218 | Input/Output: [(22 97 68 59) 22]
Test Case: 219 | Input/Output: [(47 30 37 11) 11]
Test Case: 220 | Input/Output: [(38 43 76 67) 38]
Test Case: 221 | Input/Output: [(93 38 60 92) 38]
Test Case: 222 | Input/Output: [(66 56 60 69) 56]
Test Case: 223 | Input/Output: [(16 86 69 81) 16]
Test Case: 224 | Input/Output: [(100 3 33 95) 3]
Test Case: 225 | Input/Output: [(13 33 21 15) 13]
Test Case: 226 | Input/Output: [(37 77 37 66) 37]
Test Case: 227 | Input/Output: [(21 9 26 3) 3]
Test Case: 228 | Input/Output: [(31 33 36 78) 31]
Test Case: 229 | Input/Output: [(5 100 0 86) 0]
Test Case: 230 | Input/Output: [(38 8 30 77) 8]
Test Case: 231 | Input/Output: [(69 2 67 60) 2]
Test Case: 232 | Input/Output: [(21 7 3 41) 3]
Test Case: 233 | Input/Output: [(33 67 4 20) 4]
Test Case: 234 | Input/Output: [(69 23 20 2) 2]
Test Case: 235 | Input/Output: [(92 35 50 34) 34]
Test Case: 236 | Input/Output: [(62 86 83 51) 51]
Test Case: 237 | Input/Output: [(66 62 71 84) 62]
Test Case: 238 | Input/Output: [(77 10 49 80) 10]
Test Case: 239 | Input/Output: [(70 71 92 65) 65]
Test Case: 240 | Input/Output: [(47 64 12 82) 12]
Test Case: 241 | Input/Output: [(53 93 62 21) 21]
Test Case: 242 | Input/Output: [(74 16 81 64) 16]
Test Case: 243 | Input/Output: [(62 82 0 59) 0]
Test Case: 244 | Input/Output: [(70 70 79 65) 65]
Test Case: 245 | Input/Output: [(64 26 27 22) 22]
Test Case: 246 | Input/Output: [(71 34 21 7) 7]
Test Case: 247 | Input/Output: [(37 13 2 11) 2]
Test Case: 248 | Input/Output: [(62 35 65 45) 35]
Test Case: 249 | Input/Output: [(47 56 13 93) 13]
Test Case: 250 | Input/Output: [(98 41 84 84) 41]
Test Case: 251 | Input/Output: [(10 55 13 62) 10]
Test Case: 252 | Input/Output: [(41 20 27 41) 20]
Test Case: 253 | Input/Output: [(96 98 20 66) 20]
Test Case: 254 | Input/Output: [(50 79 2 61) 2]
Test Case: 255 | Input/Output: [(42 15 79 41) 15]
Test Case: 256 | Input/Output: [(47 30 22 75) 22]
Test Case: 257 | Input/Output: [(38 4 29 91) 4]
Test Case: 258 | Input/Output: [(70 81 51 15) 15]
Test Case: 259 | Input/Output: [(62 57 43 49) 43]
Test Case: 260 | Input/Output: [(46 97 56 43) 43]
Test Case: 261 | Input/Output: [(61 83 52 94) 52]
Test Case: 262 | Input/Output: [(58 83 18 2) 2]
Test Case: 263 | Input/Output: [(32 9 75 95) 9]
Test Case: 264 | Input/Output: [(25 44 34 6) 6]
Test Case: 265 | Input/Output: [(55 94 92 37) 37]
Test Case: 266 | Input/Output: [(86 15 86 13) 13]
Test Case: 267 | Input/Output: [(40 36 7 90) 7]
Test Case: 268 | Input/Output: [(69 68 14 52) 14]
Test Case: 269 | Input/Output: [(86 52 0 29) 0]
Test Case: 270 | Input/Output: [(66 76 67 36) 36]
Test Case: 271 | Input/Output: [(63 10 26 80) 10]
Test Case: 272 | Input/Output: [(18 0 99 95) 0]
Test Case: 273 | Input/Output: [(55 58 61 41) 41]
Test Case: 274 | Input/Output: [(51 72 45 94) 45]
Test Case: 275 | Input/Output: [(97 14 32 68) 14]
Test Case: 276 | Input/Output: [(21 96 11 37) 11]
Test Case: 277 | Input/Output: [(15 97 85 43) 15]
Test Case: 278 | Input/Output: [(44 68 61 89) 44]
Test Case: 279 | Input/Output: [(100 39 84 23) 23]
Test Case: 280 | Input/Output: [(44 9 82 5) 5]
Test Case: 281 | Input/Output: [(87 73 96 69) 69]
Test Case: 282 | Input/Output: [(30 19 12 8) 8]
Test Case: 283 | Input/Output: [(25 15 84 81) 15]
Test Case: 284 | Input/Output: [(42 49 59 55) 42]
Test Case: 285 | Input/Output: [(70 89 89 0) 0]
Test Case: 286 | Input/Output: [(80 99 32 47) 32]
Test Case: 287 | Input/Output: [(94 40 13 17) 13]
Test Case: 288 | Input/Output: [(88 73 95 30) 30]
Test Case: 289 | Input/Output: [(81 9 93 18) 9]
Test Case: 290 | Input/Output: [(44 71 34 31) 31]
Test Case: 291 | Input/Output: [(90 21 55 63) 21]
Test Case: 292 | Input/Output: [(91 59 56 96) 56]
Test Case: 293 | Input/Output: [(73 6 53 7) 6]
Test Case: 294 | Input/Output: [(28 77 6 24) 6]
Test Case: 295 | Input/Output: [(19 42 85 52) 19]
Test Case: 296 | Input/Output: [(70 82 42 34) 34]
Test Case: 297 | Input/Output: [(68 36 10 54) 10]
Test Case: 298 | Input/Output: [(49 16 98 92) 16]
Test Case: 299 | Input/Output: [(27 36 21 26) 21]
Test Case: 300 | Input/Output: [(25 86 2 64) 2]
Test Case: 301 | Input/Output: [(44 0 10 90) 0]
Test Case: 302 | Input/Output: [(8 82 89 84) 8]
Test Case: 303 | Input/Output: [(94 69 66 29) 29]
Test Case: 304 | Input/Output: [(22 86 26 95) 22]
Test Case: 305 | Input/Output: [(6 4 7 71) 4]
Test Case: 306 | Input/Output: [(83 35 85 76) 35]
Test Case: 307 | Input/Output: [(35 10 64 15) 10]
Test Case: 308 | Input/Output: [(62 21 29 40) 21]
Test Case: 309 | Input/Output: [(54 65 9 95) 9]
Test Case: 310 | Input/Output: [(9 94 49 28) 9]
Test Case: 311 | Input/Output: [(100 96 52 38) 38]
Test Case: 312 | Input/Output: [(89 15 4 63) 4]
Test Case: 313 | Input/Output: [(16 0 5 30) 0]
Test Case: 314 | Input/Output: [(90 62 70 42) 42]
Test Case: 315 | Input/Output: [(0 49 17 77) 0]
Test Case: 316 | Input/Output: [(67 29 23 1) 1]
Test Case: 317 | Input/Output: [(64 68 58 43) 43]
Test Case: 318 | Input/Output: [(94 32 3 74) 3]
Test Case: 319 | Input/Output: [(37 86 86 50) 37]
Test Case: 320 | Input/Output: [(78 54 78 74) 54]
Test Case: 321 | Input/Output: [(8 11 39 13) 8]
Test Case: 322 | Input/Output: [(18 30 21 34) 18]
Test Case: 323 | Input/Output: [(84 56 70 14) 14]
Test Case: 324 | Input/Output: [(90 49 75 20) 20]
Test Case: 325 | Input/Output: [(47 6 67 72) 6]
Test Case: 326 | Input/Output: [(96 54 48 12) 12]
Test Case: 327 | Input/Output: [(92 7 72 4) 4]
Test Case: 328 | Input/Output: [(86 77 52 77) 52]
Test Case: 329 | Input/Output: [(64 13 45 71) 13]
Test Case: 330 | Input/Output: [(68 77 15 0) 0]
Test Case: 331 | Input/Output: [(81 78 70 36) 36]
Test Case: 332 | Input/Output: [(0 96 77 55) 0]
Test Case: 333 | Input/Output: [(78 26 26 86) 26]
Test Case: 334 | Input/Output: [(42 73 97 20) 20]
Test Case: 335 | Input/Output: [(57 5 30 95) 5]
Test Case: 336 | Input/Output: [(16 48 45 43) 16]
Test Case: 337 | Input/Output: [(95 43 72 44) 43]
Test Case: 338 | Input/Output: [(75 41 92 55) 41]
Test Case: 339 | Input/Output: [(55 44 46 56) 44]
Test Case: 340 | Input/Output: [(73 77 85 47) 47]
Test Case: 341 | Input/Output: [(39 35 47 25) 25]
Test Case: 342 | Input/Output: [(6 94 9 10) 6]
Test Case: 343 | Input/Output: [(81 93 29 14) 14]
Test Case: 344 | Input/Output: [(4 40 20 55) 4]
Test Case: 345 | Input/Output: [(18 84 21 46) 18]
Test Case: 346 | Input/Output: [(2 99 63 93) 2]
Test Case: 347 | Input/Output: [(53 66 46 82) 46]
Test Case: 348 | Input/Output: [(77 92 25 64) 25]
Test Case: 349 | Input/Output: [(88 32 75 67) 32]
Test Case: 350 | Input/Output: [(13 35 79 49) 13]
Test Case: 351 | Input/Output: [(100 50 51 82) 50]
Test Case: 352 | Input/Output: [(74 33 87 19) 19]
Test Case: 353 | Input/Output: [(8 4 1 58) 1]
Test Case: 354 | Input/Output: [(12 62 47 4) 4]
Test Case: 355 | Input/Output: [(78 58 17 28) 17]
Test Case: 356 | Input/Output: [(51 67 16 75) 16]
Test Case: 357 | Input/Output: [(58 58 12 27) 12]
Test Case: 358 | Input/Output: [(47 14 98 92) 14]
Test Case: 359 | Input/Output: [(35 65 86 35) 35]
Test Case: 360 | Input/Output: [(51 96 49 72) 49]
Test Case: 361 | Input/Output: [(35 98 15 54) 15]
Test Case: 362 | Input/Output: [(13 8 42 62) 8]
Test Case: 363 | Input/Output: [(2 43 97 50) 2]
Test Case: 364 | Input/Output: [(20 54 74 29) 20]
Test Case: 365 | Input/Output: [(33 84 88 54) 33]
Test Case: 366 | Input/Output: [(84 33 65 77) 33]
Test Case: 367 | Input/Output: [(24 21 2 97) 2]
Test Case: 368 | Input/Output: [(83 71 25 58) 25]
Test Case: 369 | Input/Output: [(10 3 64 16) 3]
Test Case: 370 | Input/Output: [(47 64 55 30) 30]
Test Case: 371 | Input/Output: [(51 4 64 89) 4]
Test Case: 372 | Input/Output: [(56 75 42 68) 42]
Test Case: 373 | Input/Output: [(24 0 19 34) 0]
Test Case: 374 | Input/Output: [(69 1 9 64) 1]
Test Case: 375 | Input/Output: [(8 57 37 58) 8]
Test Case: 376 | Input/Output: [(9 18 16 46) 9]
Test Case: 377 | Input/Output: [(77 57 11 93) 11]
Test Case: 378 | Input/Output: [(18 87 82 10) 10]
Test Case: 379 | Input/Output: [(1 49 66 76) 1]
Test Case: 380 | Input/Output: [(92 0 31 10) 0]
Test Case: 381 | Input/Output: [(42 68 78 13) 13]
Test Case: 382 | Input/Output: [(48 89 23 13) 13]
Test Case: 383 | Input/Output: [(6 52 5 8) 5]
Test Case: 384 | Input/Output: [(1 88 97 17) 1]
Test Case: 385 | Input/Output: [(68 71 99 43) 43]
Test Case: 386 | Input/Output: [(12 99 50 96) 12]
Test Case: 387 | Input/Output: [(98 47 52 8) 8]
Test Case: 388 | Input/Output: [(29 75 47 39) 29]
Test Case: 389 | Input/Output: [(15 82 69 98) 15]
Test Case: 390 | Input/Output: [(90 87 0 4) 0]
Test Case: 391 | Input/Output: [(31 8 56 1) 1]
Test Case: 392 | Input/Output: [(96 57 96 17) 17]
Test Case: 393 | Input/Output: [(66 67 57 98) 57]
Test Case: 394 | Input/Output: [(7 7 16 47) 7]
Test Case: 395 | Input/Output: [(8 69 56 93) 8]
Test Case: 396 | Input/Output: [(68 92 8 54) 8]
Test Case: 397 | Input/Output: [(9 84 27 7) 7]
Test Case: 398 | Input/Output: [(46 97 97 12) 12]
Test Case: 399 | Input/Output: [(11 3 77 96) 3]
Test Case: 400 | Input/Output: [(-45 -100 -97 62) -100]
Test Case: 401 | Input/Output: [(37 64 -78 80) -78]
Test Case: 402 | Input/Output: [(97 43 63 -91) -91]
Test Case: 403 | Input/Output: [(3 93 8 -36) -36]
Test Case: 404 | Input/Output: [(20 14 -31 97) -31]
Test Case: 405 | Input/Output: [(35 17 -14 33) -14]
Test Case: 406 | Input/Output: [(94 5 -59 59) -59]
Test Case: 407 | Input/Output: [(55 -61 2 -27) -61]
Test Case: 408 | Input/Output: [(62 -25 71 -1) -25]
Test Case: 409 | Input/Output: [(-39 -46 33 -8) -46]
Test Case: 410 | Input/Output: [(97 -92 -39 27) -92]
Test Case: 411 | Input/Output: [(7 9 -59 65) -59]
Test Case: 412 | Input/Output: [(-74 -90 6 -45) -90]
Test Case: 413 | Input/Output: [(-16 -92 -27 47) -92]
Test Case: 414 | Input/Output: [(-88 -49 32 -53) -88]
Test Case: 415 | Input/Output: [(-20 44 -74 -68) -74]
Test Case: 416 | Input/Output: [(90 -8 23 40) -8]
Test Case: 417 | Input/Output: [(23 34 56 -46) -46]
Test Case: 418 | Input/Output: [(80 -29 88 -51) -51]
Test Case: 419 | Input/Output: [(58 2 -78 34) -78]
Test Case: 420 | Input/Output: [(69 -91 71 -78) -91]
Test Case: 421 | Input/Output: [(-5 -97 90 -75) -97]
Test Case: 422 | Input/Output: [(26 -19 -41 -9) -41]
Test Case: 423 | Input/Output: [(-37 -65 99 -58) -65]
Test Case: 424 | Input/Output: [(-5 -41 -67 -42) -67]
Test Case: 425 | Input/Output: [(55 -91 -55 23) -91]
Test Case: 426 | Input/Output: [(-5 80 35 -29) -29]
Test Case: 427 | Input/Output: [(-8 -27 -45 48) -45]
Test Case: 428 | Input/Output: [(67 -4 -47 73) -47]
Test Case: 429 | Input/Output: [(-14 67 29 -96) -96]
Test Case: 430 | Input/Output: [(21 94 57 -78) -78]
Test Case: 431 | Input/Output: [(46 -4 46 -81) -81]
Test Case: 432 | Input/Output: [(67 100 84 29) 29]
Test Case: 433 | Input/Output: [(-69 91 -45 -97) -97]
Test Case: 434 | Input/Output: [(19 -44 54 46) -44]
Test Case: 435 | Input/Output: [(79 43 69 32) 32]
Test Case: 436 | Input/Output: [(-17 -36 67 35) -36]
Test Case: 437 | Input/Output: [(30 80 -53 -47) -53]
Test Case: 438 | Input/Output: [(-78 33 36 -100) -100]
Test Case: 439 | Input/Output: [(88 -54 -12 94) -54]
Test Case: 440 | Input/Output: [(8 -62 10 -90) -90]
Test Case: 441 | Input/Output: [(4 -38 31 -63) -63]
Test Case: 442 | Input/Output: [(-78 89 14 -73) -78]
Test Case: 443 | Input/Output: [(87 -46 63 -76) -76]
Test Case: 444 | Input/Output: [(2 -33 -43 -9) -43]
Test Case: 445 | Input/Output: [(3 -56 24 10) -56]
Test Case: 446 | Input/Output: [(-63 94 49 87) -63]
Test Case: 447 | Input/Output: [(45 90 -19 67) -19]
Test Case: 448 | Input/Output: [(11 -53 -18 12) -53]
Test Case: 449 | Input/Output: [(44 25 34 -54) -54]
Test Case: 450 | Input/Output: [(-95 23 12 91) -95]
Test Case: 451 | Input/Output: [(-9 -27 84 33) -27]
Test Case: 452 | Input/Output: [(76 86 31 69) 31]
Test Case: 453 | Input/Output: [(-38 -21 53 -89) -89]
Test Case: 454 | Input/Output: [(71 -9 62 -46) -46]
Test Case: 455 | Input/Output: [(62 -82 -87 58) -87]
Test Case: 456 | Input/Output: [(-42 84 -18 59) -42]
Test Case: 457 | Input/Output: [(-42 -48 22 -44) -48]
Test Case: 458 | Input/Output: [(-18 34 26 -99) -99]
Test Case: 459 | Input/Output: [(-77 31 -40 38) -77]
Test Case: 460 | Input/Output: [(-37 -37 -51 56) -51]
Test Case: 461 | Input/Output: [(-44 -66 68 -84) -84]
Test Case: 462 | Input/Output: [(37 -66 -56 -1) -66]
Test Case: 463 | Input/Output: [(-55 -81 -65 41) -81]
Test Case: 464 | Input/Output: [(-14 -14 -14 30) -14]
Test Case: 465 | Input/Output: [(39 67 -70 33) -70]
Test Case: 466 | Input/Output: [(16 -25 5 15) -25]
Test Case: 467 | Input/Output: [(-66 70 -47 -8) -66]
Test Case: 468 | Input/Output: [(-72 -39 -68 -3) -72]
Test Case: 469 | Input/Output: [(-45 27 -87 -79) -87]
Test Case: 470 | Input/Output: [(-6 -13 70 89) -13]
Test Case: 471 | Input/Output: [(5 53 -15 34) -15]
Test Case: 472 | Input/Output: [(18 -17 21 -8) -17]
Test Case: 473 | Input/Output: [(-58 -89 -51 -31) -89]
Test Case: 474 | Input/Output: [(28 -52 -75 -39) -75]
Test Case: 475 | Input/Output: [(29 44 -32 -36) -36]
Test Case: 476 | Input/Output: [(50 93 27 -40) -40]
Test Case: 477 | Input/Output: [(-36 46 5 83) -36]
Test Case: 478 | Input/Output: [(-54 -75 80 -94) -94]
Test Case: 479 | Input/Output: [(31 84 -35 -75) -75]
Test Case: 480 | Input/Output: [(-34 87 87 -90) -90]
Test Case: 481 | Input/Output: [(80 -28 -5 3) -28]
Test Case: 482 | Input/Output: [(4 48 -7 -26) -26]
Test Case: 483 | Input/Output: [(58 25 56 -62) -62]
Test Case: 484 | Input/Output: [(-7 60 -27 8) -27]
Test Case: 485 | Input/Output: [(58 -4 -4 -42) -42]
Test Case: 486 | Input/Output: [(93 -60 -12 92) -60]
Test Case: 487 | Input/Output: [(37 69 21 66) 21]
Test Case: 488 | Input/Output: [(-56 69 39 -35) -56]
Test Case: 489 | Input/Output: [(57 -88 -25 -47) -88]
Test Case: 490 | Input/Output: [(72 79 66 87) 66]
Test Case: 491 | Input/Output: [(82 -51 74 32) -51]
Test Case: 492 | Input/Output: [(-65 -35 -70 -34) -70]
Test Case: 493 | Input/Output: [(16 19 -29 16) -29]
Test Case: 494 | Input/Output: [(76 70 -69 93) -69]
Test Case: 495 | Input/Output: [(75 62 -38 -18) -38]
Test Case: 496 | Input/Output: [(-43 24 91 17) -43]
Test Case: 497 | Input/Output: [(92 23 28 -71) -71]
Test Case: 498 | Input/Output: [(95 22 -21 18) -21]
Test Case: 499 | Input/Output: [(28 84 -52 -57) -57]
Test Case: 500 | Input/Output: [(-28 -95 -57 18) -95]
Test Case: 501 | Input/Output: [(45 -79 59 44) -79]
Test Case: 502 | Input/Output: [(-82 99 11 77) -82]
Test Case: 503 | Input/Output: [(-62 -37 47 51) -62]
Test Case: 504 | Input/Output: [(-64 -4 -27 38) -64]
Test Case: 505 | Input/Output: [(89 -22 61 27) -22]
Test Case: 506 | Input/Output: [(94 -36 -26 -84) -84]
Test Case: 507 | Input/Output: [(-98 11 2 6) -98]
Test Case: 508 | Input/Output: [(54 69 -32 -74) -74]
Test Case: 509 | Input/Output: [(-80 -71 88 -37) -80]
Test Case: 510 | Input/Output: [(47 -89 -98 -69) -98]
Test Case: 511 | Input/Output: [(-38 98 -28 -52) -52]
Test Case: 512 | Input/Output: [(-64 87 -59 70) -64]
Test Case: 513 | Input/Output: [(33 -91 -99 -54) -99]
Test Case: 514 | Input/Output: [(-94 52 83 -99) -99]
Test Case: 515 | Input/Output: [(7 50 65 -19) -19]
Test Case: 516 | Input/Output: [(62 -33 -56 73) -56]
Test Case: 517 | Input/Output: [(-49 31 10 43) -49]
Test Case: 518 | Input/Output: [(48 -60 -53 -21) -60]
Test Case: 519 | Input/Output: [(-7 -39 93 98) -39]
Test Case: 520 | Input/Output: [(-57 53 -91 -76) -91]
Test Case: 521 | Input/Output: [(-10 31 -41 -1) -41]
Test Case: 522 | Input/Output: [(-82 43 -29 90) -82]
Test Case: 523 | Input/Output: [(85 17 -31 -82) -82]
Test Case: 524 | Input/Output: [(-15 -48 -47 -75) -75]
Test Case: 525 | Input/Output: [(70 -51 -5 -53) -53]
Test Case: 526 | Input/Output: [(-28 21 58 -3) -28]
Test Case: 527 | Input/Output: [(-71 89 80 -37) -71]
Test Case: 528 | Input/Output: [(100 -67 -21 97) -67]
Test Case: 529 | Input/Output: [(38 -91 51 63) -91]
Test Case: 530 | Input/Output: [(-47 -68 -88 -72) -88]
Test Case: 531 | Input/Output: [(38 -73 -58 -40) -73]
Test Case: 532 | Input/Output: [(-38 -73 -58 37) -73]
Test Case: 533 | Input/Output: [(-45 -98 -42 62) -98]
Test Case: 534 | Input/Output: [(88 11 -21 -90) -90]
Test Case: 535 | Input/Output: [(15 48 91 97) 15]
Test Case: 536 | Input/Output: [(-51 85 93 -6) -51]
Test Case: 537 | Input/Output: [(67 3 26 7) 3]
Test Case: 538 | Input/Output: [(85 12 8 -62) -62]
Test Case: 539 | Input/Output: [(-66 40 -29 32) -66]
Test Case: 540 | Input/Output: [(92 87 -22 -64) -64]
Test Case: 541 | Input/Output: [(35 -76 -73 -45) -76]
Test Case: 542 | Input/Output: [(-48 -31 10 -71) -71]
Test Case: 543 | Input/Output: [(-36 -74 -96 41) -96]
Test Case: 544 | Input/Output: [(-26 54 14 86) -26]
Test Case: 545 | Input/Output: [(63 55 88 -63) -63]
Test Case: 546 | Input/Output: [(-92 57 -85 2) -92]
Test Case: 547 | Input/Output: [(82 -36 -30 43) -36]
Test Case: 548 | Input/Output: [(59 59 8 -33) -33]
Test Case: 549 | Input/Output: [(79 -35 51 3) -35]
Test Case: 550 | Input/Output: [(97 -20 45 -72) -72]
Test Case: 551 | Input/Output: [(49 -11 19 -40) -40]
Test Case: 552 | Input/Output: [(15 83 -83 -92) -92]
Test Case: 553 | Input/Output: [(59 97 -16 94) -16]
Test Case: 554 | Input/Output: [(26 35 18 31) 18]
Test Case: 555 | Input/Output: [(-52 19 -12 88) -52]
Test Case: 556 | Input/Output: [(-80 -97 47 59) -97]
Test Case: 557 | Input/Output: [(82 -19 31 29) -19]
Test Case: 558 | Input/Output: [(-63 77 9 20) -63]
Test Case: 559 | Input/Output: [(-90 -97 36 15) -97]
Test Case: 560 | Input/Output: [(71 -49 23 44) -49]
Test Case: 561 | Input/Output: [(-19 -48 66 65) -48]
Test Case: 562 | Input/Output: [(25 -48 -44 90) -48]
Test Case: 563 | Input/Output: [(77 2 -86 12) -86]
Test Case: 564 | Input/Output: [(-36 19 35 -10) -36]
Test Case: 565 | Input/Output: [(-91 -3 9 54) -91]
Test Case: 566 | Input/Output: [(-41 46 -61 26) -61]
Test Case: 567 | Input/Output: [(90 -96 -90 -5) -96]
Test Case: 568 | Input/Output: [(1 35 69 100) 1]
Test Case: 569 | Input/Output: [(61 -72 -55 -93) -93]
Test Case: 570 | Input/Output: [(-32 49 -3 2) -32]
Test Case: 571 | Input/Output: [(-92 71 -16 -65) -92]
Test Case: 572 | Input/Output: [(79 -85 70 8) -85]
Test Case: 573 | Input/Output: [(26 -22 88 -76) -76]
Test Case: 574 | Input/Output: [(-54 -36 54 56) -54]
Test Case: 575 | Input/Output: [(-4 -84 37 -68) -84]
Test Case: 576 | Input/Output: [(15 76 -82 -84) -84]
Test Case: 577 | Input/Output: [(-94 65 41 46) -94]
Test Case: 578 | Input/Output: [(-87 46 -32 -1) -87]
Test Case: 579 | Input/Output: [(59 54 -33 -49) -49]
Test Case: 580 | Input/Output: [(-75 83 -19 76) -75]
Test Case: 581 | Input/Output: [(-18 -26 55 -1) -26]
Test Case: 582 | Input/Output: [(-93 79 26 15) -93]
Test Case: 583 | Input/Output: [(61 54 14 85) 14]
Test Case: 584 | Input/Output: [(-16 76 -63 -17) -63]
Test Case: 585 | Input/Output: [(4 35 -2 30) -2]
Test Case: 586 | Input/Output: [(49 -7 85 -94) -94]
Test Case: 587 | Input/Output: [(-10 69 87 22) -10]
Test Case: 588 | Input/Output: [(14 87 35 -47) -47]
Test Case: 589 | Input/Output: [(11 1 33 61) 1]
Test Case: 590 | Input/Output: [(46 -60 50 46) -60]
Test Case: 591 | Input/Output: [(-2 -17 35 -50) -50]
Test Case: 592 | Input/Output: [(-11 13 -3 -56) -56]
Test Case: 593 | Input/Output: [(18 90 -70 19) -70]
Test Case: 594 | Input/Output: [(-22 16 61 62) -22]
Test Case: 595 | Input/Output: [(-11 19 -35 11) -35]
Test Case: 596 | Input/Output: [(90 -53 -16 46) -53]
Test Case: 597 | Input/Output: [(0 15 -13 19) -13]
Test Case: 598 | Input/Output: [(95 -7 87 92) -7]
Test Case: 599 | Input/Output: [(-63 -34 59 -65) -65]
Test Case: 600 | Input/Output: [(79 34 -30 94) -30]
Test Case: 601 | Input/Output: [(74 -55 23 -98) -98]
Test Case: 602 | Input/Output: [(96 2 -52 90) -52]
Test Case: 603 | Input/Output: [(-77 48 11 -19) -77]
Test Case: 604 | Input/Output: [(-34 44 -46 70) -46]
Test Case: 605 | Input/Output: [(92 -26 76 -9) -26]
Test Case: 606 | Input/Output: [(60 -90 36 -27) -90]
Test Case: 607 | Input/Output: [(79 -12 -77 62) -77]
Test Case: 608 | Input/Output: [(-56 -37 72 88) -56]
Test Case: 609 | Input/Output: [(-46 -52 -90 31) -90]
Test Case: 610 | Input/Output: [(-48 0 -46 -50) -50]
Test Case: 611 | Input/Output: [(-11 60 -96 63) -96]
Test Case: 612 | Input/Output: [(-47 50 46 14) -47]
Test Case: 613 | Input/Output: [(-14 -23 99 83) -23]
Test Case: 614 | Input/Output: [(-96 3 61 17) -96]
Test Case: 615 | Input/Output: [(-74 3 -70 -2) -74]
Test Case: 616 | Input/Output: [(-29 34 28 -14) -29]
Test Case: 617 | Input/Output: [(76 -69 -38 -40) -69]
Test Case: 618 | Input/Output: [(-22 76 -75 -78) -78]
Test Case: 619 | Input/Output: [(98 -32 38 43) -32]
Test Case: 620 | Input/Output: [(73 99 20 -41) -41]
Test Case: 621 | Input/Output: [(89 100 -42 60) -42]
Test Case: 622 | Input/Output: [(-16 23 43 -55) -55]
Test Case: 623 | Input/Output: [(65 -97 -29 14) -97]
Test Case: 624 | Input/Output: [(-63 -66 -32 -27) -66]
Test Case: 625 | Input/Output: [(34 -76 -8 -6) -76]
Test Case: 626 | Input/Output: [(32 79 10 14) 10]
Test Case: 627 | Input/Output: [(13 -30 -18 -94) -94]
Test Case: 628 | Input/Output: [(-17 18 58 -74) -74]
Test Case: 629 | Input/Output: [(-64 66 -54 71) -64]
Test Case: 630 | Input/Output: [(-37 82 -75 -6) -75]
Test Case: 631 | Input/Output: [(64 -49 13 91) -49]
Test Case: 632 | Input/Output: [(-10 70 25 -98) -98]
Test Case: 633 | Input/Output: [(-27 91 3 -62) -62]
Test Case: 634 | Input/Output: [(67 17 97 -46) -46]
Test Case: 635 | Input/Output: [(8 42 -21 26) -21]
Test Case: 636 | Input/Output: [(34 87 66 93) 34]
Test Case: 637 | Input/Output: [(-74 20 -31 -69) -74]
Test Case: 638 | Input/Output: [(-97 -21 -34 -31) -97]
Test Case: 639 | Input/Output: [(44 43 -78 -22) -78]
Test Case: 640 | Input/Output: [(-75 12 -94 79) -94]
Test Case: 641 | Input/Output: [(-72 -65 -44 -20) -72]
Test Case: 642 | Input/Output: [(10 -38 -2 75) -38]
Test Case: 643 | Input/Output: [(-40 -80 -94 84) -94]
Test Case: 644 | Input/Output: [(8 -73 68 -10) -73]
Test Case: 645 | Input/Output: [(76 45 -28 43) -28]
Test Case: 646 | Input/Output: [(44 7 23 20) 7]
Test Case: 647 | Input/Output: [(81 10 54 3) 3]
Test Case: 648 | Input/Output: [(22 -56 50 -15) -56]
Test Case: 649 | Input/Output: [(38 -25 -79 -45) -79]
Test Case: 650 | Input/Output: [(90 29 -96 -17) -96]
Test Case: 651 | Input/Output: [(-75 63 67 59) -75]
Test Case: 652 | Input/Output: [(-56 30 69 78) -56]
Test Case: 653 | Input/Output: [(-32 60 -28 55) -32]
Test Case: 654 | Input/Output: [(84 33 13 53) 13]
Test Case: 655 | Input/Output: [(29 -48 -17 56) -48]
Test Case: 656 | Input/Output: [(-29 -43 -7 80) -43]
Test Case: 657 | Input/Output: [(-46 59 -42 -99) -99]
Test Case: 658 | Input/Output: [(11 -26 -53 -98) -98]
Test Case: 659 | Input/Output: [(-11 -17 56 86) -17]
Test Case: 660 | Input/Output: [(98 -99 -70 53) -99]
Test Case: 661 | Input/Output: [(-29 -47 11 71) -47]
Test Case: 662 | Input/Output: [(37 -49 -43 18) -49]
Test Case: 663 | Input/Output: [(-12 49 -92 47) -92]
Test Case: 664 | Input/Output: [(82 -72 -91 34) -91]
Test Case: 665 | Input/Output: [(-82 -7 42 3) -82]
Test Case: 666 | Input/Output: [(31 94 -38 -34) -38]
Test Case: 667 | Input/Output: [(-8 96 -89 -43) -89]
Test Case: 668 | Input/Output: [(-38 -13 15 98) -38]
Test Case: 669 | Input/Output: [(-59 -11 -77 62) -77]
Test Case: 670 | Input/Output: [(54 49 -33 54) -33]
Test Case: 671 | Input/Output: [(-49 -88 -51 6) -88]
Test Case: 672 | Input/Output: [(-45 22 -74 60) -74]
Test Case: 673 | Input/Output: [(-82 57 36 -86) -86]
Test Case: 674 | Input/Output: [(-69 59 -44 84) -69]
Test Case: 675 | Input/Output: [(-19 -12 88 13) -19]
Test Case: 676 | Input/Output: [(-7 18 -66 -27) -66]
Test Case: 677 | Input/Output: [(-39 -42 59 -91) -91]
Test Case: 678 | Input/Output: [(-60 16 -78 -91) -91]
Test Case: 679 | Input/Output: [(-99 -56 16 4) -99]
Test Case: 680 | Input/Output: [(-42 -10 -66 36) -66]
Test Case: 681 | Input/Output: [(-87 99 -81 -61) -87]
Test Case: 682 | Input/Output: [(-76 -96 57 -30) -96]
Test Case: 683 | Input/Output: [(30 72 19 69) 19]
Test Case: 684 | Input/Output: [(-82 -81 -36 1) -82]
Test Case: 685 | Input/Output: [(-15 42 -93 50) -93]
Test Case: 686 | Input/Output: [(77 11 -84 10) -84]
Test Case: 687 | Input/Output: [(10 40 12 -37) -37]
Test Case: 688 | Input/Output: [(8 -51 -13 63) -51]
Test Case: 689 | Input/Output: [(54 33 -96 91) -96]
Test Case: 690 | Input/Output: [(-78 -16 14 76) -78]
Test Case: 691 | Input/Output: [(-1 71 67 33) -1]
Test Case: 692 | Input/Output: [(5 18 6 -29) -29]
Test Case: 693 | Input/Output: [(-9 -1 -58 34) -58]
Test Case: 694 | Input/Output: [(-95 -94 28 -84) -95]
Test Case: 695 | Input/Output: [(43 4 -88 40) -88]
Test Case: 696 | Input/Output: [(17 17 83 -42) -42]
Test Case: 697 | Input/Output: [(2 -81 20 -67) -81]
Test Case: 698 | Input/Output: [(31 -88 -31 -11) -88]
Test Case: 699 | Input/Output: [(2 -67 99 -89) -89]
Test Case: 700 | Input/Output: [(44 -48 -63 35) -63]
Test Case: 701 | Input/Output: [(96 74 -52 -58) -58]
Test Case: 702 | Input/Output: [(63 -34 21 -46) -46]
Test Case: 703 | Input/Output: [(61 -42 -75 -55) -75]
Test Case: 704 | Input/Output: [(30 -98 54 -28) -98]
Test Case: 705 | Input/Output: [(36 -36 64 19) -36]
Test Case: 706 | Input/Output: [(-48 -35 -93 20) -93]
Test Case: 707 | Input/Output: [(63 32 76 -81) -81]
Test Case: 708 | Input/Output: [(79 0 9 52) 0]
Test Case: 709 | Input/Output: [(-61 98 2 -18) -61]
Test Case: 710 | Input/Output: [(-92 41 48 -13) -92]
Test Case: 711 | Input/Output: [(-73 -72 -38 -97) -97]
Test Case: 712 | Input/Output: [(87 70 64 -43) -43]
Test Case: 713 | Input/Output: [(-90 59 -10 69) -90]
Test Case: 714 | Input/Output: [(-100 -97 -85 30) -100]
Test Case: 715 | Input/Output: [(1 75 -9 13) -9]
Test Case: 716 | Input/Output: [(44 -82 -27 33) -82]
Test Case: 717 | Input/Output: [(86 -56 7 84) -56]
Test Case: 718 | Input/Output: [(3 44 0 54) 0]
Test Case: 719 | Input/Output: [(-92 47 -20 -76) -92]
Test Case: 720 | Input/Output: [(95 27 15 -45) -45]
Test Case: 721 | Input/Output: [(-20 -85 -21 56) -85]
Test Case: 722 | Input/Output: [(80 35 -94 -91) -94]
Test Case: 723 | Input/Output: [(50 49 64 10) 10]
Test Case: 724 | Input/Output: [(52 -32 -78 -64) -78]
Test Case: 725 | Input/Output: [(62 100 47 3) 3]
Test Case: 726 | Input/Output: [(14 44 59 -78) -78]
Test Case: 727 | Input/Output: [(-25 -49 35 -58) -58]
Test Case: 728 | Input/Output: [(-67 45 76 45) -67]
Test Case: 729 | Input/Output: [(-31 -63 14 -54) -63]
Test Case: 730 | Input/Output: [(-7 96 94 5) -7]
Test Case: 731 | Input/Output: [(-75 77 20 -41) -75]
Test Case: 732 | Input/Output: [(91 8 57 -86) -86]
Test Case: 733 | Input/Output: [(-4 90 19 30) -4]
Test Case: 734 | Input/Output: [(72 92 83 76) 72]
Test Case: 735 | Input/Output: [(43 46 73 18) 18]
Test Case: 736 | Input/Output: [(98 -12 -84 87) -84]
Test Case: 737 | Input/Output: [(27 48 73 -32) -32]
Test Case: 738 | Input/Output: [(25 -70 90 -82) -82]
Test Case: 739 | Input/Output: [(-62 34 92 -25) -62]
Test Case: 740 | Input/Output: [(97 95 83 5) 5]
Test Case: 741 | Input/Output: [(85 -44 5 50) -44]
Test Case: 742 | Input/Output: [(1 -6 -73 -85) -85]
Test Case: 743 | Input/Output: [(-86 76 14 -31) -86]
Test Case: 744 | Input/Output: [(45 78 3 -90) -90]
Test Case: 745 | Input/Output: [(-96 16 66 44) -96]
Test Case: 746 | Input/Output: [(41 10 23 -61) -61]
Test Case: 747 | Input/Output: [(26 -66 -72 95) -72]
Test Case: 748 | Input/Output: [(49 49 -31 -84) -84]
Test Case: 749 | Input/Output: [(-61 -14 -10 4) -61]
Test Case: 750 | Input/Output: [(89 43 7 67) 7]
Test Case: 751 | Input/Output: [(-23 80 -36 54) -36]
Test Case: 752 | Input/Output: [(-18 92 16 52) -18]
Test Case: 753 | Input/Output: [(-80 62 -50 47) -80]
Test Case: 754 | Input/Output: [(12 -3 7 79) -3]
Test Case: 755 | Input/Output: [(89 69 79 65) 65]
Test Case: 756 | Input/Output: [(42 -44 -6 -59) -59]
Test Case: 757 | Input/Output: [(90 -13 -4 -58) -58]
Test Case: 758 | Input/Output: [(-77 24 4 63) -77]
Test Case: 759 | Input/Output: [(-27 -30 -39 89) -39]
Test Case: 760 | Input/Output: [(33 -54 5 -48) -54]
Test Case: 761 | Input/Output: [(92 57 -51 -88) -88]
Test Case: 762 | Input/Output: [(90 37 65 -86) -86]
Test Case: 763 | Input/Output: [(-61 -41 61 -21) -61]
Test Case: 764 | Input/Output: [(-60 -56 -10 93) -60]
Test Case: 765 | Input/Output: [(78 -51 20 39) -51]
Test Case: 766 | Input/Output: [(53 -15 -49 -50) -50]
Test Case: 767 | Input/Output: [(94 -71 49 -78) -78]
Test Case: 768 | Input/Output: [(35 49 -33 -73) -73]
Test Case: 769 | Input/Output: [(25 18 -12 7) -12]
Test Case: 770 | Input/Output: [(75 -89 46 -32) -89]
Test Case: 771 | Input/Output: [(70 57 -53 -94) -94]
Test Case: 772 | Input/Output: [(-55 50 -59 12) -59]
Test Case: 773 | Input/Output: [(81 80 -29 -99) -99]
Test Case: 774 | Input/Output: [(30 52 -50 -96) -96]
Test Case: 775 | Input/Output: [(-54 -15 -98 39) -98]
Test Case: 776 | Input/Output: [(58 100 33 -16) -16]
Test Case: 777 | Input/Output: [(48 78 99 51) 48]
Test Case: 778 | Input/Output: [(34 99 -75 -26) -75]
Test Case: 779 | Input/Output: [(61 -57 -7 98) -57]
Test Case: 780 | Input/Output: [(46 44 51 -29) -29]
Test Case: 781 | Input/Output: [(-30 75 -40 87) -40]
Test Case: 782 | Input/Output: [(-45 -22 67 -46) -46]
Test Case: 783 | Input/Output: [(53 -10 -93 -51) -93]
Test Case: 784 | Input/Output: [(14 8 27 99) 8]
Test Case: 785 | Input/Output: [(-77 54 87 -73) -77]
Test Case: 786 | Input/Output: [(-33 32 96 -56) -56]
Test Case: 787 | Input/Output: [(-20 80 47 -55) -55]
Test Case: 788 | Input/Output: [(41 -88 -19 -87) -88]
Test Case: 789 | Input/Output: [(-54 67 -7 29) -54]
Test Case: 790 | Input/Output: [(33 70 -13 -100) -100]
Test Case: 791 | Input/Output: [(71 59 97 1) 1]
Test Case: 792 | Input/Output: [(-23 -35 -55 69) -55]
Test Case: 793 | Input/Output: [(1 -12 -5 14) -12]
Test Case: 794 | Input/Output: [(63 55 -56 -77) -77]
Test Case: 795 | Input/Output: [(-61 80 -58 -27) -61]
Test Case: 796 | Input/Output: [(85 -48 2 -67) -67]
Test Case: 797 | Input/Output: [(-22 70 -11 -30) -30]
Test Case: 798 | Input/Output: [(-70 -1 40 -34) -70]
Test Case: 799 | Input/Output: [(-38 -55 -22 -87) -87]
Test Case: 800 | Input/Output: [(94 -90 0 -27) -90]
Test Case: 801 | Input/Output: [(50 -41 -65 74) -65]
Test Case: 802 | Input/Output: [(24 -77 -18 80) -77]
Test Case: 803 | Input/Output: [(-62 -54 85 -65) -65]
Test Case: 804 | Input/Output: [(69 75 86 -95) -95]
Test Case: 805 | Input/Output: [(93 -6 66 -26) -26]
Test Case: 806 | Input/Output: [(-3 49 52 47) -3]
Test Case: 807 | Input/Output: [(-23 -61 -77 -85) -85]
Test Case: 808 | Input/Output: [(-47 75 -75 25) -75]
Test Case: 809 | Input/Output: [(-52 -66 13 -71) -71]
Test Case: 810 | Input/Output: [(-18 -62 -65 39) -65]
Test Case: 811 | Input/Output: [(-39 19 -70 -31) -70]
Test Case: 812 | Input/Output: [(76 -20 -35 -26) -35]
Test Case: 813 | Input/Output: [(67 87 46 18) 18]
Test Case: 814 | Input/Output: [(99 -9 54 78) -9]
Test Case: 815 | Input/Output: [(69 1 33 24) 1]
Test Case: 816 | Input/Output: [(1 61 24 56) 1]
Test Case: 817 | Input/Output: [(-70 -30 47 -57) -70]
Test Case: 818 | Input/Output: [(-44 -2 75 21) -44]
Test Case: 819 | Input/Output: [(34 -24 5 -3) -24]
Test Case: 820 | Input/Output: [(62 -3 11 -48) -48]
Test Case: 821 | Input/Output: [(-60 75 81 -50) -60]
Test Case: 822 | Input/Output: [(-64 69 -12 81) -64]
Test Case: 823 | Input/Output: [(8 5 -51 -100) -100]
Test Case: 824 | Input/Output: [(-61 88 -73 10) -73]
Test Case: 825 | Input/Output: [(-22 -38 46 -95) -95]
Test Case: 826 | Input/Output: [(-2 98 100 -8) -8]
Test Case: 827 | Input/Output: [(1 -55 27 -74) -74]
Test Case: 828 | Input/Output: [(34 -15 0 -17) -17]
Test Case: 829 | Input/Output: [(22 47 17 -54) -54]
Test Case: 830 | Input/Output: [(66 -97 -30 61) -97]
Test Case: 831 | Input/Output: [(6 66 61 -56) -56]
Test Case: 832 | Input/Output: [(75 59 -71 -22) -71]
Test Case: 833 | Input/Output: [(-12 -64 -79 -83) -83]
Test Case: 834 | Input/Output: [(-74 -73 53 -52) -74]
Test Case: 835 | Input/Output: [(-7 -86 39 -77) -86]
Test Case: 836 | Input/Output: [(-86 -98 -85 32) -98]
Test Case: 837 | Input/Output: [(-24 98 23 1) -24]
Test Case: 838 | Input/Output: [(-60 83 98 -37) -60]
Test Case: 839 | Input/Output: [(42 -9 -94 30) -94]
Test Case: 840 | Input/Output: [(13 -75 55 -80) -80]
Test Case: 841 | Input/Output: [(61 13 -70 -27) -70]
Test Case: 842 | Input/Output: [(-44 84 47 -16) -44]
Test Case: 843 | Input/Output: [(-97 -23 40 40) -97]
Test Case: 844 | Input/Output: [(18 51 43 65) 18]
Test Case: 845 | Input/Output: [(25 -92 -81 -88) -92]
Test Case: 846 | Input/Output: [(-69 14 38 -60) -69]
Test Case: 847 | Input/Output: [(37 44 38 2) 2]
Test Case: 848 | Input/Output: [(-13 68 22 -95) -95]
Test Case: 849 | Input/Output: [(-50 53 -17 6) -50]
Test Case: 850 | Input/Output: [(66 -41 -50 -69) -69]
Test Case: 851 | Input/Output: [(-90 69 -29 -31) -90]
Test Case: 852 | Input/Output: [(-13 32 -21 -25) -25]
Test Case: 853 | Input/Output: [(-74 82 80 -25) -74]
Test Case: 854 | Input/Output: [(23 -84 56 -43) -84]
Test Case: 855 | Input/Output: [(28 -18 90 -75) -75]
Test Case: 856 | Input/Output: [(3 22 -18 -69) -69]
Test Case: 857 | Input/Output: [(92 79 83 25) 25]
Test Case: 858 | Input/Output: [(51 -83 52 -87) -87]
Test Case: 859 | Input/Output: [(79 71 -88 -72) -88]
Test Case: 860 | Input/Output: [(-50 5 49 -80) -80]
Test Case: 861 | Input/Output: [(44 -74 -82 -62) -82]
Test Case: 862 | Input/Output: [(59 -66 -43 43) -66]
Test Case: 863 | Input/Output: [(-53 -25 13 93) -53]
Test Case: 864 | Input/Output: [(69 -75 -15 -92) -92]
Test Case: 865 | Input/Output: [(-34 40 94 -68) -68]
Test Case: 866 | Input/Output: [(-14 -5 10 95) -14]
Test Case: 867 | Input/Output: [(-61 -28 18 -11) -61]
Test Case: 868 | Input/Output: [(86 -44 9 -19) -44]
Test Case: 869 | Input/Output: [(-97 -51 41 81) -97]
Test Case: 870 | Input/Output: [(89 89 84 78) 78]
Test Case: 871 | Input/Output: [(87 -51 67 -34) -51]
Test Case: 872 | Input/Output: [(96 15 -20 51) -20]
Test Case: 873 | Input/Output: [(-29 -47 15 -50) -50]
Test Case: 874 | Input/Output: [(51 -66 6 -37) -66]
Test Case: 875 | Input/Output: [(64 8 42 -74) -74]
Test Case: 876 | Input/Output: [(-46 -91 88 52) -91]
Test Case: 877 | Input/Output: [(12 -28 24 -93) -93]
Test Case: 878 | Input/Output: [(-66 70 37 -32) -66]
Test Case: 879 | Input/Output: [(58 -71 -34 -53) -71]
Test Case: 880 | Input/Output: [(56 20 38 -88) -88]
Test Case: 881 | Input/Output: [(43 93 -78 10) -78]
Test Case: 882 | Input/Output: [(29 -39 24 33) -39]
Test Case: 883 | Input/Output: [(47 4 78 28) 4]
Test Case: 884 | Input/Output: [(-21 21 56 -60) -60]
Test Case: 885 | Input/Output: [(-33 65 90 -7) -33]
Test Case: 886 | Input/Output: [(88 31 12 -8) -8]
Test Case: 887 | Input/Output: [(-20 81 18 76) -20]
Test Case: 888 | Input/Output: [(96 58 97 -95) -95]
Test Case: 889 | Input/Output: [(-81 18 63 -92) -92]
Test Case: 890 | Input/Output: [(-21 -63 24 -85) -85]
Test Case: 891 | Input/Output: [(48 -2 -29 -26) -29]
Test Case: 892 | Input/Output: [(-39 26 25 44) -39]
Test Case: 893 | Input/Output: [(-8 84 33 0) -8]
Test Case: 894 | Input/Output: [(-73 -21 32 -27) -73]
Test Case: 895 | Input/Output: [(-80 -12 -56 -82) -82]
Test Case: 896 | Input/Output: [(4 -49 -53 -27) -53]
Test Case: 897 | Input/Output: [(-55 -64 -51 19) -64]
Test Case: 898 | Input/Output: [(-17 86 -34 62) -34]
Test Case: 899 | Input/Output: [(2 44 52 -82) -82]
Test Case: 900 | Input/Output: [(-15 -76 8 98) -76]
Test Case: 901 | Input/Output: [(-25 59 -91 -95) -95]
Test Case: 902 | Input/Output: [(65 -75 -79 -61) -79]
Test Case: 903 | Input/Output: [(-97 20 93 33) -97]
Test Case: 904 | Input/Output: [(1 36 28 -72) -72]
Test Case: 905 | Input/Output: [(24 -80 30 6) -80]
Test Case: 906 | Input/Output: [(-82 -4 15 -88) -88]
Test Case: 907 | Input/Output: [(-99 -78 -64 -92) -99]
Test Case: 908 | Input/Output: [(82 23 28 -28) -28]
Test Case: 909 | Input/Output: [(68 57 -28 -18) -28]
Test Case: 910 | Input/Output: [(-27 86 40 4) -27]
Test Case: 911 | Input/Output: [(21 47 -4 61) -4]
Test Case: 912 | Input/Output: [(52 10 16 -40) -40]
Test Case: 913 | Input/Output: [(48 79 30 -43) -43]
Test Case: 914 | Input/Output: [(76 40 -77 -6) -77]
Test Case: 915 | Input/Output: [(-91 -78 -29 -81) -91]
Test Case: 916 | Input/Output: [(-23 -6 64 71) -23]
Test Case: 917 | Input/Output: [(66 29 -97 -52) -97]
Test Case: 918 | Input/Output: [(-90 78 -2 -57) -90]
Test Case: 919 | Input/Output: [(-76 -80 -50 88) -80]
Test Case: 920 | Input/Output: [(95 -93 8 -97) -97]
Test Case: 921 | Input/Output: [(61 -52 18 -85) -85]
Test Case: 922 | Input/Output: [(-83 -72 -70 71) -83]
Test Case: 923 | Input/Output: [(3 68 63 18) 3]
Test Case: 924 | Input/Output: [(29 -29 -15 -90) -90]
Test Case: 925 | Input/Output: [(-40 -89 63 -93) -93]
Test Case: 926 | Input/Output: [(25 -20 -88 96) -88]
Test Case: 927 | Input/Output: [(-53 -29 -2 -9) -53]
Test Case: 928 | Input/Output: [(27 -73 38 -69) -73]
Test Case: 929 | Input/Output: [(10 59 -87 -86) -87]
Test Case: 930 | Input/Output: [(54 -67 46 91) -67]
Test Case: 931 | Input/Output: [(6 57 47 -68) -68]
Test Case: 932 | Input/Output: [(-66 -90 -72 60) -90]
Test Case: 933 | Input/Output: [(-97 -5 84 46) -97]
Test Case: 934 | Input/Output: [(-5 -88 36 78) -88]
Test Case: 935 | Input/Output: [(70 -46 98 95) -46]
Test Case: 936 | Input/Output: [(64 -9 80 55) -9]
Test Case: 937 | Input/Output: [(-44 18 36 3) -44]
Test Case: 938 | Input/Output: [(-46 25 44 66) -46]
Test Case: 939 | Input/Output: [(-92 -2 -22 -79) -92]
Test Case: 940 | Input/Output: [(-49 13 72 55) -49]
Test Case: 941 | Input/Output: [(81 50 8 60) 8]
Test Case: 942 | Input/Output: [(-38 98 96 -56) -56]
Test Case: 943 | Input/Output: [(-18 41 54 1) -18]
Test Case: 944 | Input/Output: [(-93 -26 100 -5) -93]
Test Case: 945 | Input/Output: [(-33 61 -37 16) -37]
Test Case: 946 | Input/Output: [(-87 18 77 -26) -87]
Test Case: 947 | Input/Output: [(-9 -72 -32 -36) -72]
Test Case: 948 | Input/Output: [(63 -70 86 10) -70]
Test Case: 949 | Input/Output: [(22 -56 -88 68) -88]
Test Case: 950 | Input/Output: [(-6 72 -38 -65) -65]
Test Case: 951 | Input/Output: [(-14 -84 54 95) -84]
Test Case: 952 | Input/Output: [(100 -34 -90 30) -90]
Test Case: 953 | Input/Output: [(80 24 0 25) 0]
Test Case: 954 | Input/Output: [(-78 87 -15 30) -78]
Test Case: 955 | Input/Output: [(84 81 53 97) 53]
Test Case: 956 | Input/Output: [(-2 14 77 65) -2]
Test Case: 957 | Input/Output: [(-13 -44 34 -85) -85]
Test Case: 958 | Input/Output: [(-85 -85 68 30) -85]
Test Case: 959 | Input/Output: [(84 74 87 -90) -90]
Test Case: 960 | Input/Output: [(-88 -62 -71 -36) -88]
Test Case: 961 | Input/Output: [(28 29 9 68) 9]
Test Case: 962 | Input/Output: [(59 95 -71 -99) -99]
Test Case: 963 | Input/Output: [(-47 -22 -9 -26) -47]
Test Case: 964 | Input/Output: [(-2 -45 64 -44) -45]
Test Case: 965 | Input/Output: [(-44 -79 -53 -92) -92]
Test Case: 966 | Input/Output: [(85 4 -27 55) -27]
Test Case: 967 | Input/Output: [(-12 -42 12 51) -42]
Test Case: 968 | Input/Output: [(85 -19 47 66) -19]
Test Case: 969 | Input/Output: [(-79 1 99 14) -79]
Test Case: 970 | Input/Output: [(-61 90 -41 -49) -61]
Test Case: 971 | Input/Output: [(28 -82 58 -7) -82]
Test Case: 972 | Input/Output: [(30 58 -99 56) -99]
Test Case: 973 | Input/Output: [(-100 100 69 -34) -100]
Test Case: 974 | Input/Output: [(26 90 -80 6) -80]
Test Case: 975 | Input/Output: [(-29 40 6 91) -29]
Test Case: 976 | Input/Output: [(-7 -16 -75 36) -75]
Test Case: 977 | Input/Output: [(44 -48 -40 -19) -48]
Test Case: 978 | Input/Output: [(57 54 -10 -5) -10]
Test Case: 979 | Input/Output: [(28 81 -93 74) -93]
Test Case: 980 | Input/Output: [(86 54 -91 94) -91]
Test Case: 981 | Input/Output: [(25 -41 89 81) -41]
Test Case: 982 | Input/Output: [(-58 -65 29 -12) -65]
Test Case: 983 | Input/Output: [(50 90 56 -29) -29]
Test Case: 984 | Input/Output: [(-9 -7 -49 56) -49]
Test Case: 985 | Input/Output: [(-42 83 -40 -54) -54]
Test Case: 986 | Input/Output: [(45 26 -95 -7) -95]
Test Case: 987 | Input/Output: [(-49 -78 99 -78) -78]
Test Case: 988 | Input/Output: [(9 34 -3 85) -3]
Test Case: 989 | Input/Output: [(-61 -47 6 75) -61]
Test Case: 990 | Input/Output: [(30 87 -9 -5) -9]
Test Case: 991 | Input/Output: [(-61 -71 -100 -63) -100]
Test Case: 992 | Input/Output: [(-52 -43 64 -57) -57]
Test Case: 993 | Input/Output: [(90 -24 -98 100) -98]
Test Case: 994 | Input/Output: [(62 76 -87 -10) -87]
Test Case: 995 | Input/Output: [(75 -88 8 -18) -88]
Test Case: 996 | Input/Output: [(23 71 48 10) 10]
Test Case: 997 | Input/Output: [(-97 32 49 -46) -97]
Test Case: 998 | Input/Output: [(89 94 -68 -8) -68]
Test Case: 999 | Input/Output: [(88 -31 -57 35) -57]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 7 126 20 -70 34 26 95 52 47 43 -92 8 29 -69 -117 -76
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-81 -81 -99 -81] -99] [[31 21 21 21] 21] [[16 -48 16 16] -48] [[75 -82 -82 -82] -82] [[78 -17 78 78] -17] [[68 68 91 68] 68] [[29 29 49 29] 29] [[-55 -55 -55 -14] -55] [[-27 -9 -9 -9] -27] [[41 -53 41 41] -53] [(3 3 3 3) 3] [(49 49 49 49) 49] [(24 24 24 24) 24] [(-40 -40 -40 -40) -40] [(-32 -32 -32 -32) -32] [(28 66 49 23) 23] [(100 80 15 10) 10] [(90 70 13 16) 13] [(27 2 27 29) 2] [(9 59 61 52) 9] [(6 69 31 23) 6] [(9 51 52 33) 9] [(0 46 79 58) 0] [(72 19 34 62) 19] [(36 41 70 52) 36] [(45 13 32 66) 13] [(74 32 61 19) 19] [(70 51 78 64) 51] [(68 11 83 79) 11] [(4 31 37 49) 4] [(11 68 24 51) 11] [(95 50 68 55) 50] [(36 26 13 2) 2] [(24 63 72 96) 24] [(7 54 60 65) 7] [(-6 -68 -80 -16) -80] [(16 45 -67 37) -67] [(-4 -12 -72 -76) -76] [(-55 100 53 -69) -69] [(99 -87 -77 38) -87] [(45 95 73 39) 39] [(-93 -44 99 -33) -93] [(65 -8 -29 30) -29] [(-92 -17 -34 82) -92] [(86 79 -89 -90) -90] [(-64 87 -7 -59) -64] [(44 -95 52 -18) -95] [(-24 60 28 -50) -50] [(52 94 17 -48) -48] [(28 -47 -19 51) -47] [(-32 -78 -5 -4) -78] [(-9 -49 2 -16) -49] [(69 75 -73 19) -73] [(-11 3 42 28) -11] [(44 -100 -43 16) -100] [(19 35 -70 80) -70] [(31 -35 -28 60) -35] [(24 99 5 -45) -45] [(-64 -50 29 -24) -64] [(-39 3 93 78) -39] [(44 -79 25 -9) -79] [(53 42 62 -87) -87] [(-31 -7 91 -45) -45] [(47 -73 95 -3) -73] [(57 14 18 -48) -48] [(-26 43 -28 -25) -28] [(-19 -94 40 -7) -94] [(-39 -62 78 8) -62] [(-64 -88 88 -7) -88] [(33 -12 84 -33) -33] [(90 -55 -26 24) -55] [(-35 55 25 -63) -63] [(-96 -41 -29 -75) -96] [(46 -44 56 -35) -44] [(-22 82 33 5) -22] [(57 91 -79 -10) -79] [(-81 41 83 -92) -92] [(-24 -4 82 -71) -71] [(85 100 15 -59) -59] [(-71 85 54 -12) -71] [(49 -66 77 -78) -78] [(55 -52 -71 99) -71] [(-95 -87 37 -60) -95] [(40 73 -71 16) -71] [(-59 64 38 39) -59] [(47 43 14 -69) -69] [(-19 -32 -51 67) -51] [(-85 -92 -96 -42) -96] [(-88 72 -56 -94) -94] [(22 -3 1 95) -3] [(-87 7 -65 92) -87] [(-51 -61 39 100) -61] [(29 13 14 -27) -27] [(97 -3 28 -36) -36] [(41 46 71 90) 41])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 605
Test mean error for best: 0.60500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -14                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 29                 
Correct output: 9                   | Program output: 52                 
Correct output: 6                   | Program output: 23                 
Correct output: 9                   | Program output: 33                 
Correct output: 0                   | Program output: 58                 
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 52                 
Correct output: 13                  | Program output: 66                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 79                 
Correct output: 4                   | Program output: 49                 
Correct output: 11                  | Program output: 51                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 96                 
Correct output: 7                   | Program output: 65                 
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 37                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: 82                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -59                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 51                 
Correct output: -78                 | Program output: -4                 
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: 28                 
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 80                 
Correct output: -35                 | Program output: 60                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -24                
Correct output: -39                 | Program output: 78                 
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -25                
Correct output: -94                 | Program output: -7                 
Correct output: -62                 | Program output: 8                  
Correct output: -88                 | Program output: -7                 
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -75                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: 5                  
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -12                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 99                 
Correct output: -95                 | Program output: -60                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: 39                 
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: 67                 
Correct output: -96                 | Program output: -42                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 95                 
Correct output: -87                 | Program output: 92                 
Correct output: -61                 | Program output: 100                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 90                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_168} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_eq integer_div print_newline integer_flush boolean_rot integer_gte integer_empty in4 exec_swap (integer_swap) (print_integer exec_k_when_autoconstructing (exec_empty boolean_or) (exec_if () (integer_swap tagged_168 boolean_frominteger exec_shove (boolean_stackdepth in2 boolean_flush exec_while (boolean_flush integer_eq exec_do*range (in1 print_newline boolean_or) boolean_flush) print_boolean exec_yank integer_swap boolean_dup)) integer_div exec_s_when_autoconstructing (integer_dec) (integer_div) (boolean_and boolean_swap boolean_dup_times boolean_stackdepth boolean_swap) integer_eq boolean_xor boolean_invert_second_then_and exec_dup_times (integer_dup_items))))
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_168} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_eq integer_div print_newline integer_flush boolean_rot integer_gte integer_empty in4 exec_swap (integer_swap) (print_integer exec_k_when_autoconstructing (exec_empty boolean_or) (exec_if () (integer_swap tagged_168 boolean_frominteger exec_shove (boolean_stackdepth in2 boolean_flush exec_while (boolean_flush integer_eq exec_do*range (in1 print_newline boolean_or) boolean_flush) print_boolean exec_yank integer_swap boolean_dup)) integer_div exec_s_when_autoconstructing (integer_dec) (integer_div) (boolean_and boolean_swap boolean_dup_times boolean_stackdepth boolean_swap) integer_eq boolean_xor boolean_invert_second_then_and exec_dup_times (integer_dup_items))))
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1000 2 2 1000 4 3 1 1000 4)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (2 0 2 2 0 4 3 1 0 4)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_eq} {:close 0, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_empty} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction tagged_168} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 2, :instruction boolean_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_dec} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items})
Best program: (exec_eq integer_div print_newline integer_flush boolean_rot integer_gte integer_empty in4 exec_swap (integer_swap) (print_integer exec_k_when_autoconstructing (exec_empty boolean_or) (exec_if () (integer_swap tagged_168 boolean_frominteger exec_shove (boolean_stackdepth in2 boolean_flush exec_while (boolean_flush integer_eq exec_do*range (in1 print_newline boolean_or) boolean_flush) print_boolean exec_yank integer_swap boolean_dup)) integer_div exec_s_when_autoconstructing (integer_dec) (integer_div) (boolean_and boolean_swap boolean_dup_times boolean_stackdepth boolean_swap) integer_eq boolean_xor boolean_invert_second_then_and exec_dup_times (integer_dup_items))))
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 62
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 9.982
Median total errors in population: 10
Error averages by case: (0.998 1.0 0.998 0.998 1.0 0.996 0.997 0.999 1.0 0.996)
Error minima by case: (0 1 0 0 1 0 0 0 1 0)
Average genome size in population (length): 49.841
Average program size in population (points): 68.336
Average percent parens in population: 0.276
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 459240
--- Timings ---
Current time: 1559582809468 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.5%
Reproduction:         0.8 seconds, 29.3%
Fitness Testing:      1.7 seconds, 66.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 671
Test mean error for best: 0.67100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 66                 
Correct output: 10                  | Program output: 80                 
Correct output: 13                  | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 69                 
Correct output: 9                   | Program output: 51                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 32                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 68                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 26                 
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -68                
Correct output: -67                 | Program output: 45                 
Correct output: -76                 | Program output: -12                
Correct output: -69                 | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 95                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -8                 
Correct output: -92                 | Program output: -17                
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: 87                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 60                 
Correct output: -48                 | Program output: 94                 
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: 75                 
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: 35                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 99                 
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 42                 
Correct output: -45                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 14                 
Correct output: -28                 | Program output: 43                 
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: 55                 
Correct output: -96                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 82                 
Correct output: -79                 | Program output: 91                 
Correct output: -92                 | Program output: 41                 
Correct output: -71                 | Program output: -4                 
Correct output: -59                 | Program output: 100                
Correct output: -71                 | Program output: 85                 
Correct output: -78                 | Program output: -66                
Correct output: -71                 | Program output: -52                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: 73                 
Correct output: -59                 | Program output: 64                 
Correct output: -69                 | Program output: 43                 
Correct output: -51                 | Program output: -32                
Correct output: -96                 | Program output: -92                
Correct output: -94                 | Program output: 72                 
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: 7                  
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: 13                 
Correct output: -36                 | Program output: -3                 
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_243} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction -44} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq})
Lexicase best program: (boolean_eq in2 integer_mult integer_lt print_integer integer_min integer_yankdup boolean_shove boolean_xor integer_dec in2 integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth integer_gt boolean_empty integer_fromboolean boolean_eq integer_gt boolean_or integer_gt exec_while ()) (exec_rot (tag_integer_243 exec_when (exec_yankdup exec_pop (exec_dup_times (integer_empty integer_gt -44 in2 exec_dup_items boolean_stackdepth integer_inc boolean_yank integer_div boolean_eq)))) () ())))
Lexicase best errors: [0 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 2, :instruction exec_while} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_243} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction -44} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_eq})
Zero cases best program: (boolean_eq in2 integer_mult integer_lt print_integer integer_min integer_yankdup boolean_shove boolean_xor integer_dec in2 integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth integer_gt boolean_empty integer_fromboolean boolean_eq integer_gt boolean_or integer_gt exec_while ()) (exec_rot (tag_integer_243 exec_when (exec_yankdup exec_pop (exec_dup_times (integer_empty integer_gt -44 in2 exec_dup_items boolean_stackdepth integer_inc boolean_yank integer_div boolean_eq)))) () ())))
Zero cases best errors: [0 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 102 136 229 138 102 856 1000 1000 100)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (136 102 136 229 138 102 856 0 0 100)
Population mean number of perfect (error zero) cases: 1.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 2, :instruction integer_lt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Best program: (boolean_eq in2 integer_mult integer_lt print_integer integer_min integer_yankdup boolean_shove boolean_xor integer_dec in2 integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () boolean_stackdepth exec_yank integer_mod in3) (print_boolean) integer_min) ()))
Errors: [0 0 0 1 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 8.201
Median total errors in population: 9
Error averages by case: (0.864 0.898 0.864 0.771 0.862 0.898 0.144 1.0 1.0 0.9)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 52.605
Average program size in population (points): 68.781
Average percent parens in population: 0.228
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 868085
--- Timings ---
Current time: 1559582812605 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.3 seconds, 45.0%
Fitness Testing:      2.2 seconds, 43.5%
Report:               0.5 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 49                 
Correct output: 10                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 31                 
Correct output: 9                   | Program output: 51                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 32                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 13                 
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -72                
Correct output: -69                 | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 73                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -89                
Correct output: -64                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 28                 
Correct output: -48                 | Program output: 17                 
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 5                  
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 42                 
Correct output: -45                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: 25                 
Correct output: -96                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 41                 
Correct output: -71                 | Program output: -4                 
Correct output: -59                 | Program output: 15                 
Correct output: -71                 | Program output: 54                 
Correct output: -78                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: 14                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -56                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: 13                 
Correct output: -36                 | Program output: -3                 
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 1000 720 1000 735 125 1000 735 735)
Population mean number of elite cases: 7.05
Count of perfect (error zero) individuals by case: (1 0 0 720 0 735 125 0 735 735)
Population mean number of perfect (error zero) cases: 3.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.949
Median total errors in population: 6
Error averages by case: (0.999 1.0 1.0 0.28 1.0 0.265 0.875 1.0 0.265 0.265)
Error minima by case: (0 1 1 0 1 0 0 1 0 0)
Average genome size in population (length): 60.424
Average program size in population (points): 82.325
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.985
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1725649
--- Timings ---
Current time: 1559582816722 milliseconds
Total Time:           9.3 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 49.0%
Fitness Testing:      3.1 seconds, 33.2%
Report:               1.5 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 49                 
Correct output: 10                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 31                 
Correct output: 9                   | Program output: 51                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 32                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 13                 
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -72                
Correct output: -69                 | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 73                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -89                
Correct output: -64                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 28                 
Correct output: -48                 | Program output: 17                 
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 5                  
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 42                 
Correct output: -45                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: 25                 
Correct output: -96                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 41                 
Correct output: -71                 | Program output: -4                 
Correct output: -59                 | Program output: 15                 
Correct output: -71                 | Program output: 54                 
Correct output: -78                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: 14                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -56                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: 13                 
Correct output: -36                 | Program output: -3                 
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1000 2 108 3 716 691 715 686 691)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (2 0 2 108 3 716 691 715 686 691)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Errors: [1 1 1 1 1 0 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 6.386
Median total errors in population: 5
Error averages by case: (0.998 1.0 0.998 0.892 0.997 0.284 0.309 0.285 0.314 0.309)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.26
Average program size in population (points): 65.451
Average percent parens in population: 0.291
Minimum age in population: 4.5
Maximum age in population: 6.0
Average age in population: 5.419
Median age in population: 5.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 424
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 425
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2993526
--- Timings ---
Current time: 1559582820851 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.5 seconds, 48.6%
Fitness Testing:      4.3 seconds, 31.7%
Report:               2.5 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 49                 
Correct output: 10                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 31                 
Correct output: 9                   | Program output: 51                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 32                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 13                 
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -72                
Correct output: -69                 | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 73                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -89                
Correct output: -64                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 28                 
Correct output: -48                 | Program output: 17                 
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 5                  
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 42                 
Correct output: -45                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: 25                 
Correct output: -96                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 41                 
Correct output: -71                 | Program output: -4                 
Correct output: -59                 | Program output: 15                 
Correct output: -71                 | Program output: 54                 
Correct output: -78                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: 14                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -56                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: 13                 
Correct output: -36                 | Program output: -3                 
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 59
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 59
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (494 804 470 248 475 475 804 474 456 3)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (494 804 470 248 475 475 804 474 456 3)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 1, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.297
Median total errors in population: 7
Error averages by case: (0.506 0.196 0.53 0.752 0.525 0.525 0.196 0.526 0.544 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.038
Average program size in population (points): 77.257
Average percent parens in population: 0.298
Minimum age in population: 5.5
Maximum age in population: 8.0
Average age in population: 6.637875
Median age in population: 6.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4093527
--- Timings ---
Current time: 1559582824596 milliseconds
Total Time:          17.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.3 seconds, 48.5%
Fitness Testing:      5.2 seconds, 30.5%
Report:               3.5 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 49                 
Correct output: 10                  | Program output: 15                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 59                 
Correct output: 6                   | Program output: 31                 
Correct output: 9                   | Program output: 51                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 32                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 13                 
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -72                
Correct output: -69                 | Program output: 53                 
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 73                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -89                
Correct output: -64                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: 28                 
Correct output: -48                 | Program output: 17                 
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: 5                  
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: 42                 
Correct output: -45                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 14                 
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -12                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: 25                 
Correct output: -96                 | Program output: -41                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 33                 
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: 41                 
Correct output: -71                 | Program output: -4                 
Correct output: -59                 | Program output: 15                 
Correct output: -71                 | Program output: 54                 
Correct output: -78                 | Program output: -66                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: 14                 
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -56                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: 13                 
Correct output: -36                 | Program output: -3                 
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer integer_add boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) (in2) integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ())) ())
Lexicase best errors: [1 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer integer_add boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) (in2) integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ())) ())
Zero cases best errors: [1 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 97 774 804 575 97 96 574 553 799)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (122 97 774 804 575 97 96 574 553 799)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_dec} {:close 1, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_k} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_min})
Best program: (boolean_eq in2 integer_mult exec_k (in3 integer_min exec_k_when_autoconstructing (exec_swap (boolean_dup_items in3) (print_integer exec_dup_times (boolean_pop) boolean_not integer_gt boolean_shove boolean_xor integer_dec) in2) (integer_gt boolean_frominteger exec_do*count (exec_empty integer_yankdup boolean_yankdup integer_gt integer_dup) exec_y (boolean_pop exec_rot (integer_dup_items) (integer_stackdepth exec_k (exec_pop () boolean_frominteger exec_dup_times () integer_rot exec_yank integer_mod in3) (print_boolean) integer_min) ()))) ())
Errors: [1 1 0 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 5.509
Median total errors in population: 4
Error averages by case: (0.878 0.903 0.226 0.196 0.425 0.903 0.904 0.426 0.447 0.201)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.733
Average program size in population (points): 71.977
Average percent parens in population: 0.293
Minimum age in population: 6.5
Maximum age in population: 9.75
Average age in population: 8.1495625
Median age in population: 8.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5127114
--- Timings ---
Current time: 1559582828422 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.3 seconds, 48.8%
Fitness Testing:      6.2 seconds, 29.3%
Report:               4.5 seconds, 21.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 656
Test mean error for best: 0.65600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 31                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: 75                 
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 28                 
Correct output: 10                  | Program output: 100                
Correct output: 13                  | Program output: 90                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 72                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 74                 
Correct output: 51                  | Program output: 70                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 95                 
Correct output: 2                   | Program output: 36                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -6                 
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -4                 
Correct output: -69                 | Program output: -55                
Correct output: -87                 | Program output: 99                 
Correct output: 39                  | Program output: 45                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 65                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: 86                 
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: 44                 
Correct output: -50                 | Program output: -24                
Correct output: -48                 | Program output: 52                 
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -9                 
Correct output: -73                 | Program output: 69                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 44                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: 24                 
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: 44                 
Correct output: -87                 | Program output: 53                 
Correct output: -45                 | Program output: -31                
Correct output: -73                 | Program output: 47                 
Correct output: -48                 | Program output: 57                 
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: 33                 
Correct output: -55                 | Program output: 90                 
Correct output: -63                 | Program output: -35                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: 46                 
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: 57                 
Correct output: -92                 | Program output: -81                
Correct output: -71                 | Program output: -24                
Correct output: -59                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: 49                 
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 40                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: 47                 
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -88                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: 29                 
Correct output: -36                 | Program output: 97                 
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_add) (boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_mod boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop) boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items) exec_do*range (boolean_invert_second_then_and integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items exec_pop () integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in1) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (integer_sub exec_when () exec_s_when_autoconstructing (exec_stackdepth integer_yank print_integer exec_when () exec_s_when_autoconstructing (exec_do*times (integer_yank integer_min exec_eq boolean_and in1) integer_yankdup) (print_integer exec_when () exec_s_when_autoconstructing (exec_do*times (integer_yank print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor)))) () ()) ()) () ()))) ()))
Lexicase best errors: [0 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 124
Percent parens: 0.331
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_add) (boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_mod boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop) boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items) exec_do*range (boolean_invert_second_then_and integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items exec_pop () integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in1) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (integer_sub exec_when () exec_s_when_autoconstructing (exec_stackdepth integer_yank print_integer exec_when () exec_s_when_autoconstructing (exec_do*times (integer_yank integer_min exec_eq boolean_and in1) integer_yankdup) (print_integer exec_when () exec_s_when_autoconstructing (exec_do*times (integer_yank print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor)))) () ()) ()) () ()))) ()))
Zero cases best errors: [0 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 124
Percent parens: 0.331
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 105 106 802 105 311 310 313 105 108)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (105 105 106 802 105 311 310 313 105 108)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (integer_add) boolean_swap) boolean_pop integer_add integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_mod boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items exec_do*range (boolean_invert_second_then_and integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) integer_inc exec_dup_items boolean_invert_second_then_and) (integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in1) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (integer_sub exec_when () exec_s_when_autoconstructing (exec_stackdepth integer_yank print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) () ()))) ())))
Errors: [0 0 0 0 0 1 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 99
Percent parens: 0.303
--- Population Statistics ---
Average total errors in population: 7.63
Median total errors in population: 9
Error averages by case: (0.895 0.895 0.894 0.198 0.895 0.689 0.69 0.687 0.895 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.867
Average program size in population (points): 79.508
Average percent parens in population: 0.296
Minimum age in population: 7.5
Maximum age in population: 11.5
Average age in population: 9.496
Median age in population: 9.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.777
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6009958
--- Timings ---
Current time: 1559582831726 milliseconds
Total Time:          24.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.2 seconds, 49.3%
Fitness Testing:      7.0 seconds, 28.2%
Report:               5.4 seconds, 22.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 269 495 489 1000 1000 1000 296 495 1000)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (295 269 495 489 0 0 0 296 495 0)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 7.661
Median total errors in population: 7
Error averages by case: (0.705 0.731 0.505 0.511 1.0 1.0 1.0 0.704 0.505 1.0)
Error minima by case: (0 0 0 0 1 1 1 0 0 1)
Average genome size in population (length): 68.074
Average program size in population (points): 97.422
Average percent parens in population: 0.301
Minimum age in population: 8.5
Maximum age in population: 12.6875
Average age in population: 10.868203125
Median age in population: 10.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6737183
--- Timings ---
Current time: 1559582834930 milliseconds
Total Time:          27.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.2 seconds, 50.8%
Fitness Testing:      7.6 seconds, 27.2%
Report:               6.0 seconds, 21.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 390
Test mean error for best: 0.39000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 52                 
Correct output: 6                   | Program output: 23                 
Correct output: 9                   | Program output: 33                 
Correct output: 0                   | Program output: 58                 
Correct output: 19                  | Program output: 34                 
Correct output: 36                  | Program output: 52                 
Correct output: 13                  | Program output: 32                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 79                 
Correct output: 4                   | Program output: 37                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 72                 
Correct output: 7                   | Program output: 60                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -77                
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -33                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -59                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -19                
Correct output: -78                 | Program output: -5                 
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 28                 
Correct output: -100                | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -28                
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -24                
Correct output: -39                 | Program output: 78                 
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -7                 
Correct output: -62                 | Program output: 8                  
Correct output: -88                 | Program output: -7                 
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -75                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -12                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -60                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 1                  
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: 39                 
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 71                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (783 762 762 1000 1 1 1000 762 1 763)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (783 762 762 0 1 1 0 762 1 763)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 70
Size: 99
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 6.165
Median total errors in population: 5
Error averages by case: (0.217 0.238 0.238 1.0 0.999 0.999 1.0 0.238 0.999 0.237)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 69.895
Average program size in population (points): 98.863
Average percent parens in population: 0.293
Minimum age in population: 11.875
Maximum age in population: 12.875
Average age in population: 12.377
Median age in population: 12.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 317
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 319
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7456834
--- Timings ---
Current time: 1559582838520 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 52.6%
Fitness Testing:      8.2 seconds, 26.1%
Report:               6.6 seconds, 20.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (integer_flush exec_yankdup boolean_xor)) ()))))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (integer_flush exec_yankdup boolean_xor)) ()))))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (759 1000 757 756 1000 181 180 760 1000 1000)
Population mean number of elite cases: 7.39
Count of perfect (error zero) individuals by case: (759 0 757 756 0 181 180 760 0 0)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_add exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Errors: [0 1 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 6.607
Median total errors in population: 6
Error averages by case: (0.241 1.0 0.243 0.244 1.0 0.819 0.82 0.24 1.0 1.0)
Error minima by case: (0 1 0 0 1 0 0 0 1 1)
Average genome size in population (length): 70.119
Average program size in population (points): 99.14
Average percent parens in population: 0.293
Minimum age in population: 12.875
Maximum age in population: 14.875
Average age in population: 13.478
Median age in population: 13.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 273
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8177286
--- Timings ---
Current time: 1559582841431 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 53.1%
Fitness Testing:      8.9 seconds, 25.8%
Report:               7.2 seconds, 20.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth integer_add exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop integer_yankdup exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer integer_mod integer_lt) () integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth integer_add exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop integer_yankdup exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer integer_mod integer_lt) () integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 773 793 822 800 1000 822 1000 1000)
Population mean number of elite cases: 9.01
Count of perfect (error zero) individuals by case: (0 0 773 793 822 800 0 822 0 0)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (integer_max exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq exec_flush) (exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor)))) ())))
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 110
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.99
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.227 0.207 0.178 0.2 1.0 0.178 1.0 1.0)
Error minima by case: (1 1 0 0 0 0 1 0 1 1)
Average genome size in population (length): 70.648
Average program size in population (points): 99.81
Average percent parens in population: 0.292
Minimum age in population: 13.875
Maximum age in population: 16.875
Average age in population: 15.1955
Median age in population: 15.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8910204
--- Timings ---
Current time: 1559582844492 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.1 seconds, 53.6%
Fitness Testing:      9.5 seconds, 25.4%
Report:               7.7 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (integer_max exec_s_when_autoconstructing () (integer_max boolean_frominteger exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup integer_max integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () boolean_flush exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) (print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))))))
Lexicase best errors: [1 1 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 97
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (integer_max exec_s_when_autoconstructing () (integer_max boolean_frominteger exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup integer_max integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () boolean_flush exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) (print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))))))
Zero cases best errors: [1 1 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 97
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 764 772 822 1000 822 785 734)
Population mean number of elite cases: 5.70
Count of perfect (error zero) individuals by case: (1 1 1 764 772 822 0 822 785 734)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_pop print_boolean print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Errors: [1 1 1 0 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 71
Size: 100
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.298
Median total errors in population: 4
Error averages by case: (0.999 0.999 0.999 0.236 0.228 0.178 1.0 0.178 0.215 0.266)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 70.49
Average program size in population (points): 99.493
Average percent parens in population: 0.291
Minimum age in population: 14.875
Maximum age in population: 18.375
Average age in population: 16.658125
Median age in population: 16.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9634920
--- Timings ---
Current time: 1559582847413 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 53.9%
Fitness Testing:     10.1 seconds, 25.1%
Report:               8.4 seconds, 20.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 392
Test mean error for best: 0.39200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: 16                 
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: 78                 
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: 41                 
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 27                 
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 62                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 45                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 64                 
Correct output: 11                  | Program output: 68                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -16                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: 38                 
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -18                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: 28                 
Correct output: -78                 | Program output: -32                
Correct output: -49                 | Program output: -16                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: 16                 
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: 31                 
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -9                 
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -3                 
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -19                
Correct output: -62                 | Program output: -39                
Correct output: -88                 | Program output: -64                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: 24                 
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -35                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: 55                 
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -19                
Correct output: -96                 | Program output: -85                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -51                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod boolean_shove exec_dup_items boolean_invert_second_then_and) exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))))))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod boolean_shove exec_dup_items boolean_invert_second_then_and) exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))))))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (839 1000 444 388 407 535 404 1000 464 1000)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (839 0 444 388 407 535 404 0 464 0)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_dup_items) print_integer exec_when (integer_lt)) (integer_inc exec_dup_items boolean_invert_second_then_and) integer_lte boolean_yankdup boolean_not exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min exec_eq boolean_and exec_noop exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) (print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))))
Errors: [0 1 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 73
Size: 103
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.519
Median total errors in population: 8
Error averages by case: (0.161 1.0 0.556 0.612 0.593 0.465 0.596 1.0 0.536 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 71.42
Average program size in population (points): 100.557
Average percent parens in population: 0.290
Minimum age in population: 15.875
Maximum age in population: 20.0
Average age in population: 18.0360625
Median age in population: 18.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10453561
--- Timings ---
Current time: 1559582850481 milliseconds
Total Time:          43.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.5 seconds, 54.2%
Fitness Testing:     10.8 seconds, 25.0%
Report:               9.0 seconds, 20.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -81                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -27                
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 16                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 9                  
Correct output: 6                   | Program output: 6                  
Correct output: 9                   | Program output: 9                  
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 4                  
Correct output: 11                  | Program output: 11                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: -80                 | Program output: -68                
Correct output: -67                 | Program output: 16                 
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -93                
Correct output: -29                 | Program output: -8                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: 19                 
Correct output: -11                 | Program output: -11                
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: 19                 
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -64                
Correct output: -39                 | Program output: -39                
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -26                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -96                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: -22                
Correct output: -79                 | Program output: -10                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -52                
Correct output: -95                 | Program output: -95                
Correct output: -71                 | Program output: 16                 
Correct output: -59                 | Program output: -59                
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -32                
Correct output: -96                 | Program output: -92                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_rot exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (integer_min exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 101
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_rot exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (integer_min exec_rot (integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 101
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (814 1 770 770 775 771 7 798 7 791)
Population mean number of elite cases: 5.50
Count of perfect (error zero) individuals by case: (814 1 770 770 775 771 7 798 7 791)
Population mean number of perfect (error zero) cases: 5.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) (integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in1) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ()))))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 73
Size: 102
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 4.496
Median total errors in population: 3
Error averages by case: (0.186 0.999 0.23 0.23 0.225 0.229 0.993 0.202 0.993 0.209)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 70.405
Average program size in population (points): 99.394
Average percent parens in population: 0.291
Minimum age in population: 17.25
Maximum age in population: 21.6875
Average age in population: 19.68615625
Median age in population: 19.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 5
Genome diversity (% unique genomes):	 0.878
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.878
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11177495
--- Timings ---
Current time: 1559582853548 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.4 seconds, 54.5%
Fitness Testing:     11.5 seconds, 24.7%
Report:               9.5 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 52                 
Correct output: 6                   | Program output: 23                 
Correct output: 9                   | Program output: 33                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -12                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Lexicase best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 117
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Zero cases best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 117
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (795 707 580 706 710 580 794 666 162 162)
Population mean number of elite cases: 5.86
Count of perfect (error zero) individuals by case: (795 707 580 706 710 580 794 666 162 162)
Population mean number of perfect (error zero) cases: 5.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_inc} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tag_boolean_36} {:close 1, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_when} {:close 2, :instruction integer_lt} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in2} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 2, :instruction in4} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 1, :instruction in1} {:close 1, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_xor})
Best program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 84
Size: 117
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 4.138
Median total errors in population: 2
Error averages by case: (0.205 0.293 0.42 0.294 0.29 0.42 0.206 0.334 0.838 0.838)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.61
Average program size in population (points): 100.662
Average percent parens in population: 0.289
Minimum age in population: 21.03125
Maximum age in population: 22.28125
Average age in population: 21.6666875
Median age in population: 22.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.01
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11931357
--- Timings ---
Current time: 1559582856647 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 54.7%
Fitness Testing:     12.2 seconds, 24.6%
Report:              10.1 seconds, 20.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 117


Auto-simplifying with starting size: 117
step: 0
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 500
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 1000
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 1500
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 2000
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 2500
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 3000
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 3500
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 4000
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 4500
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

step: 5000
program: (exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) integer_max boolean_yankdup exec_y_when_autoconstructing (exec_s_when_autoconstructing () (integer_max boolean_yankdup exec_yank integer_gte print_boolean integer_inc) (boolean_xor) boolean_swap) boolean_pop integer_add) integer_fromboolean boolean_stackdepth tag_boolean_36 exec_s () (boolean_invert_first_then_and) (integer_gt boolean_stackdepth integer_inc) integer_pop exec_do*while (exec_noop boolean_invert_first_then_and exec_k_when_autoconstructing (exec_do*range (boolean_dup_items boolean_frominteger exec_eq integer_mod print_integer integer_mod print_integer integer_dup_items) boolean_eq exec_when (integer_lt)) (integer_inc exec_dup_items in2) integer_lte boolean_yankdup boolean_dup exec_s () (exec_if (integer_mult exec_pop (integer_lte exec_yankdup print_boolean exec_flush) exec_noop in4) () exec_do*while (exec_noop exec_rot (integer_min integer_min exec_eq boolean_and in1) (integer_yankdup) (in3) integer_yankdup) print_integer exec_do*while (exec_dup (exec_yankdup boolean_xor))) ())) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 117

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 198
Test mean error for best: 0.19800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 1
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 1
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 1
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -99                 | Program output: -99                
Correct output: 21                  | Program output: 21                 
Correct output: -48                 | Program output: -48                
Correct output: -82                 | Program output: -82                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 29                  | Program output: 29                 
Correct output: -55                 | Program output: -55                
Correct output: -27                 | Program output: -9                 
Correct output: -53                 | Program output: -53                
Correct output: 3                   | Program output: 3                  
Correct output: 49                  | Program output: 49                 
Correct output: 24                  | Program output: 24                 
Correct output: -40                 | Program output: -40                
Correct output: -32                 | Program output: -32                
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 52                 
Correct output: 6                   | Program output: 23                 
Correct output: 9                   | Program output: 33                 
Correct output: 0                   | Program output: 46                 
Correct output: 19                  | Program output: 19                 
Correct output: 36                  | Program output: 41                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 11                  | Program output: 11                 
Correct output: 4                   | Program output: 31                 
Correct output: 11                  | Program output: 24                 
Correct output: 50                  | Program output: 50                 
Correct output: 2                   | Program output: 2                  
Correct output: 24                  | Program output: 63                 
Correct output: 7                   | Program output: 54                 
Correct output: -80                 | Program output: -80                
Correct output: -67                 | Program output: -67                
Correct output: -76                 | Program output: -76                
Correct output: -69                 | Program output: -69                
Correct output: -87                 | Program output: -87                
Correct output: 39                  | Program output: 39                 
Correct output: -93                 | Program output: -44                
Correct output: -29                 | Program output: -29                
Correct output: -92                 | Program output: -34                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -59                
Correct output: -95                 | Program output: -95                
Correct output: -50                 | Program output: -50                
Correct output: -48                 | Program output: -48                
Correct output: -47                 | Program output: -47                
Correct output: -78                 | Program output: -78                
Correct output: -49                 | Program output: -49                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: 3                  
Correct output: -100                | Program output: -100               
Correct output: -70                 | Program output: -70                
Correct output: -35                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -64                 | Program output: -50                
Correct output: -39                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -87                 | Program output: -87                
Correct output: -45                 | Program output: -45                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -28                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -88                 | Program output: -88                
Correct output: -33                 | Program output: -33                
Correct output: -55                 | Program output: -55                
Correct output: -63                 | Program output: -63                
Correct output: -96                 | Program output: -75                
Correct output: -44                 | Program output: -44                
Correct output: -22                 | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -92                 | Program output: -92                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: -59                
Correct output: -71                 | Program output: -12                
Correct output: -78                 | Program output: -78                
Correct output: -71                 | Program output: -71                
Correct output: -95                 | Program output: -87                
Correct output: -71                 | Program output: -71                
Correct output: -59                 | Program output: 38                 
Correct output: -69                 | Program output: -69                
Correct output: -51                 | Program output: -51                
Correct output: -96                 | Program output: -96                
Correct output: -94                 | Program output: -94                
Correct output: -3                  | Program output: -3                 
Correct output: -87                 | Program output: -65                
Correct output: -61                 | Program output: -61                
Correct output: -27                 | Program output: -27                
Correct output: -36                 | Program output: -36                
Correct output: 41                  | Program output: 46                 
;;******************************
