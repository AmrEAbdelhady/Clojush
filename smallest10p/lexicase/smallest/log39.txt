Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-71 -6 -6 -6] -71] [[69 17 69 69] 17] [[92 92 92 -46] -46] [[-23 19 19 19] -23] [[57 51 51 51] 51] [[13 13 13 95] 13] [[4 4 88 4] 4] [[29 -13 29 29] -13] [[-16 -16 -16 75] -16] [[57 57 57 78] 57] [(76 76 76 76) 76] [(84 84 84 84) 84] [(-91 -91 -91 -91) -91] [(19 19 19 19) 19] [(-85 -85 -85 -85) -85] [(44 63 96 42) 42] [(96 49 9 48) 9] [(34 12 94 87) 12] [(17 64 53 59) 17] [(70 78 62 50) 50] [(38 39 8 3) 3] [(87 63 38 55) 38] [(53 34 65 100) 34] [(61 97 25 49) 25] [(14 45 12 92) 12] [(61 50 46 23) 23] [(57 22 67 55) 22] [(51 60 17 59) 17] [(18 71 87 16) 16] [(92 22 72 70) 22] [(61 88 30 57) 30] [(18 86 63 83) 18] [(47 58 63 99) 47] [(44 83 51 32) 32] [(25 51 21 49) 21] [(43 88 -22 99) -22] [(-37 25 -12 -43) -43] [(98 59 -97 32) -97] [(-89 0 39 -83) -89] [(94 -88 29 -93) -93] [(99 -39 4 18) -39] [(55 23 92 -19) -19] [(16 2 23 -31) -31] [(-37 -50 -26 56) -50] [(-57 -98 8 54) -98] [(-39 45 2 -75) -75] [(-52 43 47 -75) -75] [(93 -64 -34 -63) -64] [(72 88 -22 -54) -54] [(39 4 36 -50) -50] [(69 30 -94 66) -94] [(-60 49 -56 85) -60] [(49 -81 11 -45) -81] [(-75 -93 -57 -47) -93] [(8 -39 62 -15) -39] [(48 -97 -32 -41) -97] [(19 7 60 4) 4] [(-11 -10 0 -76) -76] [(88 60 46 58) 46] [(-61 74 68 -89) -89] [(62 -23 -93 93) -93] [(73 -83 60 -50) -83] [(-76 -58 -77 -59) -77] [(-33 18 36 22) -33] [(-47 -61 61 -17) -61] [(-75 -21 -95 -6) -95] [(18 23 -83 -5) -83] [(87 64 -13 -85) -85] [(0 -88 -70 31) -88] [(81 -15 -25 -88) -88] [(-87 99 -88 -85) -88] [(-18 59 12 -13) -18] [(-17 -32 86 63) -32] [(28 74 -97 -13) -97] [(-23 51 86 21) -23] [(-25 -87 -51 85) -87] [(73 -69 -31 -36) -69] [(-48 -85 -1 3) -85] [(68 86 -53 28) -53] [(-40 -81 -87 -56) -87] [(73 58 -29 34) -29] [(64 -48 -35 -18) -48] [(-14 61 -31 70) -31] [(5 51 -82 81) -82] [(76 -34 99 -35) -35] [(70 37 -50 -23) -50] [(81 9 6 -79) -79] [(-51 35 -60 94) -60] [(-90 8 -13 -78) -90] [(-65 -81 74 7) -81] [(-40 30 56 -79) -79] [(-69 -90 3 -51) -90] [(6 -14 -68 -3) -68] [(-30 -61 -9 -90) -90] [(68 25 -95 -92) -95])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-71 -6 -6 -6] -71]
Train Case:   6 | Input/Output: [[69 17 69 69] 17]
Train Case:   7 | Input/Output: [[92 92 92 -46] -46]
Train Case:   8 | Input/Output: [[-23 19 19 19] -23]
Train Case:   9 | Input/Output: [[57 51 51 51] 51]
Train Case:  10 | Input/Output: [[13 13 13 95] 13]
Train Case:  11 | Input/Output: [[4 4 88 4] 4]
Train Case:  12 | Input/Output: [[29 -13 29 29] -13]
Train Case:  13 | Input/Output: [[-16 -16 -16 75] -16]
Train Case:  14 | Input/Output: [[57 57 57 78] 57]
Train Case:  15 | Input/Output: [(76 76 76 76) 76]
Train Case:  16 | Input/Output: [(84 84 84 84) 84]
Train Case:  17 | Input/Output: [(-91 -91 -91 -91) -91]
Train Case:  18 | Input/Output: [(19 19 19 19) 19]
Train Case:  19 | Input/Output: [(-85 -85 -85 -85) -85]
Train Case:  20 | Input/Output: [(44 63 96 42) 42]
Train Case:  21 | Input/Output: [(96 49 9 48) 9]
Train Case:  22 | Input/Output: [(34 12 94 87) 12]
Train Case:  23 | Input/Output: [(17 64 53 59) 17]
Train Case:  24 | Input/Output: [(70 78 62 50) 50]
Train Case:  25 | Input/Output: [(38 39 8 3) 3]
Train Case:  26 | Input/Output: [(87 63 38 55) 38]
Train Case:  27 | Input/Output: [(53 34 65 100) 34]
Train Case:  28 | Input/Output: [(61 97 25 49) 25]
Train Case:  29 | Input/Output: [(14 45 12 92) 12]
Train Case:  30 | Input/Output: [(61 50 46 23) 23]
Train Case:  31 | Input/Output: [(57 22 67 55) 22]
Train Case:  32 | Input/Output: [(51 60 17 59) 17]
Train Case:  33 | Input/Output: [(18 71 87 16) 16]
Train Case:  34 | Input/Output: [(92 22 72 70) 22]
Train Case:  35 | Input/Output: [(61 88 30 57) 30]
Train Case:  36 | Input/Output: [(18 86 63 83) 18]
Train Case:  37 | Input/Output: [(47 58 63 99) 47]
Train Case:  38 | Input/Output: [(44 83 51 32) 32]
Train Case:  39 | Input/Output: [(25 51 21 49) 21]
Train Case:  40 | Input/Output: [(43 88 -22 99) -22]
Train Case:  41 | Input/Output: [(-37 25 -12 -43) -43]
Train Case:  42 | Input/Output: [(98 59 -97 32) -97]
Train Case:  43 | Input/Output: [(-89 0 39 -83) -89]
Train Case:  44 | Input/Output: [(94 -88 29 -93) -93]
Train Case:  45 | Input/Output: [(99 -39 4 18) -39]
Train Case:  46 | Input/Output: [(55 23 92 -19) -19]
Train Case:  47 | Input/Output: [(16 2 23 -31) -31]
Train Case:  48 | Input/Output: [(-37 -50 -26 56) -50]
Train Case:  49 | Input/Output: [(-57 -98 8 54) -98]
Train Case:  50 | Input/Output: [(-39 45 2 -75) -75]
Train Case:  51 | Input/Output: [(-52 43 47 -75) -75]
Train Case:  52 | Input/Output: [(93 -64 -34 -63) -64]
Train Case:  53 | Input/Output: [(72 88 -22 -54) -54]
Train Case:  54 | Input/Output: [(39 4 36 -50) -50]
Train Case:  55 | Input/Output: [(69 30 -94 66) -94]
Train Case:  56 | Input/Output: [(-60 49 -56 85) -60]
Train Case:  57 | Input/Output: [(49 -81 11 -45) -81]
Train Case:  58 | Input/Output: [(-75 -93 -57 -47) -93]
Train Case:  59 | Input/Output: [(8 -39 62 -15) -39]
Train Case:  60 | Input/Output: [(48 -97 -32 -41) -97]
Train Case:  61 | Input/Output: [(19 7 60 4) 4]
Train Case:  62 | Input/Output: [(-11 -10 0 -76) -76]
Train Case:  63 | Input/Output: [(88 60 46 58) 46]
Train Case:  64 | Input/Output: [(-61 74 68 -89) -89]
Train Case:  65 | Input/Output: [(62 -23 -93 93) -93]
Train Case:  66 | Input/Output: [(73 -83 60 -50) -83]
Train Case:  67 | Input/Output: [(-76 -58 -77 -59) -77]
Train Case:  68 | Input/Output: [(-33 18 36 22) -33]
Train Case:  69 | Input/Output: [(-47 -61 61 -17) -61]
Train Case:  70 | Input/Output: [(-75 -21 -95 -6) -95]
Train Case:  71 | Input/Output: [(18 23 -83 -5) -83]
Train Case:  72 | Input/Output: [(87 64 -13 -85) -85]
Train Case:  73 | Input/Output: [(0 -88 -70 31) -88]
Train Case:  74 | Input/Output: [(81 -15 -25 -88) -88]
Train Case:  75 | Input/Output: [(-87 99 -88 -85) -88]
Train Case:  76 | Input/Output: [(-18 59 12 -13) -18]
Train Case:  77 | Input/Output: [(-17 -32 86 63) -32]
Train Case:  78 | Input/Output: [(28 74 -97 -13) -97]
Train Case:  79 | Input/Output: [(-23 51 86 21) -23]
Train Case:  80 | Input/Output: [(-25 -87 -51 85) -87]
Train Case:  81 | Input/Output: [(73 -69 -31 -36) -69]
Train Case:  82 | Input/Output: [(-48 -85 -1 3) -85]
Train Case:  83 | Input/Output: [(68 86 -53 28) -53]
Train Case:  84 | Input/Output: [(-40 -81 -87 -56) -87]
Train Case:  85 | Input/Output: [(73 58 -29 34) -29]
Train Case:  86 | Input/Output: [(64 -48 -35 -18) -48]
Train Case:  87 | Input/Output: [(-14 61 -31 70) -31]
Train Case:  88 | Input/Output: [(5 51 -82 81) -82]
Train Case:  89 | Input/Output: [(76 -34 99 -35) -35]
Train Case:  90 | Input/Output: [(70 37 -50 -23) -50]
Train Case:  91 | Input/Output: [(81 9 6 -79) -79]
Train Case:  92 | Input/Output: [(-51 35 -60 94) -60]
Train Case:  93 | Input/Output: [(-90 8 -13 -78) -90]
Train Case:  94 | Input/Output: [(-65 -81 74 7) -81]
Train Case:  95 | Input/Output: [(-40 30 56 -79) -79]
Train Case:  96 | Input/Output: [(-69 -90 3 -51) -90]
Train Case:  97 | Input/Output: [(6 -14 -68 -3) -68]
Train Case:  98 | Input/Output: [(-30 -61 -9 -90) -90]
Train Case:  99 | Input/Output: [(68 25 -95 -92) -95]
Test Case:   0 | Input/Output: [[56 56 56 57] 56]
Test Case:   1 | Input/Output: [[87 74 87 87] 74]
Test Case:   2 | Input/Output: [[-1 -88 -1 -1] -88]
Test Case:   3 | Input/Output: [[-58 27 -58 -58] -58]
Test Case:   4 | Input/Output: [[-52 79 -52 -52] -52]
Test Case:   5 | Input/Output: [[-53 -53 -53 -47] -53]
Test Case:   6 | Input/Output: [[12 12 14 12] 12]
Test Case:   7 | Input/Output: [[-96 83 -96 -96] -96]
Test Case:   8 | Input/Output: [[-34 -34 -34 26] -34]
Test Case:   9 | Input/Output: [[-28 49 49 49] -28]
Test Case:  10 | Input/Output: [[-40 56 -40 -40] -40]
Test Case:  11 | Input/Output: [[-83 -90 -90 -90] -90]
Test Case:  12 | Input/Output: [[-12 -12 -20 -12] -20]
Test Case:  13 | Input/Output: [[-75 77 77 77] -75]
Test Case:  14 | Input/Output: [[80 80 -53 80] -53]
Test Case:  15 | Input/Output: [[34 -76 34 34] -76]
Test Case:  16 | Input/Output: [[70 75 75 75] 70]
Test Case:  17 | Input/Output: [[-81 -81 -81 19] -81]
Test Case:  18 | Input/Output: [[-23 -23 -23 19] -23]
Test Case:  19 | Input/Output: [[41 41 99 41] 41]
Test Case:  20 | Input/Output: [[36 -60 -60 -60] -60]
Test Case:  21 | Input/Output: [[-32 97 97 97] -32]
Test Case:  22 | Input/Output: [[-39 -39 -39 -40] -40]
Test Case:  23 | Input/Output: [[52 0 52 52] 0]
Test Case:  24 | Input/Output: [[49 39 39 39] 39]
Test Case:  25 | Input/Output: [[-65 -65 66 -65] -65]
Test Case:  26 | Input/Output: [[46 59 59 59] 46]
Test Case:  27 | Input/Output: [[-98 -63 -63 -63] -98]
Test Case:  28 | Input/Output: [[-8 -8 -70 -8] -70]
Test Case:  29 | Input/Output: [[-100 -100 98 -100] -100]
Test Case:  30 | Input/Output: [[-65 70 -65 -65] -65]
Test Case:  31 | Input/Output: [[-12 -12 -12 62] -12]
Test Case:  32 | Input/Output: [[67 51 51 51] 51]
Test Case:  33 | Input/Output: [[-55 76 -55 -55] -55]
Test Case:  34 | Input/Output: [[29 29 -69 29] -69]
Test Case:  35 | Input/Output: [[12 73 12 12] 12]
Test Case:  36 | Input/Output: [[-4 -4 -4 31] -4]
Test Case:  37 | Input/Output: [[92 3 92 92] 3]
Test Case:  38 | Input/Output: [[-24 -61 -61 -61] -61]
Test Case:  39 | Input/Output: [[-62 57 57 57] -62]
Test Case:  40 | Input/Output: [[-73 -73 -73 -29] -73]
Test Case:  41 | Input/Output: [[69 69 69 -14] -14]
Test Case:  42 | Input/Output: [[-99 -99 -99 36] -99]
Test Case:  43 | Input/Output: [[-74 -71 -71 -71] -74]
Test Case:  44 | Input/Output: [[-69 -69 -69 46] -69]
Test Case:  45 | Input/Output: [[-56 -56 -56 7] -56]
Test Case:  46 | Input/Output: [[-69 97 97 97] -69]
Test Case:  47 | Input/Output: [[-95 -95 -95 -73] -95]
Test Case:  48 | Input/Output: [[64 2 64 64] 2]
Test Case:  49 | Input/Output: [[-85 25 25 25] -85]
Test Case:  50 | Input/Output: [[25 -12 25 25] -12]
Test Case:  51 | Input/Output: [[44 -34 44 44] -34]
Test Case:  52 | Input/Output: [[-1 -68 -1 -1] -68]
Test Case:  53 | Input/Output: [[85 -58 -58 -58] -58]
Test Case:  54 | Input/Output: [[-99 -99 -99 -59] -99]
Test Case:  55 | Input/Output: [[-83 36 -83 -83] -83]
Test Case:  56 | Input/Output: [[-13 34 34 34] -13]
Test Case:  57 | Input/Output: [[80 -5 -5 -5] -5]
Test Case:  58 | Input/Output: [[-43 57 -43 -43] -43]
Test Case:  59 | Input/Output: [[-60 18 -60 -60] -60]
Test Case:  60 | Input/Output: [[17 17 17 -26] -26]
Test Case:  61 | Input/Output: [[88 -27 88 88] -27]
Test Case:  62 | Input/Output: [[48 48 47 48] 47]
Test Case:  63 | Input/Output: [[-12 -12 -23 -12] -23]
Test Case:  64 | Input/Output: [[41 41 41 -21] -21]
Test Case:  65 | Input/Output: [[-63 -63 -63 99] -63]
Test Case:  66 | Input/Output: [[21 21 -46 21] -46]
Test Case:  67 | Input/Output: [[90 90 26 90] 26]
Test Case:  68 | Input/Output: [[-50 -17 -17 -17] -50]
Test Case:  69 | Input/Output: [[7 93 93 93] 7]
Test Case:  70 | Input/Output: [[94 -21 94 94] -21]
Test Case:  71 | Input/Output: [[-12 -12 -12 57] -12]
Test Case:  72 | Input/Output: [[98 98 -63 98] -63]
Test Case:  73 | Input/Output: [[85 85 85 -86] -86]
Test Case:  74 | Input/Output: [[-6 -6 -29 -6] -29]
Test Case:  75 | Input/Output: [[-20 -69 -20 -20] -69]
Test Case:  76 | Input/Output: [[-14 -88 -14 -14] -88]
Test Case:  77 | Input/Output: [[12 12 12 -52] -52]
Test Case:  78 | Input/Output: [[32 32 32 59] 32]
Test Case:  79 | Input/Output: [[65 -82 -82 -82] -82]
Test Case:  80 | Input/Output: [[2 -89 -89 -89] -89]
Test Case:  81 | Input/Output: [[76 -66 -66 -66] -66]
Test Case:  82 | Input/Output: [[12 12 12 -25] -25]
Test Case:  83 | Input/Output: [[-61 -17 -17 -17] -61]
Test Case:  84 | Input/Output: [[-31 82 -31 -31] -31]
Test Case:  85 | Input/Output: [[65 65 67 65] 65]
Test Case:  86 | Input/Output: [[-38 -7 -7 -7] -38]
Test Case:  87 | Input/Output: [[36 -91 36 36] -91]
Test Case:  88 | Input/Output: [[-35 5 5 5] -35]
Test Case:  89 | Input/Output: [[70 70 -78 70] -78]
Test Case:  90 | Input/Output: [[-38 24 24 24] -38]
Test Case:  91 | Input/Output: [[8 9 9 9] 8]
Test Case:  92 | Input/Output: [[24 24 24 -37] -37]
Test Case:  93 | Input/Output: [[74 -12 -12 -12] -12]
Test Case:  94 | Input/Output: [[-8 56 56 56] -8]
Test Case:  95 | Input/Output: [[6 6 -47 6] -47]
Test Case:  96 | Input/Output: [[86 86 86 -28] -28]
Test Case:  97 | Input/Output: [[-65 67 67 67] -65]
Test Case:  98 | Input/Output: [[-19 -19 36 -19] -19]
Test Case:  99 | Input/Output: [[36 36 36 -87] -87]
Test Case: 100 | Input/Output: [(74 74 74 74) 74]
Test Case: 101 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 102 | Input/Output: [(78 78 78 78) 78]
Test Case: 103 | Input/Output: [(37 37 37 37) 37]
Test Case: 104 | Input/Output: [(20 20 20 20) 20]
Test Case: 105 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 106 | Input/Output: [(43 43 43 43) 43]
Test Case: 107 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 108 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 109 | Input/Output: [(3 3 3 3) 3]
Test Case: 110 | Input/Output: [(75 75 75 75) 75]
Test Case: 111 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 112 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 113 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 114 | Input/Output: [(86 86 86 86) 86]
Test Case: 115 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 116 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 117 | Input/Output: [(54 54 54 54) 54]
Test Case: 118 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 119 | Input/Output: [(63 63 63 63) 63]
Test Case: 120 | Input/Output: [(51 51 51 51) 51]
Test Case: 121 | Input/Output: [(8 8 8 8) 8]
Test Case: 122 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 123 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 124 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 125 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 126 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 127 | Input/Output: [(6 6 6 6) 6]
Test Case: 128 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 129 | Input/Output: [(60 60 60 60) 60]
Test Case: 130 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 131 | Input/Output: [(8 8 8 8) 8]
Test Case: 132 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 133 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 134 | Input/Output: [(61 61 61 61) 61]
Test Case: 135 | Input/Output: [(39 39 39 39) 39]
Test Case: 136 | Input/Output: [(85 85 85 85) 85]
Test Case: 137 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 138 | Input/Output: [(51 51 51 51) 51]
Test Case: 139 | Input/Output: [(61 61 61 61) 61]
Test Case: 140 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 141 | Input/Output: [(43 43 43 43) 43]
Test Case: 142 | Input/Output: [(56 56 56 56) 56]
Test Case: 143 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 144 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 145 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 146 | Input/Output: [(99 99 99 99) 99]
Test Case: 147 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 148 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 149 | Input/Output: [(12 12 12 12) 12]
Test Case: 150 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 151 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 152 | Input/Output: [(30 30 30 30) 30]
Test Case: 153 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 154 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 155 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 156 | Input/Output: [(33 33 33 33) 33]
Test Case: 157 | Input/Output: [(67 67 67 67) 67]
Test Case: 158 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 159 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 160 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 161 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 162 | Input/Output: [(19 19 19 19) 19]
Test Case: 163 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 164 | Input/Output: [(48 48 48 48) 48]
Test Case: 165 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 166 | Input/Output: [(74 74 74 74) 74]
Test Case: 167 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 168 | Input/Output: [(50 50 50 50) 50]
Test Case: 169 | Input/Output: [(48 48 48 48) 48]
Test Case: 170 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 171 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 172 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 173 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 174 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 175 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 176 | Input/Output: [(36 36 36 36) 36]
Test Case: 177 | Input/Output: [(98 98 98 98) 98]
Test Case: 178 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 179 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 180 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 181 | Input/Output: [(13 13 13 13) 13]
Test Case: 182 | Input/Output: [(33 33 33 33) 33]
Test Case: 183 | Input/Output: [(95 95 95 95) 95]
Test Case: 184 | Input/Output: [(33 33 33 33) 33]
Test Case: 185 | Input/Output: [(18 18 18 18) 18]
Test Case: 186 | Input/Output: [(73 73 73 73) 73]
Test Case: 187 | Input/Output: [(49 49 49 49) 49]
Test Case: 188 | Input/Output: [(32 32 32 32) 32]
Test Case: 189 | Input/Output: [(62 62 62 62) 62]
Test Case: 190 | Input/Output: [(67 67 67 67) 67]
Test Case: 191 | Input/Output: [(25 25 25 25) 25]
Test Case: 192 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 193 | Input/Output: [(99 99 99 99) 99]
Test Case: 194 | Input/Output: [(17 17 17 17) 17]
Test Case: 195 | Input/Output: [(17 17 17 17) 17]
Test Case: 196 | Input/Output: [(76 76 76 76) 76]
Test Case: 197 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 198 | Input/Output: [(80 80 80 80) 80]
Test Case: 199 | Input/Output: [(81 81 81 81) 81]
Test Case: 200 | Input/Output: [(75 36 87 53) 36]
Test Case: 201 | Input/Output: [(33 39 70 35) 33]
Test Case: 202 | Input/Output: [(31 14 1 40) 1]
Test Case: 203 | Input/Output: [(18 73 67 31) 18]
Test Case: 204 | Input/Output: [(34 58 14 22) 14]
Test Case: 205 | Input/Output: [(26 0 88 22) 0]
Test Case: 206 | Input/Output: [(4 21 77 15) 4]
Test Case: 207 | Input/Output: [(87 76 14 78) 14]
Test Case: 208 | Input/Output: [(91 60 65 70) 60]
Test Case: 209 | Input/Output: [(96 87 50 51) 50]
Test Case: 210 | Input/Output: [(78 53 76 48) 48]
Test Case: 211 | Input/Output: [(95 74 41 28) 28]
Test Case: 212 | Input/Output: [(52 11 34 23) 11]
Test Case: 213 | Input/Output: [(86 91 97 40) 40]
Test Case: 214 | Input/Output: [(25 75 66 63) 25]
Test Case: 215 | Input/Output: [(48 20 47 7) 7]
Test Case: 216 | Input/Output: [(64 57 23 11) 11]
Test Case: 217 | Input/Output: [(77 74 14 25) 14]
Test Case: 218 | Input/Output: [(34 15 46 8) 8]
Test Case: 219 | Input/Output: [(41 52 67 58) 41]
Test Case: 220 | Input/Output: [(35 34 56 10) 10]
Test Case: 221 | Input/Output: [(93 74 18 36) 18]
Test Case: 222 | Input/Output: [(97 63 36 14) 14]
Test Case: 223 | Input/Output: [(70 73 33 37) 33]
Test Case: 224 | Input/Output: [(21 7 55 30) 7]
Test Case: 225 | Input/Output: [(40 51 81 12) 12]
Test Case: 226 | Input/Output: [(85 17 81 75) 17]
Test Case: 227 | Input/Output: [(60 93 54 56) 54]
Test Case: 228 | Input/Output: [(42 97 71 99) 42]
Test Case: 229 | Input/Output: [(18 69 16 55) 16]
Test Case: 230 | Input/Output: [(90 13 3 73) 3]
Test Case: 231 | Input/Output: [(98 83 88 43) 43]
Test Case: 232 | Input/Output: [(70 9 30 75) 9]
Test Case: 233 | Input/Output: [(21 96 71 26) 21]
Test Case: 234 | Input/Output: [(95 9 35 42) 9]
Test Case: 235 | Input/Output: [(9 24 91 33) 9]
Test Case: 236 | Input/Output: [(37 6 86 94) 6]
Test Case: 237 | Input/Output: [(3 70 26 88) 3]
Test Case: 238 | Input/Output: [(3 36 72 14) 3]
Test Case: 239 | Input/Output: [(46 14 2 69) 2]
Test Case: 240 | Input/Output: [(99 50 67 33) 33]
Test Case: 241 | Input/Output: [(89 33 6 41) 6]
Test Case: 242 | Input/Output: [(78 37 25 3) 3]
Test Case: 243 | Input/Output: [(27 71 96 53) 27]
Test Case: 244 | Input/Output: [(50 4 58 83) 4]
Test Case: 245 | Input/Output: [(44 95 0 91) 0]
Test Case: 246 | Input/Output: [(35 46 26 40) 26]
Test Case: 247 | Input/Output: [(52 90 62 91) 52]
Test Case: 248 | Input/Output: [(84 26 27 3) 3]
Test Case: 249 | Input/Output: [(45 33 67 87) 33]
Test Case: 250 | Input/Output: [(34 96 84 87) 34]
Test Case: 251 | Input/Output: [(79 100 25 0) 0]
Test Case: 252 | Input/Output: [(89 5 4 79) 4]
Test Case: 253 | Input/Output: [(99 46 38 77) 38]
Test Case: 254 | Input/Output: [(90 100 71 60) 60]
Test Case: 255 | Input/Output: [(49 89 51 67) 49]
Test Case: 256 | Input/Output: [(57 25 87 6) 6]
Test Case: 257 | Input/Output: [(13 40 81 54) 13]
Test Case: 258 | Input/Output: [(72 59 4 18) 4]
Test Case: 259 | Input/Output: [(51 80 16 20) 16]
Test Case: 260 | Input/Output: [(70 42 41 88) 41]
Test Case: 261 | Input/Output: [(79 65 46 12) 12]
Test Case: 262 | Input/Output: [(86 48 70 53) 48]
Test Case: 263 | Input/Output: [(56 45 31 15) 15]
Test Case: 264 | Input/Output: [(97 59 64 60) 59]
Test Case: 265 | Input/Output: [(45 18 73 45) 18]
Test Case: 266 | Input/Output: [(43 49 20 50) 20]
Test Case: 267 | Input/Output: [(55 58 26 29) 26]
Test Case: 268 | Input/Output: [(19 44 25 76) 19]
Test Case: 269 | Input/Output: [(99 7 2 73) 2]
Test Case: 270 | Input/Output: [(18 79 36 98) 18]
Test Case: 271 | Input/Output: [(62 31 45 5) 5]
Test Case: 272 | Input/Output: [(44 14 95 7) 7]
Test Case: 273 | Input/Output: [(14 5 30 10) 5]
Test Case: 274 | Input/Output: [(10 9 85 58) 9]
Test Case: 275 | Input/Output: [(60 74 97 51) 51]
Test Case: 276 | Input/Output: [(19 41 12 88) 12]
Test Case: 277 | Input/Output: [(84 57 92 18) 18]
Test Case: 278 | Input/Output: [(73 53 41 41) 41]
Test Case: 279 | Input/Output: [(2 45 51 22) 2]
Test Case: 280 | Input/Output: [(42 60 96 3) 3]
Test Case: 281 | Input/Output: [(6 32 60 38) 6]
Test Case: 282 | Input/Output: [(52 79 27 56) 27]
Test Case: 283 | Input/Output: [(46 94 23 24) 23]
Test Case: 284 | Input/Output: [(10 83 94 42) 10]
Test Case: 285 | Input/Output: [(58 60 10 22) 10]
Test Case: 286 | Input/Output: [(0 61 66 31) 0]
Test Case: 287 | Input/Output: [(6 80 38 9) 6]
Test Case: 288 | Input/Output: [(36 38 5 64) 5]
Test Case: 289 | Input/Output: [(29 74 60 17) 17]
Test Case: 290 | Input/Output: [(35 22 54 93) 22]
Test Case: 291 | Input/Output: [(13 30 64 7) 7]
Test Case: 292 | Input/Output: [(53 47 51 10) 10]
Test Case: 293 | Input/Output: [(46 67 97 10) 10]
Test Case: 294 | Input/Output: [(6 32 68 45) 6]
Test Case: 295 | Input/Output: [(63 4 40 38) 4]
Test Case: 296 | Input/Output: [(38 99 63 73) 38]
Test Case: 297 | Input/Output: [(12 13 50 71) 12]
Test Case: 298 | Input/Output: [(91 50 59 83) 50]
Test Case: 299 | Input/Output: [(79 30 14 19) 14]
Test Case: 300 | Input/Output: [(97 72 43 15) 15]
Test Case: 301 | Input/Output: [(65 78 77 28) 28]
Test Case: 302 | Input/Output: [(21 54 24 67) 21]
Test Case: 303 | Input/Output: [(59 19 94 76) 19]
Test Case: 304 | Input/Output: [(58 71 30 86) 30]
Test Case: 305 | Input/Output: [(70 97 2 87) 2]
Test Case: 306 | Input/Output: [(88 2 74 26) 2]
Test Case: 307 | Input/Output: [(60 7 64 73) 7]
Test Case: 308 | Input/Output: [(37 57 42 73) 37]
Test Case: 309 | Input/Output: [(69 2 18 93) 2]
Test Case: 310 | Input/Output: [(2 26 88 21) 2]
Test Case: 311 | Input/Output: [(96 74 10 77) 10]
Test Case: 312 | Input/Output: [(79 42 68 15) 15]
Test Case: 313 | Input/Output: [(53 33 36 11) 11]
Test Case: 314 | Input/Output: [(54 29 91 79) 29]
Test Case: 315 | Input/Output: [(65 39 0 27) 0]
Test Case: 316 | Input/Output: [(7 5 79 53) 5]
Test Case: 317 | Input/Output: [(87 54 75 59) 54]
Test Case: 318 | Input/Output: [(76 68 89 10) 10]
Test Case: 319 | Input/Output: [(10 12 48 98) 10]
Test Case: 320 | Input/Output: [(55 36 78 27) 27]
Test Case: 321 | Input/Output: [(58 48 25 61) 25]
Test Case: 322 | Input/Output: [(36 20 13 93) 13]
Test Case: 323 | Input/Output: [(48 71 17 42) 17]
Test Case: 324 | Input/Output: [(10 98 3 1) 1]
Test Case: 325 | Input/Output: [(86 55 16 56) 16]
Test Case: 326 | Input/Output: [(87 76 47 93) 47]
Test Case: 327 | Input/Output: [(29 52 21 98) 21]
Test Case: 328 | Input/Output: [(14 41 54 2) 2]
Test Case: 329 | Input/Output: [(46 26 99 32) 26]
Test Case: 330 | Input/Output: [(47 32 56 62) 32]
Test Case: 331 | Input/Output: [(0 7 62 31) 0]
Test Case: 332 | Input/Output: [(57 89 91 38) 38]
Test Case: 333 | Input/Output: [(79 3 60 94) 3]
Test Case: 334 | Input/Output: [(60 54 22 80) 22]
Test Case: 335 | Input/Output: [(95 23 31 21) 21]
Test Case: 336 | Input/Output: [(16 14 83 96) 14]
Test Case: 337 | Input/Output: [(3 62 33 25) 3]
Test Case: 338 | Input/Output: [(95 76 32 35) 32]
Test Case: 339 | Input/Output: [(86 70 39 31) 31]
Test Case: 340 | Input/Output: [(47 49 57 77) 47]
Test Case: 341 | Input/Output: [(44 1 54 10) 1]
Test Case: 342 | Input/Output: [(22 33 94 10) 10]
Test Case: 343 | Input/Output: [(92 42 17 67) 17]
Test Case: 344 | Input/Output: [(32 43 68 38) 32]
Test Case: 345 | Input/Output: [(41 88 58 95) 41]
Test Case: 346 | Input/Output: [(22 18 34 35) 18]
Test Case: 347 | Input/Output: [(21 53 16 54) 16]
Test Case: 348 | Input/Output: [(56 98 10 25) 10]
Test Case: 349 | Input/Output: [(99 2 2 47) 2]
Test Case: 350 | Input/Output: [(79 96 99 4) 4]
Test Case: 351 | Input/Output: [(51 0 74 51) 0]
Test Case: 352 | Input/Output: [(26 15 51 64) 15]
Test Case: 353 | Input/Output: [(51 4 3 94) 3]
Test Case: 354 | Input/Output: [(8 72 83 79) 8]
Test Case: 355 | Input/Output: [(88 45 58 61) 45]
Test Case: 356 | Input/Output: [(28 54 85 25) 25]
Test Case: 357 | Input/Output: [(68 59 79 84) 59]
Test Case: 358 | Input/Output: [(82 39 54 44) 39]
Test Case: 359 | Input/Output: [(70 51 36 79) 36]
Test Case: 360 | Input/Output: [(9 42 0 37) 0]
Test Case: 361 | Input/Output: [(11 13 5 36) 5]
Test Case: 362 | Input/Output: [(17 29 72 7) 7]
Test Case: 363 | Input/Output: [(75 82 78 35) 35]
Test Case: 364 | Input/Output: [(53 53 57 35) 35]
Test Case: 365 | Input/Output: [(99 16 50 33) 16]
Test Case: 366 | Input/Output: [(7 2 23 75) 2]
Test Case: 367 | Input/Output: [(85 70 43 52) 43]
Test Case: 368 | Input/Output: [(11 60 4 41) 4]
Test Case: 369 | Input/Output: [(77 20 70 96) 20]
Test Case: 370 | Input/Output: [(2 29 28 83) 2]
Test Case: 371 | Input/Output: [(84 92 92 83) 83]
Test Case: 372 | Input/Output: [(71 50 60 22) 22]
Test Case: 373 | Input/Output: [(75 52 52 72) 52]
Test Case: 374 | Input/Output: [(14 57 26 75) 14]
Test Case: 375 | Input/Output: [(31 11 90 44) 11]
Test Case: 376 | Input/Output: [(31 66 4 30) 4]
Test Case: 377 | Input/Output: [(33 31 59 8) 8]
Test Case: 378 | Input/Output: [(54 78 25 43) 25]
Test Case: 379 | Input/Output: [(9 94 14 10) 9]
Test Case: 380 | Input/Output: [(96 91 47 72) 47]
Test Case: 381 | Input/Output: [(75 17 40 97) 17]
Test Case: 382 | Input/Output: [(21 51 88 77) 21]
Test Case: 383 | Input/Output: [(61 0 72 99) 0]
Test Case: 384 | Input/Output: [(21 45 38 96) 21]
Test Case: 385 | Input/Output: [(20 85 34 78) 20]
Test Case: 386 | Input/Output: [(9 2 95 95) 2]
Test Case: 387 | Input/Output: [(90 79 52 16) 16]
Test Case: 388 | Input/Output: [(41 51 2 1) 1]
Test Case: 389 | Input/Output: [(76 15 36 30) 15]
Test Case: 390 | Input/Output: [(3 9 67 45) 3]
Test Case: 391 | Input/Output: [(40 73 96 80) 40]
Test Case: 392 | Input/Output: [(59 92 35 77) 35]
Test Case: 393 | Input/Output: [(79 82 42 32) 32]
Test Case: 394 | Input/Output: [(51 79 53 69) 51]
Test Case: 395 | Input/Output: [(10 67 11 99) 10]
Test Case: 396 | Input/Output: [(59 72 17 61) 17]
Test Case: 397 | Input/Output: [(27 52 3 32) 3]
Test Case: 398 | Input/Output: [(92 34 21 22) 21]
Test Case: 399 | Input/Output: [(96 30 87 7) 7]
Test Case: 400 | Input/Output: [(-76 -96 -86 62) -96]
Test Case: 401 | Input/Output: [(57 98 -7 17) -7]
Test Case: 402 | Input/Output: [(99 58 24 -55) -55]
Test Case: 403 | Input/Output: [(-38 40 -64 11) -64]
Test Case: 404 | Input/Output: [(-40 -92 -9 -90) -92]
Test Case: 405 | Input/Output: [(32 77 -59 58) -59]
Test Case: 406 | Input/Output: [(-33 -38 60 95) -38]
Test Case: 407 | Input/Output: [(-71 24 -33 0) -71]
Test Case: 408 | Input/Output: [(-18 -3 -6 -65) -65]
Test Case: 409 | Input/Output: [(44 -27 2 20) -27]
Test Case: 410 | Input/Output: [(-73 -19 -39 30) -73]
Test Case: 411 | Input/Output: [(-27 58 -5 62) -27]
Test Case: 412 | Input/Output: [(4 86 -60 47) -60]
Test Case: 413 | Input/Output: [(-47 -89 -76 72) -89]
Test Case: 414 | Input/Output: [(47 58 7 -17) -17]
Test Case: 415 | Input/Output: [(48 99 -65 -9) -65]
Test Case: 416 | Input/Output: [(79 -99 25 -44) -99]
Test Case: 417 | Input/Output: [(19 -41 20 43) -41]
Test Case: 418 | Input/Output: [(82 -42 3 -35) -42]
Test Case: 419 | Input/Output: [(28 92 72 44) 28]
Test Case: 420 | Input/Output: [(19 24 -96 47) -96]
Test Case: 421 | Input/Output: [(-68 87 35 83) -68]
Test Case: 422 | Input/Output: [(-7 -11 -95 -3) -95]
Test Case: 423 | Input/Output: [(-93 -66 82 23) -93]
Test Case: 424 | Input/Output: [(-61 79 -7 -6) -61]
Test Case: 425 | Input/Output: [(15 30 69 3) 3]
Test Case: 426 | Input/Output: [(-36 73 86 -69) -69]
Test Case: 427 | Input/Output: [(26 -56 -51 13) -56]
Test Case: 428 | Input/Output: [(33 42 -69 70) -69]
Test Case: 429 | Input/Output: [(-35 -47 0 -74) -74]
Test Case: 430 | Input/Output: [(42 -76 88 -14) -76]
Test Case: 431 | Input/Output: [(5 -56 63 81) -56]
Test Case: 432 | Input/Output: [(-63 0 -45 91) -63]
Test Case: 433 | Input/Output: [(100 -31 88 44) -31]
Test Case: 434 | Input/Output: [(-78 66 28 -99) -99]
Test Case: 435 | Input/Output: [(30 -31 64 92) -31]
Test Case: 436 | Input/Output: [(-32 11 -98 -68) -98]
Test Case: 437 | Input/Output: [(-78 41 86 -70) -78]
Test Case: 438 | Input/Output: [(-63 -13 -90 -29) -90]
Test Case: 439 | Input/Output: [(7 2 -98 95) -98]
Test Case: 440 | Input/Output: [(59 40 50 94) 40]
Test Case: 441 | Input/Output: [(-3 -31 -80 -59) -80]
Test Case: 442 | Input/Output: [(-83 100 -60 -70) -83]
Test Case: 443 | Input/Output: [(-24 16 -73 68) -73]
Test Case: 444 | Input/Output: [(81 -70 -84 -79) -84]
Test Case: 445 | Input/Output: [(-3 -42 -16 -23) -42]
Test Case: 446 | Input/Output: [(-70 -70 -57 -79) -79]
Test Case: 447 | Input/Output: [(61 -8 -72 -91) -91]
Test Case: 448 | Input/Output: [(-73 -7 22 47) -73]
Test Case: 449 | Input/Output: [(-39 91 0 30) -39]
Test Case: 450 | Input/Output: [(17 99 84 -67) -67]
Test Case: 451 | Input/Output: [(-28 49 -6 44) -28]
Test Case: 452 | Input/Output: [(63 -18 -58 34) -58]
Test Case: 453 | Input/Output: [(98 -1 -12 -78) -78]
Test Case: 454 | Input/Output: [(59 -54 -7 -48) -54]
Test Case: 455 | Input/Output: [(54 50 53 -5) -5]
Test Case: 456 | Input/Output: [(62 12 -35 -90) -90]
Test Case: 457 | Input/Output: [(-71 -35 52 -5) -71]
Test Case: 458 | Input/Output: [(57 -89 -55 44) -89]
Test Case: 459 | Input/Output: [(-40 17 -32 98) -40]
Test Case: 460 | Input/Output: [(-58 12 -71 40) -71]
Test Case: 461 | Input/Output: [(-19 -22 -76 45) -76]
Test Case: 462 | Input/Output: [(25 -83 -23 -77) -83]
Test Case: 463 | Input/Output: [(81 -67 -60 31) -67]
Test Case: 464 | Input/Output: [(86 -1 77 -41) -41]
Test Case: 465 | Input/Output: [(14 62 28 32) 14]
Test Case: 466 | Input/Output: [(-3 72 -92 -73) -92]
Test Case: 467 | Input/Output: [(-57 63 -26 -33) -57]
Test Case: 468 | Input/Output: [(73 -62 -47 32) -62]
Test Case: 469 | Input/Output: [(3 30 -44 15) -44]
Test Case: 470 | Input/Output: [(60 1 62 20) 1]
Test Case: 471 | Input/Output: [(-71 81 68 -95) -95]
Test Case: 472 | Input/Output: [(-80 -89 -68 -92) -92]
Test Case: 473 | Input/Output: [(-94 76 50 5) -94]
Test Case: 474 | Input/Output: [(-79 -85 -30 55) -85]
Test Case: 475 | Input/Output: [(72 -20 84 -28) -28]
Test Case: 476 | Input/Output: [(25 -74 -2 -81) -81]
Test Case: 477 | Input/Output: [(66 -25 -93 19) -93]
Test Case: 478 | Input/Output: [(-1 -29 38 -67) -67]
Test Case: 479 | Input/Output: [(65 -96 69 18) -96]
Test Case: 480 | Input/Output: [(64 0 -91 -9) -91]
Test Case: 481 | Input/Output: [(-98 24 99 82) -98]
Test Case: 482 | Input/Output: [(-2 -14 -2 -75) -75]
Test Case: 483 | Input/Output: [(13 96 -56 50) -56]
Test Case: 484 | Input/Output: [(67 14 -26 84) -26]
Test Case: 485 | Input/Output: [(-40 92 16 48) -40]
Test Case: 486 | Input/Output: [(-27 -64 -52 -59) -64]
Test Case: 487 | Input/Output: [(75 40 82 -63) -63]
Test Case: 488 | Input/Output: [(-78 -20 -40 33) -78]
Test Case: 489 | Input/Output: [(21 -66 0 27) -66]
Test Case: 490 | Input/Output: [(100 -54 75 -92) -92]
Test Case: 491 | Input/Output: [(23 -12 78 53) -12]
Test Case: 492 | Input/Output: [(-81 87 -20 85) -81]
Test Case: 493 | Input/Output: [(82 -25 44 -44) -44]
Test Case: 494 | Input/Output: [(-5 -52 -9 -27) -52]
Test Case: 495 | Input/Output: [(99 -59 -16 -91) -91]
Test Case: 496 | Input/Output: [(55 -24 17 48) -24]
Test Case: 497 | Input/Output: [(15 66 -83 73) -83]
Test Case: 498 | Input/Output: [(-75 -78 -42 56) -78]
Test Case: 499 | Input/Output: [(64 -48 -90 -97) -97]
Test Case: 500 | Input/Output: [(-14 69 -31 -44) -44]
Test Case: 501 | Input/Output: [(-54 -50 47 -54) -54]
Test Case: 502 | Input/Output: [(-34 35 89 -33) -34]
Test Case: 503 | Input/Output: [(-2 80 96 5) -2]
Test Case: 504 | Input/Output: [(84 -77 18 100) -77]
Test Case: 505 | Input/Output: [(-73 47 70 -79) -79]
Test Case: 506 | Input/Output: [(60 -17 96 -46) -46]
Test Case: 507 | Input/Output: [(97 -78 31 -70) -78]
Test Case: 508 | Input/Output: [(-7 0 3 1) -7]
Test Case: 509 | Input/Output: [(3 -16 7 31) -16]
Test Case: 510 | Input/Output: [(73 -69 58 -78) -78]
Test Case: 511 | Input/Output: [(-74 9 -38 29) -74]
Test Case: 512 | Input/Output: [(74 -97 47 48) -97]
Test Case: 513 | Input/Output: [(39 50 27 -37) -37]
Test Case: 514 | Input/Output: [(87 44 -94 33) -94]
Test Case: 515 | Input/Output: [(-70 -75 -100 -31) -100]
Test Case: 516 | Input/Output: [(25 -44 88 47) -44]
Test Case: 517 | Input/Output: [(15 -74 75 -98) -98]
Test Case: 518 | Input/Output: [(1 -16 -58 28) -58]
Test Case: 519 | Input/Output: [(96 -48 -98 -27) -98]
Test Case: 520 | Input/Output: [(-37 97 1 -25) -37]
Test Case: 521 | Input/Output: [(-61 13 -20 -69) -69]
Test Case: 522 | Input/Output: [(100 -56 72 -8) -56]
Test Case: 523 | Input/Output: [(-2 97 86 81) -2]
Test Case: 524 | Input/Output: [(-77 74 -80 9) -80]
Test Case: 525 | Input/Output: [(-82 -59 55 -51) -82]
Test Case: 526 | Input/Output: [(62 -31 -51 -38) -51]
Test Case: 527 | Input/Output: [(-29 34 74 10) -29]
Test Case: 528 | Input/Output: [(42 77 100 -3) -3]
Test Case: 529 | Input/Output: [(90 -16 25 -37) -37]
Test Case: 530 | Input/Output: [(-9 78 -61 -54) -61]
Test Case: 531 | Input/Output: [(-97 -80 39 34) -97]
Test Case: 532 | Input/Output: [(1 -85 -99 -25) -99]
Test Case: 533 | Input/Output: [(11 -52 87 -16) -52]
Test Case: 534 | Input/Output: [(-71 -12 38 -93) -93]
Test Case: 535 | Input/Output: [(44 71 45 95) 44]
Test Case: 536 | Input/Output: [(61 15 5 98) 5]
Test Case: 537 | Input/Output: [(-81 -94 58 -14) -94]
Test Case: 538 | Input/Output: [(-21 -31 73 19) -31]
Test Case: 539 | Input/Output: [(64 -22 -32 -64) -64]
Test Case: 540 | Input/Output: [(49 -73 24 57) -73]
Test Case: 541 | Input/Output: [(2 -100 -21 -47) -100]
Test Case: 542 | Input/Output: [(-2 -24 -98 -87) -98]
Test Case: 543 | Input/Output: [(-7 -24 92 26) -24]
Test Case: 544 | Input/Output: [(0 28 -7 15) -7]
Test Case: 545 | Input/Output: [(85 -35 85 28) -35]
Test Case: 546 | Input/Output: [(-73 13 -48 19) -73]
Test Case: 547 | Input/Output: [(-48 64 -63 -33) -63]
Test Case: 548 | Input/Output: [(63 39 71 30) 30]
Test Case: 549 | Input/Output: [(-77 64 -79 -16) -79]
Test Case: 550 | Input/Output: [(-43 -65 91 100) -65]
Test Case: 551 | Input/Output: [(-26 -13 -26 42) -26]
Test Case: 552 | Input/Output: [(54 93 32 79) 32]
Test Case: 553 | Input/Output: [(44 -22 20 81) -22]
Test Case: 554 | Input/Output: [(-6 76 -89 95) -89]
Test Case: 555 | Input/Output: [(-27 -11 -45 -16) -45]
Test Case: 556 | Input/Output: [(-53 97 64 40) -53]
Test Case: 557 | Input/Output: [(-40 68 2 63) -40]
Test Case: 558 | Input/Output: [(47 58 88 78) 47]
Test Case: 559 | Input/Output: [(83 -67 45 -53) -67]
Test Case: 560 | Input/Output: [(-34 -5 -98 81) -98]
Test Case: 561 | Input/Output: [(-4 39 87 -97) -97]
Test Case: 562 | Input/Output: [(-93 -6 -37 89) -93]
Test Case: 563 | Input/Output: [(-43 -99 77 -34) -99]
Test Case: 564 | Input/Output: [(76 -68 -98 3) -98]
Test Case: 565 | Input/Output: [(-39 35 -36 -44) -44]
Test Case: 566 | Input/Output: [(86 19 -98 53) -98]
Test Case: 567 | Input/Output: [(20 -48 -7 -41) -48]
Test Case: 568 | Input/Output: [(-38 66 92 74) -38]
Test Case: 569 | Input/Output: [(91 71 -44 -20) -44]
Test Case: 570 | Input/Output: [(-34 77 96 55) -34]
Test Case: 571 | Input/Output: [(65 -27 75 -51) -51]
Test Case: 572 | Input/Output: [(-43 21 -6 13) -43]
Test Case: 573 | Input/Output: [(67 6 -64 66) -64]
Test Case: 574 | Input/Output: [(44 -1 74 47) -1]
Test Case: 575 | Input/Output: [(0 -90 -64 18) -90]
Test Case: 576 | Input/Output: [(57 36 86 88) 36]
Test Case: 577 | Input/Output: [(-33 94 2 -31) -33]
Test Case: 578 | Input/Output: [(-30 -23 31 -89) -89]
Test Case: 579 | Input/Output: [(-2 -92 -4 55) -92]
Test Case: 580 | Input/Output: [(60 90 -97 97) -97]
Test Case: 581 | Input/Output: [(-11 100 -3 -19) -19]
Test Case: 582 | Input/Output: [(-48 -55 -4 -67) -67]
Test Case: 583 | Input/Output: [(71 1 95 56) 1]
Test Case: 584 | Input/Output: [(87 -68 67 83) -68]
Test Case: 585 | Input/Output: [(2 -5 -2 100) -5]
Test Case: 586 | Input/Output: [(100 -100 -84 14) -100]
Test Case: 587 | Input/Output: [(-3 86 -41 21) -41]
Test Case: 588 | Input/Output: [(-41 -77 -78 -48) -78]
Test Case: 589 | Input/Output: [(38 -59 12 46) -59]
Test Case: 590 | Input/Output: [(-18 -89 -25 66) -89]
Test Case: 591 | Input/Output: [(-33 -22 -17 -100) -100]
Test Case: 592 | Input/Output: [(86 -56 -70 -99) -99]
Test Case: 593 | Input/Output: [(100 61 14 14) 14]
Test Case: 594 | Input/Output: [(18 -43 26 72) -43]
Test Case: 595 | Input/Output: [(-96 -8 45 -32) -96]
Test Case: 596 | Input/Output: [(-88 39 -65 76) -88]
Test Case: 597 | Input/Output: [(46 -65 -93 62) -93]
Test Case: 598 | Input/Output: [(35 -21 41 -51) -51]
Test Case: 599 | Input/Output: [(52 -74 -52 49) -74]
Test Case: 600 | Input/Output: [(45 87 -76 45) -76]
Test Case: 601 | Input/Output: [(-88 -20 74 44) -88]
Test Case: 602 | Input/Output: [(-11 93 20 43) -11]
Test Case: 603 | Input/Output: [(17 23 -62 -6) -62]
Test Case: 604 | Input/Output: [(98 -76 79 -82) -82]
Test Case: 605 | Input/Output: [(-15 49 -36 44) -36]
Test Case: 606 | Input/Output: [(-10 -64 6 -23) -64]
Test Case: 607 | Input/Output: [(40 24 -13 -4) -13]
Test Case: 608 | Input/Output: [(58 -97 -54 41) -97]
Test Case: 609 | Input/Output: [(-67 -87 84 -82) -87]
Test Case: 610 | Input/Output: [(-71 14 -63 -63) -71]
Test Case: 611 | Input/Output: [(33 -87 -85 -48) -87]
Test Case: 612 | Input/Output: [(-19 57 -18 74) -19]
Test Case: 613 | Input/Output: [(6 97 45 0) 0]
Test Case: 614 | Input/Output: [(50 -56 -35 62) -56]
Test Case: 615 | Input/Output: [(90 -35 8 -99) -99]
Test Case: 616 | Input/Output: [(-11 -33 -12 62) -33]
Test Case: 617 | Input/Output: [(90 54 -93 -93) -93]
Test Case: 618 | Input/Output: [(94 96 4 -19) -19]
Test Case: 619 | Input/Output: [(-91 -77 -62 -33) -91]
Test Case: 620 | Input/Output: [(92 -12 31 -44) -44]
Test Case: 621 | Input/Output: [(74 53 -5 29) -5]
Test Case: 622 | Input/Output: [(-92 96 -65 -54) -92]
Test Case: 623 | Input/Output: [(-83 24 -58 42) -83]
Test Case: 624 | Input/Output: [(-93 -58 -11 72) -93]
Test Case: 625 | Input/Output: [(-15 -27 37 -64) -64]
Test Case: 626 | Input/Output: [(33 -88 23 -63) -88]
Test Case: 627 | Input/Output: [(89 -29 -56 -66) -66]
Test Case: 628 | Input/Output: [(4 34 83 4) 4]
Test Case: 629 | Input/Output: [(2 -31 -7 80) -31]
Test Case: 630 | Input/Output: [(-90 -4 35 18) -90]
Test Case: 631 | Input/Output: [(-54 -69 -3 -81) -81]
Test Case: 632 | Input/Output: [(90 36 -42 86) -42]
Test Case: 633 | Input/Output: [(100 26 0 -20) -20]
Test Case: 634 | Input/Output: [(52 -44 6 -60) -60]
Test Case: 635 | Input/Output: [(55 89 50 -85) -85]
Test Case: 636 | Input/Output: [(-29 -52 59 -72) -72]
Test Case: 637 | Input/Output: [(40 -21 94 67) -21]
Test Case: 638 | Input/Output: [(63 -26 63 89) -26]
Test Case: 639 | Input/Output: [(-46 -70 -20 -72) -72]
Test Case: 640 | Input/Output: [(-62 58 21 -94) -94]
Test Case: 641 | Input/Output: [(-70 77 -91 -28) -91]
Test Case: 642 | Input/Output: [(86 -10 46 81) -10]
Test Case: 643 | Input/Output: [(-38 -20 12 0) -38]
Test Case: 644 | Input/Output: [(22 -82 -15 -88) -88]
Test Case: 645 | Input/Output: [(-15 61 -99 -50) -99]
Test Case: 646 | Input/Output: [(-61 -3 30 -15) -61]
Test Case: 647 | Input/Output: [(11 62 25 -18) -18]
Test Case: 648 | Input/Output: [(10 -64 -64 44) -64]
Test Case: 649 | Input/Output: [(59 -54 49 -24) -54]
Test Case: 650 | Input/Output: [(-55 -58 89 46) -58]
Test Case: 651 | Input/Output: [(60 17 11 55) 11]
Test Case: 652 | Input/Output: [(78 89 -79 -48) -79]
Test Case: 653 | Input/Output: [(-42 -15 62 82) -42]
Test Case: 654 | Input/Output: [(-78 10 -96 -27) -96]
Test Case: 655 | Input/Output: [(-78 -74 26 -3) -78]
Test Case: 656 | Input/Output: [(-29 78 -18 -7) -29]
Test Case: 657 | Input/Output: [(-12 96 25 -28) -28]
Test Case: 658 | Input/Output: [(18 7 16 -16) -16]
Test Case: 659 | Input/Output: [(97 81 5 72) 5]
Test Case: 660 | Input/Output: [(-9 42 -31 -85) -85]
Test Case: 661 | Input/Output: [(-41 -95 24 -48) -95]
Test Case: 662 | Input/Output: [(-57 -7 -5 6) -57]
Test Case: 663 | Input/Output: [(-52 -36 25 -26) -52]
Test Case: 664 | Input/Output: [(-23 92 -73 -69) -73]
Test Case: 665 | Input/Output: [(88 37 -44 49) -44]
Test Case: 666 | Input/Output: [(49 77 -12 97) -12]
Test Case: 667 | Input/Output: [(-36 86 -36 -67) -67]
Test Case: 668 | Input/Output: [(77 35 -43 -72) -72]
Test Case: 669 | Input/Output: [(49 58 8 -56) -56]
Test Case: 670 | Input/Output: [(16 -27 -53 5) -53]
Test Case: 671 | Input/Output: [(57 -96 -22 59) -96]
Test Case: 672 | Input/Output: [(99 -15 -19 0) -19]
Test Case: 673 | Input/Output: [(14 47 -36 -53) -53]
Test Case: 674 | Input/Output: [(71 43 -15 -31) -31]
Test Case: 675 | Input/Output: [(98 1 75 61) 1]
Test Case: 676 | Input/Output: [(74 -17 -11 -32) -32]
Test Case: 677 | Input/Output: [(-23 19 -72 87) -72]
Test Case: 678 | Input/Output: [(51 94 -26 -41) -41]
Test Case: 679 | Input/Output: [(-28 -37 16 14) -37]
Test Case: 680 | Input/Output: [(87 -13 -16 66) -16]
Test Case: 681 | Input/Output: [(5 12 -94 -43) -94]
Test Case: 682 | Input/Output: [(52 -81 18 37) -81]
Test Case: 683 | Input/Output: [(65 -37 -31 -52) -52]
Test Case: 684 | Input/Output: [(29 36 -2 36) -2]
Test Case: 685 | Input/Output: [(-45 89 82 -96) -96]
Test Case: 686 | Input/Output: [(56 -10 -7 -6) -10]
Test Case: 687 | Input/Output: [(-1 -6 27 81) -6]
Test Case: 688 | Input/Output: [(-60 42 -94 77) -94]
Test Case: 689 | Input/Output: [(69 90 78 -45) -45]
Test Case: 690 | Input/Output: [(7 -94 -72 20) -94]
Test Case: 691 | Input/Output: [(-46 10 -30 -79) -79]
Test Case: 692 | Input/Output: [(94 51 99 5) 5]
Test Case: 693 | Input/Output: [(8 33 -8 -32) -32]
Test Case: 694 | Input/Output: [(-48 -2 -86 22) -86]
Test Case: 695 | Input/Output: [(99 -31 -37 37) -37]
Test Case: 696 | Input/Output: [(-79 -56 -75 22) -79]
Test Case: 697 | Input/Output: [(30 -64 -87 -24) -87]
Test Case: 698 | Input/Output: [(29 -31 65 71) -31]
Test Case: 699 | Input/Output: [(0 97 51 38) 0]
Test Case: 700 | Input/Output: [(88 -22 93 -53) -53]
Test Case: 701 | Input/Output: [(35 39 17 -91) -91]
Test Case: 702 | Input/Output: [(83 -28 -90 51) -90]
Test Case: 703 | Input/Output: [(-65 8 -13 -35) -65]
Test Case: 704 | Input/Output: [(-34 36 70 22) -34]
Test Case: 705 | Input/Output: [(-45 53 -5 -35) -45]
Test Case: 706 | Input/Output: [(-1 4 71 -20) -20]
Test Case: 707 | Input/Output: [(71 29 39 38) 29]
Test Case: 708 | Input/Output: [(-26 -10 98 -97) -97]
Test Case: 709 | Input/Output: [(19 -71 28 -69) -71]
Test Case: 710 | Input/Output: [(48 63 14 -59) -59]
Test Case: 711 | Input/Output: [(-71 -36 26 -9) -71]
Test Case: 712 | Input/Output: [(78 35 74 3) 3]
Test Case: 713 | Input/Output: [(-82 -56 -62 58) -82]
Test Case: 714 | Input/Output: [(34 50 -98 33) -98]
Test Case: 715 | Input/Output: [(-52 -49 69 56) -52]
Test Case: 716 | Input/Output: [(-28 -2 62 -61) -61]
Test Case: 717 | Input/Output: [(-86 -26 -30 -65) -86]
Test Case: 718 | Input/Output: [(34 48 41 -16) -16]
Test Case: 719 | Input/Output: [(-73 80 -89 7) -89]
Test Case: 720 | Input/Output: [(-21 83 -30 81) -30]
Test Case: 721 | Input/Output: [(68 15 42 -1) -1]
Test Case: 722 | Input/Output: [(93 -42 5 87) -42]
Test Case: 723 | Input/Output: [(-25 65 10 -10) -25]
Test Case: 724 | Input/Output: [(41 72 100 5) 5]
Test Case: 725 | Input/Output: [(10 20 -15 -62) -62]
Test Case: 726 | Input/Output: [(-4 -48 93 45) -48]
Test Case: 727 | Input/Output: [(-33 90 66 -67) -67]
Test Case: 728 | Input/Output: [(87 82 -65 -7) -65]
Test Case: 729 | Input/Output: [(-2 -66 -41 -21) -66]
Test Case: 730 | Input/Output: [(-78 23 -42 -40) -78]
Test Case: 731 | Input/Output: [(44 91 50 -9) -9]
Test Case: 732 | Input/Output: [(25 -80 -96 -13) -96]
Test Case: 733 | Input/Output: [(-69 66 95 21) -69]
Test Case: 734 | Input/Output: [(72 -80 53 81) -80]
Test Case: 735 | Input/Output: [(-59 36 -25 -57) -59]
Test Case: 736 | Input/Output: [(-87 53 26 78) -87]
Test Case: 737 | Input/Output: [(36 77 44 -25) -25]
Test Case: 738 | Input/Output: [(96 -30 -96 72) -96]
Test Case: 739 | Input/Output: [(64 20 80 79) 20]
Test Case: 740 | Input/Output: [(-41 77 59 45) -41]
Test Case: 741 | Input/Output: [(-45 76 -81 -79) -81]
Test Case: 742 | Input/Output: [(48 44 20 -23) -23]
Test Case: 743 | Input/Output: [(-60 -6 27 76) -60]
Test Case: 744 | Input/Output: [(28 -51 -16 45) -51]
Test Case: 745 | Input/Output: [(87 -90 -48 -73) -90]
Test Case: 746 | Input/Output: [(-3 57 -14 23) -14]
Test Case: 747 | Input/Output: [(26 19 30 -31) -31]
Test Case: 748 | Input/Output: [(-42 95 -74 -68) -74]
Test Case: 749 | Input/Output: [(31 25 72 -91) -91]
Test Case: 750 | Input/Output: [(38 71 78 68) 38]
Test Case: 751 | Input/Output: [(-17 -6 -34 36) -34]
Test Case: 752 | Input/Output: [(-12 78 -49 -66) -66]
Test Case: 753 | Input/Output: [(12 64 -86 91) -86]
Test Case: 754 | Input/Output: [(64 16 -7 -64) -64]
Test Case: 755 | Input/Output: [(-39 -90 -6 78) -90]
Test Case: 756 | Input/Output: [(-21 91 -75 2) -75]
Test Case: 757 | Input/Output: [(-99 2 -59 65) -99]
Test Case: 758 | Input/Output: [(82 72 34 -80) -80]
Test Case: 759 | Input/Output: [(26 -81 -67 -4) -81]
Test Case: 760 | Input/Output: [(66 -3 -39 -61) -61]
Test Case: 761 | Input/Output: [(28 58 19 -22) -22]
Test Case: 762 | Input/Output: [(-83 84 90 -4) -83]
Test Case: 763 | Input/Output: [(-8 73 34 15) -8]
Test Case: 764 | Input/Output: [(-97 -34 -84 33) -97]
Test Case: 765 | Input/Output: [(-85 -79 -20 45) -85]
Test Case: 766 | Input/Output: [(-40 -12 26 73) -40]
Test Case: 767 | Input/Output: [(100 13 -10 -15) -15]
Test Case: 768 | Input/Output: [(3 10 63 -36) -36]
Test Case: 769 | Input/Output: [(71 -51 -36 91) -51]
Test Case: 770 | Input/Output: [(-28 24 96 -13) -28]
Test Case: 771 | Input/Output: [(-80 46 -25 -67) -80]
Test Case: 772 | Input/Output: [(77 -23 52 75) -23]
Test Case: 773 | Input/Output: [(89 -47 5 74) -47]
Test Case: 774 | Input/Output: [(80 -62 64 -63) -63]
Test Case: 775 | Input/Output: [(-68 98 69 59) -68]
Test Case: 776 | Input/Output: [(6 -81 31 -38) -81]
Test Case: 777 | Input/Output: [(-39 5 48 -33) -39]
Test Case: 778 | Input/Output: [(21 -41 -37 -71) -71]
Test Case: 779 | Input/Output: [(-5 11 15 -59) -59]
Test Case: 780 | Input/Output: [(10 72 -93 56) -93]
Test Case: 781 | Input/Output: [(-36 83 -61 87) -61]
Test Case: 782 | Input/Output: [(10 49 -30 54) -30]
Test Case: 783 | Input/Output: [(76 -91 -98 -90) -98]
Test Case: 784 | Input/Output: [(15 32 -73 -85) -85]
Test Case: 785 | Input/Output: [(-42 59 -74 70) -74]
Test Case: 786 | Input/Output: [(-50 17 44 -65) -65]
Test Case: 787 | Input/Output: [(100 -82 -73 26) -82]
Test Case: 788 | Input/Output: [(-32 -28 -32 -32) -32]
Test Case: 789 | Input/Output: [(100 72 95 -27) -27]
Test Case: 790 | Input/Output: [(-75 97 100 -49) -75]
Test Case: 791 | Input/Output: [(-7 70 40 -53) -53]
Test Case: 792 | Input/Output: [(-90 -20 38 44) -90]
Test Case: 793 | Input/Output: [(-88 -62 63 52) -88]
Test Case: 794 | Input/Output: [(-19 -47 -26 -3) -47]
Test Case: 795 | Input/Output: [(-42 50 49 21) -42]
Test Case: 796 | Input/Output: [(-13 -80 42 6) -80]
Test Case: 797 | Input/Output: [(98 71 44 19) 19]
Test Case: 798 | Input/Output: [(-76 50 -90 -1) -90]
Test Case: 799 | Input/Output: [(-25 90 -39 52) -39]
Test Case: 800 | Input/Output: [(49 -68 15 17) -68]
Test Case: 801 | Input/Output: [(-67 91 49 81) -67]
Test Case: 802 | Input/Output: [(85 74 -37 -94) -94]
Test Case: 803 | Input/Output: [(-82 80 -37 -75) -82]
Test Case: 804 | Input/Output: [(29 8 -54 -82) -82]
Test Case: 805 | Input/Output: [(5 86 -19 -43) -43]
Test Case: 806 | Input/Output: [(55 -60 65 22) -60]
Test Case: 807 | Input/Output: [(61 50 45 51) 45]
Test Case: 808 | Input/Output: [(-28 42 -55 15) -55]
Test Case: 809 | Input/Output: [(20 -55 -5 33) -55]
Test Case: 810 | Input/Output: [(-88 30 -96 85) -96]
Test Case: 811 | Input/Output: [(62 93 -45 -94) -94]
Test Case: 812 | Input/Output: [(62 -46 -99 -84) -99]
Test Case: 813 | Input/Output: [(-16 -60 -68 -99) -99]
Test Case: 814 | Input/Output: [(63 98 82 -3) -3]
Test Case: 815 | Input/Output: [(79 -1 4 23) -1]
Test Case: 816 | Input/Output: [(-82 -14 -51 13) -82]
Test Case: 817 | Input/Output: [(1 1 10 76) 1]
Test Case: 818 | Input/Output: [(-96 82 38 -78) -96]
Test Case: 819 | Input/Output: [(92 91 -93 -23) -93]
Test Case: 820 | Input/Output: [(35 43 48 -14) -14]
Test Case: 821 | Input/Output: [(17 -20 -85 73) -85]
Test Case: 822 | Input/Output: [(-55 -1 -25 -85) -85]
Test Case: 823 | Input/Output: [(-44 49 -51 -30) -51]
Test Case: 824 | Input/Output: [(-95 29 -65 2) -95]
Test Case: 825 | Input/Output: [(-44 -84 95 -70) -84]
Test Case: 826 | Input/Output: [(-3 74 -58 68) -58]
Test Case: 827 | Input/Output: [(12 -97 56 -9) -97]
Test Case: 828 | Input/Output: [(66 -16 -47 -91) -91]
Test Case: 829 | Input/Output: [(-62 58 61 -10) -62]
Test Case: 830 | Input/Output: [(52 29 57 -85) -85]
Test Case: 831 | Input/Output: [(66 78 78 68) 66]
Test Case: 832 | Input/Output: [(-8 -47 -7 40) -47]
Test Case: 833 | Input/Output: [(89 47 46 85) 46]
Test Case: 834 | Input/Output: [(94 35 32 -33) -33]
Test Case: 835 | Input/Output: [(75 -34 -31 -46) -46]
Test Case: 836 | Input/Output: [(-70 -92 -70 -57) -92]
Test Case: 837 | Input/Output: [(35 -64 -9 24) -64]
Test Case: 838 | Input/Output: [(30 94 74 87) 30]
Test Case: 839 | Input/Output: [(-24 89 -93 69) -93]
Test Case: 840 | Input/Output: [(-71 38 -16 -93) -93]
Test Case: 841 | Input/Output: [(52 -83 -61 38) -83]
Test Case: 842 | Input/Output: [(-91 -67 -78 -37) -91]
Test Case: 843 | Input/Output: [(-47 -49 28 -98) -98]
Test Case: 844 | Input/Output: [(8 56 -46 -76) -76]
Test Case: 845 | Input/Output: [(-41 69 29 21) -41]
Test Case: 846 | Input/Output: [(42 88 -54 -17) -54]
Test Case: 847 | Input/Output: [(-7 -49 -31 -27) -49]
Test Case: 848 | Input/Output: [(67 -92 -31 27) -92]
Test Case: 849 | Input/Output: [(1 24 -19 -90) -90]
Test Case: 850 | Input/Output: [(-82 99 -84 100) -84]
Test Case: 851 | Input/Output: [(97 -43 -45 -94) -94]
Test Case: 852 | Input/Output: [(4 37 44 79) 4]
Test Case: 853 | Input/Output: [(-96 -58 69 28) -96]
Test Case: 854 | Input/Output: [(-10 -53 -88 81) -88]
Test Case: 855 | Input/Output: [(52 29 -53 24) -53]
Test Case: 856 | Input/Output: [(-51 4 75 -77) -77]
Test Case: 857 | Input/Output: [(21 -9 -32 -9) -32]
Test Case: 858 | Input/Output: [(-2 33 -34 53) -34]
Test Case: 859 | Input/Output: [(-99 -43 22 37) -99]
Test Case: 860 | Input/Output: [(35 95 21 -24) -24]
Test Case: 861 | Input/Output: [(47 5 95 -22) -22]
Test Case: 862 | Input/Output: [(-41 -10 -15 88) -41]
Test Case: 863 | Input/Output: [(-52 -29 -85 100) -85]
Test Case: 864 | Input/Output: [(48 -73 73 6) -73]
Test Case: 865 | Input/Output: [(-99 42 81 -60) -99]
Test Case: 866 | Input/Output: [(-80 86 63 2) -80]
Test Case: 867 | Input/Output: [(75 83 -53 46) -53]
Test Case: 868 | Input/Output: [(-90 -53 -40 -12) -90]
Test Case: 869 | Input/Output: [(18 27 43 -11) -11]
Test Case: 870 | Input/Output: [(57 49 68 52) 49]
Test Case: 871 | Input/Output: [(-13 68 82 35) -13]
Test Case: 872 | Input/Output: [(-47 22 -61 32) -61]
Test Case: 873 | Input/Output: [(-34 63 -33 88) -34]
Test Case: 874 | Input/Output: [(28 -18 -3 -99) -99]
Test Case: 875 | Input/Output: [(71 82 -56 30) -56]
Test Case: 876 | Input/Output: [(12 -36 70 -27) -36]
Test Case: 877 | Input/Output: [(-14 55 -52 54) -52]
Test Case: 878 | Input/Output: [(-64 67 -30 47) -64]
Test Case: 879 | Input/Output: [(-81 61 65 78) -81]
Test Case: 880 | Input/Output: [(-69 -50 -5 -23) -69]
Test Case: 881 | Input/Output: [(-4 16 -2 62) -4]
Test Case: 882 | Input/Output: [(76 42 -41 -57) -57]
Test Case: 883 | Input/Output: [(21 43 77 -68) -68]
Test Case: 884 | Input/Output: [(50 -77 -2 -45) -77]
Test Case: 885 | Input/Output: [(39 20 67 62) 20]
Test Case: 886 | Input/Output: [(50 57 24 48) 24]
Test Case: 887 | Input/Output: [(24 34 5 11) 5]
Test Case: 888 | Input/Output: [(-19 -4 63 -25) -25]
Test Case: 889 | Input/Output: [(-54 -26 96 -100) -100]
Test Case: 890 | Input/Output: [(-93 48 -24 90) -93]
Test Case: 891 | Input/Output: [(-92 84 87 -13) -92]
Test Case: 892 | Input/Output: [(12 90 50 -15) -15]
Test Case: 893 | Input/Output: [(-26 -38 78 59) -38]
Test Case: 894 | Input/Output: [(77 86 45 -24) -24]
Test Case: 895 | Input/Output: [(28 16 4 -44) -44]
Test Case: 896 | Input/Output: [(-11 13 43 -79) -79]
Test Case: 897 | Input/Output: [(24 -47 23 94) -47]
Test Case: 898 | Input/Output: [(61 9 48 -9) -9]
Test Case: 899 | Input/Output: [(-70 20 -80 -72) -80]
Test Case: 900 | Input/Output: [(-52 90 -8 -77) -77]
Test Case: 901 | Input/Output: [(46 -56 -12 96) -56]
Test Case: 902 | Input/Output: [(73 14 -26 -11) -26]
Test Case: 903 | Input/Output: [(46 99 -79 -27) -79]
Test Case: 904 | Input/Output: [(40 15 -59 -37) -59]
Test Case: 905 | Input/Output: [(55 61 -67 65) -67]
Test Case: 906 | Input/Output: [(-36 -75 -54 -61) -75]
Test Case: 907 | Input/Output: [(-19 2 91 91) -19]
Test Case: 908 | Input/Output: [(-44 37 -68 -81) -81]
Test Case: 909 | Input/Output: [(-8 65 -85 -63) -85]
Test Case: 910 | Input/Output: [(-54 -31 26 55) -54]
Test Case: 911 | Input/Output: [(-22 69 83 14) -22]
Test Case: 912 | Input/Output: [(-48 -45 -43 -86) -86]
Test Case: 913 | Input/Output: [(-63 88 -65 -94) -94]
Test Case: 914 | Input/Output: [(-91 39 -70 -9) -91]
Test Case: 915 | Input/Output: [(61 -55 -61 60) -61]
Test Case: 916 | Input/Output: [(-72 -27 -26 54) -72]
Test Case: 917 | Input/Output: [(1 -12 -64 96) -64]
Test Case: 918 | Input/Output: [(74 74 -3 -18) -18]
Test Case: 919 | Input/Output: [(-51 84 84 15) -51]
Test Case: 920 | Input/Output: [(90 74 -59 -47) -59]
Test Case: 921 | Input/Output: [(-14 32 91 77) -14]
Test Case: 922 | Input/Output: [(-14 52 13 35) -14]
Test Case: 923 | Input/Output: [(65 -84 68 -62) -84]
Test Case: 924 | Input/Output: [(-76 59 4 -27) -76]
Test Case: 925 | Input/Output: [(-72 -48 11 -2) -72]
Test Case: 926 | Input/Output: [(89 40 59 72) 40]
Test Case: 927 | Input/Output: [(-85 -64 -3 86) -85]
Test Case: 928 | Input/Output: [(60 47 87 68) 47]
Test Case: 929 | Input/Output: [(-80 -43 61 -45) -80]
Test Case: 930 | Input/Output: [(62 50 -28 -40) -40]
Test Case: 931 | Input/Output: [(-69 75 -83 1) -83]
Test Case: 932 | Input/Output: [(-33 -80 46 -26) -80]
Test Case: 933 | Input/Output: [(-25 -21 91 87) -25]
Test Case: 934 | Input/Output: [(8 -73 -74 -81) -81]
Test Case: 935 | Input/Output: [(-84 40 -88 -50) -88]
Test Case: 936 | Input/Output: [(-96 56 60 -40) -96]
Test Case: 937 | Input/Output: [(76 84 -65 -93) -93]
Test Case: 938 | Input/Output: [(93 -7 -61 -87) -87]
Test Case: 939 | Input/Output: [(6 -16 19 -16) -16]
Test Case: 940 | Input/Output: [(-45 38 32 18) -45]
Test Case: 941 | Input/Output: [(2 -95 -9 -95) -95]
Test Case: 942 | Input/Output: [(95 6 87 -74) -74]
Test Case: 943 | Input/Output: [(20 47 64 -64) -64]
Test Case: 944 | Input/Output: [(-84 -85 -2 54) -85]
Test Case: 945 | Input/Output: [(-88 74 -89 21) -89]
Test Case: 946 | Input/Output: [(19 10 75 28) 10]
Test Case: 947 | Input/Output: [(54 -69 29 82) -69]
Test Case: 948 | Input/Output: [(76 -14 -5 29) -14]
Test Case: 949 | Input/Output: [(-46 27 13 43) -46]
Test Case: 950 | Input/Output: [(-78 53 -42 51) -78]
Test Case: 951 | Input/Output: [(-19 -88 90 12) -88]
Test Case: 952 | Input/Output: [(-98 -17 -23 -23) -98]
Test Case: 953 | Input/Output: [(10 73 74 -66) -66]
Test Case: 954 | Input/Output: [(15 68 81 36) 15]
Test Case: 955 | Input/Output: [(88 -41 -85 -31) -85]
Test Case: 956 | Input/Output: [(89 39 20 -95) -95]
Test Case: 957 | Input/Output: [(-79 27 -50 -96) -96]
Test Case: 958 | Input/Output: [(84 75 37 22) 22]
Test Case: 959 | Input/Output: [(-64 -15 -55 19) -64]
Test Case: 960 | Input/Output: [(-19 20 -4 37) -19]
Test Case: 961 | Input/Output: [(64 25 63 -95) -95]
Test Case: 962 | Input/Output: [(8 -20 -3 -91) -91]
Test Case: 963 | Input/Output: [(-10 -26 -45 96) -45]
Test Case: 964 | Input/Output: [(60 -63 -62 -6) -63]
Test Case: 965 | Input/Output: [(-94 7 -8 10) -94]
Test Case: 966 | Input/Output: [(81 11 -24 97) -24]
Test Case: 967 | Input/Output: [(-46 -79 87 -26) -79]
Test Case: 968 | Input/Output: [(59 23 -3 -71) -71]
Test Case: 969 | Input/Output: [(23 64 46 2) 2]
Test Case: 970 | Input/Output: [(-28 26 15 -23) -28]
Test Case: 971 | Input/Output: [(-1 -72 -35 98) -72]
Test Case: 972 | Input/Output: [(64 84 40 24) 24]
Test Case: 973 | Input/Output: [(-95 69 90 49) -95]
Test Case: 974 | Input/Output: [(-84 39 -80 -50) -84]
Test Case: 975 | Input/Output: [(18 -22 16 -61) -61]
Test Case: 976 | Input/Output: [(38 -25 -6 78) -25]
Test Case: 977 | Input/Output: [(11 34 -26 -27) -27]
Test Case: 978 | Input/Output: [(99 -15 -17 9) -17]
Test Case: 979 | Input/Output: [(-5 -95 29 34) -95]
Test Case: 980 | Input/Output: [(24 -33 63 -52) -52]
Test Case: 981 | Input/Output: [(34 -26 -68 -45) -68]
Test Case: 982 | Input/Output: [(-7 97 -54 -62) -62]
Test Case: 983 | Input/Output: [(-65 -30 54 -4) -65]
Test Case: 984 | Input/Output: [(-16 56 -49 88) -49]
Test Case: 985 | Input/Output: [(-23 -90 -16 19) -90]
Test Case: 986 | Input/Output: [(89 -32 35 14) -32]
Test Case: 987 | Input/Output: [(-63 -51 35 -86) -86]
Test Case: 988 | Input/Output: [(-28 -57 -14 61) -57]
Test Case: 989 | Input/Output: [(9 -35 97 -63) -63]
Test Case: 990 | Input/Output: [(-44 20 -66 2) -66]
Test Case: 991 | Input/Output: [(-65 42 17 -1) -65]
Test Case: 992 | Input/Output: [(-24 100 39 -80) -80]
Test Case: 993 | Input/Output: [(-68 96 -12 -46) -68]
Test Case: 994 | Input/Output: [(7 -46 24 68) -46]
Test Case: 995 | Input/Output: [(99 1 54 -78) -78]
Test Case: 996 | Input/Output: [(-13 69 88 49) -13]
Test Case: 997 | Input/Output: [(84 11 22 85) 11]
Test Case: 998 | Input/Output: [(30 88 60 23) 23]
Test Case: 999 | Input/Output: [(81 -76 -63 98) -76]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 64 -55 57 -80 -46 -31 57 98 -38 54 10 25 43 -108 25 75
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-71 -6 -6 -6] -71] [[69 17 69 69] 17] [[92 92 92 -46] -46] [[-23 19 19 19] -23] [[57 51 51 51] 51] [[13 13 13 95] 13] [[4 4 88 4] 4] [[29 -13 29 29] -13] [[-16 -16 -16 75] -16] [[57 57 57 78] 57] [(76 76 76 76) 76] [(84 84 84 84) 84] [(-91 -91 -91 -91) -91] [(19 19 19 19) 19] [(-85 -85 -85 -85) -85] [(44 63 96 42) 42] [(96 49 9 48) 9] [(34 12 94 87) 12] [(17 64 53 59) 17] [(70 78 62 50) 50] [(38 39 8 3) 3] [(87 63 38 55) 38] [(53 34 65 100) 34] [(61 97 25 49) 25] [(14 45 12 92) 12] [(61 50 46 23) 23] [(57 22 67 55) 22] [(51 60 17 59) 17] [(18 71 87 16) 16] [(92 22 72 70) 22] [(61 88 30 57) 30] [(18 86 63 83) 18] [(47 58 63 99) 47] [(44 83 51 32) 32] [(25 51 21 49) 21] [(43 88 -22 99) -22] [(-37 25 -12 -43) -43] [(98 59 -97 32) -97] [(-89 0 39 -83) -89] [(94 -88 29 -93) -93] [(99 -39 4 18) -39] [(55 23 92 -19) -19] [(16 2 23 -31) -31] [(-37 -50 -26 56) -50] [(-57 -98 8 54) -98] [(-39 45 2 -75) -75] [(-52 43 47 -75) -75] [(93 -64 -34 -63) -64] [(72 88 -22 -54) -54] [(39 4 36 -50) -50] [(69 30 -94 66) -94] [(-60 49 -56 85) -60] [(49 -81 11 -45) -81] [(-75 -93 -57 -47) -93] [(8 -39 62 -15) -39] [(48 -97 -32 -41) -97] [(19 7 60 4) 4] [(-11 -10 0 -76) -76] [(88 60 46 58) 46] [(-61 74 68 -89) -89] [(62 -23 -93 93) -93] [(73 -83 60 -50) -83] [(-76 -58 -77 -59) -77] [(-33 18 36 22) -33] [(-47 -61 61 -17) -61] [(-75 -21 -95 -6) -95] [(18 23 -83 -5) -83] [(87 64 -13 -85) -85] [(0 -88 -70 31) -88] [(81 -15 -25 -88) -88] [(-87 99 -88 -85) -88] [(-18 59 12 -13) -18] [(-17 -32 86 63) -32] [(28 74 -97 -13) -97] [(-23 51 86 21) -23] [(-25 -87 -51 85) -87] [(73 -69 -31 -36) -69] [(-48 -85 -1 3) -85] [(68 86 -53 28) -53] [(-40 -81 -87 -56) -87] [(73 58 -29 34) -29] [(64 -48 -35 -18) -48] [(-14 61 -31 70) -31] [(5 51 -82 81) -82] [(76 -34 99 -35) -35] [(70 37 -50 -23) -50] [(81 9 6 -79) -79] [(-51 35 -60 94) -60] [(-90 8 -13 -78) -90] [(-65 -81 74 7) -81] [(-40 30 56 -79) -79] [(-69 -90 3 -51) -90] [(6 -14 -68 -3) -68] [(-30 -61 -9 -90) -90] [(68 25 -95 -92) -95])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 64                 
Correct output: 50                  | Program output: 78                 
Correct output: 3                   | Program output: 39                 
Correct output: 38                  | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 97                 
Correct output: 12                  | Program output: 45                 
Correct output: 23                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 60                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 88                 
Correct output: 18                  | Program output: 86                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 83                 
Correct output: 21                  | Program output: 51                 
Correct output: -22                 | Program output: 88                 
Correct output: -43                 | Program output: 25                 
Correct output: -97                 | Program output: 59                 
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 45                 
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: 88                 
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: 30                 
Correct output: -60                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 60                 
Correct output: -89                 | Program output: 74                 
Correct output: -93                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -58                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -21                
Correct output: -83                 | Program output: 23                 
Correct output: -85                 | Program output: 64                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: 99                 
Correct output: -18                 | Program output: 59                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: 74                 
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 86                 
Correct output: -87                 | Program output: -81                
Correct output: -29                 | Program output: 58                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 61                 
Correct output: -82                 | Program output: 51                 
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: 37                 
Correct output: -79                 | Program output: 9                  
Correct output: -60                 | Program output: 35                 
Correct output: -90                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Lexicase best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Zero cases best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 4 14 3 2 3 3 5 15 6)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (2 4 14 3 2 3 3 5 15 6)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Best program: (in2 boolean_or print_boolean boolean_dup boolean_xor boolean_swap boolean_swap print_boolean boolean_or integer_div print_integer integer_sub in1 exec_shove (exec_yank exec_s (integer_pop exec_noop integer_inc integer_fromboolean exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_y_when_autoconstructing () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ()) () ()))
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 59
Size: 85
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 9.943
Median total errors in population: 10
Error averages by case: (0.998 0.996 0.986 0.997 0.998 0.997 0.997 0.995 0.985 0.994)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.76
Average program size in population (points): 68.616
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 450391
--- Timings ---
Current time: 1559583209331 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.7 seconds, 27.2%
Fitness Testing:      1.8 seconds, 68.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 64                 
Correct output: 50                  | Program output: 78                 
Correct output: 3                   | Program output: 39                 
Correct output: 38                  | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 97                 
Correct output: 12                  | Program output: 45                 
Correct output: 23                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 60                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 88                 
Correct output: 18                  | Program output: 86                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 83                 
Correct output: 21                  | Program output: 51                 
Correct output: -22                 | Program output: 88                 
Correct output: -43                 | Program output: 25                 
Correct output: -97                 | Program output: 59                 
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 45                 
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: 88                 
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: 30                 
Correct output: -60                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 60                 
Correct output: -89                 | Program output: 74                 
Correct output: -93                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -58                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -21                
Correct output: -83                 | Program output: 23                 
Correct output: -85                 | Program output: 64                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: 99                 
Correct output: -18                 | Program output: 59                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: 74                 
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 86                 
Correct output: -87                 | Program output: -81                
Correct output: -29                 | Program output: 58                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 61                 
Correct output: -82                 | Program output: 51                 
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: 37                 
Correct output: -79                 | Program output: 9                  
Correct output: -60                 | Program output: 35                 
Correct output: -90                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Lexicase best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Lexicase best errors: [1 0 1 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Zero cases best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Zero cases best errors: [1 0 1 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 414 1000 1000 249 881 661 412 1000 1000)
Population mean number of elite cases: 7.62
Count of perfect (error zero) individuals by case: (0 414 0 0 249 881 661 412 0 0)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Errors: [1 0 1 1 1 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 7.383
Median total errors in population: 7
Error averages by case: (1.0 0.586 1.0 1.0 0.751 0.119 0.339 0.588 1.0 1.0)
Error minima by case: (1 0 1 1 0 0 0 0 1 1)
Average genome size in population (length): 41.749
Average program size in population (points): 58.886
Average percent parens in population: 0.288
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.489
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 842222
--- Timings ---
Current time: 1559583211806 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 42.0%
Fitness Testing:      2.4 seconds, 42.5%
Report:               0.8 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 64                 
Correct output: 50                  | Program output: 78                 
Correct output: 3                   | Program output: 39                 
Correct output: 38                  | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 97                 
Correct output: 12                  | Program output: 45                 
Correct output: 23                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 60                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 88                 
Correct output: 18                  | Program output: 86                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 83                 
Correct output: 21                  | Program output: 51                 
Correct output: -22                 | Program output: 88                 
Correct output: -43                 | Program output: 25                 
Correct output: -97                 | Program output: 59                 
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 45                 
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: 88                 
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: 30                 
Correct output: -60                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 60                 
Correct output: -89                 | Program output: 74                 
Correct output: -93                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -58                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -21                
Correct output: -83                 | Program output: 23                 
Correct output: -85                 | Program output: 64                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: 99                 
Correct output: -18                 | Program output: 59                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: 74                 
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 86                 
Correct output: -87                 | Program output: -81                
Correct output: -29                 | Program output: 58                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 61                 
Correct output: -82                 | Program output: 51                 
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: 37                 
Correct output: -79                 | Program output: 9                  
Correct output: -60                 | Program output: 35                 
Correct output: -90                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Lexicase best program: (in2 boolean_or print_boolean boolean_dup boolean_xor boolean_swap boolean_swap print_boolean boolean_or integer_div print_integer exec_eq in1 exec_shove (exec_yank exec_s (integer_pop exec_noop integer_inc integer_fromboolean exec_flush exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()) () ()))) () ()))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Zero cases best program: (in2 boolean_or print_boolean boolean_dup boolean_xor boolean_swap boolean_swap print_boolean boolean_or integer_div print_integer exec_eq in1 exec_shove (exec_yank exec_s (integer_pop exec_noop integer_inc integer_fromboolean exec_flush exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()) () ()))) () ()))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 283 616 617 616 616 1 1000 1000 897)
Population mean number of elite cases: 6.65
Count of perfect (error zero) individuals by case: (0 283 616 617 616 616 1 0 0 897)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Errors: [1 1 0 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.354
Median total errors in population: 5
Error averages by case: (1.0 0.717 0.384 0.383 0.384 0.384 0.999 1.0 1.0 0.103)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 33.893
Average program size in population (points): 47.673
Average percent parens in population: 0.287
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0015
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 208
Genome diversity (% unique genomes):	 0.505
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1216248
--- Timings ---
Current time: 1559583214592 milliseconds
Total Time:           8.4 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 52.4%
Fitness Testing:      2.9 seconds, 34.3%
Report:               1.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 51                  | Program output: 57                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 44                 
Correct output: 9                   | Program output: 96                 
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 70                 
Correct output: 3                   | Program output: 38                 
Correct output: 38                  | Program output: 87                 
Correct output: 34                  | Program output: 53                 
Correct output: 25                  | Program output: 61                 
Correct output: 12                  | Program output: 14                 
Correct output: 23                  | Program output: 61                 
Correct output: 22                  | Program output: 57                 
Correct output: 17                  | Program output: 51                 
Correct output: 16                  | Program output: 18                 
Correct output: 22                  | Program output: 92                 
Correct output: 30                  | Program output: 61                 
Correct output: 18                  | Program output: 18                 
Correct output: 47                  | Program output: 47                 
Correct output: 32                  | Program output: 44                 
Correct output: 21                  | Program output: 25                 
Correct output: -22                 | Program output: 43                 
Correct output: -43                 | Program output: -37                
Correct output: -97                 | Program output: 98                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: 94                 
Correct output: -39                 | Program output: 99                 
Correct output: -19                 | Program output: 55                 
Correct output: -31                 | Program output: 16                 
Correct output: -50                 | Program output: -37                
Correct output: -98                 | Program output: -57                
Correct output: -75                 | Program output: -39                
Correct output: -75                 | Program output: -52                
Correct output: -64                 | Program output: 93                 
Correct output: -54                 | Program output: 72                 
Correct output: -50                 | Program output: 39                 
Correct output: -94                 | Program output: 69                 
Correct output: -60                 | Program output: -60                
Correct output: -81                 | Program output: 49                 
Correct output: -93                 | Program output: -75                
Correct output: -39                 | Program output: 8                  
Correct output: -97                 | Program output: 48                 
Correct output: 4                   | Program output: 19                 
Correct output: -76                 | Program output: -11                
Correct output: 46                  | Program output: 88                 
Correct output: -89                 | Program output: -61                
Correct output: -93                 | Program output: 62                 
Correct output: -83                 | Program output: 73                 
Correct output: -77                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -47                
Correct output: -95                 | Program output: -75                
Correct output: -83                 | Program output: 18                 
Correct output: -85                 | Program output: 87                 
Correct output: -88                 | Program output: 0                  
Correct output: -88                 | Program output: 81                 
Correct output: -88                 | Program output: -87                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -17                
Correct output: -97                 | Program output: 28                 
Correct output: -23                 | Program output: -23                
Correct output: -87                 | Program output: -25                
Correct output: -69                 | Program output: 73                 
Correct output: -85                 | Program output: -48                
Correct output: -53                 | Program output: 68                 
Correct output: -87                 | Program output: -40                
Correct output: -29                 | Program output: 73                 
Correct output: -48                 | Program output: 64                 
Correct output: -31                 | Program output: -14                
Correct output: -82                 | Program output: 5                  
Correct output: -35                 | Program output: 76                 
Correct output: -50                 | Program output: 70                 
Correct output: -79                 | Program output: 81                 
Correct output: -60                 | Program output: -51                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -65                
Correct output: -79                 | Program output: -40                
Correct output: -90                 | Program output: -69                
Correct output: -68                 | Program output: 6                  
Correct output: -90                 | Program output: -30                
Correct output: -95                 | Program output: 68                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 73} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop})
Lexicase best program: (integer_flush in1 exec_s () (exec_s (integer_shove print_integer in3 integer_yankdup 73 exec_s_when_autoconstructing (integer_min boolean_or) (integer_mult) (integer_empty exec_swap () () exec_empty) boolean_flush boolean_dup exec_swap (boolean_and boolean_frominteger) (integer_dec) exec_rot () () (print_integer exec_stackdepth boolean_frominteger boolean_dup_times exec_flush boolean_or integer_flush exec_pop ())) () ()) ())
Lexicase best errors: [1 1 1 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 49
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction 73} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop})
Zero cases best program: (integer_flush in1 exec_s () (exec_s (integer_shove print_integer in3 integer_yankdup 73 exec_s_when_autoconstructing (integer_min boolean_or) (integer_mult) (integer_empty exec_swap () () exec_empty) boolean_flush boolean_dup exec_swap (boolean_and boolean_frominteger) (integer_dec) exec_rot () () (print_integer exec_stackdepth boolean_frominteger boolean_dup_times exec_flush boolean_or integer_flush exec_pop ())) () ()) ())
Zero cases best errors: [1 1 1 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 49
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 618 797 180 1000 1 1000 1000 180)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (0 0 618 797 180 0 1 0 0 180)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_while} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 2, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_pop})
Best program: (integer_flush in1 exec_s () (exec_s (integer_shove print_integer in3 integer_yankdup boolean_xor exec_s_when_autoconstructing (integer_min boolean_or exec_noop) (integer_empty exec_while ()) (exec_empty) boolean_flush boolean_dup exec_swap (boolean_and boolean_frominteger) (integer_dec) exec_rot () () (print_integer exec_stackdepth boolean_frominteger boolean_dup_times exec_flush boolean_or integer_flush exec_pop ())) () ()) ())
Errors: [1 1 1 0 0 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 31
Size: 48
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 8.224
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.382 0.203 0.82 1.0 0.999 1.0 1.0 0.82)
Error minima by case: (1 1 0 0 0 1 0 1 1 0)
Average genome size in population (length): 37.734
Average program size in population (points): 53.056
Average percent parens in population: 0.282
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5955
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1669372
--- Timings ---
Current time: 1559583217285 milliseconds
Total Time:          11.0 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.3 seconds, 56.8%
Fitness Testing:      3.4 seconds, 31.1%
Report:               1.2 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 49                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 64                 
Correct output: 50                  | Program output: 78                 
Correct output: 3                   | Program output: 39                 
Correct output: 38                  | Program output: 63                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 97                 
Correct output: 12                  | Program output: 45                 
Correct output: 23                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 60                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 88                 
Correct output: 18                  | Program output: 86                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 83                 
Correct output: 21                  | Program output: 51                 
Correct output: -22                 | Program output: 88                 
Correct output: -43                 | Program output: 25                 
Correct output: -97                 | Program output: 59                 
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 45                 
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: 88                 
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: 30                 
Correct output: -60                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 60                 
Correct output: -89                 | Program output: 74                 
Correct output: -93                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -58                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -21                
Correct output: -83                 | Program output: 23                 
Correct output: -85                 | Program output: 64                 
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -15                
Correct output: -88                 | Program output: 99                 
Correct output: -18                 | Program output: 59                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: 74                 
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 86                 
Correct output: -87                 | Program output: -81                
Correct output: -29                 | Program output: 58                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 61                 
Correct output: -82                 | Program output: 51                 
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: 37                 
Correct output: -79                 | Program output: 9                  
Correct output: -60                 | Program output: 35                 
Correct output: -90                 | Program output: 8                  
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: 25                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Lexicase best program: (in2 boolean_or print_boolean boolean_dup boolean_xor boolean_swap boolean_swap print_boolean boolean_or integer_div print_integer integer_sub in1 exec_shove (exec_yank exec_s (integer_pop exec_noop integer_inc integer_fromboolean exec_swap (integer_empty) (integer_inc integer_flush integer_eq exec_yankdup integer_dec) exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank) (exec_do*while (exec_y () integer_flush boolean_dup_items exec_yankdup) exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_div integer_max) (exec_when (exec_shove (integer_gte exec_y_when_autoconstructing (integer_yankdup) exec_s () () ()))) ())) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_sub} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_div} {:close 1, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Zero cases best program: (in2 boolean_or print_boolean boolean_dup boolean_xor boolean_swap boolean_swap print_boolean boolean_or integer_div print_integer integer_sub in1 exec_shove (exec_yank exec_s (integer_pop exec_noop integer_inc integer_fromboolean exec_swap (integer_empty) (integer_inc integer_flush integer_eq exec_yankdup integer_dec) exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank) (exec_do*while (exec_y () integer_flush boolean_dup_items exec_yankdup) exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_div integer_max) (exec_when (exec_shove (integer_gte exec_y_when_autoconstructing (integer_yankdup) exec_s () () ()))) ())) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 756 248 248 1 1 248 187 1 1)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (247 756 248 248 1 1 248 187 1 1)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_324} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop})
Best program: (print_boolean exec_swap (integer_gt boolean_shove integer_shove tag_boolean_324 integer_gt integer_div exec_dup (print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot boolean_invert_first_then_and integer_fromboolean) integer_mult exec_eq) exec_noop))) ())
Errors: [0 0 0 0 1 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 30
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 8.062
Median total errors in population: 9
Error averages by case: (0.753 0.244 0.752 0.752 0.999 0.999 0.752 0.813 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.424
Average program size in population (points): 39.182
Average percent parens in population: 0.311
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.233625
Median age in population: 6.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.485
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1924544
--- Timings ---
Current time: 1559583219504 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.0 seconds, 59.9%
Fitness Testing:      3.7 seconds, 28.0%
Report:               1.5 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 62                 
Correct output: 3                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 51                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 2                  
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -22                
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: 68                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: 12                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: 6                  
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -13                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Lexicase best program: (in2 boolean_or print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 82
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Zero cases best program: (in2 boolean_or print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 82
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 437 288 924 436 436 288 201 723 201)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (201 437 288 924 436 436 288 201 723 201)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in2} {:close 1, :instruction boolean_or} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Best program: (in2 boolean_or print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Errors: [1 0 0 0 0 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 57
Size: 82
Percent parens: 0.305
--- Population Statistics ---
Average total errors in population: 5.865
Median total errors in population: 6
Error averages by case: (0.799 0.563 0.712 0.076 0.564 0.564 0.712 0.799 0.277 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.027
Average program size in population (points): 59.96
Average percent parens in population: 0.270
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.8505
Median age in population: 7.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2493500
--- Timings ---
Current time: 1559583222281 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 62.3%
Fitness Testing:      4.3 seconds, 26.4%
Report:               1.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 87                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 65                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 4                  
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -26                
Correct output: -98                 | Program output: 8                  
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -45                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -15                
Correct output: -97                 | Program output: -41                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 22                 
Correct output: -61                 | Program output: -17                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -51                
Correct output: -69                 | Program output: -36                
Correct output: -85                 | Program output: -1                 
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (615 317 615 1000 626 618 1000 317 618 616)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (615 317 615 0 626 618 0 317 618 616)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 boolean_dup_times boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 48
Size: 66
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 5.658
Median total errors in population: 4
Error averages by case: (0.385 0.683 0.385 1.0 0.374 0.382 1.0 0.683 0.382 0.384)
Error minima by case: (0 0 0 1 0 0 1 0 0 0)
Average genome size in population (length): 51.723
Average program size in population (points): 73.208
Average percent parens in population: 0.289
Minimum age in population: 7.875
Maximum age in population: 10.71875
Average age in population: 9.36171875
Median age in population: 9.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 264
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 269
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2680403
--- Timings ---
Current time: 1559583224713 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.0 seconds, 65.0%
Fitness Testing:      4.5 seconds, 24.2%
Report:               1.9 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 87                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 65                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 4                  
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -26                
Correct output: -98                 | Program output: 8                  
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -45                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -15                
Correct output: -97                 | Program output: -41                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 22                 
Correct output: -61                 | Program output: -17                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -51                
Correct output: -69                 | Program output: -36                
Correct output: -85                 | Program output: -1                 
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (in3 integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Lexicase best errors: [1 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (in3 integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ()))) ())))
Zero cases best errors: [1 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 952 937 1 1 935 938 1 937 934)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (1 952 937 1 1 935 938 1 937 934)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_while} {:close 1, :instruction exec_when} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_s})
Best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor integer_dup_times integer_fromboolean) integer_flush integer_eq exec_yankdup integer_dec) exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq exec_empty integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items exec_yankdup) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap integer_yank) boolean_dup_items integer_flush exec_while () exec_when () exec_shove () integer_gte exec_y_when_autoconstructing (integer_yankdup exec_s () () ())) () ())))
Errors: [1 0 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 53
Size: 73
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 4.363
Median total errors in population: 4
Error averages by case: (0.999 0.048 0.063 0.999 0.999 0.065 0.062 0.999 0.063 0.066)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.93
Average program size in population (points): 74.327
Average percent parens in population: 0.286
Minimum age in population: 10.25
Maximum age in population: 12.125
Average age in population: 11.1833125
Median age in population: 11.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.569
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 225
Syntactic diversity (% unique Push programs):	 0.557
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2846262
--- Timings ---
Current time: 1559583227169 milliseconds
Total Time:          20.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.7 seconds, 66.4%
Fitness Testing:      4.7 seconds, 22.8%
Report:               2.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 409
Test mean error for best: 0.40900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 87                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 65                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 63                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 4                  
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -26                
Correct output: -98                 | Program output: 8                  
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -45                
Correct output: -93                 | Program output: -57                
Correct output: -39                 | Program output: -15                
Correct output: -97                 | Program output: -41                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 22                 
Correct output: -61                 | Program output: -17                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: 63                 
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -51                
Correct output: -69                 | Program output: -36                
Correct output: -85                 | Program output: -1                 
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: 7                  
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -51                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 boolean_dup_times boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (boolean_rot integer_dup_times integer_fromboolean) (integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())) ())))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 boolean_dup_times boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (boolean_rot integer_dup_times integer_fromboolean) (integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_eq boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())) ())))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 828 422 830 948 423 423 421 422 830)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (96 828 422 830 948 423 423 421 422 830)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_min} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 boolean_dup_times boolean_dup in3 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_min exec_y ()) (integer_flush boolean_dup_items boolean_shove) exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 43
Size: 60
Percent parens: 0.283
--- Population Statistics ---
Average total errors in population: 4.357
Median total errors in population: 5
Error averages by case: (0.904 0.172 0.578 0.17 0.052 0.577 0.577 0.579 0.578 0.17)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.898
Average program size in population (points): 70.81
Average percent parens in population: 0.280
Minimum age in population: 11.25
Maximum age in population: 14.125
Average age in population: 13.128
Median age in population: 13.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 201
Genome diversity (% unique genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 204
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3125869
--- Timings ---
Current time: 1559583229181 milliseconds
Total Time:          23.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 66.2%
Fitness Testing:      5.0 seconds, 21.8%
Report:               2.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 62                 
Correct output: 3                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 51                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 2                  
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -22                
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: 68                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: 12                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: 6                  
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -13                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Lexicase best errors: [1 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Zero cases best errors: [1 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (104 168 167 167 950 104 688 104 688 688)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (104 168 167 167 950 104 688 104 688 688)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Errors: [1 0 0 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.172
Median total errors in population: 6
Error averages by case: (0.896 0.832 0.833 0.833 0.05 0.896 0.312 0.896 0.312 0.312)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.79
Average program size in population (points): 72.265
Average percent parens in population: 0.281
Minimum age in population: 12.25
Maximum age in population: 16.125
Average age in population: 14.433078125
Median age in population: 14.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 40
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3413668
--- Timings ---
Current time: 1559583231764 milliseconds
Total Time:          25.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 67.4%
Fitness Testing:      5.3 seconds, 20.9%
Report:               2.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 414
Test mean error for best: 0.41400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 48                 
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 59                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 55                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 49                 
Correct output: 12                  | Program output: 45                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 59                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 57                 
Correct output: 18                  | Program output: 83                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 49                 
Correct output: -22                 | Program output: 88                 
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: 32                 
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 30                 
Correct output: -60                 | Program output: 49                 
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 58                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -23                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -59                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -21                
Correct output: -83                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -85                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -13                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: 28                 
Correct output: -87                 | Program output: -81                
Correct output: -29                 | Program output: 34                 
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: 61                 
Correct output: -82                 | Program output: 51                 
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -23                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: 35                 
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -14                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup exec_dup () in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_dup} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup exec_dup () in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean) integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (622 16 960 16 626 622 622 622 16 624)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (622 16 960 16 626 622 622 622 16 624)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 print_boolean in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ())))))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 48
Size: 67
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 5.254
Median total errors in population: 3
Error averages by case: (0.378 0.984 0.04 0.984 0.374 0.378 0.378 0.378 0.984 0.376)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.388
Average program size in population (points): 71.168
Average percent parens in population: 0.276
Minimum age in population: 13.75
Maximum age in population: 17.2265625
Average age in population: 15.71084375
Median age in population: 15.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 296
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3926198
--- Timings ---
Current time: 1559583234304 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.0 seconds, 67.5%
Fitness Testing:      5.8 seconds, 20.5%
Report:               3.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 442
Test mean error for best: 0.44200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 63                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 62                 
Correct output: 3                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 71                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 51                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: 0                  
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: 2                  
Correct output: -75                 | Program output: 43                 
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -22                
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -10                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: 68                 
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: 12                 
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 51                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: 6                  
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -13                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: 30                 
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (487 654 487 1000 654 491 743 955 737 739)
Population mean number of elite cases: 6.95
Count of perfect (error zero) individuals by case: (487 654 487 0 654 491 743 955 737 739)
Population mean number of perfect (error zero) cases: 5.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_dup_times integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_mult exec_swap (exec_s_when_autoconstructing () (integer_inc integer_flush integer_eq exec_yankdup integer_dec) (exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ()))) ()))))
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.053
Median total errors in population: 4
Error averages by case: (0.513 0.346 0.513 1.0 0.346 0.509 0.257 0.045 0.263 0.261)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 48.895
Average program size in population (points): 68.095
Average percent parens in population: 0.282
Minimum age in population: 15.71875
Maximum age in population: 18.8125
Average age in population: 17.353171875
Median age in population: 17.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4157460
--- Timings ---
Current time: 1559583236857 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.9 seconds, 68.5%
Fitness Testing:      6.0 seconds, 19.7%
Report:               3.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 704 514 702 704 1000 690 702 703 691)
Population mean number of elite cases: 6.92
Count of perfect (error zero) individuals by case: (514 704 514 702 704 0 690 702 703 691)
Population mean number of perfect (error zero) cases: 5.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 67
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 4.076
Median total errors in population: 3
Error averages by case: (0.486 0.296 0.486 0.298 0.296 1.0 0.31 0.298 0.297 0.309)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 48.968
Average program size in population (points): 67.926
Average percent parens in population: 0.278
Minimum age in population: 17.1875
Maximum age in population: 20.5
Average age in population: 18.8851640625
Median age in population: 18.953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4714032
--- Timings ---
Current time: 1559583239669 milliseconds
Total Time:          33.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 68.6%
Fitness Testing:      6.5 seconds, 19.4%
Report:               3.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 209
Test mean error for best: 0.20900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -6                 
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: 19                 
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 53                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 63                 
Correct output: 47                  | Program output: 58                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -56                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 18                 
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -13                
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: 21                 
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -78                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (941 943 943 926 2 927 2 942 956 927)
Population mean number of elite cases: 7.51
Count of perfect (error zero) individuals by case: (941 943 943 926 2 927 2 942 956 927)
Population mean number of perfect (error zero) cases: 7.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 47
Size: 67
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 2.491
Median total errors in population: 2
Error averages by case: (0.059 0.057 0.057 0.074 0.998 0.073 0.998 0.058 0.044 0.073)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.052
Average program size in population (points): 67.039
Average percent parens in population: 0.298
Minimum age in population: 20.0703125
Maximum age in population: 21.0703125
Average age in population: 20.5603125
Median age in population: 20.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 498
Genome diversity (% unique genomes):	 0.477
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 507
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4885263
--- Timings ---
Current time: 1559583242034 milliseconds
Total Time:          35.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 69.5%
Fitness Testing:      6.7 seconds, 18.6%
Report:               4.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 231
Test mean error for best: 0.23100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: 17                  | Program output: 17                 
Correct output: -46                 | Program output: 92                 
Correct output: -23                 | Program output: -23                
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: -13                
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 44                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 12                 
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 62                 
Correct output: 3                   | Program output: 8                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 34                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 46                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 18                 
Correct output: 22                  | Program output: 22                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: 47                  | Program output: 47                 
Correct output: 32                  | Program output: 44                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -37                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -88                
Correct output: -39                 | Program output: -39                
Correct output: -19                 | Program output: 23                 
Correct output: -31                 | Program output: 2                  
Correct output: -50                 | Program output: -50                
Correct output: -98                 | Program output: -98                
Correct output: -75                 | Program output: -39                
Correct output: -75                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -54                 | Program output: -22                
Correct output: -50                 | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -81                 | Program output: -81                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: -39                
Correct output: -97                 | Program output: -97                
Correct output: 4                   | Program output: 7                  
Correct output: -76                 | Program output: -11                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -83                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -13                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -25                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -32                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -87                 | Program output: -87                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -48                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -34                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: 6                  
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -79                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -61                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_y ()) (integer_flush boolean_dup_items boolean_shove) exec_rot (integer_gt integer_swap exec_pop (in1 tagged_209) integer_swap) () ()) ()) ()))))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_y ()) (integer_flush boolean_dup_items boolean_shove) exec_rot (integer_gt integer_swap exec_pop (in1 tagged_209) integer_swap) () ()) ()) ()))))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (924 955 531 923 954 398 922 926 950 398)
Population mean number of elite cases: 7.88
Count of perfect (error zero) individuals by case: (924 955 531 923 954 398 922 926 950 398)
Population mean number of perfect (error zero) cases: 7.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ()) ()))))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 67
Percent parens: 0.299
--- Population Statistics ---
Average total errors in population: 2.119
Median total errors in population: 2
Error averages by case: (0.076 0.045 0.469 0.077 0.046 0.602 0.078 0.074 0.05 0.602)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.996
Average program size in population (points): 66.9
Average percent parens in population: 0.297
Minimum age in population: 21.0703125
Maximum age in population: 23.0703125
Average age in population: 21.8083125
Median age in population: 22.0703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5225652
--- Timings ---
Current time: 1559583244450 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 69.9%
Fitness Testing:      7.0 seconds, 18.4%
Report:               4.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 199
Test mean error for best: 0.19900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 53                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: 47                  | Program output: 47                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 4                  
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -37                
Correct output: -98                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -81                 | Program output: -45                
Correct output: -93                 | Program output: -75                
Correct output: -39                 | Program output: -15                
Correct output: -97                 | Program output: -41                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -17                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -87                 | Program output: -51                
Correct output: -69                 | Program output: -36                
Correct output: -85                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 2, :instruction tagged_209} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush) (boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min) exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) () exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209)) integer_swap) () ()) ()))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction in2} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 2, :instruction tagged_209} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_sub tagged_437 in4 print_boolean boolean_dup in3 exec_k_when_autoconstructing () (integer_min) in2 integer_min print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush) (boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min) exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) () exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209)) integer_swap) () ()) ()))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 457 863 453 454 454 960 454 960 864)
Population mean number of elite cases: 6.78
Count of perfect (error zero) individuals by case: (862 457 863 453 454 454 960 454 960 864)
Population mean number of perfect (error zero) cases: 6.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction tagged_437} {:close 0, :instruction in4} {:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_min} {:close 1, :instruction exec_if} {:close 2, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_615} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_y} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction tagged_209} {:close 0, :instruction integer_swap})
Best program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 47
Size: 69
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 3.219
Median total errors in population: 5
Error averages by case: (0.138 0.543 0.137 0.547 0.546 0.546 0.04 0.546 0.04 0.136)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.853
Average program size in population (points): 66.985
Average percent parens in population: 0.300
Minimum age in population: 22.0703125
Maximum age in population: 24.8203125
Average age in population: 23.3038125
Median age in population: 23.3203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5690485
--- Timings ---
Current time: 1559583246990 milliseconds
Total Time:          40.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.5 seconds, 69.8%
Fitness Testing:      7.4 seconds, 18.2%
Report:               4.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 15
Successful program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 69


Auto-simplifying with starting size: 69
step: 0
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 500
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1000
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 1500
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2000
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 2500
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3000
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 3500
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4000
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 4500
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

step: 5000
program: (integer_sub tagged_437 in4 in1 boolean_dup in3 exec_k_when_autoconstructing () (integer_min) exec_if () (integer_min) print_integer exec_do*times (in2 exec_while (exec_do*while (boolean_and integer_swap boolean_xor boolean_rot integer_dup_times integer_fromboolean integer_rot exec_swap () (exec_s_when_autoconstructing () (integer_inc exec_k_when_autoconstructing (boolean_invert_first_then_and boolean_flush boolean_yankdup tagged_615 integer_pop boolean_stackdepth integer_mult integer_min exec_yank exec_do*while (exec_y ()) integer_flush boolean_dup_items boolean_shove) (exec_rot (integer_gt exec_do*range (exec_pop (in1 tagged_209) integer_swap)) () ())) ())))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 69

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 199
Test mean error for best: 0.19900
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 1
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 1
Test Case   76 | Error: 1
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -71                 | Program output: -71                
Correct output: 17                  | Program output: 69                 
Correct output: -46                 | Program output: -46                
Correct output: -23                 | Program output: -23                
Correct output: 51                  | Program output: 51                 
Correct output: 13                  | Program output: 13                 
Correct output: 4                   | Program output: 4                  
Correct output: -13                 | Program output: 29                 
Correct output: -16                 | Program output: -16                
Correct output: 57                  | Program output: 57                 
Correct output: 76                  | Program output: 76                 
Correct output: 84                  | Program output: 84                 
Correct output: -91                 | Program output: -91                
Correct output: 19                  | Program output: 19                 
Correct output: -85                 | Program output: -85                
Correct output: 42                  | Program output: 42                 
Correct output: 9                   | Program output: 9                  
Correct output: 12                  | Program output: 34                 
Correct output: 17                  | Program output: 17                 
Correct output: 50                  | Program output: 50                 
Correct output: 3                   | Program output: 3                  
Correct output: 38                  | Program output: 38                 
Correct output: 34                  | Program output: 53                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 23                  | Program output: 23                 
Correct output: 22                  | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 22                  | Program output: 70                 
Correct output: 30                  | Program output: 30                 
Correct output: 18                  | Program output: 18                 
Correct output: 47                  | Program output: 47                 
Correct output: 32                  | Program output: 32                 
Correct output: 21                  | Program output: 21                 
Correct output: -22                 | Program output: -22                
Correct output: -43                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -39                 | Program output: 4                  
Correct output: -19                 | Program output: -19                
Correct output: -31                 | Program output: -31                
Correct output: -50                 | Program output: -37                
Correct output: -98                 | Program output: -57                
Correct output: -75                 | Program output: -75                
Correct output: -75                 | Program output: -75                
Correct output: -64                 | Program output: -63                
Correct output: -54                 | Program output: -54                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -60                 | Program output: -60                
Correct output: -81                 | Program output: -45                
Correct output: -93                 | Program output: -75                
Correct output: -39                 | Program output: -15                
Correct output: -97                 | Program output: -41                
Correct output: 4                   | Program output: 4                  
Correct output: -76                 | Program output: -76                
Correct output: 46                  | Program output: 46                 
Correct output: -89                 | Program output: -89                
Correct output: -93                 | Program output: -93                
Correct output: -83                 | Program output: -50                
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -61                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -83                 | Program output: -83                
Correct output: -85                 | Program output: -85                
Correct output: -88                 | Program output: -70                
Correct output: -88                 | Program output: -88                
Correct output: -88                 | Program output: -88                
Correct output: -18                 | Program output: -18                
Correct output: -32                 | Program output: -17                
Correct output: -97                 | Program output: -97                
Correct output: -23                 | Program output: -23                
Correct output: -87                 | Program output: -51                
Correct output: -69                 | Program output: -36                
Correct output: -85                 | Program output: -48                
Correct output: -53                 | Program output: -53                
Correct output: -87                 | Program output: -87                
Correct output: -29                 | Program output: -29                
Correct output: -48                 | Program output: -35                
Correct output: -31                 | Program output: -31                
Correct output: -82                 | Program output: -82                
Correct output: -35                 | Program output: -35                
Correct output: -50                 | Program output: -50                
Correct output: -79                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -90                 | Program output: -69                
Correct output: -68                 | Program output: -68                
Correct output: -90                 | Program output: -90                
Correct output: -95                 | Program output: -95                
;;******************************
