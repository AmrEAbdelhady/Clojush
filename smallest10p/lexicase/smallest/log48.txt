Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[100 -70 100 100] -70] [[-95 93 -95 -95] -95] [[65 65 -63 65] -63] [[76 76 -34 76] -34] [[95 99 99 99] 95] [[-59 85 -59 -59] -59] [[-65 -65 39 -65] -65] [[-93 -93 42 -93] -93] [[-88 -88 -54 -88] -88] [[55 -6 -6 -6] -6] [(-72 -72 -72 -72) -72] [(89 89 89 89) 89] [(-97 -97 -97 -97) -97] [(83 83 83 83) 83] [(-50 -50 -50 -50) -50] [(81 29 100 0) 0] [(88 98 46 83) 46] [(11 5 91 85) 5] [(51 54 13 38) 13] [(39 39 82 57) 39] [(51 37 5 97) 5] [(44 62 34 56) 34] [(54 16 100 15) 15] [(54 66 31 54) 31] [(75 68 62 12) 12] [(28 11 100 84) 11] [(80 71 57 44) 44] [(89 29 99 99) 29] [(69 65 54 39) 39] [(5 17 95 57) 5] [(76 0 21 74) 0] [(40 0 67 28) 0] [(51 60 11 55) 11] [(95 64 64 31) 31] [(36 66 74 61) 36] [(52 10 14 65) 10] [(95 -75 33 62) -75] [(21 12 -63 62) -63] [(70 -92 42 5) -92] [(-6 -90 98 -87) -90] [(9 99 -89 -67) -89] [(39 -30 66 -62) -62] [(47 -45 -18 -31) -45] [(-42 45 4 5) -42] [(60 53 -27 -82) -82] [(-65 54 59 24) -65] [(-10 -57 10 36) -57] [(83 30 -34 49) -34] [(-78 -92 -83 42) -92] [(-35 -11 -53 24) -53] [(92 9 -81 62) -81] [(-51 0 42 50) -51] [(-18 6 29 -92) -92] [(14 15 -31 -29) -31] [(-20 -31 -37 15) -37] [(-80 57 -83 63) -83] [(40 72 87 10) 10] [(75 -52 14 8) -52] [(5 -77 -82 -41) -82] [(72 66 89 -79) -79] [(48 16 57 -25) -25] [(-6 -69 -97 39) -97] [(-30 22 94 -42) -42] [(-19 98 85 -62) -62] [(-60 -44 -74 28) -74] [(-41 -40 86 -36) -41] [(-15 56 5 -9) -15] [(44 -2 67 -32) -32] [(-83 75 8 91) -83] [(93 -74 86 72) -74] [(89 -67 -36 29) -67] [(38 -12 16 90) -12] [(33 -22 -86 40) -86] [(-50 67 89 84) -50] [(-85 -17 59 47) -85] [(-18 27 91 90) -18] [(-94 63 91 -90) -94] [(-91 -91 -77 -2) -91] [(-69 3 45 -12) -69] [(-49 -85 -3 9) -85] [(-53 -41 -67 92) -67] [(-34 88 63 -42) -42] [(-33 -12 24 61) -33] [(46 24 -53 -19) -53] [(32 -65 22 -8) -65] [(-87 -6 -79 -45) -87] [(-84 24 88 -50) -84] [(74 24 -95 -15) -95] [(43 22 -2 -84) -84] [(35 73 -5 24) -5] [(50 2 19 -74) -74] [(11 -29 13 -86) -86] [(49 -3 48 -18) -18] [(66 31 -55 -75) -75] [(-71 -26 28 -22) -71])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[100 -70 100 100] -70]
Train Case:   6 | Input/Output: [[-95 93 -95 -95] -95]
Train Case:   7 | Input/Output: [[65 65 -63 65] -63]
Train Case:   8 | Input/Output: [[76 76 -34 76] -34]
Train Case:   9 | Input/Output: [[95 99 99 99] 95]
Train Case:  10 | Input/Output: [[-59 85 -59 -59] -59]
Train Case:  11 | Input/Output: [[-65 -65 39 -65] -65]
Train Case:  12 | Input/Output: [[-93 -93 42 -93] -93]
Train Case:  13 | Input/Output: [[-88 -88 -54 -88] -88]
Train Case:  14 | Input/Output: [[55 -6 -6 -6] -6]
Train Case:  15 | Input/Output: [(-72 -72 -72 -72) -72]
Train Case:  16 | Input/Output: [(89 89 89 89) 89]
Train Case:  17 | Input/Output: [(-97 -97 -97 -97) -97]
Train Case:  18 | Input/Output: [(83 83 83 83) 83]
Train Case:  19 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  20 | Input/Output: [(81 29 100 0) 0]
Train Case:  21 | Input/Output: [(88 98 46 83) 46]
Train Case:  22 | Input/Output: [(11 5 91 85) 5]
Train Case:  23 | Input/Output: [(51 54 13 38) 13]
Train Case:  24 | Input/Output: [(39 39 82 57) 39]
Train Case:  25 | Input/Output: [(51 37 5 97) 5]
Train Case:  26 | Input/Output: [(44 62 34 56) 34]
Train Case:  27 | Input/Output: [(54 16 100 15) 15]
Train Case:  28 | Input/Output: [(54 66 31 54) 31]
Train Case:  29 | Input/Output: [(75 68 62 12) 12]
Train Case:  30 | Input/Output: [(28 11 100 84) 11]
Train Case:  31 | Input/Output: [(80 71 57 44) 44]
Train Case:  32 | Input/Output: [(89 29 99 99) 29]
Train Case:  33 | Input/Output: [(69 65 54 39) 39]
Train Case:  34 | Input/Output: [(5 17 95 57) 5]
Train Case:  35 | Input/Output: [(76 0 21 74) 0]
Train Case:  36 | Input/Output: [(40 0 67 28) 0]
Train Case:  37 | Input/Output: [(51 60 11 55) 11]
Train Case:  38 | Input/Output: [(95 64 64 31) 31]
Train Case:  39 | Input/Output: [(36 66 74 61) 36]
Train Case:  40 | Input/Output: [(52 10 14 65) 10]
Train Case:  41 | Input/Output: [(95 -75 33 62) -75]
Train Case:  42 | Input/Output: [(21 12 -63 62) -63]
Train Case:  43 | Input/Output: [(70 -92 42 5) -92]
Train Case:  44 | Input/Output: [(-6 -90 98 -87) -90]
Train Case:  45 | Input/Output: [(9 99 -89 -67) -89]
Train Case:  46 | Input/Output: [(39 -30 66 -62) -62]
Train Case:  47 | Input/Output: [(47 -45 -18 -31) -45]
Train Case:  48 | Input/Output: [(-42 45 4 5) -42]
Train Case:  49 | Input/Output: [(60 53 -27 -82) -82]
Train Case:  50 | Input/Output: [(-65 54 59 24) -65]
Train Case:  51 | Input/Output: [(-10 -57 10 36) -57]
Train Case:  52 | Input/Output: [(83 30 -34 49) -34]
Train Case:  53 | Input/Output: [(-78 -92 -83 42) -92]
Train Case:  54 | Input/Output: [(-35 -11 -53 24) -53]
Train Case:  55 | Input/Output: [(92 9 -81 62) -81]
Train Case:  56 | Input/Output: [(-51 0 42 50) -51]
Train Case:  57 | Input/Output: [(-18 6 29 -92) -92]
Train Case:  58 | Input/Output: [(14 15 -31 -29) -31]
Train Case:  59 | Input/Output: [(-20 -31 -37 15) -37]
Train Case:  60 | Input/Output: [(-80 57 -83 63) -83]
Train Case:  61 | Input/Output: [(40 72 87 10) 10]
Train Case:  62 | Input/Output: [(75 -52 14 8) -52]
Train Case:  63 | Input/Output: [(5 -77 -82 -41) -82]
Train Case:  64 | Input/Output: [(72 66 89 -79) -79]
Train Case:  65 | Input/Output: [(48 16 57 -25) -25]
Train Case:  66 | Input/Output: [(-6 -69 -97 39) -97]
Train Case:  67 | Input/Output: [(-30 22 94 -42) -42]
Train Case:  68 | Input/Output: [(-19 98 85 -62) -62]
Train Case:  69 | Input/Output: [(-60 -44 -74 28) -74]
Train Case:  70 | Input/Output: [(-41 -40 86 -36) -41]
Train Case:  71 | Input/Output: [(-15 56 5 -9) -15]
Train Case:  72 | Input/Output: [(44 -2 67 -32) -32]
Train Case:  73 | Input/Output: [(-83 75 8 91) -83]
Train Case:  74 | Input/Output: [(93 -74 86 72) -74]
Train Case:  75 | Input/Output: [(89 -67 -36 29) -67]
Train Case:  76 | Input/Output: [(38 -12 16 90) -12]
Train Case:  77 | Input/Output: [(33 -22 -86 40) -86]
Train Case:  78 | Input/Output: [(-50 67 89 84) -50]
Train Case:  79 | Input/Output: [(-85 -17 59 47) -85]
Train Case:  80 | Input/Output: [(-18 27 91 90) -18]
Train Case:  81 | Input/Output: [(-94 63 91 -90) -94]
Train Case:  82 | Input/Output: [(-91 -91 -77 -2) -91]
Train Case:  83 | Input/Output: [(-69 3 45 -12) -69]
Train Case:  84 | Input/Output: [(-49 -85 -3 9) -85]
Train Case:  85 | Input/Output: [(-53 -41 -67 92) -67]
Train Case:  86 | Input/Output: [(-34 88 63 -42) -42]
Train Case:  87 | Input/Output: [(-33 -12 24 61) -33]
Train Case:  88 | Input/Output: [(46 24 -53 -19) -53]
Train Case:  89 | Input/Output: [(32 -65 22 -8) -65]
Train Case:  90 | Input/Output: [(-87 -6 -79 -45) -87]
Train Case:  91 | Input/Output: [(-84 24 88 -50) -84]
Train Case:  92 | Input/Output: [(74 24 -95 -15) -95]
Train Case:  93 | Input/Output: [(43 22 -2 -84) -84]
Train Case:  94 | Input/Output: [(35 73 -5 24) -5]
Train Case:  95 | Input/Output: [(50 2 19 -74) -74]
Train Case:  96 | Input/Output: [(11 -29 13 -86) -86]
Train Case:  97 | Input/Output: [(49 -3 48 -18) -18]
Train Case:  98 | Input/Output: [(66 31 -55 -75) -75]
Train Case:  99 | Input/Output: [(-71 -26 28 -22) -71]
Test Case:   0 | Input/Output: [[91 91 91 15] 15]
Test Case:   1 | Input/Output: [[94 -21 -21 -21] -21]
Test Case:   2 | Input/Output: [[11 11 11 75] 11]
Test Case:   3 | Input/Output: [[96 96 99 96] 96]
Test Case:   4 | Input/Output: [[1 56 56 56] 1]
Test Case:   5 | Input/Output: [[51 -44 -44 -44] -44]
Test Case:   6 | Input/Output: [[-9 -31 -31 -31] -31]
Test Case:   7 | Input/Output: [[-56 76 -56 -56] -56]
Test Case:   8 | Input/Output: [[2 -12 2 2] -12]
Test Case:   9 | Input/Output: [[97 -86 -86 -86] -86]
Test Case:  10 | Input/Output: [[-84 -84 -84 17] -84]
Test Case:  11 | Input/Output: [[-88 -88 -81 -88] -88]
Test Case:  12 | Input/Output: [[-75 -75 -75 90] -75]
Test Case:  13 | Input/Output: [[71 71 71 49] 49]
Test Case:  14 | Input/Output: [[-3 100 100 100] -3]
Test Case:  15 | Input/Output: [[75 75 75 8] 8]
Test Case:  16 | Input/Output: [[-96 -96 -96 91] -96]
Test Case:  17 | Input/Output: [[10 10 10 -67] -67]
Test Case:  18 | Input/Output: [[-72 -81 -81 -81] -81]
Test Case:  19 | Input/Output: [[-3 -3 -3 -35] -35]
Test Case:  20 | Input/Output: [[21 -60 21 21] -60]
Test Case:  21 | Input/Output: [[46 98 98 98] 46]
Test Case:  22 | Input/Output: [[68 68 68 -34] -34]
Test Case:  23 | Input/Output: [[-72 88 -72 -72] -72]
Test Case:  24 | Input/Output: [[49 -55 49 49] -55]
Test Case:  25 | Input/Output: [[-18 -54 -18 -18] -54]
Test Case:  26 | Input/Output: [[71 23 23 23] 23]
Test Case:  27 | Input/Output: [[73 73 73 87] 73]
Test Case:  28 | Input/Output: [[93 93 -52 93] -52]
Test Case:  29 | Input/Output: [[6 6 6 -18] -18]
Test Case:  30 | Input/Output: [[-30 -11 -11 -11] -30]
Test Case:  31 | Input/Output: [[-44 -44 -44 -44] -44]
Test Case:  32 | Input/Output: [[-67 25 -67 -67] -67]
Test Case:  33 | Input/Output: [[74 74 73 74] 73]
Test Case:  34 | Input/Output: [[-47 -91 -91 -91] -91]
Test Case:  35 | Input/Output: [[-93 -93 81 -93] -93]
Test Case:  36 | Input/Output: [[57 57 -43 57] -43]
Test Case:  37 | Input/Output: [[-63 90 -63 -63] -63]
Test Case:  38 | Input/Output: [[-92 -92 -92 -21] -92]
Test Case:  39 | Input/Output: [[84 34 84 84] 34]
Test Case:  40 | Input/Output: [[58 58 -85 58] -85]
Test Case:  41 | Input/Output: [[-4 -4 22 -4] -4]
Test Case:  42 | Input/Output: [[-53 -11 -53 -53] -53]
Test Case:  43 | Input/Output: [[-96 -96 -96 52] -96]
Test Case:  44 | Input/Output: [[-61 -61 -61 -27] -61]
Test Case:  45 | Input/Output: [[59 -26 -26 -26] -26]
Test Case:  46 | Input/Output: [[-33 -33 -46 -33] -46]
Test Case:  47 | Input/Output: [[-11 67 -11 -11] -11]
Test Case:  48 | Input/Output: [[77 77 77 -8] -8]
Test Case:  49 | Input/Output: [[56 56 -40 56] -40]
Test Case:  50 | Input/Output: [[-86 -72 -72 -72] -86]
Test Case:  51 | Input/Output: [[-14 13 13 13] -14]
Test Case:  52 | Input/Output: [[89 12 89 89] 12]
Test Case:  53 | Input/Output: [[27 -74 -74 -74] -74]
Test Case:  54 | Input/Output: [[56 56 -88 56] -88]
Test Case:  55 | Input/Output: [[-76 16 -76 -76] -76]
Test Case:  56 | Input/Output: [[-95 -95 -95 15] -95]
Test Case:  57 | Input/Output: [[12 -69 -69 -69] -69]
Test Case:  58 | Input/Output: [[71 92 71 71] 71]
Test Case:  59 | Input/Output: [[-2 -35 -2 -2] -35]
Test Case:  60 | Input/Output: [[82 82 82 -7] -7]
Test Case:  61 | Input/Output: [[51 -98 51 51] -98]
Test Case:  62 | Input/Output: [[31 31 31 98] 31]
Test Case:  63 | Input/Output: [[-15 5 5 5] -15]
Test Case:  64 | Input/Output: [[-100 41 -100 -100] -100]
Test Case:  65 | Input/Output: [[-84 -84 -84 94] -84]
Test Case:  66 | Input/Output: [[57 57 57 -54] -54]
Test Case:  67 | Input/Output: [[62 -64 -64 -64] -64]
Test Case:  68 | Input/Output: [[31 -31 31 31] -31]
Test Case:  69 | Input/Output: [[29 29 29 29] 29]
Test Case:  70 | Input/Output: [[-63 84 -63 -63] -63]
Test Case:  71 | Input/Output: [[9 9 9 -31] -31]
Test Case:  72 | Input/Output: [[-92 87 -92 -92] -92]
Test Case:  73 | Input/Output: [[-94 -94 -94 17] -94]
Test Case:  74 | Input/Output: [[91 91 36 91] 36]
Test Case:  75 | Input/Output: [[-47 -47 -47 -47] -47]
Test Case:  76 | Input/Output: [[-39 -30 -39 -39] -39]
Test Case:  77 | Input/Output: [[-67 -67 -67 -76] -76]
Test Case:  78 | Input/Output: [[-81 -81 -40 -81] -81]
Test Case:  79 | Input/Output: [[84 37 84 84] 37]
Test Case:  80 | Input/Output: [[-76 -86 -76 -76] -86]
Test Case:  81 | Input/Output: [[-79 -79 -57 -79] -79]
Test Case:  82 | Input/Output: [[35 35 35 -81] -81]
Test Case:  83 | Input/Output: [[-100 -96 -100 -100] -100]
Test Case:  84 | Input/Output: [[-80 -80 -43 -80] -80]
Test Case:  85 | Input/Output: [[42 91 42 42] 42]
Test Case:  86 | Input/Output: [[67 67 8 67] 8]
Test Case:  87 | Input/Output: [[19 -44 19 19] -44]
Test Case:  88 | Input/Output: [[11 11 100 11] 11]
Test Case:  89 | Input/Output: [[-65 45 -65 -65] -65]
Test Case:  90 | Input/Output: [[-5 29 -5 -5] -5]
Test Case:  91 | Input/Output: [[23 23 -84 23] -84]
Test Case:  92 | Input/Output: [[81 81 98 81] 81]
Test Case:  93 | Input/Output: [[30 -90 30 30] -90]
Test Case:  94 | Input/Output: [[43 4 43 43] 4]
Test Case:  95 | Input/Output: [[-33 -33 69 -33] -33]
Test Case:  96 | Input/Output: [[84 72 72 72] 72]
Test Case:  97 | Input/Output: [[64 64 64 -63] -63]
Test Case:  98 | Input/Output: [[29 23 29 29] 23]
Test Case:  99 | Input/Output: [[48 -44 48 48] -44]
Test Case: 100 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 101 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 102 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 103 | Input/Output: [(31 31 31 31) 31]
Test Case: 104 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 105 | Input/Output: [(87 87 87 87) 87]
Test Case: 106 | Input/Output: [(37 37 37 37) 37]
Test Case: 107 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 108 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 109 | Input/Output: [(40 40 40 40) 40]
Test Case: 110 | Input/Output: [(69 69 69 69) 69]
Test Case: 111 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 112 | Input/Output: [(14 14 14 14) 14]
Test Case: 113 | Input/Output: [(98 98 98 98) 98]
Test Case: 114 | Input/Output: [(36 36 36 36) 36]
Test Case: 115 | Input/Output: [(5 5 5 5) 5]
Test Case: 116 | Input/Output: [(50 50 50 50) 50]
Test Case: 117 | Input/Output: [(73 73 73 73) 73]
Test Case: 118 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 119 | Input/Output: [(59 59 59 59) 59]
Test Case: 120 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 121 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 122 | Input/Output: [(60 60 60 60) 60]
Test Case: 123 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 124 | Input/Output: [(89 89 89 89) 89]
Test Case: 125 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 126 | Input/Output: [(54 54 54 54) 54]
Test Case: 127 | Input/Output: [(83 83 83 83) 83]
Test Case: 128 | Input/Output: [(78 78 78 78) 78]
Test Case: 129 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 130 | Input/Output: [(78 78 78 78) 78]
Test Case: 131 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 132 | Input/Output: [(93 93 93 93) 93]
Test Case: 133 | Input/Output: [(29 29 29 29) 29]
Test Case: 134 | Input/Output: [(22 22 22 22) 22]
Test Case: 135 | Input/Output: [(23 23 23 23) 23]
Test Case: 136 | Input/Output: [(95 95 95 95) 95]
Test Case: 137 | Input/Output: [(11 11 11 11) 11]
Test Case: 138 | Input/Output: [(47 47 47 47) 47]
Test Case: 139 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 140 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 141 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 142 | Input/Output: [(69 69 69 69) 69]
Test Case: 143 | Input/Output: [(5 5 5 5) 5]
Test Case: 144 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 145 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 146 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 147 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 148 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 149 | Input/Output: [(17 17 17 17) 17]
Test Case: 150 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 151 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 152 | Input/Output: [(86 86 86 86) 86]
Test Case: 153 | Input/Output: [(25 25 25 25) 25]
Test Case: 154 | Input/Output: [(48 48 48 48) 48]
Test Case: 155 | Input/Output: [(24 24 24 24) 24]
Test Case: 156 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 157 | Input/Output: [(44 44 44 44) 44]
Test Case: 158 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 159 | Input/Output: [(42 42 42 42) 42]
Test Case: 160 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 161 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 162 | Input/Output: [(5 5 5 5) 5]
Test Case: 163 | Input/Output: [(96 96 96 96) 96]
Test Case: 164 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 165 | Input/Output: [(61 61 61 61) 61]
Test Case: 166 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 167 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 168 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 169 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 170 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 171 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 172 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 173 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 174 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 175 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 176 | Input/Output: [(32 32 32 32) 32]
Test Case: 177 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 178 | Input/Output: [(77 77 77 77) 77]
Test Case: 179 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 180 | Input/Output: [(31 31 31 31) 31]
Test Case: 181 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 182 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 183 | Input/Output: [(86 86 86 86) 86]
Test Case: 184 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 185 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 186 | Input/Output: [(97 97 97 97) 97]
Test Case: 187 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 188 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 189 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 190 | Input/Output: [(68 68 68 68) 68]
Test Case: 191 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 192 | Input/Output: [(58 58 58 58) 58]
Test Case: 193 | Input/Output: [(53 53 53 53) 53]
Test Case: 194 | Input/Output: [(27 27 27 27) 27]
Test Case: 195 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 196 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 197 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 198 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 199 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 200 | Input/Output: [(56 23 89 42) 23]
Test Case: 201 | Input/Output: [(17 43 89 0) 0]
Test Case: 202 | Input/Output: [(46 32 83 90) 32]
Test Case: 203 | Input/Output: [(3 48 28 80) 3]
Test Case: 204 | Input/Output: [(49 21 94 44) 21]
Test Case: 205 | Input/Output: [(2 30 8 29) 2]
Test Case: 206 | Input/Output: [(83 33 68 47) 33]
Test Case: 207 | Input/Output: [(69 87 33 17) 17]
Test Case: 208 | Input/Output: [(7 0 80 94) 0]
Test Case: 209 | Input/Output: [(59 55 76 12) 12]
Test Case: 210 | Input/Output: [(99 43 80 97) 43]
Test Case: 211 | Input/Output: [(89 23 27 50) 23]
Test Case: 212 | Input/Output: [(48 82 9 94) 9]
Test Case: 213 | Input/Output: [(20 18 56 45) 18]
Test Case: 214 | Input/Output: [(80 97 76 43) 43]
Test Case: 215 | Input/Output: [(76 55 65 10) 10]
Test Case: 216 | Input/Output: [(78 94 86 20) 20]
Test Case: 217 | Input/Output: [(70 68 51 96) 51]
Test Case: 218 | Input/Output: [(9 83 70 7) 7]
Test Case: 219 | Input/Output: [(16 57 60 64) 16]
Test Case: 220 | Input/Output: [(88 47 78 88) 47]
Test Case: 221 | Input/Output: [(87 85 10 79) 10]
Test Case: 222 | Input/Output: [(49 37 77 9) 9]
Test Case: 223 | Input/Output: [(1 41 35 0) 0]
Test Case: 224 | Input/Output: [(11 28 62 86) 11]
Test Case: 225 | Input/Output: [(86 28 85 97) 28]
Test Case: 226 | Input/Output: [(56 91 50 53) 50]
Test Case: 227 | Input/Output: [(31 4 98 21) 4]
Test Case: 228 | Input/Output: [(44 46 80 79) 44]
Test Case: 229 | Input/Output: [(8 62 60 87) 8]
Test Case: 230 | Input/Output: [(31 42 48 5) 5]
Test Case: 231 | Input/Output: [(8 33 5 67) 5]
Test Case: 232 | Input/Output: [(38 25 75 36) 25]
Test Case: 233 | Input/Output: [(10 43 95 81) 10]
Test Case: 234 | Input/Output: [(86 3 15 96) 3]
Test Case: 235 | Input/Output: [(6 56 42 45) 6]
Test Case: 236 | Input/Output: [(94 51 9 100) 9]
Test Case: 237 | Input/Output: [(68 74 68 19) 19]
Test Case: 238 | Input/Output: [(61 69 58 48) 48]
Test Case: 239 | Input/Output: [(24 49 62 35) 24]
Test Case: 240 | Input/Output: [(14 94 64 85) 14]
Test Case: 241 | Input/Output: [(37 88 16 37) 16]
Test Case: 242 | Input/Output: [(4 19 91 14) 4]
Test Case: 243 | Input/Output: [(93 100 59 25) 25]
Test Case: 244 | Input/Output: [(41 89 18 85) 18]
Test Case: 245 | Input/Output: [(15 53 72 71) 15]
Test Case: 246 | Input/Output: [(53 39 91 23) 23]
Test Case: 247 | Input/Output: [(75 43 67 67) 43]
Test Case: 248 | Input/Output: [(3 75 46 56) 3]
Test Case: 249 | Input/Output: [(62 29 51 12) 12]
Test Case: 250 | Input/Output: [(92 66 85 32) 32]
Test Case: 251 | Input/Output: [(31 10 51 83) 10]
Test Case: 252 | Input/Output: [(65 80 32 3) 3]
Test Case: 253 | Input/Output: [(21 99 70 28) 21]
Test Case: 254 | Input/Output: [(77 10 93 46) 10]
Test Case: 255 | Input/Output: [(2 25 19 42) 2]
Test Case: 256 | Input/Output: [(1 36 95 66) 1]
Test Case: 257 | Input/Output: [(29 14 22 93) 14]
Test Case: 258 | Input/Output: [(81 9 70 26) 9]
Test Case: 259 | Input/Output: [(33 69 38 98) 33]
Test Case: 260 | Input/Output: [(58 32 33 84) 32]
Test Case: 261 | Input/Output: [(16 21 25 0) 0]
Test Case: 262 | Input/Output: [(34 70 18 16) 16]
Test Case: 263 | Input/Output: [(86 11 71 22) 11]
Test Case: 264 | Input/Output: [(51 14 88 14) 14]
Test Case: 265 | Input/Output: [(78 48 33 67) 33]
Test Case: 266 | Input/Output: [(96 99 57 5) 5]
Test Case: 267 | Input/Output: [(55 58 73 31) 31]
Test Case: 268 | Input/Output: [(16 50 99 1) 1]
Test Case: 269 | Input/Output: [(56 80 72 92) 56]
Test Case: 270 | Input/Output: [(21 97 42 45) 21]
Test Case: 271 | Input/Output: [(3 9 62 45) 3]
Test Case: 272 | Input/Output: [(64 26 80 19) 19]
Test Case: 273 | Input/Output: [(32 28 24 76) 24]
Test Case: 274 | Input/Output: [(92 46 6 65) 6]
Test Case: 275 | Input/Output: [(72 3 14 81) 3]
Test Case: 276 | Input/Output: [(93 34 4 35) 4]
Test Case: 277 | Input/Output: [(56 29 1 90) 1]
Test Case: 278 | Input/Output: [(28 77 73 32) 28]
Test Case: 279 | Input/Output: [(59 60 13 51) 13]
Test Case: 280 | Input/Output: [(63 94 64 98) 63]
Test Case: 281 | Input/Output: [(64 33 50 86) 33]
Test Case: 282 | Input/Output: [(9 33 47 16) 9]
Test Case: 283 | Input/Output: [(40 74 91 1) 1]
Test Case: 284 | Input/Output: [(64 31 12 37) 12]
Test Case: 285 | Input/Output: [(96 32 89 68) 32]
Test Case: 286 | Input/Output: [(83 45 36 74) 36]
Test Case: 287 | Input/Output: [(1 66 40 6) 1]
Test Case: 288 | Input/Output: [(23 34 30 23) 23]
Test Case: 289 | Input/Output: [(93 45 94 47) 45]
Test Case: 290 | Input/Output: [(99 62 62 8) 8]
Test Case: 291 | Input/Output: [(59 94 23 16) 16]
Test Case: 292 | Input/Output: [(52 68 13 80) 13]
Test Case: 293 | Input/Output: [(11 19 16 68) 11]
Test Case: 294 | Input/Output: [(37 2 66 75) 2]
Test Case: 295 | Input/Output: [(52 98 4 24) 4]
Test Case: 296 | Input/Output: [(21 88 17 22) 17]
Test Case: 297 | Input/Output: [(7 88 76 59) 7]
Test Case: 298 | Input/Output: [(98 40 18 57) 18]
Test Case: 299 | Input/Output: [(48 42 27 94) 27]
Test Case: 300 | Input/Output: [(61 10 55 33) 10]
Test Case: 301 | Input/Output: [(37 85 60 8) 8]
Test Case: 302 | Input/Output: [(10 93 61 31) 10]
Test Case: 303 | Input/Output: [(63 32 33 7) 7]
Test Case: 304 | Input/Output: [(40 91 44 47) 40]
Test Case: 305 | Input/Output: [(88 30 69 99) 30]
Test Case: 306 | Input/Output: [(39 16 8 86) 8]
Test Case: 307 | Input/Output: [(88 88 61 17) 17]
Test Case: 308 | Input/Output: [(12 31 92 52) 12]
Test Case: 309 | Input/Output: [(9 34 77 3) 3]
Test Case: 310 | Input/Output: [(11 63 95 85) 11]
Test Case: 311 | Input/Output: [(18 37 82 57) 18]
Test Case: 312 | Input/Output: [(62 54 45 76) 45]
Test Case: 313 | Input/Output: [(55 69 84 85) 55]
Test Case: 314 | Input/Output: [(57 20 19 9) 9]
Test Case: 315 | Input/Output: [(57 54 90 45) 45]
Test Case: 316 | Input/Output: [(91 59 63 58) 58]
Test Case: 317 | Input/Output: [(40 24 51 40) 24]
Test Case: 318 | Input/Output: [(70 68 47 33) 33]
Test Case: 319 | Input/Output: [(73 27 17 96) 17]
Test Case: 320 | Input/Output: [(20 30 54 17) 17]
Test Case: 321 | Input/Output: [(20 85 45 82) 20]
Test Case: 322 | Input/Output: [(93 1 29 56) 1]
Test Case: 323 | Input/Output: [(51 86 37 14) 14]
Test Case: 324 | Input/Output: [(10 77 43 78) 10]
Test Case: 325 | Input/Output: [(96 96 10 23) 10]
Test Case: 326 | Input/Output: [(0 87 49 61) 0]
Test Case: 327 | Input/Output: [(94 44 90 43) 43]
Test Case: 328 | Input/Output: [(43 24 15 56) 15]
Test Case: 329 | Input/Output: [(88 14 21 81) 14]
Test Case: 330 | Input/Output: [(63 62 61 54) 54]
Test Case: 331 | Input/Output: [(76 49 56 98) 49]
Test Case: 332 | Input/Output: [(33 78 85 13) 13]
Test Case: 333 | Input/Output: [(75 38 57 55) 38]
Test Case: 334 | Input/Output: [(28 89 83 64) 28]
Test Case: 335 | Input/Output: [(62 55 75 40) 40]
Test Case: 336 | Input/Output: [(39 83 3 29) 3]
Test Case: 337 | Input/Output: [(14 25 86 64) 14]
Test Case: 338 | Input/Output: [(60 34 17 1) 1]
Test Case: 339 | Input/Output: [(76 94 33 39) 33]
Test Case: 340 | Input/Output: [(12 39 43 52) 12]
Test Case: 341 | Input/Output: [(17 73 21 61) 17]
Test Case: 342 | Input/Output: [(48 9 77 73) 9]
Test Case: 343 | Input/Output: [(23 30 98 22) 22]
Test Case: 344 | Input/Output: [(52 82 92 54) 52]
Test Case: 345 | Input/Output: [(33 73 45 47) 33]
Test Case: 346 | Input/Output: [(78 82 68 67) 67]
Test Case: 347 | Input/Output: [(51 21 85 91) 21]
Test Case: 348 | Input/Output: [(86 54 48 58) 48]
Test Case: 349 | Input/Output: [(38 38 9 30) 9]
Test Case: 350 | Input/Output: [(90 37 4 66) 4]
Test Case: 351 | Input/Output: [(83 3 22 98) 3]
Test Case: 352 | Input/Output: [(94 15 4 55) 4]
Test Case: 353 | Input/Output: [(8 62 98 51) 8]
Test Case: 354 | Input/Output: [(19 13 94 19) 13]
Test Case: 355 | Input/Output: [(4 82 85 85) 4]
Test Case: 356 | Input/Output: [(25 79 53 36) 25]
Test Case: 357 | Input/Output: [(76 1 85 35) 1]
Test Case: 358 | Input/Output: [(37 78 65 76) 37]
Test Case: 359 | Input/Output: [(98 93 28 32) 28]
Test Case: 360 | Input/Output: [(67 12 74 36) 12]
Test Case: 361 | Input/Output: [(35 44 6 68) 6]
Test Case: 362 | Input/Output: [(18 66 45 10) 10]
Test Case: 363 | Input/Output: [(60 54 11 92) 11]
Test Case: 364 | Input/Output: [(75 44 49 41) 41]
Test Case: 365 | Input/Output: [(49 83 22 34) 22]
Test Case: 366 | Input/Output: [(12 7 82 76) 7]
Test Case: 367 | Input/Output: [(33 42 92 67) 33]
Test Case: 368 | Input/Output: [(71 45 21 65) 21]
Test Case: 369 | Input/Output: [(86 61 62 30) 30]
Test Case: 370 | Input/Output: [(8 35 29 6) 6]
Test Case: 371 | Input/Output: [(96 20 23 50) 20]
Test Case: 372 | Input/Output: [(15 33 66 65) 15]
Test Case: 373 | Input/Output: [(93 11 75 79) 11]
Test Case: 374 | Input/Output: [(96 55 34 88) 34]
Test Case: 375 | Input/Output: [(85 83 33 9) 9]
Test Case: 376 | Input/Output: [(0 92 34 97) 0]
Test Case: 377 | Input/Output: [(7 39 94 36) 7]
Test Case: 378 | Input/Output: [(5 76 36 48) 5]
Test Case: 379 | Input/Output: [(87 89 24 96) 24]
Test Case: 380 | Input/Output: [(65 91 83 18) 18]
Test Case: 381 | Input/Output: [(15 17 97 83) 15]
Test Case: 382 | Input/Output: [(65 36 0 48) 0]
Test Case: 383 | Input/Output: [(40 74 37 5) 5]
Test Case: 384 | Input/Output: [(59 52 77 50) 50]
Test Case: 385 | Input/Output: [(16 51 83 92) 16]
Test Case: 386 | Input/Output: [(95 24 66 34) 24]
Test Case: 387 | Input/Output: [(58 96 72 30) 30]
Test Case: 388 | Input/Output: [(60 68 70 82) 60]
Test Case: 389 | Input/Output: [(63 22 92 28) 22]
Test Case: 390 | Input/Output: [(78 39 65 31) 31]
Test Case: 391 | Input/Output: [(15 90 1 52) 1]
Test Case: 392 | Input/Output: [(45 62 1 77) 1]
Test Case: 393 | Input/Output: [(2 41 86 38) 2]
Test Case: 394 | Input/Output: [(8 32 23 27) 8]
Test Case: 395 | Input/Output: [(21 74 27 37) 21]
Test Case: 396 | Input/Output: [(67 73 52 45) 45]
Test Case: 397 | Input/Output: [(77 69 75 11) 11]
Test Case: 398 | Input/Output: [(80 58 55 28) 28]
Test Case: 399 | Input/Output: [(88 62 34 65) 34]
Test Case: 400 | Input/Output: [(72 -24 24 32) -24]
Test Case: 401 | Input/Output: [(85 -75 52 -70) -75]
Test Case: 402 | Input/Output: [(53 -53 97 78) -53]
Test Case: 403 | Input/Output: [(-22 -2 -83 3) -83]
Test Case: 404 | Input/Output: [(-7 -22 63 98) -22]
Test Case: 405 | Input/Output: [(52 79 -90 -24) -90]
Test Case: 406 | Input/Output: [(-77 -29 42 39) -77]
Test Case: 407 | Input/Output: [(-3 -47 -93 -34) -93]
Test Case: 408 | Input/Output: [(48 -99 43 5) -99]
Test Case: 409 | Input/Output: [(-1 20 -88 58) -88]
Test Case: 410 | Input/Output: [(-47 -42 98 -31) -47]
Test Case: 411 | Input/Output: [(88 28 28 75) 28]
Test Case: 412 | Input/Output: [(17 -95 -91 93) -95]
Test Case: 413 | Input/Output: [(18 43 -29 88) -29]
Test Case: 414 | Input/Output: [(82 -34 -73 -38) -73]
Test Case: 415 | Input/Output: [(64 -81 12 -55) -81]
Test Case: 416 | Input/Output: [(-48 12 46 53) -48]
Test Case: 417 | Input/Output: [(-36 -7 20 42) -36]
Test Case: 418 | Input/Output: [(-13 32 -11 -22) -22]
Test Case: 419 | Input/Output: [(-63 71 66 74) -63]
Test Case: 420 | Input/Output: [(-84 55 98 41) -84]
Test Case: 421 | Input/Output: [(93 38 -42 -67) -67]
Test Case: 422 | Input/Output: [(74 -64 91 -85) -85]
Test Case: 423 | Input/Output: [(-39 -64 53 86) -64]
Test Case: 424 | Input/Output: [(-75 -59 64 -89) -89]
Test Case: 425 | Input/Output: [(-75 -34 -26 33) -75]
Test Case: 426 | Input/Output: [(80 43 -21 86) -21]
Test Case: 427 | Input/Output: [(60 -85 -24 47) -85]
Test Case: 428 | Input/Output: [(-80 92 65 -58) -80]
Test Case: 429 | Input/Output: [(-48 -67 59 10) -67]
Test Case: 430 | Input/Output: [(-81 9 77 -62) -81]
Test Case: 431 | Input/Output: [(69 11 -55 -6) -55]
Test Case: 432 | Input/Output: [(93 -77 -56 72) -77]
Test Case: 433 | Input/Output: [(-55 26 -1 -3) -55]
Test Case: 434 | Input/Output: [(11 95 79 43) 11]
Test Case: 435 | Input/Output: [(-11 -37 4 33) -37]
Test Case: 436 | Input/Output: [(55 -21 -89 57) -89]
Test Case: 437 | Input/Output: [(77 -74 -61 -80) -80]
Test Case: 438 | Input/Output: [(-83 2 -20 41) -83]
Test Case: 439 | Input/Output: [(-82 -30 78 -77) -82]
Test Case: 440 | Input/Output: [(13 18 -50 94) -50]
Test Case: 441 | Input/Output: [(96 52 -74 23) -74]
Test Case: 442 | Input/Output: [(1 -92 87 22) -92]
Test Case: 443 | Input/Output: [(-91 96 -15 -58) -91]
Test Case: 444 | Input/Output: [(29 -78 81 31) -78]
Test Case: 445 | Input/Output: [(55 -13 -55 -90) -90]
Test Case: 446 | Input/Output: [(-86 36 7 42) -86]
Test Case: 447 | Input/Output: [(77 48 -99 -7) -99]
Test Case: 448 | Input/Output: [(4 -91 -29 15) -91]
Test Case: 449 | Input/Output: [(22 -36 -44 90) -44]
Test Case: 450 | Input/Output: [(55 -45 81 -75) -75]
Test Case: 451 | Input/Output: [(58 -41 -13 22) -41]
Test Case: 452 | Input/Output: [(87 -74 69 25) -74]
Test Case: 453 | Input/Output: [(-43 62 10 49) -43]
Test Case: 454 | Input/Output: [(-67 83 24 -80) -80]
Test Case: 455 | Input/Output: [(84 22 48 50) 22]
Test Case: 456 | Input/Output: [(75 -67 9 -47) -67]
Test Case: 457 | Input/Output: [(69 -47 10 42) -47]
Test Case: 458 | Input/Output: [(-16 0 3 17) -16]
Test Case: 459 | Input/Output: [(16 36 -14 -100) -100]
Test Case: 460 | Input/Output: [(-11 69 55 -79) -79]
Test Case: 461 | Input/Output: [(42 74 -25 94) -25]
Test Case: 462 | Input/Output: [(27 91 -34 -17) -34]
Test Case: 463 | Input/Output: [(-7 -50 -92 80) -92]
Test Case: 464 | Input/Output: [(70 8 -1 90) -1]
Test Case: 465 | Input/Output: [(88 -21 45 10) -21]
Test Case: 466 | Input/Output: [(-61 5 69 -100) -100]
Test Case: 467 | Input/Output: [(-19 48 -12 -14) -19]
Test Case: 468 | Input/Output: [(31 21 84 24) 21]
Test Case: 469 | Input/Output: [(-82 -78 16 8) -82]
Test Case: 470 | Input/Output: [(-82 -28 33 38) -82]
Test Case: 471 | Input/Output: [(75 85 44 33) 33]
Test Case: 472 | Input/Output: [(59 -60 -89 -49) -89]
Test Case: 473 | Input/Output: [(47 92 6 5) 5]
Test Case: 474 | Input/Output: [(98 -51 -30 -93) -93]
Test Case: 475 | Input/Output: [(-32 -10 -8 77) -32]
Test Case: 476 | Input/Output: [(37 25 -26 -67) -67]
Test Case: 477 | Input/Output: [(-8 8 38 83) -8]
Test Case: 478 | Input/Output: [(-49 -76 41 -54) -76]
Test Case: 479 | Input/Output: [(46 56 28 -41) -41]
Test Case: 480 | Input/Output: [(-47 -11 -44 -54) -54]
Test Case: 481 | Input/Output: [(49 2 -12 -89) -89]
Test Case: 482 | Input/Output: [(-75 52 46 97) -75]
Test Case: 483 | Input/Output: [(-1 30 56 -29) -29]
Test Case: 484 | Input/Output: [(80 86 -5 50) -5]
Test Case: 485 | Input/Output: [(48 58 32 22) 22]
Test Case: 486 | Input/Output: [(-74 -4 -24 -30) -74]
Test Case: 487 | Input/Output: [(73 14 -56 58) -56]
Test Case: 488 | Input/Output: [(-71 -38 -88 20) -88]
Test Case: 489 | Input/Output: [(-30 -44 48 -57) -57]
Test Case: 490 | Input/Output: [(-23 -26 -58 18) -58]
Test Case: 491 | Input/Output: [(-57 51 43 -17) -57]
Test Case: 492 | Input/Output: [(69 -11 -73 50) -73]
Test Case: 493 | Input/Output: [(-51 40 76 -7) -51]
Test Case: 494 | Input/Output: [(-77 -1 -35 5) -77]
Test Case: 495 | Input/Output: [(-45 -40 63 -17) -45]
Test Case: 496 | Input/Output: [(-77 78 54 53) -77]
Test Case: 497 | Input/Output: [(13 56 -19 14) -19]
Test Case: 498 | Input/Output: [(-5 62 -93 -69) -93]
Test Case: 499 | Input/Output: [(-35 -54 -95 -22) -95]
Test Case: 500 | Input/Output: [(85 -61 66 -16) -61]
Test Case: 501 | Input/Output: [(-85 -69 -15 84) -85]
Test Case: 502 | Input/Output: [(-50 -27 -55 36) -55]
Test Case: 503 | Input/Output: [(38 -93 -28 84) -93]
Test Case: 504 | Input/Output: [(-41 -58 84 56) -58]
Test Case: 505 | Input/Output: [(86 -99 15 -54) -99]
Test Case: 506 | Input/Output: [(-24 -40 -38 75) -40]
Test Case: 507 | Input/Output: [(62 -49 5 -43) -49]
Test Case: 508 | Input/Output: [(10 72 -32 71) -32]
Test Case: 509 | Input/Output: [(-92 -82 73 -20) -92]
Test Case: 510 | Input/Output: [(-8 -28 -14 25) -28]
Test Case: 511 | Input/Output: [(-74 -40 25 67) -74]
Test Case: 512 | Input/Output: [(14 20 -51 -97) -97]
Test Case: 513 | Input/Output: [(-11 38 52 -83) -83]
Test Case: 514 | Input/Output: [(-100 -52 -93 -28) -100]
Test Case: 515 | Input/Output: [(-99 -48 45 9) -99]
Test Case: 516 | Input/Output: [(23 49 -99 52) -99]
Test Case: 517 | Input/Output: [(96 -76 -73 8) -76]
Test Case: 518 | Input/Output: [(59 -38 76 -17) -38]
Test Case: 519 | Input/Output: [(55 -62 18 -40) -62]
Test Case: 520 | Input/Output: [(-31 52 -73 56) -73]
Test Case: 521 | Input/Output: [(-84 78 67 19) -84]
Test Case: 522 | Input/Output: [(95 -65 25 -51) -65]
Test Case: 523 | Input/Output: [(-49 -10 64 13) -49]
Test Case: 524 | Input/Output: [(-22 8 -24 70) -24]
Test Case: 525 | Input/Output: [(-86 -94 -65 59) -94]
Test Case: 526 | Input/Output: [(34 -63 -66 46) -66]
Test Case: 527 | Input/Output: [(-29 96 1 58) -29]
Test Case: 528 | Input/Output: [(74 -6 -62 98) -62]
Test Case: 529 | Input/Output: [(71 27 -95 -25) -95]
Test Case: 530 | Input/Output: [(-94 -11 -60 -48) -94]
Test Case: 531 | Input/Output: [(-44 -61 -86 6) -86]
Test Case: 532 | Input/Output: [(29 15 35 11) 11]
Test Case: 533 | Input/Output: [(-3 86 86 70) -3]
Test Case: 534 | Input/Output: [(-91 15 -25 -73) -91]
Test Case: 535 | Input/Output: [(-85 92 79 58) -85]
Test Case: 536 | Input/Output: [(18 -11 90 -70) -70]
Test Case: 537 | Input/Output: [(-87 57 -95 57) -95]
Test Case: 538 | Input/Output: [(-34 -49 -93 -48) -93]
Test Case: 539 | Input/Output: [(-64 -39 -9 -6) -64]
Test Case: 540 | Input/Output: [(-27 -49 -6 -95) -95]
Test Case: 541 | Input/Output: [(100 9 -89 -85) -89]
Test Case: 542 | Input/Output: [(-96 -6 74 96) -96]
Test Case: 543 | Input/Output: [(27 -52 10 -34) -52]
Test Case: 544 | Input/Output: [(-31 20 75 -15) -31]
Test Case: 545 | Input/Output: [(-44 4 -18 3) -44]
Test Case: 546 | Input/Output: [(2 -38 45 -98) -98]
Test Case: 547 | Input/Output: [(66 -80 91 -85) -85]
Test Case: 548 | Input/Output: [(13 6 -3 14) -3]
Test Case: 549 | Input/Output: [(7 -96 -23 92) -96]
Test Case: 550 | Input/Output: [(-16 60 0 10) -16]
Test Case: 551 | Input/Output: [(39 -63 100 83) -63]
Test Case: 552 | Input/Output: [(-2 29 -75 59) -75]
Test Case: 553 | Input/Output: [(-43 -45 51 78) -45]
Test Case: 554 | Input/Output: [(-83 9 -80 4) -83]
Test Case: 555 | Input/Output: [(-53 -94 61 26) -94]
Test Case: 556 | Input/Output: [(-88 -56 16 70) -88]
Test Case: 557 | Input/Output: [(-57 42 -11 21) -57]
Test Case: 558 | Input/Output: [(-62 47 -99 -52) -99]
Test Case: 559 | Input/Output: [(53 23 -20 71) -20]
Test Case: 560 | Input/Output: [(41 3 -8 77) -8]
Test Case: 561 | Input/Output: [(89 52 65 -61) -61]
Test Case: 562 | Input/Output: [(-76 -39 -41 89) -76]
Test Case: 563 | Input/Output: [(-18 83 53 38) -18]
Test Case: 564 | Input/Output: [(54 -9 65 -6) -9]
Test Case: 565 | Input/Output: [(-55 43 -71 -81) -81]
Test Case: 566 | Input/Output: [(84 7 61 84) 7]
Test Case: 567 | Input/Output: [(13 -25 54 -14) -25]
Test Case: 568 | Input/Output: [(-52 -12 -57 48) -57]
Test Case: 569 | Input/Output: [(64 -95 62 86) -95]
Test Case: 570 | Input/Output: [(-62 -53 25 -97) -97]
Test Case: 571 | Input/Output: [(-78 70 7 86) -78]
Test Case: 572 | Input/Output: [(41 -72 -39 -55) -72]
Test Case: 573 | Input/Output: [(32 -55 33 -69) -69]
Test Case: 574 | Input/Output: [(-48 23 52 -4) -48]
Test Case: 575 | Input/Output: [(80 67 49 83) 49]
Test Case: 576 | Input/Output: [(47 65 -11 -32) -32]
Test Case: 577 | Input/Output: [(95 3 -12 3) -12]
Test Case: 578 | Input/Output: [(94 25 -85 93) -85]
Test Case: 579 | Input/Output: [(-18 -83 25 89) -83]
Test Case: 580 | Input/Output: [(18 17 80 -42) -42]
Test Case: 581 | Input/Output: [(-89 57 69 -53) -89]
Test Case: 582 | Input/Output: [(-40 55 86 -5) -40]
Test Case: 583 | Input/Output: [(62 -12 -31 89) -31]
Test Case: 584 | Input/Output: [(78 -95 -8 -32) -95]
Test Case: 585 | Input/Output: [(72 3 84 -51) -51]
Test Case: 586 | Input/Output: [(-91 -36 84 38) -91]
Test Case: 587 | Input/Output: [(-91 51 -77 -47) -91]
Test Case: 588 | Input/Output: [(-32 44 -55 63) -55]
Test Case: 589 | Input/Output: [(-99 -83 9 -23) -99]
Test Case: 590 | Input/Output: [(-9 64 4 -7) -9]
Test Case: 591 | Input/Output: [(39 53 -18 39) -18]
Test Case: 592 | Input/Output: [(23 -55 -86 50) -86]
Test Case: 593 | Input/Output: [(-53 -97 16 -34) -97]
Test Case: 594 | Input/Output: [(-56 -92 20 -23) -92]
Test Case: 595 | Input/Output: [(27 -78 89 89) -78]
Test Case: 596 | Input/Output: [(99 16 -42 44) -42]
Test Case: 597 | Input/Output: [(10 38 3 -82) -82]
Test Case: 598 | Input/Output: [(-14 -86 -4 -7) -86]
Test Case: 599 | Input/Output: [(97 77 -41 -62) -62]
Test Case: 600 | Input/Output: [(-88 -65 7 0) -88]
Test Case: 601 | Input/Output: [(72 -72 -59 -87) -87]
Test Case: 602 | Input/Output: [(31 -55 35 54) -55]
Test Case: 603 | Input/Output: [(-93 69 11 82) -93]
Test Case: 604 | Input/Output: [(48 33 75 70) 33]
Test Case: 605 | Input/Output: [(24 -47 0 -34) -47]
Test Case: 606 | Input/Output: [(76 -40 -55 74) -55]
Test Case: 607 | Input/Output: [(45 37 -37 -80) -80]
Test Case: 608 | Input/Output: [(-99 47 100 39) -99]
Test Case: 609 | Input/Output: [(-33 -19 -15 3) -33]
Test Case: 610 | Input/Output: [(58 56 -98 56) -98]
Test Case: 611 | Input/Output: [(-8 42 -62 34) -62]
Test Case: 612 | Input/Output: [(-51 13 -39 -65) -65]
Test Case: 613 | Input/Output: [(28 -83 -45 -54) -83]
Test Case: 614 | Input/Output: [(53 -91 -66 19) -91]
Test Case: 615 | Input/Output: [(95 -10 -8 0) -10]
Test Case: 616 | Input/Output: [(5 31 59 26) 5]
Test Case: 617 | Input/Output: [(-3 -79 -61 -94) -94]
Test Case: 618 | Input/Output: [(-65 -97 87 -12) -97]
Test Case: 619 | Input/Output: [(-63 -20 -80 -17) -80]
Test Case: 620 | Input/Output: [(-67 -19 -46 6) -67]
Test Case: 621 | Input/Output: [(24 26 60 -66) -66]
Test Case: 622 | Input/Output: [(21 49 45 -55) -55]
Test Case: 623 | Input/Output: [(30 38 -34 -13) -34]
Test Case: 624 | Input/Output: [(-65 47 -86 26) -86]
Test Case: 625 | Input/Output: [(-11 -29 20 31) -29]
Test Case: 626 | Input/Output: [(-88 -78 -80 2) -88]
Test Case: 627 | Input/Output: [(-22 -94 -73 26) -94]
Test Case: 628 | Input/Output: [(51 17 -88 -89) -89]
Test Case: 629 | Input/Output: [(9 97 -57 66) -57]
Test Case: 630 | Input/Output: [(-69 -26 46 -89) -89]
Test Case: 631 | Input/Output: [(62 -68 74 14) -68]
Test Case: 632 | Input/Output: [(-66 57 81 94) -66]
Test Case: 633 | Input/Output: [(-82 -100 40 79) -100]
Test Case: 634 | Input/Output: [(100 -99 -42 100) -99]
Test Case: 635 | Input/Output: [(74 84 -2 17) -2]
Test Case: 636 | Input/Output: [(-30 66 69 -14) -30]
Test Case: 637 | Input/Output: [(59 87 -100 93) -100]
Test Case: 638 | Input/Output: [(-33 -55 55 -98) -98]
Test Case: 639 | Input/Output: [(5 5 -19 -34) -34]
Test Case: 640 | Input/Output: [(-91 20 73 -30) -91]
Test Case: 641 | Input/Output: [(-55 27 -2 60) -55]
Test Case: 642 | Input/Output: [(37 -40 78 -76) -76]
Test Case: 643 | Input/Output: [(-69 -76 55 13) -76]
Test Case: 644 | Input/Output: [(83 -31 50 31) -31]
Test Case: 645 | Input/Output: [(-36 -9 -64 53) -64]
Test Case: 646 | Input/Output: [(-87 -89 -36 98) -89]
Test Case: 647 | Input/Output: [(1 50 66 50) 1]
Test Case: 648 | Input/Output: [(67 97 -97 62) -97]
Test Case: 649 | Input/Output: [(-10 -93 -77 27) -93]
Test Case: 650 | Input/Output: [(-82 -79 -4 -58) -82]
Test Case: 651 | Input/Output: [(15 -23 -94 53) -94]
Test Case: 652 | Input/Output: [(19 95 -47 9) -47]
Test Case: 653 | Input/Output: [(0 41 -14 84) -14]
Test Case: 654 | Input/Output: [(93 -71 -74 75) -74]
Test Case: 655 | Input/Output: [(-91 -46 55 22) -91]
Test Case: 656 | Input/Output: [(-68 67 57 -97) -97]
Test Case: 657 | Input/Output: [(-78 86 -51 47) -78]
Test Case: 658 | Input/Output: [(-54 -1 10 51) -54]
Test Case: 659 | Input/Output: [(-92 -92 58 22) -92]
Test Case: 660 | Input/Output: [(-25 84 -79 -88) -88]
Test Case: 661 | Input/Output: [(36 -7 72 -12) -12]
Test Case: 662 | Input/Output: [(67 64 -52 33) -52]
Test Case: 663 | Input/Output: [(90 93 93 -67) -67]
Test Case: 664 | Input/Output: [(-88 56 -59 63) -88]
Test Case: 665 | Input/Output: [(6 -9 72 -64) -64]
Test Case: 666 | Input/Output: [(26 17 -77 37) -77]
Test Case: 667 | Input/Output: [(-31 73 -6 76) -31]
Test Case: 668 | Input/Output: [(20 -65 69 91) -65]
Test Case: 669 | Input/Output: [(-2 -27 -41 -78) -78]
Test Case: 670 | Input/Output: [(-7 -67 82 -75) -75]
Test Case: 671 | Input/Output: [(-10 -12 -70 29) -70]
Test Case: 672 | Input/Output: [(37 -51 -13 15) -51]
Test Case: 673 | Input/Output: [(-16 -95 58 47) -95]
Test Case: 674 | Input/Output: [(-34 -91 -59 -33) -91]
Test Case: 675 | Input/Output: [(2 82 57 -64) -64]
Test Case: 676 | Input/Output: [(16 -28 9 -84) -84]
Test Case: 677 | Input/Output: [(32 -89 34 34) -89]
Test Case: 678 | Input/Output: [(-98 -32 -63 3) -98]
Test Case: 679 | Input/Output: [(71 -15 88 79) -15]
Test Case: 680 | Input/Output: [(40 -88 17 -97) -97]
Test Case: 681 | Input/Output: [(95 84 -58 -38) -58]
Test Case: 682 | Input/Output: [(29 68 4 -60) -60]
Test Case: 683 | Input/Output: [(-98 58 63 -89) -98]
Test Case: 684 | Input/Output: [(-20 -11 45 41) -20]
Test Case: 685 | Input/Output: [(89 -93 16 -65) -93]
Test Case: 686 | Input/Output: [(-2 -13 7 51) -13]
Test Case: 687 | Input/Output: [(-28 59 -19 -78) -78]
Test Case: 688 | Input/Output: [(58 -23 77 53) -23]
Test Case: 689 | Input/Output: [(90 67 5 51) 5]
Test Case: 690 | Input/Output: [(-53 -97 -44 -44) -97]
Test Case: 691 | Input/Output: [(-55 53 -70 80) -70]
Test Case: 692 | Input/Output: [(-33 -87 -43 -93) -93]
Test Case: 693 | Input/Output: [(-60 -32 -22 -90) -90]
Test Case: 694 | Input/Output: [(0 -37 -26 3) -37]
Test Case: 695 | Input/Output: [(82 59 2 -16) -16]
Test Case: 696 | Input/Output: [(54 -19 -77 4) -77]
Test Case: 697 | Input/Output: [(26 -77 33 -65) -77]
Test Case: 698 | Input/Output: [(46 -23 -11 -8) -23]
Test Case: 699 | Input/Output: [(-13 -77 -57 -69) -77]
Test Case: 700 | Input/Output: [(-23 -100 -46 -78) -100]
Test Case: 701 | Input/Output: [(23 99 -36 42) -36]
Test Case: 702 | Input/Output: [(-92 -9 -21 -11) -92]
Test Case: 703 | Input/Output: [(-3 31 -49 -41) -49]
Test Case: 704 | Input/Output: [(-14 25 41 -22) -22]
Test Case: 705 | Input/Output: [(-99 36 35 -86) -99]
Test Case: 706 | Input/Output: [(-29 0 82 51) -29]
Test Case: 707 | Input/Output: [(26 -78 23 -79) -79]
Test Case: 708 | Input/Output: [(68 -52 13 46) -52]
Test Case: 709 | Input/Output: [(-3 -32 -76 -25) -76]
Test Case: 710 | Input/Output: [(72 25 -90 -78) -90]
Test Case: 711 | Input/Output: [(24 -59 -87 -20) -87]
Test Case: 712 | Input/Output: [(-34 8 82 52) -34]
Test Case: 713 | Input/Output: [(46 -65 -96 -60) -96]
Test Case: 714 | Input/Output: [(-4 -94 -81 69) -94]
Test Case: 715 | Input/Output: [(28 -42 78 85) -42]
Test Case: 716 | Input/Output: [(33 83 -96 16) -96]
Test Case: 717 | Input/Output: [(-6 64 -57 11) -57]
Test Case: 718 | Input/Output: [(98 47 -98 29) -98]
Test Case: 719 | Input/Output: [(21 49 -88 72) -88]
Test Case: 720 | Input/Output: [(90 -83 -25 -76) -83]
Test Case: 721 | Input/Output: [(-27 59 -97 42) -97]
Test Case: 722 | Input/Output: [(92 93 54 -80) -80]
Test Case: 723 | Input/Output: [(74 18 31 43) 18]
Test Case: 724 | Input/Output: [(-88 36 83 10) -88]
Test Case: 725 | Input/Output: [(94 -69 84 63) -69]
Test Case: 726 | Input/Output: [(68 -65 -64 38) -65]
Test Case: 727 | Input/Output: [(98 9 100 -24) -24]
Test Case: 728 | Input/Output: [(-70 85 -1 -2) -70]
Test Case: 729 | Input/Output: [(88 86 39 -50) -50]
Test Case: 730 | Input/Output: [(-21 -36 -44 -84) -84]
Test Case: 731 | Input/Output: [(-90 89 -53 88) -90]
Test Case: 732 | Input/Output: [(72 59 -86 -1) -86]
Test Case: 733 | Input/Output: [(-26 -73 -56 -63) -73]
Test Case: 734 | Input/Output: [(-17 -44 -55 62) -55]
Test Case: 735 | Input/Output: [(49 -16 -16 -82) -82]
Test Case: 736 | Input/Output: [(94 45 -40 24) -40]
Test Case: 737 | Input/Output: [(33 -54 10 85) -54]
Test Case: 738 | Input/Output: [(32 17 -92 30) -92]
Test Case: 739 | Input/Output: [(-36 -17 -12 -92) -92]
Test Case: 740 | Input/Output: [(89 -3 54 9) -3]
Test Case: 741 | Input/Output: [(-7 -46 38 32) -46]
Test Case: 742 | Input/Output: [(-20 -16 -37 25) -37]
Test Case: 743 | Input/Output: [(78 -29 -12 93) -29]
Test Case: 744 | Input/Output: [(45 -91 9 53) -91]
Test Case: 745 | Input/Output: [(22 77 6 63) 6]
Test Case: 746 | Input/Output: [(16 -89 -71 39) -89]
Test Case: 747 | Input/Output: [(83 14 51 41) 14]
Test Case: 748 | Input/Output: [(41 27 -36 -25) -36]
Test Case: 749 | Input/Output: [(-60 -9 60 -92) -92]
Test Case: 750 | Input/Output: [(-95 92 -28 27) -95]
Test Case: 751 | Input/Output: [(-69 -7 -77 94) -77]
Test Case: 752 | Input/Output: [(-68 -26 57 10) -68]
Test Case: 753 | Input/Output: [(54 89 34 -52) -52]
Test Case: 754 | Input/Output: [(-96 -97 -85 -92) -97]
Test Case: 755 | Input/Output: [(88 -33 -96 -26) -96]
Test Case: 756 | Input/Output: [(-23 48 -93 -23) -93]
Test Case: 757 | Input/Output: [(-74 33 25 -72) -74]
Test Case: 758 | Input/Output: [(15 36 36 -85) -85]
Test Case: 759 | Input/Output: [(-51 8 10 23) -51]
Test Case: 760 | Input/Output: [(100 -76 25 -14) -76]
Test Case: 761 | Input/Output: [(59 -7 -45 9) -45]
Test Case: 762 | Input/Output: [(59 -70 -40 64) -70]
Test Case: 763 | Input/Output: [(-50 1 27 22) -50]
Test Case: 764 | Input/Output: [(41 -74 -30 45) -74]
Test Case: 765 | Input/Output: [(-63 40 -34 -86) -86]
Test Case: 766 | Input/Output: [(-10 39 82 9) -10]
Test Case: 767 | Input/Output: [(7 81 -85 -96) -96]
Test Case: 768 | Input/Output: [(40 99 -39 -29) -39]
Test Case: 769 | Input/Output: [(-94 -2 91 -68) -94]
Test Case: 770 | Input/Output: [(83 -66 86 52) -66]
Test Case: 771 | Input/Output: [(-48 52 -53 -89) -89]
Test Case: 772 | Input/Output: [(61 73 15 -50) -50]
Test Case: 773 | Input/Output: [(-56 77 66 87) -56]
Test Case: 774 | Input/Output: [(-69 -64 44 -43) -69]
Test Case: 775 | Input/Output: [(16 -32 -24 12) -32]
Test Case: 776 | Input/Output: [(7 46 66 74) 7]
Test Case: 777 | Input/Output: [(99 -56 98 94) -56]
Test Case: 778 | Input/Output: [(-24 -22 0 -84) -84]
Test Case: 779 | Input/Output: [(86 6 61 -6) -6]
Test Case: 780 | Input/Output: [(77 -26 -3 -12) -26]
Test Case: 781 | Input/Output: [(45 -5 7 -84) -84]
Test Case: 782 | Input/Output: [(55 58 -52 -33) -52]
Test Case: 783 | Input/Output: [(22 -47 82 -30) -47]
Test Case: 784 | Input/Output: [(57 52 -85 -79) -85]
Test Case: 785 | Input/Output: [(-13 99 97 31) -13]
Test Case: 786 | Input/Output: [(-67 -54 94 30) -67]
Test Case: 787 | Input/Output: [(88 40 -17 38) -17]
Test Case: 788 | Input/Output: [(-67 -97 27 3) -97]
Test Case: 789 | Input/Output: [(-5 29 99 84) -5]
Test Case: 790 | Input/Output: [(-92 18 -40 90) -92]
Test Case: 791 | Input/Output: [(-99 80 -99 44) -99]
Test Case: 792 | Input/Output: [(-75 -90 71 79) -90]
Test Case: 793 | Input/Output: [(12 -36 21 9) -36]
Test Case: 794 | Input/Output: [(13 2 43 41) 2]
Test Case: 795 | Input/Output: [(-99 -23 42 99) -99]
Test Case: 796 | Input/Output: [(-71 7 -98 -35) -98]
Test Case: 797 | Input/Output: [(-20 -16 -36 30) -36]
Test Case: 798 | Input/Output: [(49 -76 -62 -42) -76]
Test Case: 799 | Input/Output: [(-21 3 -62 100) -62]
Test Case: 800 | Input/Output: [(52 -76 -60 62) -76]
Test Case: 801 | Input/Output: [(-71 85 11 -21) -71]
Test Case: 802 | Input/Output: [(66 21 10 62) 10]
Test Case: 803 | Input/Output: [(54 42 24 35) 24]
Test Case: 804 | Input/Output: [(-98 -98 39 -4) -98]
Test Case: 805 | Input/Output: [(-24 -66 -86 24) -86]
Test Case: 806 | Input/Output: [(92 94 -50 45) -50]
Test Case: 807 | Input/Output: [(-85 -100 57 -46) -100]
Test Case: 808 | Input/Output: [(-47 10 97 -96) -96]
Test Case: 809 | Input/Output: [(3 8 -40 -87) -87]
Test Case: 810 | Input/Output: [(43 79 -28 -100) -100]
Test Case: 811 | Input/Output: [(93 -1 -32 -8) -32]
Test Case: 812 | Input/Output: [(-74 -18 -75 -43) -75]
Test Case: 813 | Input/Output: [(-7 -48 89 -27) -48]
Test Case: 814 | Input/Output: [(-26 -87 58 -84) -87]
Test Case: 815 | Input/Output: [(11 -53 16 -80) -80]
Test Case: 816 | Input/Output: [(-83 -37 -89 -71) -89]
Test Case: 817 | Input/Output: [(-84 31 31 -63) -84]
Test Case: 818 | Input/Output: [(22 0 10 93) 0]
Test Case: 819 | Input/Output: [(-18 62 -52 80) -52]
Test Case: 820 | Input/Output: [(45 -34 -13 -94) -94]
Test Case: 821 | Input/Output: [(23 8 -54 -51) -54]
Test Case: 822 | Input/Output: [(-56 43 -75 -58) -75]
Test Case: 823 | Input/Output: [(61 -39 89 24) -39]
Test Case: 824 | Input/Output: [(-18 3 -77 82) -77]
Test Case: 825 | Input/Output: [(18 76 29 27) 18]
Test Case: 826 | Input/Output: [(9 76 -84 -68) -84]
Test Case: 827 | Input/Output: [(-57 -56 97 58) -57]
Test Case: 828 | Input/Output: [(87 -57 88 31) -57]
Test Case: 829 | Input/Output: [(-63 44 -73 16) -73]
Test Case: 830 | Input/Output: [(58 -28 48 93) -28]
Test Case: 831 | Input/Output: [(-83 -86 100 -54) -86]
Test Case: 832 | Input/Output: [(41 93 49 58) 41]
Test Case: 833 | Input/Output: [(55 82 -23 77) -23]
Test Case: 834 | Input/Output: [(-9 -41 -47 -18) -47]
Test Case: 835 | Input/Output: [(21 14 28 97) 14]
Test Case: 836 | Input/Output: [(61 90 -13 -82) -82]
Test Case: 837 | Input/Output: [(75 5 -92 -84) -92]
Test Case: 838 | Input/Output: [(34 -99 -15 -1) -99]
Test Case: 839 | Input/Output: [(44 -41 28 53) -41]
Test Case: 840 | Input/Output: [(-86 61 -21 50) -86]
Test Case: 841 | Input/Output: [(85 -98 81 33) -98]
Test Case: 842 | Input/Output: [(41 -43 27 -74) -74]
Test Case: 843 | Input/Output: [(87 54 -83 92) -83]
Test Case: 844 | Input/Output: [(72 85 47 -91) -91]
Test Case: 845 | Input/Output: [(89 -88 -38 42) -88]
Test Case: 846 | Input/Output: [(-1 -21 -44 -71) -71]
Test Case: 847 | Input/Output: [(59 5 88 64) 5]
Test Case: 848 | Input/Output: [(-63 62 56 -87) -87]
Test Case: 849 | Input/Output: [(19 -19 84 88) -19]
Test Case: 850 | Input/Output: [(-35 -25 -57 48) -57]
Test Case: 851 | Input/Output: [(27 68 -45 -80) -80]
Test Case: 852 | Input/Output: [(-86 71 46 -89) -89]
Test Case: 853 | Input/Output: [(-17 23 -44 40) -44]
Test Case: 854 | Input/Output: [(65 30 -19 -95) -95]
Test Case: 855 | Input/Output: [(14 84 -75 28) -75]
Test Case: 856 | Input/Output: [(-79 -42 44 46) -79]
Test Case: 857 | Input/Output: [(-50 -86 13 -54) -86]
Test Case: 858 | Input/Output: [(-50 85 73 -22) -50]
Test Case: 859 | Input/Output: [(-66 36 66 46) -66]
Test Case: 860 | Input/Output: [(91 -93 1 69) -93]
Test Case: 861 | Input/Output: [(48 83 -42 47) -42]
Test Case: 862 | Input/Output: [(-46 -66 76 43) -66]
Test Case: 863 | Input/Output: [(49 37 -35 -16) -35]
Test Case: 864 | Input/Output: [(0 -74 16 47) -74]
Test Case: 865 | Input/Output: [(2 -89 -4 -93) -93]
Test Case: 866 | Input/Output: [(-84 96 -39 29) -84]
Test Case: 867 | Input/Output: [(6 -88 -89 -61) -89]
Test Case: 868 | Input/Output: [(91 -70 -80 39) -80]
Test Case: 869 | Input/Output: [(4 -70 36 29) -70]
Test Case: 870 | Input/Output: [(16 30 -26 -10) -26]
Test Case: 871 | Input/Output: [(-9 41 33 -7) -9]
Test Case: 872 | Input/Output: [(0 27 22 -31) -31]
Test Case: 873 | Input/Output: [(59 -74 -31 49) -74]
Test Case: 874 | Input/Output: [(-93 33 -8 -9) -93]
Test Case: 875 | Input/Output: [(-5 -68 -49 -73) -73]
Test Case: 876 | Input/Output: [(-44 -89 -80 -90) -90]
Test Case: 877 | Input/Output: [(-5 -36 -28 -65) -65]
Test Case: 878 | Input/Output: [(-40 65 -41 -10) -41]
Test Case: 879 | Input/Output: [(-30 -94 41 75) -94]
Test Case: 880 | Input/Output: [(-59 87 52 98) -59]
Test Case: 881 | Input/Output: [(62 -48 79 -11) -48]
Test Case: 882 | Input/Output: [(27 -49 -67 -98) -98]
Test Case: 883 | Input/Output: [(38 25 8 78) 8]
Test Case: 884 | Input/Output: [(-35 16 -99 -59) -99]
Test Case: 885 | Input/Output: [(2 18 -12 -44) -44]
Test Case: 886 | Input/Output: [(-37 -54 100 36) -54]
Test Case: 887 | Input/Output: [(-31 83 93 35) -31]
Test Case: 888 | Input/Output: [(53 -70 71 -76) -76]
Test Case: 889 | Input/Output: [(40 -14 -88 14) -88]
Test Case: 890 | Input/Output: [(49 46 -85 -28) -85]
Test Case: 891 | Input/Output: [(91 -75 -100 42) -100]
Test Case: 892 | Input/Output: [(72 -6 33 42) -6]
Test Case: 893 | Input/Output: [(-46 41 -32 -57) -57]
Test Case: 894 | Input/Output: [(-38 -96 15 -76) -96]
Test Case: 895 | Input/Output: [(74 -4 60 -20) -20]
Test Case: 896 | Input/Output: [(98 -51 -29 -60) -60]
Test Case: 897 | Input/Output: [(-66 25 2 -21) -66]
Test Case: 898 | Input/Output: [(78 61 99 -87) -87]
Test Case: 899 | Input/Output: [(-77 -28 64 96) -77]
Test Case: 900 | Input/Output: [(28 64 -93 74) -93]
Test Case: 901 | Input/Output: [(-63 15 100 -58) -63]
Test Case: 902 | Input/Output: [(-63 32 -56 -23) -63]
Test Case: 903 | Input/Output: [(-72 67 52 64) -72]
Test Case: 904 | Input/Output: [(96 -46 -3 -36) -46]
Test Case: 905 | Input/Output: [(10 23 -84 87) -84]
Test Case: 906 | Input/Output: [(57 33 -38 10) -38]
Test Case: 907 | Input/Output: [(-42 -78 5 -10) -78]
Test Case: 908 | Input/Output: [(94 -99 35 83) -99]
Test Case: 909 | Input/Output: [(-96 77 -74 35) -96]
Test Case: 910 | Input/Output: [(-22 75 79 94) -22]
Test Case: 911 | Input/Output: [(24 76 5 57) 5]
Test Case: 912 | Input/Output: [(-88 -33 39 -47) -88]
Test Case: 913 | Input/Output: [(13 52 71 -24) -24]
Test Case: 914 | Input/Output: [(-8 96 -36 -36) -36]
Test Case: 915 | Input/Output: [(-65 -40 -87 -59) -87]
Test Case: 916 | Input/Output: [(-29 46 -43 -78) -78]
Test Case: 917 | Input/Output: [(-29 -51 4 -1) -51]
Test Case: 918 | Input/Output: [(-4 95 17 49) -4]
Test Case: 919 | Input/Output: [(-90 -30 79 2) -90]
Test Case: 920 | Input/Output: [(-94 44 49 94) -94]
Test Case: 921 | Input/Output: [(59 -76 22 72) -76]
Test Case: 922 | Input/Output: [(90 39 52 4) 4]
Test Case: 923 | Input/Output: [(35 24 -87 -64) -87]
Test Case: 924 | Input/Output: [(-41 -10 -45 95) -45]
Test Case: 925 | Input/Output: [(-4 59 -38 -8) -38]
Test Case: 926 | Input/Output: [(22 30 23 -39) -39]
Test Case: 927 | Input/Output: [(67 -61 -80 -23) -80]
Test Case: 928 | Input/Output: [(38 27 -29 -85) -85]
Test Case: 929 | Input/Output: [(49 64 -39 98) -39]
Test Case: 930 | Input/Output: [(20 8 100 -46) -46]
Test Case: 931 | Input/Output: [(5 35 92 49) 5]
Test Case: 932 | Input/Output: [(50 69 -96 79) -96]
Test Case: 933 | Input/Output: [(80 0 -80 -21) -80]
Test Case: 934 | Input/Output: [(-5 3 -84 49) -84]
Test Case: 935 | Input/Output: [(44 70 -96 24) -96]
Test Case: 936 | Input/Output: [(44 92 50 53) 44]
Test Case: 937 | Input/Output: [(9 -14 -68 13) -68]
Test Case: 938 | Input/Output: [(51 -5 44 95) -5]
Test Case: 939 | Input/Output: [(16 -100 -42 -13) -100]
Test Case: 940 | Input/Output: [(19 -56 -55 -54) -56]
Test Case: 941 | Input/Output: [(-8 1 84 -18) -18]
Test Case: 942 | Input/Output: [(-77 -7 55 -44) -77]
Test Case: 943 | Input/Output: [(-90 49 52 49) -90]
Test Case: 944 | Input/Output: [(-29 69 -94 32) -94]
Test Case: 945 | Input/Output: [(16 49 -35 -46) -46]
Test Case: 946 | Input/Output: [(13 -3 47 100) -3]
Test Case: 947 | Input/Output: [(18 -41 20 72) -41]
Test Case: 948 | Input/Output: [(-48 -48 2 -70) -70]
Test Case: 949 | Input/Output: [(-12 -95 -2 81) -95]
Test Case: 950 | Input/Output: [(87 -8 41 55) -8]
Test Case: 951 | Input/Output: [(27 -70 -58 -91) -91]
Test Case: 952 | Input/Output: [(-46 73 -59 98) -59]
Test Case: 953 | Input/Output: [(10 -78 -41 8) -78]
Test Case: 954 | Input/Output: [(63 -31 84 -82) -82]
Test Case: 955 | Input/Output: [(-90 37 65 -11) -90]
Test Case: 956 | Input/Output: [(15 -40 96 -63) -63]
Test Case: 957 | Input/Output: [(-80 7 21 -62) -80]
Test Case: 958 | Input/Output: [(-15 11 9 -72) -72]
Test Case: 959 | Input/Output: [(27 92 81 9) 9]
Test Case: 960 | Input/Output: [(86 -86 -85 23) -86]
Test Case: 961 | Input/Output: [(1 66 50 57) 1]
Test Case: 962 | Input/Output: [(3 -76 3 -32) -76]
Test Case: 963 | Input/Output: [(-99 8 99 -99) -99]
Test Case: 964 | Input/Output: [(67 68 -6 22) -6]
Test Case: 965 | Input/Output: [(80 -25 -100 18) -100]
Test Case: 966 | Input/Output: [(66 66 80 18) 18]
Test Case: 967 | Input/Output: [(-39 13 14 -86) -86]
Test Case: 968 | Input/Output: [(80 55 -86 -69) -86]
Test Case: 969 | Input/Output: [(7 -7 -9 -21) -21]
Test Case: 970 | Input/Output: [(-89 -57 10 67) -89]
Test Case: 971 | Input/Output: [(-93 92 0 -3) -93]
Test Case: 972 | Input/Output: [(-25 77 51 67) -25]
Test Case: 973 | Input/Output: [(-27 34 -65 42) -65]
Test Case: 974 | Input/Output: [(62 -53 24 -81) -81]
Test Case: 975 | Input/Output: [(25 -43 -39 -72) -72]
Test Case: 976 | Input/Output: [(-20 -40 -16 69) -40]
Test Case: 977 | Input/Output: [(98 25 26 -10) -10]
Test Case: 978 | Input/Output: [(35 42 57 -96) -96]
Test Case: 979 | Input/Output: [(-71 84 34 75) -71]
Test Case: 980 | Input/Output: [(21 -53 46 -70) -70]
Test Case: 981 | Input/Output: [(84 15 -56 -86) -86]
Test Case: 982 | Input/Output: [(70 37 71 78) 37]
Test Case: 983 | Input/Output: [(-74 -38 25 85) -74]
Test Case: 984 | Input/Output: [(3 50 -47 -87) -87]
Test Case: 985 | Input/Output: [(39 70 37 -56) -56]
Test Case: 986 | Input/Output: [(73 -6 68 -54) -54]
Test Case: 987 | Input/Output: [(-36 -37 -17 -66) -66]
Test Case: 988 | Input/Output: [(56 -34 -3 -3) -34]
Test Case: 989 | Input/Output: [(-86 32 -90 8) -90]
Test Case: 990 | Input/Output: [(-19 10 84 -70) -70]
Test Case: 991 | Input/Output: [(93 82 -30 24) -30]
Test Case: 992 | Input/Output: [(-36 65 24 8) -36]
Test Case: 993 | Input/Output: [(64 8 -63 100) -63]
Test Case: 994 | Input/Output: [(-55 -1 60 -56) -56]
Test Case: 995 | Input/Output: [(-33 15 -65 32) -65]
Test Case: 996 | Input/Output: [(17 -98 -54 85) -98]
Test Case: 997 | Input/Output: [(91 -53 43 55) -53]
Test Case: 998 | Input/Output: [(3 -54 -24 -35) -54]
Test Case: 999 | Input/Output: [(-6 -14 -67 -42) -67]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -10 -12 -11 -31 74 -121 -64 104 -81 122 -83 1 61 -93 -6 -70
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[100 -70 100 100] -70] [[-95 93 -95 -95] -95] [[65 65 -63 65] -63] [[76 76 -34 76] -34] [[95 99 99 99] 95] [[-59 85 -59 -59] -59] [[-65 -65 39 -65] -65] [[-93 -93 42 -93] -93] [[-88 -88 -54 -88] -88] [[55 -6 -6 -6] -6] [(-72 -72 -72 -72) -72] [(89 89 89 89) 89] [(-97 -97 -97 -97) -97] [(83 83 83 83) 83] [(-50 -50 -50 -50) -50] [(81 29 100 0) 0] [(88 98 46 83) 46] [(11 5 91 85) 5] [(51 54 13 38) 13] [(39 39 82 57) 39] [(51 37 5 97) 5] [(44 62 34 56) 34] [(54 16 100 15) 15] [(54 66 31 54) 31] [(75 68 62 12) 12] [(28 11 100 84) 11] [(80 71 57 44) 44] [(89 29 99 99) 29] [(69 65 54 39) 39] [(5 17 95 57) 5] [(76 0 21 74) 0] [(40 0 67 28) 0] [(51 60 11 55) 11] [(95 64 64 31) 31] [(36 66 74 61) 36] [(52 10 14 65) 10] [(95 -75 33 62) -75] [(21 12 -63 62) -63] [(70 -92 42 5) -92] [(-6 -90 98 -87) -90] [(9 99 -89 -67) -89] [(39 -30 66 -62) -62] [(47 -45 -18 -31) -45] [(-42 45 4 5) -42] [(60 53 -27 -82) -82] [(-65 54 59 24) -65] [(-10 -57 10 36) -57] [(83 30 -34 49) -34] [(-78 -92 -83 42) -92] [(-35 -11 -53 24) -53] [(92 9 -81 62) -81] [(-51 0 42 50) -51] [(-18 6 29 -92) -92] [(14 15 -31 -29) -31] [(-20 -31 -37 15) -37] [(-80 57 -83 63) -83] [(40 72 87 10) 10] [(75 -52 14 8) -52] [(5 -77 -82 -41) -82] [(72 66 89 -79) -79] [(48 16 57 -25) -25] [(-6 -69 -97 39) -97] [(-30 22 94 -42) -42] [(-19 98 85 -62) -62] [(-60 -44 -74 28) -74] [(-41 -40 86 -36) -41] [(-15 56 5 -9) -15] [(44 -2 67 -32) -32] [(-83 75 8 91) -83] [(93 -74 86 72) -74] [(89 -67 -36 29) -67] [(38 -12 16 90) -12] [(33 -22 -86 40) -86] [(-50 67 89 84) -50] [(-85 -17 59 47) -85] [(-18 27 91 90) -18] [(-94 63 91 -90) -94] [(-91 -91 -77 -2) -91] [(-69 3 45 -12) -69] [(-49 -85 -3 9) -85] [(-53 -41 -67 92) -67] [(-34 88 63 -42) -42] [(-33 -12 24 61) -33] [(46 24 -53 -19) -53] [(32 -65 22 -8) -65] [(-87 -6 -79 -45) -87] [(-84 24 88 -50) -84] [(74 24 -95 -15) -95] [(43 22 -2 -84) -84] [(35 73 -5 24) -5] [(50 2 19 -74) -74] [(11 -29 13 -86) -86] [(49 -3 48 -18) -18] [(66 31 -55 -75) -75] [(-71 -26 28 -22) -71])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: 42                 
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: 98                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: 86                 
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: 45                 
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_627} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_879} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt})
Lexicase best program: (exec_dup_times (integer_lte boolean_and) exec_y_when_autoconstructing () boolean_rot exec_dup_items integer_add exec_swap (boolean_dup_items exec_y_when_autoconstructing (exec_rot (boolean_flush exec_yank boolean_shove boolean_flush) (exec_s (boolean_pop) (exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) (integer_add tag_integer_627 exec_noop exec_do*count (exec_do*count (tag_exec_879 (boolean_yankdup integer_max) in3 integer_dup_items) boolean_shove boolean_rot exec_swap (print_exec (integer_lt)) ())) ()))) ()) ())) ())
Lexicase best errors: [0 0 0 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 119
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction tag_integer_627} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 0, :instruction tag_exec_879} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_lt})
Zero cases best program: (exec_dup_times (integer_lte boolean_and) exec_y_when_autoconstructing () boolean_rot exec_dup_items integer_add exec_swap (boolean_dup_items exec_y_when_autoconstructing (exec_rot (boolean_flush exec_yank boolean_shove boolean_flush) (exec_s (boolean_pop) (exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) (integer_add tag_integer_627 exec_noop exec_do*count (exec_do*count (tag_exec_879 (boolean_yankdup integer_max) in3 integer_dup_items) boolean_shove boolean_rot exec_swap (print_exec (integer_lt)) ())) ()))) ()) ())) ())
Zero cases best errors: [0 0 0 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 119
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 12 3 3 4 6 3 3 10 3)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 12 3 3 4 6 3 3 10 3)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_329} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap integer_gte integer_flush tagged_329 boolean_dup_items exec_if (exec_when (integer_add integer_mult integer_swap integer_yankdup) boolean_stackdepth exec_swap (integer_empty in3 exec_rot (integer_dec boolean_flush) (integer_fromboolean boolean_invert_second_then_and) (exec_swap (boolean_and boolean_dup_items exec_pop (in1 integer_rot) integer_div boolean_or) (integer_stackdepth integer_stackdepth integer_gte print_integer exec_yank exec_noop) integer_fromboolean integer_min boolean_xor) exec_dup_items integer_swap boolean_dup_items) ()) ())
Errors: [0 0 0 0 1 1 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.95
Median total errors in population: 10
Error averages by case: (0.997 0.988 0.997 0.997 0.996 0.994 0.997 0.997 0.99 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.125
Average program size in population (points): 67.67
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 454146
--- Timings ---
Current time: 1559583423670 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.7 seconds, 29.9%
Fitness Testing:      1.6 seconds, 65.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 93                 
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: 85                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 29                 
Correct output: 46                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 62                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 66                 
Correct output: 12                  | Program output: 68                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 60                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 99                 
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 45                 
Correct output: -82                 | Program output: 53                 
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: 9                  
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 6                  
Correct output: -31                 | Program output: 15                 
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: 57                 
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -77                
Correct output: -79                 | Program output: 66                 
Correct output: -25                 | Program output: 16                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 22                 
Correct output: -62                 | Program output: 98                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 88                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: 24                 
Correct output: -84                 | Program output: 22                 
Correct output: -5                  | Program output: 73                 
Correct output: -74                 | Program output: 2                  
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: 31                 
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_383} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult})
Lexicase best program: (boolean_rot integer_dec print_integer integer_swap integer_yank in2 boolean_eq print_integer exec_do*range (print_boolean) exec_while (tag_integer_383 boolean_empty exec_k_when_autoconstructing () (exec_swap () (in3 in3 boolean_xor exec_yank exec_y_when_autoconstructing (integer_dup_times exec_shove (integer_mult))))))
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 32
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_while} {:close 0, :instruction tag_integer_383} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult})
Zero cases best program: (boolean_rot integer_dec print_integer integer_swap integer_yank in2 boolean_eq print_integer exec_do*range (print_boolean) exec_while (tag_integer_383 boolean_empty exec_k_when_autoconstructing () (exec_swap () (in3 in3 boolean_xor exec_yank exec_y_when_autoconstructing (integer_dup_times exec_shove (integer_mult))))))
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 32
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 164 821 336 171 2 482 1 1 164)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (164 164 821 336 171 2 482 1 1 164)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_yankdup} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_integer_642} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_806} {:close 0, :instruction integer_lte} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction tagged_496} {:close 0, :instruction integer_shove} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_empty})
Best program: (exec_dup_times (integer_dup_items integer_lte exec_do*count (integer_empty boolean_shove boolean_xor boolean_dup_times) in2 print_integer integer_gt) integer_yankdup boolean_xor integer_gt integer_yank exec_dup (boolean_and exec_swap (exec_if (integer_yankdup exec_y (exec_rot (boolean_flush) (integer_yankdup exec_y () in4 boolean_or exec_k_when_autoconstructing () (tag_integer_642 boolean_not tagged_806 integer_lte print_newline boolean_rot) integer_sub exec_shove (exec_s_when_autoconstructing (tagged_496) (integer_shove in4 exec_shove (integer_min boolean_not boolean_dup_times exec_flush boolean_or exec_dup_times (boolean_invert_second_then_and exec_do*while (integer_empty)))) ())) ())) ()) ()))
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.694
Median total errors in population: 8
Error averages by case: (0.836 0.836 0.179 0.664 0.829 0.998 0.518 0.999 0.999 0.836)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.616
Average program size in population (points): 72.423
Average percent parens in population: 0.287
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.517
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1125374
--- Timings ---
Current time: 1559583426877 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 42.5%
Fitness Testing:      2.6 seconds, 47.6%
Report:               0.4 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: 93                 
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: 85                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 29                 
Correct output: 46                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 62                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 66                 
Correct output: 12                  | Program output: 68                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 60                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 99                 
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 45                 
Correct output: -82                 | Program output: 53                 
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: 9                  
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 6                  
Correct output: -31                 | Program output: 15                 
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: 57                 
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -77                
Correct output: -79                 | Program output: 66                 
Correct output: -25                 | Program output: 16                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 22                 
Correct output: -62                 | Program output: 98                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 88                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: 24                 
Correct output: -84                 | Program output: 22                 
Correct output: -5                  | Program output: 73                 
Correct output: -74                 | Program output: 2                  
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: 31                 
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_boolean_952} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_585} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_139} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_dup_times (integer_dup_items integer_lte exec_do*count (integer_empty boolean_shove boolean_xor boolean_dup_times) in2 print_integer integer_gt) boolean_empty print_integer exec_s (integer_swap) (integer_shove in2) (integer_empty boolean_dup) exec_swap () (in1 exec_k_when_autoconstructing (exec_do*count (boolean_xor boolean_dup_items boolean_eq boolean_and integer_stackdepth exec_stackdepth) exec_do*times (exec_pop (integer_inc exec_do*while (integer_rot)) in3 exec_dup_times (exec_do*times (exec_do*times (exec_eq integer_eq) exec_k_when_autoconstructing (exec_if () (exec_while (exec_pop (integer_stackdepth) integer_rot boolean_yankdup integer_flush integer_dup_times tag_boolean_952 boolean_swap)) integer_stackdepth integer_dup) (exec_when (boolean_dup integer_dup_items integer_shove) exec_if (integer_dec) (boolean_invert_second_then_and integer_gt integer_min exec_do*range (integer_swap) exec_y_when_autoconstructing (integer_dup_items integer_fromboolean exec_k_when_autoconstructing (exec_shove (tagged_585 integer_rot) exec_yank) (exec_k (exec_do*times (boolean_invert_second_then_and tag_boolean_139 integer_add integer_mod) exec_yank) (exec_eq exec_flush exec_stackdepth exec_y (exec_y_when_autoconstructing ())))))))))) ()))
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 120
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction tag_boolean_952} {:close 2, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_585} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_139} {:close 0, :instruction integer_add} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_dup_times (integer_dup_items integer_lte exec_do*count (integer_empty boolean_shove boolean_xor boolean_dup_times) in2 print_integer integer_gt) boolean_empty print_integer exec_s (integer_swap) (integer_shove in2) (integer_empty boolean_dup) exec_swap () (in1 exec_k_when_autoconstructing (exec_do*count (boolean_xor boolean_dup_items boolean_eq boolean_and integer_stackdepth exec_stackdepth) exec_do*times (exec_pop (integer_inc exec_do*while (integer_rot)) in3 exec_dup_times (exec_do*times (exec_do*times (exec_eq integer_eq) exec_k_when_autoconstructing (exec_if () (exec_while (exec_pop (integer_stackdepth) integer_rot boolean_yankdup integer_flush integer_dup_times tag_boolean_952 boolean_swap)) integer_stackdepth integer_dup) (exec_when (boolean_dup integer_dup_items integer_shove) exec_if (integer_dec) (boolean_invert_second_then_and integer_gt integer_min exec_do*range (integer_swap) exec_y_when_autoconstructing (integer_dup_items integer_fromboolean exec_k_when_autoconstructing (exec_shove (tagged_585 integer_rot) exec_yank) (exec_k (exec_do*times (boolean_invert_second_then_and tag_boolean_139 integer_add integer_mod) exec_yank) (exec_eq exec_flush exec_stackdepth exec_y (exec_y_when_autoconstructing ())))))))))) ()))
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 120
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (312 835 312 408 312 87 116 408 412 407)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (312 835 312 408 312 87 116 408 412 407)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction tagged_701} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_shove} {:close 1, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_inc})
Best program: (integer_dec boolean_invert_first_then_and exec_k_when_autoconstructing (exec_y_when_autoconstructing (exec_yankdup print_boolean integer_rot boolean_shove in2 tagged_701 integer_shove boolean_pop boolean_empty print_integer exec_s (integer_swap) (integer_shove in2) (integer_empty boolean_dup) exec_swap () (in1 exec_k_when_autoconstructing (exec_do*count (boolean_xor boolean_dup_items boolean_eq boolean_and integer_stackdepth exec_stackdepth) exec_do*times (exec_pop (integer_inc))) ()))) ())
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.391
Median total errors in population: 6
Error averages by case: (0.688 0.165 0.688 0.592 0.688 0.913 0.884 0.592 0.588 0.593)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.835
Average program size in population (points): 51.25
Average percent parens in population: 0.285
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.1105
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 274
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 283
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1635145
--- Timings ---
Current time: 1559583430059 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 50.1%
Fitness Testing:      3.2 seconds, 37.1%
Report:               1.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: 42                 
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: 98                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: 86                 
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: 45                 
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: 28                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_dup_times (integer_lte boolean_and) exec_y_when_autoconstructing () exec_stackdepth boolean_dup_items boolean_frominteger integer_lte exec_empty exec_k_when_autoconstructing (exec_pop () exec_while () integer_dup_items) (exec_when (in3 print_integer boolean_invert_second_then_and exec_y (exec_when (exec_rot (in1) (integer_sub boolean_eq exec_while (in3 integer_lt in2 exec_dup () integer_min exec_pop () exec_eq integer_gt exec_do*while (boolean_invert_first_then_and integer_swap exec_if (integer_dup boolean_invert_second_then_and exec_shove () exec_y_when_autoconstructing ()) ()))) ())))))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 61
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_while} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_dup_times (integer_lte boolean_and) exec_y_when_autoconstructing () exec_stackdepth boolean_dup_items boolean_frominteger integer_lte exec_empty exec_k_when_autoconstructing (exec_pop () exec_while () integer_dup_items) (exec_when (in3 print_integer boolean_invert_second_then_and exec_y (exec_when (exec_rot (in1) (integer_sub boolean_eq exec_while (in3 integer_lt in2 exec_dup () integer_min exec_pop () exec_eq integer_gt exec_do*while (boolean_invert_first_then_and integer_swap exec_if (integer_dup boolean_invert_second_then_and exec_shove () exec_y_when_autoconstructing ()) ()))) ())))))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 61
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (403 522 522 95 349 349 403 171 76 77)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (403 522 522 95 349 349 403 171 76 77)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction tagged_329} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_items})
Best program: (boolean_swap integer_gte integer_flush tagged_329 boolean_dup_items exec_if (exec_when (integer_add integer_mult integer_swap integer_yankdup) boolean_stackdepth exec_swap (integer_empty in3 exec_rot (integer_dec boolean_flush) (integer_fromboolean boolean_invert_second_then_and) (exec_swap (boolean_and boolean_dup_items exec_pop (in1 integer_rot) integer_div boolean_or) (integer_stackdepth integer_stackdepth integer_gte print_integer exec_yank exec_noop) integer_fromboolean integer_min boolean_xor) exec_dup_items integer_swap boolean_dup_items) ()) ())
Errors: [1 0 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 40
Size: 52
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 7.033
Median total errors in population: 6
Error averages by case: (0.597 0.478 0.478 0.905 0.651 0.651 0.597 0.829 0.924 0.923)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.605
Average program size in population (points): 45.308
Average percent parens in population: 0.284
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.617
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 293
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 307
Syntactic diversity (% unique Push programs):	 0.525
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2059991
--- Timings ---
Current time: 1559583432813 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 54.1%
Fitness Testing:      3.7 seconds, 31.5%
Report:               1.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 76                 
Correct output: 0                   | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 95                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 70                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 39                 
Correct output: -45                 | Program output: 47                 
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 75                 
Correct output: -82                 | Program output: 5                  
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: 44                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 93                 
Correct output: -67                 | Program output: 89                 
Correct output: -12                 | Program output: 38                 
Correct output: -86                 | Program output: 33                 
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 32                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 50                 
Correct output: -86                 | Program output: 11                 
Correct output: -18                 | Program output: 49                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Lexicase best program: (exec_do*times (boolean_yankdup exec_noop) integer_yankdup integer_div in2 integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Lexicase best errors: [0 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Zero cases best program: (exec_do*times (boolean_yankdup exec_noop) integer_yankdup integer_div in2 integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Zero cases best errors: [0 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 170 314 314 313 240 170 340 314 240)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (313 170 314 314 313 240 170 340 314 240)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_noop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Best program: (exec_do*times (boolean_yankdup exec_noop) integer_yankdup integer_div in2 integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Errors: [0 1 0 0 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.272
Median total errors in population: 8
Error averages by case: (0.687 0.83 0.686 0.686 0.687 0.76 0.83 0.66 0.686 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.814
Average program size in population (points): 50.277
Average percent parens in population: 0.291
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.1225
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 165
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2577583
--- Timings ---
Current time: 1559583436260 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.4 seconds, 57.3%
Fitness Testing:      4.3 seconds, 29.3%
Report:               1.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: 55                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 81                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: 9                  
Correct output: -62                 | Program output: 39                 
Correct output: -45                 | Program output: 47                 
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: 60                 
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: 14                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: 5                  
Correct output: -79                 | Program output: 72                 
Correct output: -25                 | Program output: 48                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 44                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: 46                 
Correct output: -65                 | Program output: 32                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: 74                 
Correct output: -84                 | Program output: 43                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 50                 
Correct output: -86                 | Program output: 11                 
Correct output: -18                 | Program output: 49                 
Correct output: -75                 | Program output: 66                 
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 86
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 86
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 440 218 28 19 27 19 222 26 218)
Population mean number of elite cases: 1.44
Count of perfect (error zero) individuals by case: (221 440 218 28 19 27 19 222 26 218)
Population mean number of perfect (error zero) cases: 1.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ())))
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 64
Size: 86
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 8.562
Median total errors in population: 9
Error averages by case: (0.779 0.56 0.782 0.972 0.981 0.973 0.981 0.778 0.974 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.894
Average program size in population (points): 62.076
Average percent parens in population: 0.265
Minimum age in population: 5.0
Maximum age in population: 9.75
Average age in population: 8.415125
Median age in population: 8.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.569
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3318723
--- Timings ---
Current time: 1559583440400 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.9 seconds, 58.1%
Fitness Testing:      5.1 seconds, 27.1%
Report:               2.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ()))
Lexicase best errors: [1 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ()))
Zero cases best errors: [1 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 887 416 289 202 190 288 474 208 202)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (202 887 416 289 202 190 288 474 208 202)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction tagged_363} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_eq} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 1, :instruction exec_do*range} {:close 2, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_pop})
Best program: (exec_empty exec_s_when_autoconstructing (integer_gte exec_noop) (boolean_xor integer_empty exec_noop in1 integer_div) (integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) tagged_363 exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_empty integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (exec_shove () integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot boolean_eq) tagged_226 boolean_or in4 exec_flush) (integer_lte in1 exec_do*range () integer_flush)) (integer_pop integer_add exec_do*range (exec_do*range ()) exec_shove (integer_mod boolean_yank boolean_yankdup exec_rot (integer_pop) () ()))))
Errors: [1 0 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 93
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.642
Median total errors in population: 6
Error averages by case: (0.798 0.113 0.584 0.711 0.798 0.81 0.712 0.526 0.792 0.798)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.522
Average program size in population (points): 64.339
Average percent parens in population: 0.265
Minimum age in population: 6.5
Maximum age in population: 11.625
Average age in population: 9.50896875
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4111559
--- Timings ---
Current time: 1559583444110 milliseconds
Total Time:          22.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.0 seconds, 57.7%
Fitness Testing:      6.0 seconds, 26.4%
Report:               3.5 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 83                 
Correct output: 5                   | Program output: 85                 
Correct output: 13                  | Program output: 38                 
Correct output: 39                  | Program output: 57                 
Correct output: 5                   | Program output: 97                 
Correct output: 34                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 84                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 57                 
Correct output: 0                   | Program output: 74                 
Correct output: 0                   | Program output: 28                 
Correct output: 11                  | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 61                 
Correct output: 10                  | Program output: 65                 
Correct output: -75                 | Program output: 62                 
Correct output: -63                 | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -31                
Correct output: -42                 | Program output: 5                  
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: 24                 
Correct output: -57                 | Program output: 36                 
Correct output: -34                 | Program output: 49                 
Correct output: -92                 | Program output: 42                 
Correct output: -53                 | Program output: 24                 
Correct output: -81                 | Program output: 62                 
Correct output: -51                 | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -29                
Correct output: -37                 | Program output: 15                 
Correct output: -83                 | Program output: 63                 
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 8                  
Correct output: -82                 | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: 39                 
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: 28                 
Correct output: -41                 | Program output: -36                
Correct output: -15                 | Program output: -9                 
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 91                 
Correct output: -74                 | Program output: 72                 
Correct output: -67                 | Program output: 29                 
Correct output: -12                 | Program output: 90                 
Correct output: -86                 | Program output: 40                 
Correct output: -50                 | Program output: 84                 
Correct output: -85                 | Program output: 47                 
Correct output: -18                 | Program output: 90                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -2                 
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: 9                  
Correct output: -67                 | Program output: 92                 
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: 61                 
Correct output: -53                 | Program output: -19                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -45                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup print_boolean print_integer exec_do*while (in1 integer_eq) integer_dup_items exec_rot (exec_yank) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup print_boolean print_integer exec_do*while (in1 integer_eq) integer_dup_items exec_rot (exec_yank) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 429 239 184 267 184 360 109 184 112)
Population mean number of elite cases: 2.25
Count of perfect (error zero) individuals by case: (186 429 239 184 267 184 360 109 184 112)
Population mean number of perfect (error zero) cases: 2.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup print_boolean print_integer exec_do*while (in1 integer_eq) integer_dup_items exec_rot (exec_yank) () ())
Errors: [0 1 1 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 12
Size: 17
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.746
Median total errors in population: 8
Error averages by case: (0.814 0.571 0.761 0.816 0.733 0.816 0.64 0.891 0.816 0.888)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.094
Average program size in population (points): 61.856
Average percent parens in population: 0.259
Minimum age in population: 7.5
Maximum age in population: 13.03125
Average age in population: 11.38453125
Median age in population: 11.4921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4881478
--- Timings ---
Current time: 1559583446971 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 57.1%
Fitness Testing:      6.8 seconds, 26.0%
Report:               4.3 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 607
Test mean error for best: 0.60700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4) ()) ()))
Lexicase best errors: [1 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4) ()) ()))
Zero cases best errors: [1 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 106 311 259 423 110 133 371 374 374)
Population mean number of elite cases: 2.61
Count of perfect (error zero) individuals by case: (148 106 311 259 423 110 133 371 374 374)
Population mean number of perfect (error zero) cases: 2.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ())
Errors: [1 0 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.391
Median total errors in population: 7
Error averages by case: (0.852 0.894 0.689 0.741 0.577 0.89 0.867 0.629 0.626 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.521
Average program size in population (points): 49.645
Average percent parens in population: 0.257
Minimum age in population: 9.5
Maximum age in population: 14.59375
Average age in population: 12.85890625
Median age in population: 12.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.541
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5497290
--- Timings ---
Current time: 1559583450355 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.8 seconds, 58.4%
Fitness Testing:      7.4 seconds, 25.8%
Report:               4.5 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ())
Lexicase best errors: [1 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 68
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ())
Zero cases best errors: [1 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 68
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 479 795 297 263 262 477 274 477 90)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (91 479 795 297 263 262 477 274 477 90)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_lte integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger integer_yankdup) exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4) ()) ()))
Errors: [1 0 0 1 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 6.495
Median total errors in population: 8
Error averages by case: (0.909 0.521 0.205 0.703 0.737 0.738 0.523 0.726 0.523 0.91)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.849
Average program size in population (points): 53.167
Average percent parens in population: 0.246
Minimum age in population: 11.0
Maximum age in population: 16.1171875
Average age in population: 14.225359375
Median age in population: 14.25390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6230902
--- Timings ---
Current time: 1559583453786 milliseconds
Total Time:          32.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 57.9%
Fitness Testing:      8.2 seconds, 25.5%
Report:               5.3 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 549
Test mean error for best: 0.54900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 83                 
Correct output: 5                   | Program output: 85                 
Correct output: 13                  | Program output: 38                 
Correct output: 39                  | Program output: 57                 
Correct output: 5                   | Program output: 97                 
Correct output: 34                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 84                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 57                 
Correct output: 0                   | Program output: 74                 
Correct output: 0                   | Program output: 28                 
Correct output: 11                  | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 61                 
Correct output: 10                  | Program output: 65                 
Correct output: -75                 | Program output: 62                 
Correct output: -63                 | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -31                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: 49                 
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: 62                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -29                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 8                  
Correct output: -82                 | Program output: -41                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 72                 
Correct output: -67                 | Program output: 29                 
Correct output: -12                 | Program output: 90                 
Correct output: -86                 | Program output: 40                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -19                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush)) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))) ())
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush)) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))) ())
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 904 664 493 526 489 170 666 170 170)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (187 904 664 493 526 489 170 666 170 170)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush boolean_pop) exec_do*range (boolean_dup) boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ()))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 72
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 5.561
Median total errors in population: 4
Error averages by case: (0.813 0.096 0.336 0.507 0.474 0.511 0.83 0.334 0.83 0.83)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.903
Average program size in population (points): 68.922
Average percent parens in population: 0.233
Minimum age in population: 13.3828125
Maximum age in population: 17.748046875
Average age in population: 15.53898046875
Median age in population: 15.6171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.649
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7280166
--- Timings ---
Current time: 1559583457582 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.6 seconds, 57.1%
Fitness Testing:      9.3 seconds, 25.8%
Report:               6.0 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 546
Test mean error for best: 0.54600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 83                 
Correct output: 5                   | Program output: 85                 
Correct output: 13                  | Program output: 38                 
Correct output: 39                  | Program output: 57                 
Correct output: 5                   | Program output: 97                 
Correct output: 34                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 84                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 74                 
Correct output: 0                   | Program output: 28                 
Correct output: 11                  | Program output: 55                 
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 61                 
Correct output: 10                  | Program output: 65                 
Correct output: -75                 | Program output: 62                 
Correct output: -63                 | Program output: 62                 
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -67                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -31                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: 49                 
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: 62                 
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -29                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 8                  
Correct output: -82                 | Program output: 5                  
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 72                 
Correct output: -67                 | Program output: 29                 
Correct output: -12                 | Program output: 90                 
Correct output: -86                 | Program output: 40                 
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -19                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: 24                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (boolean_shove integer_gte) integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226)) ())
Lexicase best errors: [0 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 69
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (boolean_shove integer_gte) integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup boolean_yank) exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226)) ())
Zero cases best errors: [0 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 69
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 15 737 23 207 894 290 882 738 111)
Population mean number of elite cases: 4.29
Count of perfect (error zero) individuals by case: (396 15 737 23 207 894 290 882 738 111)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_yankdup boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) boolean_yank) exec_s_when_autoconstructing (boolean_dup) (boolean_yank) (exec_s_when_autoconstructing (integer_rot exec_when (boolean_stackdepth in4 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) (exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)) ()))
Errors: [0 1 0 1 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 78
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 5.707
Median total errors in population: 5
Error averages by case: (0.604 0.985 0.263 0.977 0.793 0.106 0.71 0.118 0.262 0.889)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.773
Average program size in population (points): 69.636
Average percent parens in population: 0.228
Minimum age in population: 14.859375
Maximum age in population: 18.8681640625
Average age in population: 16.823447265625
Median age in population: 16.884765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 8355305
--- Timings ---
Current time: 1559583461379 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.4 seconds, 56.4%
Fitness Testing:     10.4 seconds, 26.1%
Report:               6.9 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: 93                 
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: 85                 
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 29                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 99                 
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: 53                 
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: 6                  
Correct output: -31                 | Program output: 15                 
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -77                
Correct output: -79                 | Program output: 66                 
Correct output: -25                 | Program output: 16                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: 22                 
Correct output: -62                 | Program output: 98                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 88                 
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: 24                 
Correct output: -84                 | Program output: 22                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 2                  
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: 31                 
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 2, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) in2) integer_rot exec_when (boolean_stackdepth) in3 integer_rot integer_empty print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) () exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Lexicase best errors: [1 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 2, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) in2) integer_rot exec_when (boolean_stackdepth) in3 integer_rot integer_empty print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times exec_y (tag_integer_463) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_yankdup) () exec_if (exec_noop integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Zero cases best errors: [1 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 390 433 242 175 361 241 181 144 115)
Population mean number of elite cases: 2.38
Count of perfect (error zero) individuals by case: (94 390 433 242 175 361 241 181 144 115)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [1 1 0 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 77
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 7.624
Median total errors in population: 8
Error averages by case: (0.906 0.61 0.567 0.758 0.825 0.639 0.759 0.819 0.856 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.63
Average program size in population (points): 66.455
Average percent parens in population: 0.223
Minimum age in population: 15.859375
Maximum age in population: 20.1015625
Average age in population: 18.35747021484375
Median age in population: 18.40576171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.006
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9346639
--- Timings ---
Current time: 1559583464835 milliseconds
Total Time:          43.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.4 seconds, 55.9%
Fitness Testing:     11.4 seconds, 26.2%
Report:               7.7 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 607
Test mean error for best: 0.60700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 42                 
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: 59                 
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (317 125 813 242 92 564 269 321 320 491)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (317 125 813 242 92 564 269 321 320 491)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_dup) integer_add) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 64
Size: 77
Percent parens: 0.169
--- Population Statistics ---
Average total errors in population: 6.446
Median total errors in population: 6
Error averages by case: (0.683 0.875 0.187 0.758 0.908 0.436 0.731 0.679 0.68 0.509)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.897
Average program size in population (points): 73.076
Average percent parens in population: 0.208
Minimum age in population: 16.859375
Maximum age in population: 21.517822265625
Average age in population: 19.756513671875
Median age in population: 19.80615234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.008
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10444571
--- Timings ---
Current time: 1559583468360 milliseconds
Total Time:          47.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 55.8%
Fitness Testing:     12.5 seconds, 26.6%
Report:               8.2 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (705 375 636 871 812 375 818 627 628 83)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (705 375 636 871 812 375 818 627 628 83)
Population mean number of perfect (error zero) cases: 5.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq integer_add exec_do*count (boolean_frominteger) integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 63
Size: 75
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 4.07
Median total errors in population: 4
Error averages by case: (0.295 0.625 0.364 0.129 0.188 0.625 0.182 0.373 0.372 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.508
Average program size in population (points): 76.596
Average percent parens in population: 0.184
Minimum age in population: 19.7587890625
Maximum age in population: 22.4224853515625
Average age in population: 21.06222570800781
Median age in population: 21.179931640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.01
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11451652
--- Timings ---
Current time: 1559583471741 milliseconds
Total Time:          50.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 55.8%
Fitness Testing:     13.4 seconds, 26.7%
Report:               8.7 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 540
Test mean error for best: 0.54000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -78                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -20                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: 5                  
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: -15                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) boolean_eq) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 75
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) boolean_eq) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 75
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (40 704 21 641 705 23 5 5 650 20)
Population mean number of elite cases: 2.81
Count of perfect (error zero) individuals by case: (40 704 21 641 705 23 5 5 650 20)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) boolean_eq) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [1 0 0 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 61
Size: 75
Percent parens: 0.187
--- Population Statistics ---
Average total errors in population: 7.186
Median total errors in population: 7
Error averages by case: (0.96 0.296 0.979 0.359 0.295 0.977 0.995 0.995 0.35 0.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.136
Average program size in population (points): 78.433
Average percent parens in population: 0.182
Minimum age in population: 21.179931640625
Maximum age in population: 23.87353515625
Average age in population: 22.31148016357422
Median age in population: 22.33648681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 12588538
--- Timings ---
Current time: 1559583475064 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 55.8%
Fitness Testing:     14.4 seconds, 26.7%
Report:               9.3 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 525
Test mean error for best: 0.52500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [0 1 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [0 1 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (641 1000 245 1000 643 536 465 108 12 267)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (641 0 245 0 643 536 465 108 12 267)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (exec_empty exec_empty integer_gte exec_noop boolean_xor integer_empty boolean_invert_second_then_and exec_dup_items integer_empty boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_add in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [0 1 1 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 66
Size: 80
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 7.083
Median total errors in population: 7
Error averages by case: (0.359 1.0 0.755 1.0 0.357 0.464 0.535 0.892 0.988 0.733)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 65.217
Average program size in population (points): 79.653
Average percent parens in population: 0.181
Minimum age in population: 22.179931640625
Maximum age in population: 25.36050415039062
Average age in population: 24.30599761962891
Median age in population: 24.18161010742188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.007
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 13568544
--- Timings ---
Current time: 1559583478242 milliseconds
Total Time:          57.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 55.9%
Fitness Testing:     15.2 seconds, 26.6%
Report:               9.8 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 576
Test mean error for best: 0.57600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 62                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 0                  
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 45                 
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: 57                 
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [0 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 83
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [0 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 83
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 392 545 2 190 392 591 680 765 755)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (128 392 545 2 190 392 591 680 765 755)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [0 0 0 1 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 83
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 5.56
Median total errors in population: 5
Error averages by case: (0.872 0.608 0.455 0.998 0.81 0.608 0.409 0.32 0.235 0.245)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.695
Average program size in population (points): 78.83
Average percent parens in population: 0.178
Minimum age in population: 23.179931640625
Maximum age in population: 27.09864807128906
Average age in population: 25.81669023132324
Median age in population: 25.8367919921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14714051
--- Timings ---
Current time: 1559583481641 milliseconds
Total Time:          60.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.7 seconds, 55.9%
Fitness Testing:     16.1 seconds, 26.7%
Report:              10.4 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 576
Test mean error for best: 0.57600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 0                  
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 62                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 0                  
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 45                 
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: 57                 
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 84
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 84
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (530 550 572 543 91 538 788 41 544 8)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (530 550 572 543 91 538 788 41 544 8)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 67
Size: 83
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 5.795
Median total errors in population: 4
Error averages by case: (0.47 0.45 0.428 0.457 0.909 0.462 0.212 0.959 0.456 0.992)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.21
Average program size in population (points): 83.168
Average percent parens in population: 0.191
Minimum age in population: 25.60348510742188
Maximum age in population: 28.78427886962891
Average age in population: 26.91703449249268
Median age in population: 27.08642578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 235
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 239
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15845744
--- Timings ---
Current time: 1559583484998 milliseconds
Total Time:          63.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.6 seconds, 55.9%
Fitness Testing:     17.0 seconds, 26.8%
Report:              11.0 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 526
Test mean error for best: 0.52600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 59                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: 89                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 91                 
Correct output: -94                 | Program output: 91                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -6                 
Correct output: -84                 | Program output: 88                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (exec_s (exec_dup_items in4) (boolean_yankdup integer_fromboolean integer_fromboolean integer_gte) (integer_add in1 integer_sub boolean_flush) exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (exec_s (exec_dup_items in4) (boolean_yankdup integer_fromboolean integer_fromboolean integer_gte) (integer_add in1 integer_sub boolean_flush) exec_shove (exec_when () integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (575 651 242 54 29 58 604 847 473 132)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (575 651 242 54 29 58 604 847 473 132)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 2, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when () integer_gte integer_add) in2 integer_sub boolean_flush integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463) (23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 83
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 6.335
Median total errors in population: 6
Error averages by case: (0.425 0.349 0.758 0.946 0.971 0.942 0.396 0.153 0.527 0.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.213
Average program size in population (points): 80.323
Average percent parens in population: 0.187
Minimum age in population: 27.08642578125
Maximum age in population: 30.12403869628906
Average age in population: 28.24323698806763
Median age in population: 28.11012268066406
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.007
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.171
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 17139235
--- Timings ---
Current time: 1559583488453 milliseconds
Total Time:          67.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.5 seconds, 55.8%
Fitness Testing:     18.1 seconds, 26.9%
Report:              11.5 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 652
Test mean error for best: 0.65200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -70                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 4                  
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6-6               
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 0                  
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 11                 
Correct output: 13                  | Program output:                    
Correct output: 39                  | Program output: 43                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 72                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 10                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 38                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output:                    
Correct output: -63                 | Program output: -63-63             
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -18-18             
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27-27             
Correct output: -65                 | Program output: 124                
Correct output: -57                 | Program output: 22                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 93                 
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31-31             
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -36                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -7                 
Correct output: -67                 | Program output: -36-36             
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 139                
Correct output: -85                 | Program output: 144                
Correct output: -18                 | Program output: 109                
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: 57                 
Correct output: -53                 | Program output: -53-53             
Correct output: -65                 | Program output:                    
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95-95             
Correct output: -84                 | Program output: -2-2               
Correct output: -5                  | Program output: -5-5               
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output:                    
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55-55             
Correct output: -71                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_flush) boolean_pop exec_do*range (boolean_pop) boolean_or boolean_dup boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq exec_dup_items tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Lexicase best errors: [0 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 67
Percent parens: 0.119
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_flush) boolean_pop exec_do*range (boolean_pop) boolean_or boolean_dup boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq exec_dup_items tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Zero cases best errors: [0 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 67
Percent parens: 0.119
--- Lexicase Population Statistics ---
Count of elite individuals by case: (801 166 301 248 434 305 321 243 624 28)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (801 166 301 248 434 305 321 243 624 28)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 68
Size: 79
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 6.529
Median total errors in population: 6
Error averages by case: (0.199 0.834 0.699 0.752 0.566 0.695 0.679 0.757 0.376 0.972)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.705
Average program size in population (points): 77.537
Average percent parens in population: 0.175
Minimum age in population: 28.08642578125
Maximum age in population: 31.46990966796875
Average age in population: 30.00337546539307
Median age in population: 30.00936126708984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.007
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 18299397
--- Timings ---
Current time: 1559583491882 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.3 seconds, 55.7%
Fitness Testing:     19.0 seconds, 27.0%
Report:              12.1 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6-6               
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 85                 
Correct output: 13                  | Program output:                    
Correct output: 39                  | Program output: 57                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output:                    
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 84                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 90                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 28                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 61                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output:                    
Correct output: -63                 | Program output: -63-63             
Correct output: -92                 | Program output: 22                 
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -18-18             
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27-27             
Correct output: -65                 | Program output: 24                 
Correct output: -57                 | Program output: 22                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 50                 
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -36                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 72                 
Correct output: -67                 | Program output: -3629              
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 84                 
Correct output: -85                 | Program output: 47                 
Correct output: -18                 | Program output: 90                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: 61                 
Correct output: -53                 | Program output: -53-53             
Correct output: -65                 | Program output:                    
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95-95             
Correct output: -84                 | Program output: -2-2               
Correct output: -5                  | Program output: -523               
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output:                    
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55-55             
Correct output: -71                 | Program output: -22                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add) in1 integer_sub boolean_flush boolean_flush boolean_pop) exec_do*range (boolean_pop) exec_do*range () boolean_dup boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 2, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add) in1 integer_sub boolean_flush boolean_flush boolean_pop) exec_do*range (boolean_pop) exec_do*range () boolean_dup boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 564 564 593 387 324 25 423 564 577)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (196 564 564 593 387 324 25 423 564 577)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 exec_dup_items in4 integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte) integer_add in1 integer_sub boolean_flush) boolean_flush boolean_pop exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 60
Size: 69
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 5.783
Median total errors in population: 4
Error averages by case: (0.804 0.436 0.436 0.407 0.613 0.676 0.975 0.577 0.436 0.423)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.877
Average program size in population (points): 72.113
Average percent parens in population: 0.152
Minimum age in population: 29.08642578125
Maximum age in population: 33.05729675292969
Average age in population: 31.61781118202209
Median age in population: 31.6743745803833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.714
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.221
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 19311438
--- Timings ---
Current time: 1559583495166 milliseconds
Total Time:          73.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.2 seconds, 55.8%
Fitness Testing:     19.9 seconds, 26.9%
Report:              12.7 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 11                 
Correct output: 13                  | Program output:                    
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 80                 
Correct output: 29                  | Program output: 89                 
Correct output: 39                  | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 76                 
Correct output: 0                   | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 95                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 93                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output:                    
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 192 201 869 818 819 13 155 281 604)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (681 192 201 869 818 819 13 155 281 604)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 76
Percent parens: 0.145
--- Population Statistics ---
Average total errors in population: 5.367
Median total errors in population: 5
Error averages by case: (0.319 0.808 0.799 0.131 0.182 0.181 0.987 0.845 0.719 0.396)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.215
Average program size in population (points): 80.151
Average percent parens in population: 0.159
Minimum age in population: 31.75936126708984
Maximum age in population: 34.64376449584961
Average age in population: 33.0492566318512
Median age in population: 32.97082901000977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.01
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 20658379
--- Timings ---
Current time: 1559583498666 milliseconds
Total Time:          77.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 55.7%
Fitness Testing:     20.9 seconds, 27.1%
Report:              13.2 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 531
Test mean error for best: 0.53100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: 39                 
Correct output: -93                 | Program output: 42                 
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 98                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 62                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 68                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 12                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 60                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: 98                 
Correct output: -89                 | Program output: 99                 
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -35                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: 29                 
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: -80                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: 94                 
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -60                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: -51                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: -83                
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -53                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: 73                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (boolean_eq integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) (integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 83
Percent parens: 0.181
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (boolean_eq integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) in2) exec_s_when_autoconstructing (exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) (integer_eq integer_flush boolean_not) (tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 83
Percent parens: 0.181
--- Lexicase Population Statistics ---
Count of elite individuals by case: (117 899 22 116 753 135 228 733 607 2)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (117 899 22 116 753 135 228 733 607 2)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction 71} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items in4 boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (71 integer_gte integer_add in2 integer_sub boolean_flush) integer_div exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) exec_shove (exec_when (integer_gte integer_add in1 integer_sub boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 1 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 73
Size: 86
Percent parens: 0.151
--- Population Statistics ---
Average total errors in population: 6.388
Median total errors in population: 6
Error averages by case: (0.883 0.101 0.978 0.884 0.247 0.865 0.772 0.267 0.393 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.811
Average program size in population (points): 79.159
Average percent parens in population: 0.155
Minimum age in population: 32.92289352416992
Maximum age in population: 35.97082901000977
Average age in population: 35.14885811138153
Median age in population: 34.97082901000977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 262
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.007
Error (vector) diversity:			 0.048
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 21832445
--- Timings ---
Current time: 1559583502189 milliseconds
Total Time:          80.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.0 seconds, 55.7%
Fitness Testing:     21.9 seconds, 27.1%
Report:              13.8 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 29                 
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -30                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -10                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: 6                  
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 40                 
Correct output: -52                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 66                 
Correct output: -25                 | Program output: 16                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: 22                 
Correct output: -62                 | Program output: 85                 
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -2                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: 63                 
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: 3                  
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: 63                 
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: 24                 
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 2                  
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -3                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot exec_do*range (boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.157
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot exec_do*range (boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.157
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 803 105 675 115 366 411 390 365 541)
Population mean number of elite cases: 4.30
Count of perfect (error zero) individuals by case: (533 803 105 675 115 366 411 390 365 541)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_pop) exec_do*range (boolean_dup) boolean_rot integer_pop exec_when (boolean_not in3 integer_rot exec_do*range (boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 75
Size: 89
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.696
Median total errors in population: 5
Error averages by case: (0.467 0.197 0.895 0.325 0.885 0.634 0.589 0.61 0.635 0.459)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.339
Average program size in population (points): 77.461
Average percent parens in population: 0.155
Minimum age in population: 34.46612739562988
Maximum age in population: 37.97082901000977
Average age in population: 36.41490087938309
Median age in population: 36.4588451385498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.01
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 22911317
--- Timings ---
Current time: 1559583505651 milliseconds
Total Time:          84.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.9 seconds, 55.6%
Fitness Testing:     22.8 seconds, 27.0%
Report:              14.5 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 453
Test mean error for best: 0.45300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 11                 
Correct output: 13                  | Program output:                    
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 80                 
Correct output: 29                  | Program output: 89                 
Correct output: 39                  | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 95                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output:                    
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -31                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 22                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 93                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 0123456789101112131415
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: 61                 
Correct output: -53                 | Program output: -19                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -86                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_lte boolean_frominteger) (integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_lte boolean_frominteger) (integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (134 842 627 195 200 17 118 687 875 195)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (134 842 627 195 200 17 118 687 875 195)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_div boolean_frominteger) (integer_mod) integer_lte exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 77
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.11
Median total errors in population: 6
Error averages by case: (0.866 0.158 0.373 0.805 0.8 0.983 0.882 0.313 0.125 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.101
Average program size in population (points): 83.764
Average percent parens in population: 0.150
Minimum age in population: 36.93487739562988
Maximum age in population: 39.4588451385498
Average age in population: 38.61095827651024
Median age in population: 38.4588451385498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 242
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.01
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 24151081
--- Timings ---
Current time: 1559583509048 milliseconds
Total Time:          87.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 55.6%
Fitness Testing:     23.8 seconds, 27.0%
Report:              15.2 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -54                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 11                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 28                 
Correct output: 44                  | Program output: 80                 
Correct output: 29                  | Program output: 89                 
Correct output: 39                  | Program output: 69                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 40                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 95                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 95                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 5                  
Correct output: -90                 | Program output: -87                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -31                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: 10                 
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -83                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: 93                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 22                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 90                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -77                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: 24                 
Correct output: -53                 | Program output: -19                
Correct output: -65                 | Program output: -8                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -15                
Correct output: -84                 | Program output: -84                
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -75                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_lte boolean_frominteger) (integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 76
Percent parens: 0.118
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_lte boolean_frominteger) (integer_mod) integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 76
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (782 813 893 813 474 91 878 633 813 596)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (782 813 893 813 474 91 878 633 813 596)
Population mean number of perfect (error zero) cases: 6.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction tag_integer_463} {:close 0, :instruction 22} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 exec_noop exec_yankdup print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not) tagged_855 exec_dup_items boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 22 boolean_eq exec_swap (integer_lte boolean_frominteger) (integer_mod) integer_div boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 67
Size: 76
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 3.214
Median total errors in population: 2
Error averages by case: (0.218 0.187 0.107 0.187 0.526 0.909 0.122 0.367 0.187 0.404)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.019
Average program size in population (points): 78.775
Average percent parens in population: 0.136
Minimum age in population: 38.70285320281982
Maximum age in population: 41.4588451385498
Average age in population: 40.42980343365669
Median age in population: 40.4588451385498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.01
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 24996229
--- Timings ---
Current time: 1559583512105 milliseconds
Total Time:          90.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.7 seconds, 55.8%
Fitness Testing:     24.5 seconds, 26.9%
Report:              15.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 352
Test mean error for best: 0.35200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 6060               
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 70                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -18                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (871 553 880 735 295 43 280 295 818 837)
Population mean number of elite cases: 5.61
Count of perfect (error zero) individuals by case: (871 553 880 735 295 43 280 295 818 837)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max)
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 57
Size: 66
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 4.393
Median total errors in population: 4
Error averages by case: (0.129 0.447 0.12 0.265 0.705 0.957 0.72 0.705 0.182 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.054
Average program size in population (points): 79.788
Average percent parens in population: 0.133
Minimum age in population: 39.70285320281982
Maximum age in population: 43.18947517871857
Average age in population: 41.79026765549183
Median age in population: 41.82785320281982
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.01
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 25923535
--- Timings ---
Current time: 1559583515188 milliseconds
Total Time:          94.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 55.9%
Fitness Testing:     25.2 seconds, 26.8%
Report:              16.1 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 330
Test mean error for best: 0.33000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 6060               
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -6                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -6                 
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_604 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 89
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_604} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_604 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 89
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (858 859 590 3 266 796 589 706 7 904)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (858 859 590 3 266 796 589 706 7 904)
Population mean number of perfect (error zero) cases: 5.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 89
Percent parens: 0.146
--- Population Statistics ---
Average total errors in population: 4.422
Median total errors in population: 4
Error averages by case: (0.142 0.141 0.41 0.997 0.734 0.204 0.411 0.294 0.993 0.096)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.719
Average program size in population (points): 80.735
Average percent parens in population: 0.148
Minimum age in population: 40.70285320281982
Maximum age in population: 44.79141217470169
Average age in population: 43.45509090852737
Median age in population: 43.28172719478607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 27029072
--- Timings ---
Current time: 1559583518646 milliseconds
Total Time:          97.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.5 seconds, 56.0%
Fitness Testing:     26.2 seconds, 26.9%
Report:              16.5 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 577
Test mean error for best: 0.57700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: 100                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output:                    
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 91                 
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 82                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 100                
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 100                
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 99                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 95                 
Correct output: 0                   | Program output: 21                 
Correct output: 0                   | Program output: 67                 
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 74                 
Correct output: 10                  | Program output: 14                 
Correct output: -75                 | Program output: 33                 
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 42                 
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 24                 
Correct output: -57                 | Program output:                    
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output:                    
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 87                 
Correct output: -52                 | Program output: 14                 
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 56                 
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 7575               
Correct output: -74                 | Program output: 86                 
Correct output: -67                 | Program output: -36                
Correct output: -12                 | Program output: 16                 
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush boolean_pop exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 92
Percent parens: 0.141
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush boolean_pop exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 92
Percent parens: 0.141
--- Lexicase Population Statistics ---
Count of elite individuals by case: (61 587 254 35 596 282 927 80 496 481)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (61 587 254 35 596 282 927 80 496 481)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (in4 integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot exec_swap () (print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) boolean_xor integer_lte boolean_rot in3 tagged_226 boolean_or in4)
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 90
Percent parens: 0.156
--- Population Statistics ---
Average total errors in population: 6.201
Median total errors in population: 11/2
Error averages by case: (0.939 0.413 0.746 0.965 0.404 0.718 0.073 0.92 0.504 0.519)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 72.455
Average program size in population (points): 84.844
Average percent parens in population: 0.146
Minimum age in population: 42.99229019880295
Maximum age in population: 46.65672719478607
Average age in population: 45.33153333970904
Median age in population: 45.46253818273544
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 90
Genome diversity (% unique genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.009
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 28368880
--- Timings ---
Current time: 1559583522313 milliseconds
Total Time:         100.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.4 seconds, 55.9%
Fitness Testing:     27.2 seconds, 27.0%
Report:              17.2 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 310
Test mean error for best: 0.31000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 100                
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 5                  
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: 66                 
Correct output: -45                 | Program output: -18                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: -65                
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: 89                 
Correct output: -25                 | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -30                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -41                
Correct output: -15                 | Program output: 5                  
Correct output: -32                 | Program output: 67                 
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -94                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -34                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: 22                 
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: 19                 
Correct output: -86                 | Program output: 13                 
Correct output: -18                 | Program output: 48                 
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -71                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction 23} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot) integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (23 integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 80
Percent parens: 0.138
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction 23} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot) integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (23 integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 80
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (825 426 821 814 394 47 795 46 823 628)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (825 426 821 814 394 47 795 46 823 628)
Population mean number of perfect (error zero) cases: 5.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction 23} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in3} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot) integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) 23 boolean_eq exec_swap (exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) exec_do*count (boolean_frominteger) integer_mod) (integer_lte boolean_rot in3) tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 81
Size: 97
Percent parens: 0.165
--- Population Statistics ---
Average total errors in population: 4.381
Median total errors in population: 4
Error averages by case: (0.175 0.574 0.179 0.186 0.606 0.953 0.205 0.954 0.177 0.372)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 74.775
Average program size in population (points): 87.248
Average percent parens in population: 0.143
Minimum age in population: 44.87547719478607
Maximum age in population: 48.2586641907692
Average age in population: 46.60283015522361
Median age in population: 46.68630494177341
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.01
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 29740759
--- Timings ---
Current time: 1559583525990 milliseconds
Total Time:         104.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.3 seconds, 55.8%
Fitness Testing:     28.3 seconds, 27.1%
Report:              17.8 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 394
Test mean error for best: 0.39400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: 65                 
Correct output: -34                 | Program output: 76                 
Correct output: 95                  | Program output: 95                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 88                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 37                 
Correct output: 34                  | Program output: 44                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 75                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 71                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 65                 
Correct output: 5                   | Program output: 5                  
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 60                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 36                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: 12                 
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 9                  
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: -42                
Correct output: -82                 | Program output: 53                 
Correct output: -65                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: 30                 
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -11                
Correct output: -81                 | Program output: 9                  
Correct output: -51                 | Program output: -51                
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: 14                 
Correct output: -37                 | Program output: -31                
Correct output: -83                 | Program output: 57                 
Correct output: 10                  | Program output: 40                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -77                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -69                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -44                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: -1556              
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -22                
Correct output: -50                 | Program output: -50                
Correct output: -85                 | Program output: -85                
Correct output: -18                 | Program output: -18                
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -41                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -33                
Correct output: -53                 | Program output: 24                 
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: 24                 
Correct output: -84                 | Program output: 22                 
Correct output: -5                  | Program output: 73                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: 31                 
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2 integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2 integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 829 722 29 532 830 894 548 52 283)
Population mean number of elite cases: 5.15
Count of perfect (error zero) individuals by case: (427 829 722 29 532 830 894 548 52 283)
Population mean number of perfect (error zero) cases: 5.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup in2 integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 57
Size: 64
Percent parens: 0.109
--- Population Statistics ---
Average total errors in population: 4.854
Median total errors in population: 4
Error averages by case: (0.573 0.171 0.278 0.971 0.468 0.17 0.106 0.452 0.948 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.588
Average program size in population (points): 83.803
Average percent parens in population: 0.144
Minimum age in population: 47.20936794579029
Maximum age in population: 49.82692994177341
Average age in population: 48.43590120001882
Median age in population: 48.46880913153291
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.01
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 30814369
--- Timings ---
Current time: 1559583529256 milliseconds
Total Time:         108.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.3 seconds, 55.8%
Fitness Testing:     29.2 seconds, 27.0%
Report:              18.5 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 316
Test mean error for best: 0.31600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 83                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 56                 
Correct output: 15                  | Program output: 15                 
Correct output: 31                  | Program output: 54                 
Correct output: 12                  | Program output: 12                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 44                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 6060               
Correct output: 31                  | Program output: 31                 
Correct output: 36                  | Program output: 61                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 24                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 10                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 75                 
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (297 735 684 893 454 860 211 41 763 49)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (297 735 684 893 454 860 211 41 763 49)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 67
Size: 78
Percent parens: 0.141
--- Population Statistics ---
Average total errors in population: 5.013
Median total errors in population: 5
Error averages by case: (0.703 0.265 0.316 0.107 0.546 0.14 0.789 0.959 0.237 0.951)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.759
Average program size in population (points): 68.106
Average percent parens in population: 0.120
Minimum age in population: 48.69783644378185
Maximum age in population: 51.1924887560308
Average age in population: 50.17325749022514
Median age in population: 50.10325031727552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.01
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 31474560
--- Timings ---
Current time: 1559583532163 milliseconds
Total Time:         111.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 56.0%
Fitness Testing:     29.8 seconds, 26.9%
Report:              18.9 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 335
Test mean error for best: 0.33500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and in2 boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not) tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 87
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and in2 boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_fromboolean integer_div exec_shove (exec_when (integer_gte integer_add in1 exec_empty boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not) tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 87
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 161 701 624 738 6 847 738 148 161)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (360 161 701 624 738 6 847 738 148 161)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 84
Percent parens: 0.155
--- Population Statistics ---
Average total errors in population: 5.516
Median total errors in population: 5
Error averages by case: (0.64 0.839 0.299 0.376 0.262 0.994 0.153 0.262 0.852 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.303
Average program size in population (points): 80.617
Average percent parens in population: 0.139
Minimum age in population: 50.84380913153291
Maximum age in population: 52.7784262560308
Average age in population: 51.83690927679464
Median age in population: 51.7784262560308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.009
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 32288700
--- Timings ---
Current time: 1559583535228 milliseconds
Total Time:         114.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 56.2%
Fitness Testing:     30.5 seconds, 26.8%
Report:              19.3 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 340
Test mean error for best: 0.34000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_add boolean_eq integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (577 384 615 664 337 878 730 799 493 858)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (577 384 615 664 337 878 730 799 493 858)
Population mean number of perfect (error zero) cases: 6.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction -45} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 -45 boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer exec_dup () integer_eq) integer_flush boolean_not) tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 85
Percent parens: 0.165
--- Population Statistics ---
Average total errors in population: 3.665
Median total errors in population: 2
Error averages by case: (0.423 0.616 0.385 0.336 0.663 0.122 0.27 0.201 0.507 0.142)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.486
Average program size in population (points): 78.182
Average percent parens in population: 0.150
Minimum age in population: 52.27614869177341
Maximum age in population: 54.7784262560308
Average age in population: 53.77002605321072
Median age in population: 53.73421420808882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.01
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 32972403
--- Timings ---
Current time: 1559583538173 milliseconds
Total Time:         117.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 56.4%
Fitness Testing:     31.1 seconds, 26.6%
Report:              19.8 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 335
Test mean error for best: 0.33500
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 1
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 1
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Lexicase best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 84
Percent parens: 0.155
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Zero cases best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte integer_add in4) integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq) integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 84
Percent parens: 0.155
--- Lexicase Population Statistics ---
Count of elite individuals by case: (916 679 887 543 811 69 798 627 674 802)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (916 679 887 543 811 69 798 627 674 802)
Population mean number of perfect (error zero) cases: 6.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_flush} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 1, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_not} {:close 0, :instruction tagged_855} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction tag_integer_463} {:close 0, :instruction 23} {:close 0, :instruction tagged_226} {:close 0, :instruction boolean_or} {:close 0, :instruction in4})
Best program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 73
Size: 84
Percent parens: 0.131
--- Population Statistics ---
Average total errors in population: 3.194
Median total errors in population: 2
Error averages by case: (0.084 0.321 0.113 0.457 0.189 0.931 0.202 0.373 0.326 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.109
Average program size in population (points): 78.898
Average percent parens in population: 0.149
Minimum age in population: 53.31111769378185
Maximum age in population: 56.73421420808882
Average age in population: 55.131004704413
Median age in population: 55.15567114483565
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.011
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 33637412
--- Timings ---
Current time: 1559583541196 milliseconds
Total Time:         120.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.9 seconds, 56.6%
Fitness Testing:     31.7 seconds, 26.4%
Report:              20.2 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 84


Auto-simplifying with starting size: 84
step: 0
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 500
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1000
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 1500
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2000
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 2500
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3000
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 3500
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4000
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 4500
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

step: 5000
program: (boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_fromboolean integer_fromboolean boolean_invert_second_then_and exec_dup_items boolean_stackdepth boolean_yankdup integer_inc integer_fromboolean integer_gte integer_add in1 integer_sub boolean_flush integer_gte integer_add in4 integer_gte integer_add in4 integer_yankdup integer_sub boolean_flush exec_shove (exec_when (integer_gte exec_shove (boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not boolean_flush) boolean_flush) boolean_pop) exec_do*range (boolean_flush) exec_shove (exec_when (boolean_not in3 integer_rot boolean_dup integer_eq in3 integer_rot exec_yankdup boolean_dup) in2) integer_min exec_when (boolean_stackdepth in3 integer_rot integer_empty) print_integer boolean_invert_first_then_and) integer_eq integer_flush boolean_not tagged_855 exec_dup_items boolean_dup_times integer_max tag_integer_463 23 tagged_226 boolean_or in4)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 84

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 335
Test mean error for best: 0.33500
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 1
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 1
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 1
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 1
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 1
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 1
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 1
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -70                 | Program output: -70                
Correct output: -95                 | Program output: -95                
Correct output: -63                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: 95                  | Program output: 99                 
Correct output: -59                 | Program output: -59                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -88                 | Program output: -88                
Correct output: -6                  | Program output: -6                 
Correct output: -72                 | Program output: -72                
Correct output: 89                  | Program output: 89                 
Correct output: -97                 | Program output: -97                
Correct output: 83                  | Program output: 83                 
Correct output: -50                 | Program output: -50                
Correct output: 0                   | Program output: 0                  
Correct output: 46                  | Program output: 46                 
Correct output: 5                   | Program output: 5                  
Correct output: 13                  | Program output: 13                 
Correct output: 39                  | Program output: 39                 
Correct output: 5                   | Program output: 537                
Correct output: 34                  | Program output: 34                 
Correct output: 15                  | Program output: 16                 
Correct output: 31                  | Program output: 31                 
Correct output: 12                  | Program output: 62                 
Correct output: 11                  | Program output: 11                 
Correct output: 44                  | Program output: 57                 
Correct output: 29                  | Program output: 29                 
Correct output: 39                  | Program output: 54                 
Correct output: 5                   | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 31                  | Program output: 64                 
Correct output: 36                  | Program output: 66                 
Correct output: 10                  | Program output: 10                 
Correct output: -75                 | Program output: -75                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -45                 | Program output: -45                
Correct output: -42                 | Program output: 4                  
Correct output: -82                 | Program output: -27                
Correct output: -65                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -34                 | Program output: -34                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -31                 | Program output: -31                
Correct output: -37                 | Program output: -37                
Correct output: -83                 | Program output: -83                
Correct output: 10                  | Program output: 72                 
Correct output: -52                 | Program output: -52                
Correct output: -82                 | Program output: -82                
Correct output: -79                 | Program output: -79                
Correct output: -25                 | Program output: -25                
Correct output: -97                 | Program output: -97                
Correct output: -42                 | Program output: -42                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -41                 | Program output: -40                
Correct output: -15                 | Program output: 556                
Correct output: -32                 | Program output: -32                
Correct output: -83                 | Program output: 8                  
Correct output: -74                 | Program output: -74                
Correct output: -67                 | Program output: -67                
Correct output: -12                 | Program output: -12                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: 67                 
Correct output: -85                 | Program output: -17                
Correct output: -18                 | Program output: 27                 
Correct output: -94                 | Program output: -90                
Correct output: -91                 | Program output: -91                
Correct output: -69                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -67                 | Program output: -67                
Correct output: -42                 | Program output: -42                
Correct output: -33                 | Program output: -12                
Correct output: -53                 | Program output: -53                
Correct output: -65                 | Program output: -65                
Correct output: -87                 | Program output: -79                
Correct output: -84                 | Program output: -50                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -2                 
Correct output: -5                  | Program output: -5                 
Correct output: -74                 | Program output: -74                
Correct output: -86                 | Program output: -29                
Correct output: -18                 | Program output: -18                
Correct output: -75                 | Program output: -55                
Correct output: -71                 | Program output: -26                
;;******************************
