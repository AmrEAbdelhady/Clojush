Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -100 -98 -100] -100] [[11 5 11 11] 5] [[-27 -27 -42 -27] -42] [[51 51 52 51] 51] [[-80 40 40 40] -80] [[-32 -54 -54 -54] -54] [[95 -1 95 95] -1] [[-43 24 24 24] -43] [[73 -93 -93 -93] -93] [[-97 88 88 88] -97] [(42 42 42 42) 42] [(-59 -59 -59 -59) -59] [(56 56 56 56) 56] [(100 100 100 100) 100] [(8 8 8 8) 8] [(74 50 12 78) 12] [(28 71 12 78) 12] [(58 65 23 14) 14] [(53 40 99 92) 40] [(3 72 80 92) 3] [(57 75 58 10) 10] [(1 86 89 78) 1] [(81 0 90 7) 0] [(81 27 60 78) 27] [(76 21 30 40) 21] [(17 46 81 10) 10] [(49 42 32 96) 32] [(51 94 81 1) 1] [(72 74 68 94) 68] [(52 65 96 96) 52] [(27 13 31 95) 13] [(19 36 86 41) 19] [(54 25 19 24) 19] [(36 56 7 71) 7] [(71 47 33 78) 33] [(-64 -99 44 96) -99] [(-7 10 60 -54) -54] [(-65 70 -2 -98) -98] [(-55 -58 -23 -79) -79] [(94 -85 -96 -75) -96] [(16 94 -19 -10) -19] [(-47 -77 -4 86) -77] [(67 -91 -6 -26) -91] [(-77 -73 33 14) -77] [(29 40 95 -95) -95] [(-12 -58 95 68) -58] [(-43 -28 73 -74) -74] [(94 -28 77 93) -28] [(60 18 -57 56) -57] [(11 -71 15 -30) -71] [(10 85 46 -100) -100] [(-5 -32 -93 -15) -93] [(-85 94 77 82) -85] [(54 100 90 69) 54] [(50 89 -35 74) -35] [(37 -20 66 -44) -44] [(-48 66 86 71) -48] [(-94 -81 11 -51) -94] [(-62 46 52 -59) -62] [(-2 -30 -48 43) -48] [(-32 43 -65 -2) -65] [(-93 73 88 -56) -93] [(10 -40 -57 69) -57] [(-12 14 20 36) -12] [(93 -72 -85 -25) -85] [(45 -87 70 80) -87] [(88 18 16 -96) -96] [(-62 -88 -80 -61) -88] [(19 56 49 -4) -4] [(-17 -79 -2 -38) -79] [(-1 -14 24 80) -14] [(-50 68 -96 9) -96] [(41 -55 70 91) -55] [(-93 -86 -9 -40) -93] [(64 -87 -59 73) -87] [(55 71 -17 7) -17] [(-27 13 39 11) -27] [(48 34 34 -68) -68] [(-29 45 -3 -50) -50] [(-70 -59 36 56) -70] [(28 -74 -37 -85) -85] [(-28 -9 99 -64) -64] [(36 -69 -32 -2) -69] [(100 58 -2 61) -2] [(3 63 -68 -79) -79] [(42 67 -100 37) -100] [(0 14 -92 9) -92] [(39 -81 -15 97) -81] [(35 84 -38 -43) -43] [(65 -17 90 84) -17] [(79 -63 42 -78) -78] [(-55 -24 -38 58) -55] [(-4 10 15 -100) -100] [(40 -48 61 -4) -48] [(99 100 -74 -81) -81])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-100 -100 -98 -100] -100]
Train Case:   6 | Input/Output: [[11 5 11 11] 5]
Train Case:   7 | Input/Output: [[-27 -27 -42 -27] -42]
Train Case:   8 | Input/Output: [[51 51 52 51] 51]
Train Case:   9 | Input/Output: [[-80 40 40 40] -80]
Train Case:  10 | Input/Output: [[-32 -54 -54 -54] -54]
Train Case:  11 | Input/Output: [[95 -1 95 95] -1]
Train Case:  12 | Input/Output: [[-43 24 24 24] -43]
Train Case:  13 | Input/Output: [[73 -93 -93 -93] -93]
Train Case:  14 | Input/Output: [[-97 88 88 88] -97]
Train Case:  15 | Input/Output: [(42 42 42 42) 42]
Train Case:  16 | Input/Output: [(-59 -59 -59 -59) -59]
Train Case:  17 | Input/Output: [(56 56 56 56) 56]
Train Case:  18 | Input/Output: [(100 100 100 100) 100]
Train Case:  19 | Input/Output: [(8 8 8 8) 8]
Train Case:  20 | Input/Output: [(74 50 12 78) 12]
Train Case:  21 | Input/Output: [(28 71 12 78) 12]
Train Case:  22 | Input/Output: [(58 65 23 14) 14]
Train Case:  23 | Input/Output: [(53 40 99 92) 40]
Train Case:  24 | Input/Output: [(3 72 80 92) 3]
Train Case:  25 | Input/Output: [(57 75 58 10) 10]
Train Case:  26 | Input/Output: [(1 86 89 78) 1]
Train Case:  27 | Input/Output: [(81 0 90 7) 0]
Train Case:  28 | Input/Output: [(81 27 60 78) 27]
Train Case:  29 | Input/Output: [(76 21 30 40) 21]
Train Case:  30 | Input/Output: [(17 46 81 10) 10]
Train Case:  31 | Input/Output: [(49 42 32 96) 32]
Train Case:  32 | Input/Output: [(51 94 81 1) 1]
Train Case:  33 | Input/Output: [(72 74 68 94) 68]
Train Case:  34 | Input/Output: [(52 65 96 96) 52]
Train Case:  35 | Input/Output: [(27 13 31 95) 13]
Train Case:  36 | Input/Output: [(19 36 86 41) 19]
Train Case:  37 | Input/Output: [(54 25 19 24) 19]
Train Case:  38 | Input/Output: [(36 56 7 71) 7]
Train Case:  39 | Input/Output: [(71 47 33 78) 33]
Train Case:  40 | Input/Output: [(-64 -99 44 96) -99]
Train Case:  41 | Input/Output: [(-7 10 60 -54) -54]
Train Case:  42 | Input/Output: [(-65 70 -2 -98) -98]
Train Case:  43 | Input/Output: [(-55 -58 -23 -79) -79]
Train Case:  44 | Input/Output: [(94 -85 -96 -75) -96]
Train Case:  45 | Input/Output: [(16 94 -19 -10) -19]
Train Case:  46 | Input/Output: [(-47 -77 -4 86) -77]
Train Case:  47 | Input/Output: [(67 -91 -6 -26) -91]
Train Case:  48 | Input/Output: [(-77 -73 33 14) -77]
Train Case:  49 | Input/Output: [(29 40 95 -95) -95]
Train Case:  50 | Input/Output: [(-12 -58 95 68) -58]
Train Case:  51 | Input/Output: [(-43 -28 73 -74) -74]
Train Case:  52 | Input/Output: [(94 -28 77 93) -28]
Train Case:  53 | Input/Output: [(60 18 -57 56) -57]
Train Case:  54 | Input/Output: [(11 -71 15 -30) -71]
Train Case:  55 | Input/Output: [(10 85 46 -100) -100]
Train Case:  56 | Input/Output: [(-5 -32 -93 -15) -93]
Train Case:  57 | Input/Output: [(-85 94 77 82) -85]
Train Case:  58 | Input/Output: [(54 100 90 69) 54]
Train Case:  59 | Input/Output: [(50 89 -35 74) -35]
Train Case:  60 | Input/Output: [(37 -20 66 -44) -44]
Train Case:  61 | Input/Output: [(-48 66 86 71) -48]
Train Case:  62 | Input/Output: [(-94 -81 11 -51) -94]
Train Case:  63 | Input/Output: [(-62 46 52 -59) -62]
Train Case:  64 | Input/Output: [(-2 -30 -48 43) -48]
Train Case:  65 | Input/Output: [(-32 43 -65 -2) -65]
Train Case:  66 | Input/Output: [(-93 73 88 -56) -93]
Train Case:  67 | Input/Output: [(10 -40 -57 69) -57]
Train Case:  68 | Input/Output: [(-12 14 20 36) -12]
Train Case:  69 | Input/Output: [(93 -72 -85 -25) -85]
Train Case:  70 | Input/Output: [(45 -87 70 80) -87]
Train Case:  71 | Input/Output: [(88 18 16 -96) -96]
Train Case:  72 | Input/Output: [(-62 -88 -80 -61) -88]
Train Case:  73 | Input/Output: [(19 56 49 -4) -4]
Train Case:  74 | Input/Output: [(-17 -79 -2 -38) -79]
Train Case:  75 | Input/Output: [(-1 -14 24 80) -14]
Train Case:  76 | Input/Output: [(-50 68 -96 9) -96]
Train Case:  77 | Input/Output: [(41 -55 70 91) -55]
Train Case:  78 | Input/Output: [(-93 -86 -9 -40) -93]
Train Case:  79 | Input/Output: [(64 -87 -59 73) -87]
Train Case:  80 | Input/Output: [(55 71 -17 7) -17]
Train Case:  81 | Input/Output: [(-27 13 39 11) -27]
Train Case:  82 | Input/Output: [(48 34 34 -68) -68]
Train Case:  83 | Input/Output: [(-29 45 -3 -50) -50]
Train Case:  84 | Input/Output: [(-70 -59 36 56) -70]
Train Case:  85 | Input/Output: [(28 -74 -37 -85) -85]
Train Case:  86 | Input/Output: [(-28 -9 99 -64) -64]
Train Case:  87 | Input/Output: [(36 -69 -32 -2) -69]
Train Case:  88 | Input/Output: [(100 58 -2 61) -2]
Train Case:  89 | Input/Output: [(3 63 -68 -79) -79]
Train Case:  90 | Input/Output: [(42 67 -100 37) -100]
Train Case:  91 | Input/Output: [(0 14 -92 9) -92]
Train Case:  92 | Input/Output: [(39 -81 -15 97) -81]
Train Case:  93 | Input/Output: [(35 84 -38 -43) -43]
Train Case:  94 | Input/Output: [(65 -17 90 84) -17]
Train Case:  95 | Input/Output: [(79 -63 42 -78) -78]
Train Case:  96 | Input/Output: [(-55 -24 -38 58) -55]
Train Case:  97 | Input/Output: [(-4 10 15 -100) -100]
Train Case:  98 | Input/Output: [(40 -48 61 -4) -48]
Train Case:  99 | Input/Output: [(99 100 -74 -81) -81]
Test Case:   0 | Input/Output: [[-17 -17 -17 39] -17]
Test Case:   1 | Input/Output: [[31 31 31 100] 31]
Test Case:   2 | Input/Output: [[-87 -87 -87 -72] -87]
Test Case:   3 | Input/Output: [[73 73 73 -56] -56]
Test Case:   4 | Input/Output: [[39 39 39 -50] -50]
Test Case:   5 | Input/Output: [[-33 -33 -33 94] -33]
Test Case:   6 | Input/Output: [[-4 -4 -4 39] -4]
Test Case:   7 | Input/Output: [[-41 -41 -41 -33] -41]
Test Case:   8 | Input/Output: [[-32 75 75 75] -32]
Test Case:   9 | Input/Output: [[58 15 15 15] 15]
Test Case:  10 | Input/Output: [[21 21 21 -94] -94]
Test Case:  11 | Input/Output: [[-93 -93 32 -93] -93]
Test Case:  12 | Input/Output: [[-58 -58 -58 83] -58]
Test Case:  13 | Input/Output: [[-75 -21 -75 -75] -75]
Test Case:  14 | Input/Output: [[-84 -52 -84 -84] -84]
Test Case:  15 | Input/Output: [[75 75 -98 75] -98]
Test Case:  16 | Input/Output: [[86 -92 -92 -92] -92]
Test Case:  17 | Input/Output: [[-45 -45 -45 65] -45]
Test Case:  18 | Input/Output: [[58 -20 58 58] -20]
Test Case:  19 | Input/Output: [[4 -78 4 4] -78]
Test Case:  20 | Input/Output: [[-23 27 27 27] -23]
Test Case:  21 | Input/Output: [[66 -81 66 66] -81]
Test Case:  22 | Input/Output: [[-14 6 6 6] -14]
Test Case:  23 | Input/Output: [[14 14 5 14] 5]
Test Case:  24 | Input/Output: [[-61 39 39 39] -61]
Test Case:  25 | Input/Output: [[-55 42 -55 -55] -55]
Test Case:  26 | Input/Output: [[-78 16 -78 -78] -78]
Test Case:  27 | Input/Output: [[-31 -4 -4 -4] -31]
Test Case:  28 | Input/Output: [[-36 19 -36 -36] -36]
Test Case:  29 | Input/Output: [[-37 -100 -100 -100] -100]
Test Case:  30 | Input/Output: [[-38 -38 -38 18] -38]
Test Case:  31 | Input/Output: [[-3 -3 -46 -3] -46]
Test Case:  32 | Input/Output: [[28 28 28 60] 28]
Test Case:  33 | Input/Output: [[-86 -86 -86 76] -86]
Test Case:  34 | Input/Output: [[4 36 4 4] 4]
Test Case:  35 | Input/Output: [[71 -12 -12 -12] -12]
Test Case:  36 | Input/Output: [[68 41 68 68] 41]
Test Case:  37 | Input/Output: [[-7 -7 -7 -79] -79]
Test Case:  38 | Input/Output: [[63 63 -70 63] -70]
Test Case:  39 | Input/Output: [[25 25 25 -4] -4]
Test Case:  40 | Input/Output: [[-24 57 -24 -24] -24]
Test Case:  41 | Input/Output: [[-99 -99 -6 -99] -99]
Test Case:  42 | Input/Output: [[-96 -72 -72 -72] -96]
Test Case:  43 | Input/Output: [[30 30 45 30] 30]
Test Case:  44 | Input/Output: [[9 79 9 9] 9]
Test Case:  45 | Input/Output: [[-54 -54 -83 -54] -83]
Test Case:  46 | Input/Output: [[-42 -42 -42 31] -42]
Test Case:  47 | Input/Output: [[-76 -76 59 -76] -76]
Test Case:  48 | Input/Output: [[40 -10 40 40] -10]
Test Case:  49 | Input/Output: [[-18 70 70 70] -18]
Test Case:  50 | Input/Output: [[18 18 -46 18] -46]
Test Case:  51 | Input/Output: [[81 -4 81 81] -4]
Test Case:  52 | Input/Output: [[-46 -46 -46 74] -46]
Test Case:  53 | Input/Output: [[62 62 -46 62] -46]
Test Case:  54 | Input/Output: [[-16 -16 -56 -16] -56]
Test Case:  55 | Input/Output: [[-20 -20 -20 -76] -76]
Test Case:  56 | Input/Output: [[-15 -79 -79 -79] -79]
Test Case:  57 | Input/Output: [[65 65 65 65] 65]
Test Case:  58 | Input/Output: [[-9 -81 -9 -9] -81]
Test Case:  59 | Input/Output: [[-15 -8 -8 -8] -15]
Test Case:  60 | Input/Output: [[91 91 -1 91] -1]
Test Case:  61 | Input/Output: [[-58 75 -58 -58] -58]
Test Case:  62 | Input/Output: [[56 -70 -70 -70] -70]
Test Case:  63 | Input/Output: [[-82 23 -82 -82] -82]
Test Case:  64 | Input/Output: [[-32 -31 -31 -31] -32]
Test Case:  65 | Input/Output: [[-51 -51 -51 -9] -51]
Test Case:  66 | Input/Output: [[-73 -73 -73 53] -73]
Test Case:  67 | Input/Output: [[83 83 -45 83] -45]
Test Case:  68 | Input/Output: [[67 -38 -38 -38] -38]
Test Case:  69 | Input/Output: [[-91 -91 -91 -74] -91]
Test Case:  70 | Input/Output: [[-30 -30 -88 -30] -88]
Test Case:  71 | Input/Output: [[-19 76 76 76] -19]
Test Case:  72 | Input/Output: [[-42 -76 -76 -76] -76]
Test Case:  73 | Input/Output: [[42 14 14 14] 14]
Test Case:  74 | Input/Output: [[-62 -56 -62 -62] -62]
Test Case:  75 | Input/Output: [[-60 91 -60 -60] -60]
Test Case:  76 | Input/Output: [[27 -2 -2 -2] -2]
Test Case:  77 | Input/Output: [[33 -61 33 33] -61]
Test Case:  78 | Input/Output: [[2 2 30 2] 2]
Test Case:  79 | Input/Output: [[-12 -78 -78 -78] -78]
Test Case:  80 | Input/Output: [[-23 -23 4 -23] -23]
Test Case:  81 | Input/Output: [[-74 -74 65 -74] -74]
Test Case:  82 | Input/Output: [[-100 -100 -100 -81] -100]
Test Case:  83 | Input/Output: [[88 88 88 -24] -24]
Test Case:  84 | Input/Output: [[-1 -7 -1 -1] -7]
Test Case:  85 | Input/Output: [[100 14 14 14] 14]
Test Case:  86 | Input/Output: [[66 66 66 -90] -90]
Test Case:  87 | Input/Output: [[-29 -29 38 -29] -29]
Test Case:  88 | Input/Output: [[-16 -16 -43 -16] -43]
Test Case:  89 | Input/Output: [[53 -52 53 53] -52]
Test Case:  90 | Input/Output: [[63 85 63 63] 63]
Test Case:  91 | Input/Output: [[98 33 33 33] 33]
Test Case:  92 | Input/Output: [[51 -28 -28 -28] -28]
Test Case:  93 | Input/Output: [[83 -75 -75 -75] -75]
Test Case:  94 | Input/Output: [[96 8 96 96] 8]
Test Case:  95 | Input/Output: [[62 62 4 62] 4]
Test Case:  96 | Input/Output: [[-65 -8 -65 -65] -65]
Test Case:  97 | Input/Output: [[-13 -49 -49 -49] -49]
Test Case:  98 | Input/Output: [[33 -95 33 33] -95]
Test Case:  99 | Input/Output: [[-61 36 -61 -61] -61]
Test Case: 100 | Input/Output: [(92 92 92 92) 92]
Test Case: 101 | Input/Output: [(60 60 60 60) 60]
Test Case: 102 | Input/Output: [(29 29 29 29) 29]
Test Case: 103 | Input/Output: [(61 61 61 61) 61]
Test Case: 104 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 105 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 106 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 107 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 108 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 109 | Input/Output: [(36 36 36 36) 36]
Test Case: 110 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 111 | Input/Output: [(73 73 73 73) 73]
Test Case: 112 | Input/Output: [(44 44 44 44) 44]
Test Case: 113 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 114 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 115 | Input/Output: [(32 32 32 32) 32]
Test Case: 116 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 117 | Input/Output: [(35 35 35 35) 35]
Test Case: 118 | Input/Output: [(64 64 64 64) 64]
Test Case: 119 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 120 | Input/Output: [(71 71 71 71) 71]
Test Case: 121 | Input/Output: [(15 15 15 15) 15]
Test Case: 122 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 123 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 124 | Input/Output: [(97 97 97 97) 97]
Test Case: 125 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 126 | Input/Output: [(79 79 79 79) 79]
Test Case: 127 | Input/Output: [(10 10 10 10) 10]
Test Case: 128 | Input/Output: [(89 89 89 89) 89]
Test Case: 129 | Input/Output: [(4 4 4 4) 4]
Test Case: 130 | Input/Output: [(55 55 55 55) 55]
Test Case: 131 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 132 | Input/Output: [(84 84 84 84) 84]
Test Case: 133 | Input/Output: [(18 18 18 18) 18]
Test Case: 134 | Input/Output: [(60 60 60 60) 60]
Test Case: 135 | Input/Output: [(79 79 79 79) 79]
Test Case: 136 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 137 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 138 | Input/Output: [(97 97 97 97) 97]
Test Case: 139 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 140 | Input/Output: [(66 66 66 66) 66]
Test Case: 141 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 142 | Input/Output: [(98 98 98 98) 98]
Test Case: 143 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 144 | Input/Output: [(0 0 0 0) 0]
Test Case: 145 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 146 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 147 | Input/Output: [(4 4 4 4) 4]
Test Case: 148 | Input/Output: [(32 32 32 32) 32]
Test Case: 149 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 150 | Input/Output: [(86 86 86 86) 86]
Test Case: 151 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 152 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 153 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 154 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 155 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 156 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 157 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 158 | Input/Output: [(17 17 17 17) 17]
Test Case: 159 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 160 | Input/Output: [(87 87 87 87) 87]
Test Case: 161 | Input/Output: [(94 94 94 94) 94]
Test Case: 162 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 163 | Input/Output: [(89 89 89 89) 89]
Test Case: 164 | Input/Output: [(10 10 10 10) 10]
Test Case: 165 | Input/Output: [(92 92 92 92) 92]
Test Case: 166 | Input/Output: [(87 87 87 87) 87]
Test Case: 167 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 168 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 169 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 170 | Input/Output: [(22 22 22 22) 22]
Test Case: 171 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 172 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 173 | Input/Output: [(30 30 30 30) 30]
Test Case: 174 | Input/Output: [(61 61 61 61) 61]
Test Case: 175 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 176 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 177 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 178 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 179 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 180 | Input/Output: [(95 95 95 95) 95]
Test Case: 181 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 182 | Input/Output: [(9 9 9 9) 9]
Test Case: 183 | Input/Output: [(81 81 81 81) 81]
Test Case: 184 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 185 | Input/Output: [(2 2 2 2) 2]
Test Case: 186 | Input/Output: [(34 34 34 34) 34]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 189 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 190 | Input/Output: [(69 69 69 69) 69]
Test Case: 191 | Input/Output: [(97 97 97 97) 97]
Test Case: 192 | Input/Output: [(18 18 18 18) 18]
Test Case: 193 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 194 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 195 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 196 | Input/Output: [(63 63 63 63) 63]
Test Case: 197 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 198 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 199 | Input/Output: [(12 12 12 12) 12]
Test Case: 200 | Input/Output: [(21 9 74 46) 9]
Test Case: 201 | Input/Output: [(3 57 48 96) 3]
Test Case: 202 | Input/Output: [(90 91 80 60) 60]
Test Case: 203 | Input/Output: [(32 15 32 71) 15]
Test Case: 204 | Input/Output: [(0 83 19 87) 0]
Test Case: 205 | Input/Output: [(49 57 91 3) 3]
Test Case: 206 | Input/Output: [(75 85 4 0) 0]
Test Case: 207 | Input/Output: [(80 23 49 71) 23]
Test Case: 208 | Input/Output: [(80 31 98 0) 0]
Test Case: 209 | Input/Output: [(4 67 4 80) 4]
Test Case: 210 | Input/Output: [(6 43 57 40) 6]
Test Case: 211 | Input/Output: [(28 74 35 52) 28]
Test Case: 212 | Input/Output: [(70 67 67 68) 67]
Test Case: 213 | Input/Output: [(96 67 22 81) 22]
Test Case: 214 | Input/Output: [(60 78 10 86) 10]
Test Case: 215 | Input/Output: [(38 44 40 36) 36]
Test Case: 216 | Input/Output: [(31 50 30 15) 15]
Test Case: 217 | Input/Output: [(67 79 56 67) 56]
Test Case: 218 | Input/Output: [(74 92 14 41) 14]
Test Case: 219 | Input/Output: [(40 3 68 19) 3]
Test Case: 220 | Input/Output: [(43 95 100 78) 43]
Test Case: 221 | Input/Output: [(37 71 18 40) 18]
Test Case: 222 | Input/Output: [(19 83 16 45) 16]
Test Case: 223 | Input/Output: [(3 5 59 27) 3]
Test Case: 224 | Input/Output: [(59 4 26 71) 4]
Test Case: 225 | Input/Output: [(84 52 84 89) 52]
Test Case: 226 | Input/Output: [(65 86 96 23) 23]
Test Case: 227 | Input/Output: [(8 9 48 37) 8]
Test Case: 228 | Input/Output: [(26 27 52 19) 19]
Test Case: 229 | Input/Output: [(18 85 48 81) 18]
Test Case: 230 | Input/Output: [(52 25 26 50) 25]
Test Case: 231 | Input/Output: [(12 81 4 32) 4]
Test Case: 232 | Input/Output: [(54 42 99 40) 40]
Test Case: 233 | Input/Output: [(67 72 1 31) 1]
Test Case: 234 | Input/Output: [(58 76 55 20) 20]
Test Case: 235 | Input/Output: [(90 15 51 65) 15]
Test Case: 236 | Input/Output: [(60 10 5 60) 5]
Test Case: 237 | Input/Output: [(61 53 74 21) 21]
Test Case: 238 | Input/Output: [(99 89 75 96) 75]
Test Case: 239 | Input/Output: [(12 62 11 92) 11]
Test Case: 240 | Input/Output: [(61 6 58 91) 6]
Test Case: 241 | Input/Output: [(41 89 22 16) 16]
Test Case: 242 | Input/Output: [(53 5 51 76) 5]
Test Case: 243 | Input/Output: [(8 27 22 70) 8]
Test Case: 244 | Input/Output: [(17 68 5 2) 2]
Test Case: 245 | Input/Output: [(10 71 53 71) 10]
Test Case: 246 | Input/Output: [(53 89 34 28) 28]
Test Case: 247 | Input/Output: [(35 45 60 54) 35]
Test Case: 248 | Input/Output: [(1 43 45 32) 1]
Test Case: 249 | Input/Output: [(82 41 5 51) 5]
Test Case: 250 | Input/Output: [(26 14 82 88) 14]
Test Case: 251 | Input/Output: [(25 52 5 25) 5]
Test Case: 252 | Input/Output: [(2 68 3 14) 2]
Test Case: 253 | Input/Output: [(86 22 75 46) 22]
Test Case: 254 | Input/Output: [(93 71 66 88) 66]
Test Case: 255 | Input/Output: [(98 92 20 77) 20]
Test Case: 256 | Input/Output: [(73 5 89 10) 5]
Test Case: 257 | Input/Output: [(72 7 100 73) 7]
Test Case: 258 | Input/Output: [(97 25 38 22) 22]
Test Case: 259 | Input/Output: [(11 86 0 66) 0]
Test Case: 260 | Input/Output: [(78 21 68 59) 21]
Test Case: 261 | Input/Output: [(79 78 53 23) 23]
Test Case: 262 | Input/Output: [(30 56 90 49) 30]
Test Case: 263 | Input/Output: [(21 44 75 14) 14]
Test Case: 264 | Input/Output: [(33 16 100 9) 9]
Test Case: 265 | Input/Output: [(52 22 62 18) 18]
Test Case: 266 | Input/Output: [(44 79 76 45) 44]
Test Case: 267 | Input/Output: [(67 16 96 50) 16]
Test Case: 268 | Input/Output: [(19 35 97 93) 19]
Test Case: 269 | Input/Output: [(2 44 44 85) 2]
Test Case: 270 | Input/Output: [(56 27 31 90) 27]
Test Case: 271 | Input/Output: [(89 16 5 18) 5]
Test Case: 272 | Input/Output: [(42 16 6 39) 6]
Test Case: 273 | Input/Output: [(88 9 76 69) 9]
Test Case: 274 | Input/Output: [(85 25 83 14) 14]
Test Case: 275 | Input/Output: [(16 77 78 68) 16]
Test Case: 276 | Input/Output: [(59 78 24 94) 24]
Test Case: 277 | Input/Output: [(25 28 2 66) 2]
Test Case: 278 | Input/Output: [(14 76 78 21) 14]
Test Case: 279 | Input/Output: [(99 93 8 29) 8]
Test Case: 280 | Input/Output: [(27 11 32 19) 11]
Test Case: 281 | Input/Output: [(40 56 75 36) 36]
Test Case: 282 | Input/Output: [(64 91 94 21) 21]
Test Case: 283 | Input/Output: [(54 49 22 76) 22]
Test Case: 284 | Input/Output: [(82 58 1 35) 1]
Test Case: 285 | Input/Output: [(74 68 4 30) 4]
Test Case: 286 | Input/Output: [(62 83 16 69) 16]
Test Case: 287 | Input/Output: [(69 19 100 12) 12]
Test Case: 288 | Input/Output: [(37 48 56 14) 14]
Test Case: 289 | Input/Output: [(17 70 6 2) 2]
Test Case: 290 | Input/Output: [(49 6 66 9) 6]
Test Case: 291 | Input/Output: [(26 74 72 64) 26]
Test Case: 292 | Input/Output: [(32 62 64 93) 32]
Test Case: 293 | Input/Output: [(68 11 93 32) 11]
Test Case: 294 | Input/Output: [(59 82 11 59) 11]
Test Case: 295 | Input/Output: [(23 87 69 74) 23]
Test Case: 296 | Input/Output: [(64 36 75 73) 36]
Test Case: 297 | Input/Output: [(33 57 38 11) 11]
Test Case: 298 | Input/Output: [(69 28 22 7) 7]
Test Case: 299 | Input/Output: [(76 77 21 44) 21]
Test Case: 300 | Input/Output: [(64 16 11 56) 11]
Test Case: 301 | Input/Output: [(83 83 61 26) 26]
Test Case: 302 | Input/Output: [(84 68 87 60) 60]
Test Case: 303 | Input/Output: [(45 97 69 80) 45]
Test Case: 304 | Input/Output: [(28 42 45 92) 28]
Test Case: 305 | Input/Output: [(17 23 93 3) 3]
Test Case: 306 | Input/Output: [(79 70 63 97) 63]
Test Case: 307 | Input/Output: [(68 72 40 66) 40]
Test Case: 308 | Input/Output: [(83 76 45 49) 45]
Test Case: 309 | Input/Output: [(91 53 52 35) 35]
Test Case: 310 | Input/Output: [(15 81 40 69) 15]
Test Case: 311 | Input/Output: [(11 15 8 36) 8]
Test Case: 312 | Input/Output: [(70 38 79 67) 38]
Test Case: 313 | Input/Output: [(16 3 59 10) 3]
Test Case: 314 | Input/Output: [(74 56 53 94) 53]
Test Case: 315 | Input/Output: [(34 40 77 67) 34]
Test Case: 316 | Input/Output: [(7 20 52 60) 7]
Test Case: 317 | Input/Output: [(81 46 5 71) 5]
Test Case: 318 | Input/Output: [(48 54 6 79) 6]
Test Case: 319 | Input/Output: [(96 8 13 59) 8]
Test Case: 320 | Input/Output: [(65 98 64 76) 64]
Test Case: 321 | Input/Output: [(29 78 82 68) 29]
Test Case: 322 | Input/Output: [(7 44 12 41) 7]
Test Case: 323 | Input/Output: [(53 3 94 28) 3]
Test Case: 324 | Input/Output: [(19 17 93 73) 17]
Test Case: 325 | Input/Output: [(2 85 95 23) 2]
Test Case: 326 | Input/Output: [(69 23 92 51) 23]
Test Case: 327 | Input/Output: [(4 29 78 86) 4]
Test Case: 328 | Input/Output: [(78 11 85 83) 11]
Test Case: 329 | Input/Output: [(51 33 82 68) 33]
Test Case: 330 | Input/Output: [(94 1 99 69) 1]
Test Case: 331 | Input/Output: [(99 3 42 89) 3]
Test Case: 332 | Input/Output: [(12 87 81 94) 12]
Test Case: 333 | Input/Output: [(5 29 48 49) 5]
Test Case: 334 | Input/Output: [(39 66 31 48) 31]
Test Case: 335 | Input/Output: [(47 4 8 3) 3]
Test Case: 336 | Input/Output: [(98 6 29 96) 6]
Test Case: 337 | Input/Output: [(12 31 89 80) 12]
Test Case: 338 | Input/Output: [(75 19 68 6) 6]
Test Case: 339 | Input/Output: [(43 16 31 50) 16]
Test Case: 340 | Input/Output: [(62 45 36 22) 22]
Test Case: 341 | Input/Output: [(56 85 44 8) 8]
Test Case: 342 | Input/Output: [(61 47 73 41) 41]
Test Case: 343 | Input/Output: [(27 8 47 18) 8]
Test Case: 344 | Input/Output: [(97 97 38 50) 38]
Test Case: 345 | Input/Output: [(30 69 35 1) 1]
Test Case: 346 | Input/Output: [(68 52 56 30) 30]
Test Case: 347 | Input/Output: [(38 53 52 73) 38]
Test Case: 348 | Input/Output: [(82 95 31 78) 31]
Test Case: 349 | Input/Output: [(46 31 60 25) 25]
Test Case: 350 | Input/Output: [(87 89 79 86) 79]
Test Case: 351 | Input/Output: [(19 89 92 40) 19]
Test Case: 352 | Input/Output: [(16 66 64 67) 16]
Test Case: 353 | Input/Output: [(10 3 1 15) 1]
Test Case: 354 | Input/Output: [(95 55 16 25) 16]
Test Case: 355 | Input/Output: [(20 69 7 32) 7]
Test Case: 356 | Input/Output: [(50 82 66 66) 50]
Test Case: 357 | Input/Output: [(92 15 16 98) 15]
Test Case: 358 | Input/Output: [(64 54 34 87) 34]
Test Case: 359 | Input/Output: [(78 32 23 86) 23]
Test Case: 360 | Input/Output: [(19 58 20 47) 19]
Test Case: 361 | Input/Output: [(92 3 37 21) 3]
Test Case: 362 | Input/Output: [(52 81 64 60) 52]
Test Case: 363 | Input/Output: [(0 42 93 23) 0]
Test Case: 364 | Input/Output: [(70 35 96 48) 35]
Test Case: 365 | Input/Output: [(53 7 89 46) 7]
Test Case: 366 | Input/Output: [(26 61 89 8) 8]
Test Case: 367 | Input/Output: [(76 41 88 15) 15]
Test Case: 368 | Input/Output: [(7 80 52 37) 7]
Test Case: 369 | Input/Output: [(85 73 38 47) 38]
Test Case: 370 | Input/Output: [(9 53 52 69) 9]
Test Case: 371 | Input/Output: [(97 1 24 78) 1]
Test Case: 372 | Input/Output: [(90 6 16 11) 6]
Test Case: 373 | Input/Output: [(72 66 94 62) 62]
Test Case: 374 | Input/Output: [(70 84 15 35) 15]
Test Case: 375 | Input/Output: [(30 96 89 27) 27]
Test Case: 376 | Input/Output: [(19 78 18 1) 1]
Test Case: 377 | Input/Output: [(85 36 3 99) 3]
Test Case: 378 | Input/Output: [(9 54 7 17) 7]
Test Case: 379 | Input/Output: [(21 69 22 48) 21]
Test Case: 380 | Input/Output: [(3 70 48 89) 3]
Test Case: 381 | Input/Output: [(19 14 16 86) 14]
Test Case: 382 | Input/Output: [(17 30 58 95) 17]
Test Case: 383 | Input/Output: [(97 24 8 66) 8]
Test Case: 384 | Input/Output: [(24 80 31 98) 24]
Test Case: 385 | Input/Output: [(24 84 54 25) 24]
Test Case: 386 | Input/Output: [(30 81 28 14) 14]
Test Case: 387 | Input/Output: [(100 79 2 63) 2]
Test Case: 388 | Input/Output: [(18 79 19 91) 18]
Test Case: 389 | Input/Output: [(82 55 68 21) 21]
Test Case: 390 | Input/Output: [(37 39 35 87) 35]
Test Case: 391 | Input/Output: [(73 75 94 32) 32]
Test Case: 392 | Input/Output: [(2 3 93 12) 2]
Test Case: 393 | Input/Output: [(38 63 92 67) 38]
Test Case: 394 | Input/Output: [(11 9 17 86) 9]
Test Case: 395 | Input/Output: [(9 60 32 89) 9]
Test Case: 396 | Input/Output: [(93 45 88 31) 31]
Test Case: 397 | Input/Output: [(94 76 93 39) 39]
Test Case: 398 | Input/Output: [(82 18 94 76) 18]
Test Case: 399 | Input/Output: [(76 50 56 45) 45]
Test Case: 400 | Input/Output: [(-3 23 68 85) -3]
Test Case: 401 | Input/Output: [(-55 -17 -94 -61) -94]
Test Case: 402 | Input/Output: [(62 -95 -11 -74) -95]
Test Case: 403 | Input/Output: [(-61 -50 -87 -97) -97]
Test Case: 404 | Input/Output: [(-94 -4 20 -82) -94]
Test Case: 405 | Input/Output: [(-89 -18 97 66) -89]
Test Case: 406 | Input/Output: [(4 95 67 77) 4]
Test Case: 407 | Input/Output: [(-14 84 -5 44) -14]
Test Case: 408 | Input/Output: [(37 11 46 -43) -43]
Test Case: 409 | Input/Output: [(96 -31 82 -90) -90]
Test Case: 410 | Input/Output: [(74 65 -93 -1) -93]
Test Case: 411 | Input/Output: [(9 76 2 100) 2]
Test Case: 412 | Input/Output: [(-35 35 76 -32) -35]
Test Case: 413 | Input/Output: [(-83 51 -2 -87) -87]
Test Case: 414 | Input/Output: [(-6 -73 91 25) -73]
Test Case: 415 | Input/Output: [(-8 -90 85 7) -90]
Test Case: 416 | Input/Output: [(-93 8 43 5) -93]
Test Case: 417 | Input/Output: [(88 67 -84 -20) -84]
Test Case: 418 | Input/Output: [(12 19 66 100) 12]
Test Case: 419 | Input/Output: [(-28 -6 -18 -89) -89]
Test Case: 420 | Input/Output: [(49 59 36 -95) -95]
Test Case: 421 | Input/Output: [(97 70 -100 39) -100]
Test Case: 422 | Input/Output: [(28 -64 -25 -52) -64]
Test Case: 423 | Input/Output: [(75 66 26 45) 26]
Test Case: 424 | Input/Output: [(56 93 66 -36) -36]
Test Case: 425 | Input/Output: [(-63 -91 -100 4) -100]
Test Case: 426 | Input/Output: [(-39 -41 97 75) -41]
Test Case: 427 | Input/Output: [(12 36 72 0) 0]
Test Case: 428 | Input/Output: [(77 52 -58 98) -58]
Test Case: 429 | Input/Output: [(91 -46 57 -47) -47]
Test Case: 430 | Input/Output: [(-23 -93 100 -92) -93]
Test Case: 431 | Input/Output: [(-57 65 -41 16) -57]
Test Case: 432 | Input/Output: [(12 -62 -39 -48) -62]
Test Case: 433 | Input/Output: [(95 -63 29 -42) -63]
Test Case: 434 | Input/Output: [(-59 -94 9 -65) -94]
Test Case: 435 | Input/Output: [(53 -25 36 78) -25]
Test Case: 436 | Input/Output: [(-50 96 15 -18) -50]
Test Case: 437 | Input/Output: [(-62 -22 -97 3) -97]
Test Case: 438 | Input/Output: [(18 -34 13 -65) -65]
Test Case: 439 | Input/Output: [(-84 -66 -24 -77) -84]
Test Case: 440 | Input/Output: [(83 44 51 29) 29]
Test Case: 441 | Input/Output: [(98 7 96 -32) -32]
Test Case: 442 | Input/Output: [(-62 62 36 64) -62]
Test Case: 443 | Input/Output: [(64 -71 98 22) -71]
Test Case: 444 | Input/Output: [(74 10 -22 53) -22]
Test Case: 445 | Input/Output: [(7 -8 52 87) -8]
Test Case: 446 | Input/Output: [(37 70 -92 -83) -92]
Test Case: 447 | Input/Output: [(-77 3 -97 -78) -97]
Test Case: 448 | Input/Output: [(70 -49 75 19) -49]
Test Case: 449 | Input/Output: [(71 -95 -19 61) -95]
Test Case: 450 | Input/Output: [(-81 -51 -2 13) -81]
Test Case: 451 | Input/Output: [(35 52 37 87) 35]
Test Case: 452 | Input/Output: [(40 57 -74 23) -74]
Test Case: 453 | Input/Output: [(99 -59 48 -33) -59]
Test Case: 454 | Input/Output: [(-25 96 -47 79) -47]
Test Case: 455 | Input/Output: [(-81 -53 70 -39) -81]
Test Case: 456 | Input/Output: [(87 10 89 98) 10]
Test Case: 457 | Input/Output: [(-69 -27 36 89) -69]
Test Case: 458 | Input/Output: [(93 5 -2 78) -2]
Test Case: 459 | Input/Output: [(-42 -98 43 -88) -98]
Test Case: 460 | Input/Output: [(-1 -33 34 19) -33]
Test Case: 461 | Input/Output: [(-42 95 -35 -27) -42]
Test Case: 462 | Input/Output: [(-24 -46 96 -89) -89]
Test Case: 463 | Input/Output: [(47 -68 -79 86) -79]
Test Case: 464 | Input/Output: [(-28 -38 40 -33) -38]
Test Case: 465 | Input/Output: [(53 -48 89 16) -48]
Test Case: 466 | Input/Output: [(-14 -27 -54 53) -54]
Test Case: 467 | Input/Output: [(32 6 -19 45) -19]
Test Case: 468 | Input/Output: [(98 84 -71 -32) -71]
Test Case: 469 | Input/Output: [(-23 -47 -5 -91) -91]
Test Case: 470 | Input/Output: [(-63 90 39 8) -63]
Test Case: 471 | Input/Output: [(66 13 51 84) 13]
Test Case: 472 | Input/Output: [(92 -71 16 84) -71]
Test Case: 473 | Input/Output: [(93 -7 93 73) -7]
Test Case: 474 | Input/Output: [(-39 -20 89 74) -39]
Test Case: 475 | Input/Output: [(2 11 -22 19) -22]
Test Case: 476 | Input/Output: [(-37 -49 24 -86) -86]
Test Case: 477 | Input/Output: [(7 -82 -50 -65) -82]
Test Case: 478 | Input/Output: [(-17 -54 76 55) -54]
Test Case: 479 | Input/Output: [(-59 36 -28 -70) -70]
Test Case: 480 | Input/Output: [(-54 -45 -14 44) -54]
Test Case: 481 | Input/Output: [(89 -44 -21 -9) -44]
Test Case: 482 | Input/Output: [(-60 -59 45 23) -60]
Test Case: 483 | Input/Output: [(-100 -87 -27 -58) -100]
Test Case: 484 | Input/Output: [(11 -73 -77 -76) -77]
Test Case: 485 | Input/Output: [(-89 -2 62 -86) -89]
Test Case: 486 | Input/Output: [(66 47 -27 79) -27]
Test Case: 487 | Input/Output: [(-81 -48 -70 -84) -84]
Test Case: 488 | Input/Output: [(83 -9 14 -97) -97]
Test Case: 489 | Input/Output: [(-16 -90 -40 -31) -90]
Test Case: 490 | Input/Output: [(21 64 -61 46) -61]
Test Case: 491 | Input/Output: [(-60 -68 43 1) -68]
Test Case: 492 | Input/Output: [(-71 58 100 -98) -98]
Test Case: 493 | Input/Output: [(-26 -37 66 -27) -37]
Test Case: 494 | Input/Output: [(6 63 6 -73) -73]
Test Case: 495 | Input/Output: [(24 68 -53 85) -53]
Test Case: 496 | Input/Output: [(-3 56 100 -16) -16]
Test Case: 497 | Input/Output: [(5 83 -72 -22) -72]
Test Case: 498 | Input/Output: [(-29 -80 -49 -28) -80]
Test Case: 499 | Input/Output: [(81 77 35 -69) -69]
Test Case: 500 | Input/Output: [(69 12 35 71) 12]
Test Case: 501 | Input/Output: [(-6 -29 -66 -63) -66]
Test Case: 502 | Input/Output: [(22 -94 -14 -68) -94]
Test Case: 503 | Input/Output: [(-34 -100 -20 -56) -100]
Test Case: 504 | Input/Output: [(-91 70 -41 -46) -91]
Test Case: 505 | Input/Output: [(29 54 -93 50) -93]
Test Case: 506 | Input/Output: [(-86 24 -99 81) -99]
Test Case: 507 | Input/Output: [(86 56 -22 52) -22]
Test Case: 508 | Input/Output: [(54 -16 -44 -51) -51]
Test Case: 509 | Input/Output: [(-5 25 -63 -92) -92]
Test Case: 510 | Input/Output: [(32 46 -9 -26) -26]
Test Case: 511 | Input/Output: [(-14 -63 77 -60) -63]
Test Case: 512 | Input/Output: [(-92 93 -80 42) -92]
Test Case: 513 | Input/Output: [(-87 -79 -82 -61) -87]
Test Case: 514 | Input/Output: [(9 44 -87 -75) -87]
Test Case: 515 | Input/Output: [(15 -34 -17 52) -34]
Test Case: 516 | Input/Output: [(47 -1 34 12) -1]
Test Case: 517 | Input/Output: [(43 75 -45 15) -45]
Test Case: 518 | Input/Output: [(17 -84 89 24) -84]
Test Case: 519 | Input/Output: [(77 29 90 68) 29]
Test Case: 520 | Input/Output: [(7 95 2 82) 2]
Test Case: 521 | Input/Output: [(6 14 -29 -61) -61]
Test Case: 522 | Input/Output: [(-55 -81 -90 -41) -90]
Test Case: 523 | Input/Output: [(27 78 -84 -70) -84]
Test Case: 524 | Input/Output: [(-97 -29 -62 3) -97]
Test Case: 525 | Input/Output: [(78 14 87 -1) -1]
Test Case: 526 | Input/Output: [(-33 -8 -61 -63) -63]
Test Case: 527 | Input/Output: [(48 -37 20 4) -37]
Test Case: 528 | Input/Output: [(-84 84 41 -21) -84]
Test Case: 529 | Input/Output: [(83 66 56 50) 50]
Test Case: 530 | Input/Output: [(11 -26 -16 84) -26]
Test Case: 531 | Input/Output: [(-70 -44 -59 50) -70]
Test Case: 532 | Input/Output: [(-39 -78 -19 -57) -78]
Test Case: 533 | Input/Output: [(34 58 87 -62) -62]
Test Case: 534 | Input/Output: [(-1 74 -84 -87) -87]
Test Case: 535 | Input/Output: [(48 -5 -44 -80) -80]
Test Case: 536 | Input/Output: [(-38 47 6 21) -38]
Test Case: 537 | Input/Output: [(42 23 -79 19) -79]
Test Case: 538 | Input/Output: [(-21 69 -24 66) -24]
Test Case: 539 | Input/Output: [(-3 -86 5 -21) -86]
Test Case: 540 | Input/Output: [(-81 -64 40 64) -81]
Test Case: 541 | Input/Output: [(4 -43 76 62) -43]
Test Case: 542 | Input/Output: [(75 69 9 -68) -68]
Test Case: 543 | Input/Output: [(24 -30 10 -50) -50]
Test Case: 544 | Input/Output: [(65 -98 -100 -37) -100]
Test Case: 545 | Input/Output: [(71 39 48 -78) -78]
Test Case: 546 | Input/Output: [(-7 79 43 9) -7]
Test Case: 547 | Input/Output: [(-78 -47 47 12) -78]
Test Case: 548 | Input/Output: [(81 -55 22 -51) -55]
Test Case: 549 | Input/Output: [(-21 23 3 81) -21]
Test Case: 550 | Input/Output: [(68 60 93 -76) -76]
Test Case: 551 | Input/Output: [(28 26 -47 -19) -47]
Test Case: 552 | Input/Output: [(0 -40 -90 9) -90]
Test Case: 553 | Input/Output: [(-67 49 44 79) -67]
Test Case: 554 | Input/Output: [(-92 92 -36 68) -92]
Test Case: 555 | Input/Output: [(-82 54 -91 90) -91]
Test Case: 556 | Input/Output: [(73 -49 -66 8) -66]
Test Case: 557 | Input/Output: [(-19 -69 52 71) -69]
Test Case: 558 | Input/Output: [(9 57 -98 86) -98]
Test Case: 559 | Input/Output: [(53 11 87 93) 11]
Test Case: 560 | Input/Output: [(34 1 49 -28) -28]
Test Case: 561 | Input/Output: [(24 83 -74 58) -74]
Test Case: 562 | Input/Output: [(-16 -94 -40 -25) -94]
Test Case: 563 | Input/Output: [(-87 32 65 -93) -93]
Test Case: 564 | Input/Output: [(41 -66 45 63) -66]
Test Case: 565 | Input/Output: [(26 -48 57 27) -48]
Test Case: 566 | Input/Output: [(49 -21 54 -59) -59]
Test Case: 567 | Input/Output: [(92 14 95 -80) -80]
Test Case: 568 | Input/Output: [(-66 69 -21 71) -66]
Test Case: 569 | Input/Output: [(-98 -72 -4 70) -98]
Test Case: 570 | Input/Output: [(-1 56 -28 14) -28]
Test Case: 571 | Input/Output: [(42 83 -15 85) -15]
Test Case: 572 | Input/Output: [(62 13 -5 -54) -54]
Test Case: 573 | Input/Output: [(1 11 -3 -9) -9]
Test Case: 574 | Input/Output: [(5 48 52 14) 5]
Test Case: 575 | Input/Output: [(45 -9 -31 -61) -61]
Test Case: 576 | Input/Output: [(45 43 -51 89) -51]
Test Case: 577 | Input/Output: [(-41 -93 -12 -90) -93]
Test Case: 578 | Input/Output: [(-93 -72 -44 -55) -93]
Test Case: 579 | Input/Output: [(-38 -14 -11 98) -38]
Test Case: 580 | Input/Output: [(27 -27 -3 -3) -27]
Test Case: 581 | Input/Output: [(3 -61 -79 -13) -79]
Test Case: 582 | Input/Output: [(32 32 -45 85) -45]
Test Case: 583 | Input/Output: [(-35 -33 90 -55) -55]
Test Case: 584 | Input/Output: [(-41 -12 -92 45) -92]
Test Case: 585 | Input/Output: [(36 66 -3 24) -3]
Test Case: 586 | Input/Output: [(93 48 -34 45) -34]
Test Case: 587 | Input/Output: [(-97 84 40 -46) -97]
Test Case: 588 | Input/Output: [(-71 77 60 -84) -84]
Test Case: 589 | Input/Output: [(-40 -94 37 58) -94]
Test Case: 590 | Input/Output: [(-25 72 1 -65) -65]
Test Case: 591 | Input/Output: [(-78 4 -29 -35) -78]
Test Case: 592 | Input/Output: [(93 80 36 -71) -71]
Test Case: 593 | Input/Output: [(30 26 -9 -84) -84]
Test Case: 594 | Input/Output: [(80 -51 77 -62) -62]
Test Case: 595 | Input/Output: [(66 22 56 -32) -32]
Test Case: 596 | Input/Output: [(2 80 -20 75) -20]
Test Case: 597 | Input/Output: [(-69 58 -80 48) -80]
Test Case: 598 | Input/Output: [(4 -58 23 -8) -58]
Test Case: 599 | Input/Output: [(29 82 57 -70) -70]
Test Case: 600 | Input/Output: [(-10 14 72 53) -10]
Test Case: 601 | Input/Output: [(-93 65 -88 54) -93]
Test Case: 602 | Input/Output: [(-71 46 -40 95) -71]
Test Case: 603 | Input/Output: [(76 50 63 66) 50]
Test Case: 604 | Input/Output: [(-17 56 14 29) -17]
Test Case: 605 | Input/Output: [(72 -24 -78 80) -78]
Test Case: 606 | Input/Output: [(91 -38 -71 -3) -71]
Test Case: 607 | Input/Output: [(79 -86 16 -82) -86]
Test Case: 608 | Input/Output: [(4 72 -97 30) -97]
Test Case: 609 | Input/Output: [(-38 73 35 -41) -41]
Test Case: 610 | Input/Output: [(-81 -27 -1 30) -81]
Test Case: 611 | Input/Output: [(53 -84 -72 -22) -84]
Test Case: 612 | Input/Output: [(-85 75 -53 12) -85]
Test Case: 613 | Input/Output: [(-79 -38 -55 67) -79]
Test Case: 614 | Input/Output: [(-42 -24 -14 10) -42]
Test Case: 615 | Input/Output: [(98 9 20 -18) -18]
Test Case: 616 | Input/Output: [(67 57 45 -58) -58]
Test Case: 617 | Input/Output: [(88 65 52 -26) -26]
Test Case: 618 | Input/Output: [(-12 93 18 -4) -12]
Test Case: 619 | Input/Output: [(-80 8 60 -83) -83]
Test Case: 620 | Input/Output: [(-38 21 -24 -79) -79]
Test Case: 621 | Input/Output: [(-97 22 -4 -1) -97]
Test Case: 622 | Input/Output: [(84 -96 -11 -24) -96]
Test Case: 623 | Input/Output: [(76 -98 52 -58) -98]
Test Case: 624 | Input/Output: [(2 39 2 -40) -40]
Test Case: 625 | Input/Output: [(86 -58 70 -83) -83]
Test Case: 626 | Input/Output: [(29 -92 80 -72) -92]
Test Case: 627 | Input/Output: [(58 93 -59 -51) -59]
Test Case: 628 | Input/Output: [(86 24 29 36) 24]
Test Case: 629 | Input/Output: [(71 55 46 33) 33]
Test Case: 630 | Input/Output: [(94 -63 -26 -100) -100]
Test Case: 631 | Input/Output: [(17 1 -21 65) -21]
Test Case: 632 | Input/Output: [(97 -7 -10 84) -10]
Test Case: 633 | Input/Output: [(-83 -14 42 -22) -83]
Test Case: 634 | Input/Output: [(-52 -22 75 15) -52]
Test Case: 635 | Input/Output: [(47 62 -18 -16) -18]
Test Case: 636 | Input/Output: [(-53 58 -21 11) -53]
Test Case: 637 | Input/Output: [(91 -100 -19 50) -100]
Test Case: 638 | Input/Output: [(23 -26 -54 -62) -62]
Test Case: 639 | Input/Output: [(-59 43 -97 -82) -97]
Test Case: 640 | Input/Output: [(26 26 -45 88) -45]
Test Case: 641 | Input/Output: [(-27 -55 -61 -78) -78]
Test Case: 642 | Input/Output: [(38 -4 88 -71) -71]
Test Case: 643 | Input/Output: [(-65 -29 -91 -35) -91]
Test Case: 644 | Input/Output: [(15 -55 -66 17) -66]
Test Case: 645 | Input/Output: [(-20 -55 36 -58) -58]
Test Case: 646 | Input/Output: [(60 -28 70 76) -28]
Test Case: 647 | Input/Output: [(-43 21 40 -71) -71]
Test Case: 648 | Input/Output: [(30 73 -60 82) -60]
Test Case: 649 | Input/Output: [(69 94 -77 80) -77]
Test Case: 650 | Input/Output: [(6 92 67 85) 6]
Test Case: 651 | Input/Output: [(-75 -35 66 -67) -75]
Test Case: 652 | Input/Output: [(-47 -9 -65 -46) -65]
Test Case: 653 | Input/Output: [(-65 63 -2 42) -65]
Test Case: 654 | Input/Output: [(-56 3 -33 -18) -56]
Test Case: 655 | Input/Output: [(-69 29 -70 73) -70]
Test Case: 656 | Input/Output: [(58 4 28 11) 4]
Test Case: 657 | Input/Output: [(-62 -40 -36 100) -62]
Test Case: 658 | Input/Output: [(67 -82 62 -26) -82]
Test Case: 659 | Input/Output: [(-23 -91 -42 33) -91]
Test Case: 660 | Input/Output: [(-35 17 -67 -64) -67]
Test Case: 661 | Input/Output: [(59 -64 -86 -17) -86]
Test Case: 662 | Input/Output: [(-2 97 -90 -53) -90]
Test Case: 663 | Input/Output: [(-41 31 68 -57) -57]
Test Case: 664 | Input/Output: [(17 -99 57 -45) -99]
Test Case: 665 | Input/Output: [(-43 16 34 -31) -43]
Test Case: 666 | Input/Output: [(-80 15 -47 -18) -80]
Test Case: 667 | Input/Output: [(95 -51 40 22) -51]
Test Case: 668 | Input/Output: [(49 22 52 55) 22]
Test Case: 669 | Input/Output: [(-45 -19 -41 98) -45]
Test Case: 670 | Input/Output: [(-87 -83 30 -57) -87]
Test Case: 671 | Input/Output: [(18 55 -66 31) -66]
Test Case: 672 | Input/Output: [(64 -75 -9 55) -75]
Test Case: 673 | Input/Output: [(-56 -5 13 -65) -65]
Test Case: 674 | Input/Output: [(97 69 28 97) 28]
Test Case: 675 | Input/Output: [(-45 23 -68 -73) -73]
Test Case: 676 | Input/Output: [(34 -33 18 76) -33]
Test Case: 677 | Input/Output: [(82 -7 37 69) -7]
Test Case: 678 | Input/Output: [(54 -28 -48 17) -48]
Test Case: 679 | Input/Output: [(-89 -67 45 -29) -89]
Test Case: 680 | Input/Output: [(100 -64 -25 -96) -96]
Test Case: 681 | Input/Output: [(-18 -40 -20 -52) -52]
Test Case: 682 | Input/Output: [(-7 56 -75 -93) -93]
Test Case: 683 | Input/Output: [(11 -4 -70 -29) -70]
Test Case: 684 | Input/Output: [(-31 6 -96 56) -96]
Test Case: 685 | Input/Output: [(6 61 -92 -76) -92]
Test Case: 686 | Input/Output: [(99 65 -69 80) -69]
Test Case: 687 | Input/Output: [(58 -95 -46 33) -95]
Test Case: 688 | Input/Output: [(30 29 -11 86) -11]
Test Case: 689 | Input/Output: [(43 -15 6 -51) -51]
Test Case: 690 | Input/Output: [(-97 66 24 -55) -97]
Test Case: 691 | Input/Output: [(31 -87 48 70) -87]
Test Case: 692 | Input/Output: [(84 65 73 81) 65]
Test Case: 693 | Input/Output: [(89 19 -3 37) -3]
Test Case: 694 | Input/Output: [(50 -53 -95 16) -95]
Test Case: 695 | Input/Output: [(-61 63 -98 -43) -98]
Test Case: 696 | Input/Output: [(-95 49 -33 5) -95]
Test Case: 697 | Input/Output: [(-75 -84 -16 96) -84]
Test Case: 698 | Input/Output: [(74 -17 -63 8) -63]
Test Case: 699 | Input/Output: [(-65 24 91 -85) -85]
Test Case: 700 | Input/Output: [(28 -71 56 48) -71]
Test Case: 701 | Input/Output: [(-78 -78 35 82) -78]
Test Case: 702 | Input/Output: [(-99 -47 29 -9) -99]
Test Case: 703 | Input/Output: [(-51 -97 55 -49) -97]
Test Case: 704 | Input/Output: [(26 -52 36 58) -52]
Test Case: 705 | Input/Output: [(-4 13 19 37) -4]
Test Case: 706 | Input/Output: [(77 73 48 0) 0]
Test Case: 707 | Input/Output: [(-30 -69 15 47) -69]
Test Case: 708 | Input/Output: [(76 11 100 28) 11]
Test Case: 709 | Input/Output: [(50 3 -19 63) -19]
Test Case: 710 | Input/Output: [(69 82 37 19) 19]
Test Case: 711 | Input/Output: [(100 -39 36 -65) -65]
Test Case: 712 | Input/Output: [(95 -97 94 86) -97]
Test Case: 713 | Input/Output: [(3 86 -89 3) -89]
Test Case: 714 | Input/Output: [(-83 97 -49 -44) -83]
Test Case: 715 | Input/Output: [(86 89 28 77) 28]
Test Case: 716 | Input/Output: [(-100 78 -34 -80) -100]
Test Case: 717 | Input/Output: [(-15 -33 28 -74) -74]
Test Case: 718 | Input/Output: [(-19 0 -30 53) -30]
Test Case: 719 | Input/Output: [(-92 -74 46 43) -92]
Test Case: 720 | Input/Output: [(-8 -88 -19 28) -88]
Test Case: 721 | Input/Output: [(-87 -2 25 94) -87]
Test Case: 722 | Input/Output: [(-73 62 -51 10) -73]
Test Case: 723 | Input/Output: [(-27 -36 94 -84) -84]
Test Case: 724 | Input/Output: [(-93 -89 0 -52) -93]
Test Case: 725 | Input/Output: [(22 -17 -65 -59) -65]
Test Case: 726 | Input/Output: [(80 54 -29 -52) -52]
Test Case: 727 | Input/Output: [(29 -59 -80 -6) -80]
Test Case: 728 | Input/Output: [(-96 33 25 79) -96]
Test Case: 729 | Input/Output: [(-11 55 -84 47) -84]
Test Case: 730 | Input/Output: [(91 -17 -33 -78) -78]
Test Case: 731 | Input/Output: [(-31 45 -71 8) -71]
Test Case: 732 | Input/Output: [(-7 87 -83 -90) -90]
Test Case: 733 | Input/Output: [(47 -14 71 -61) -61]
Test Case: 734 | Input/Output: [(2 -31 -36 52) -36]
Test Case: 735 | Input/Output: [(47 -83 -1 78) -83]
Test Case: 736 | Input/Output: [(68 94 -26 35) -26]
Test Case: 737 | Input/Output: [(-12 -87 73 41) -87]
Test Case: 738 | Input/Output: [(-44 -12 -24 74) -44]
Test Case: 739 | Input/Output: [(27 13 92 -61) -61]
Test Case: 740 | Input/Output: [(-6 -86 33 28) -86]
Test Case: 741 | Input/Output: [(6 -79 -36 94) -79]
Test Case: 742 | Input/Output: [(81 16 -8 9) -8]
Test Case: 743 | Input/Output: [(-4 90 -51 -52) -52]
Test Case: 744 | Input/Output: [(17 3 97 69) 3]
Test Case: 745 | Input/Output: [(-62 -20 -73 -72) -73]
Test Case: 746 | Input/Output: [(54 24 -54 -95) -95]
Test Case: 747 | Input/Output: [(16 48 99 -90) -90]
Test Case: 748 | Input/Output: [(93 -87 -62 68) -87]
Test Case: 749 | Input/Output: [(18 -43 -75 -95) -95]
Test Case: 750 | Input/Output: [(-83 64 -92 -95) -95]
Test Case: 751 | Input/Output: [(-96 63 34 11) -96]
Test Case: 752 | Input/Output: [(-19 75 11 43) -19]
Test Case: 753 | Input/Output: [(-96 5 25 -31) -96]
Test Case: 754 | Input/Output: [(-12 13 33 -25) -25]
Test Case: 755 | Input/Output: [(0 -23 -36 21) -36]
Test Case: 756 | Input/Output: [(-97 79 -69 -4) -97]
Test Case: 757 | Input/Output: [(-45 85 32 64) -45]
Test Case: 758 | Input/Output: [(-31 15 23 -9) -31]
Test Case: 759 | Input/Output: [(-14 -91 -84 -19) -91]
Test Case: 760 | Input/Output: [(37 81 49 94) 37]
Test Case: 761 | Input/Output: [(-7 14 18 -1) -7]
Test Case: 762 | Input/Output: [(-88 -8 79 53) -88]
Test Case: 763 | Input/Output: [(-85 -98 -79 87) -98]
Test Case: 764 | Input/Output: [(-54 -66 17 55) -66]
Test Case: 765 | Input/Output: [(0 -96 -13 -74) -96]
Test Case: 766 | Input/Output: [(-75 100 -81 -44) -81]
Test Case: 767 | Input/Output: [(90 98 -18 -32) -32]
Test Case: 768 | Input/Output: [(-35 -93 -71 -58) -93]
Test Case: 769 | Input/Output: [(-84 15 81 24) -84]
Test Case: 770 | Input/Output: [(64 -41 60 40) -41]
Test Case: 771 | Input/Output: [(-41 -45 0 -53) -53]
Test Case: 772 | Input/Output: [(-29 -10 63 -6) -29]
Test Case: 773 | Input/Output: [(-94 4 -100 -27) -100]
Test Case: 774 | Input/Output: [(50 -78 -6 23) -78]
Test Case: 775 | Input/Output: [(67 71 75 -43) -43]
Test Case: 776 | Input/Output: [(31 58 15 -15) -15]
Test Case: 777 | Input/Output: [(58 38 -28 -29) -29]
Test Case: 778 | Input/Output: [(-25 93 62 14) -25]
Test Case: 779 | Input/Output: [(-36 -62 76 3) -62]
Test Case: 780 | Input/Output: [(-36 26 -75 -12) -75]
Test Case: 781 | Input/Output: [(52 -79 -56 -16) -79]
Test Case: 782 | Input/Output: [(-65 -73 81 54) -73]
Test Case: 783 | Input/Output: [(-93 -94 -9 48) -94]
Test Case: 784 | Input/Output: [(-86 21 60 -64) -86]
Test Case: 785 | Input/Output: [(-79 96 -92 80) -92]
Test Case: 786 | Input/Output: [(-71 94 62 34) -71]
Test Case: 787 | Input/Output: [(-51 88 48 -76) -76]
Test Case: 788 | Input/Output: [(64 -85 73 76) -85]
Test Case: 789 | Input/Output: [(-26 -16 -86 59) -86]
Test Case: 790 | Input/Output: [(-91 59 -84 73) -91]
Test Case: 791 | Input/Output: [(54 68 8 -91) -91]
Test Case: 792 | Input/Output: [(-94 31 -28 -81) -94]
Test Case: 793 | Input/Output: [(61 -46 -53 -49) -53]
Test Case: 794 | Input/Output: [(-36 8 33 85) -36]
Test Case: 795 | Input/Output: [(16 55 -14 -40) -40]
Test Case: 796 | Input/Output: [(53 -85 -26 -5) -85]
Test Case: 797 | Input/Output: [(-77 79 86 68) -77]
Test Case: 798 | Input/Output: [(-96 45 42 -50) -96]
Test Case: 799 | Input/Output: [(-39 -81 68 -68) -81]
Test Case: 800 | Input/Output: [(71 44 52 18) 18]
Test Case: 801 | Input/Output: [(73 -95 -21 -43) -95]
Test Case: 802 | Input/Output: [(85 -33 -33 23) -33]
Test Case: 803 | Input/Output: [(39 -75 66 11) -75]
Test Case: 804 | Input/Output: [(-93 36 -46 -61) -93]
Test Case: 805 | Input/Output: [(79 -97 -16 -65) -97]
Test Case: 806 | Input/Output: [(-22 98 -54 28) -54]
Test Case: 807 | Input/Output: [(-60 53 -90 -9) -90]
Test Case: 808 | Input/Output: [(-53 -76 62 -54) -76]
Test Case: 809 | Input/Output: [(-75 84 -5 80) -75]
Test Case: 810 | Input/Output: [(39 -80 8 -66) -80]
Test Case: 811 | Input/Output: [(9 72 -88 -50) -88]
Test Case: 812 | Input/Output: [(-56 44 -37 -83) -83]
Test Case: 813 | Input/Output: [(-82 -30 90 -39) -82]
Test Case: 814 | Input/Output: [(72 34 86 35) 34]
Test Case: 815 | Input/Output: [(-41 1 -5 48) -41]
Test Case: 816 | Input/Output: [(68 -11 -59 -52) -59]
Test Case: 817 | Input/Output: [(-4 60 -23 15) -23]
Test Case: 818 | Input/Output: [(88 99 -17 -33) -33]
Test Case: 819 | Input/Output: [(-9 45 -63 87) -63]
Test Case: 820 | Input/Output: [(-57 23 -26 -28) -57]
Test Case: 821 | Input/Output: [(63 0 4 -86) -86]
Test Case: 822 | Input/Output: [(49 -78 -4 57) -78]
Test Case: 823 | Input/Output: [(-81 33 -49 69) -81]
Test Case: 824 | Input/Output: [(69 -56 93 1) -56]
Test Case: 825 | Input/Output: [(45 61 40 73) 40]
Test Case: 826 | Input/Output: [(36 58 -58 -72) -72]
Test Case: 827 | Input/Output: [(-11 4 54 37) -11]
Test Case: 828 | Input/Output: [(-10 -23 -31 -66) -66]
Test Case: 829 | Input/Output: [(9 65 -42 -87) -87]
Test Case: 830 | Input/Output: [(59 -62 -40 -18) -62]
Test Case: 831 | Input/Output: [(-34 -95 -26 95) -95]
Test Case: 832 | Input/Output: [(-36 -41 -19 -95) -95]
Test Case: 833 | Input/Output: [(2 -91 -49 22) -91]
Test Case: 834 | Input/Output: [(55 12 48 9) 9]
Test Case: 835 | Input/Output: [(29 18 67 33) 18]
Test Case: 836 | Input/Output: [(-10 -49 32 2) -49]
Test Case: 837 | Input/Output: [(-29 44 -51 78) -51]
Test Case: 838 | Input/Output: [(-77 79 32 22) -77]
Test Case: 839 | Input/Output: [(-52 3 -84 -32) -84]
Test Case: 840 | Input/Output: [(-62 -7 -67 94) -67]
Test Case: 841 | Input/Output: [(-53 46 -33 28) -53]
Test Case: 842 | Input/Output: [(54 94 -16 7) -16]
Test Case: 843 | Input/Output: [(-70 92 14 48) -70]
Test Case: 844 | Input/Output: [(34 33 -2 68) -2]
Test Case: 845 | Input/Output: [(95 -16 19 91) -16]
Test Case: 846 | Input/Output: [(-82 11 -50 69) -82]
Test Case: 847 | Input/Output: [(41 97 -36 -55) -55]
Test Case: 848 | Input/Output: [(1 -30 73 3) -30]
Test Case: 849 | Input/Output: [(52 51 8 -8) -8]
Test Case: 850 | Input/Output: [(-88 -18 -56 -88) -88]
Test Case: 851 | Input/Output: [(79 -22 40 73) -22]
Test Case: 852 | Input/Output: [(-13 -93 -7 30) -93]
Test Case: 853 | Input/Output: [(40 -69 -72 -29) -72]
Test Case: 854 | Input/Output: [(-40 63 -7 -90) -90]
Test Case: 855 | Input/Output: [(40 38 -12 -51) -51]
Test Case: 856 | Input/Output: [(-45 14 -28 -30) -45]
Test Case: 857 | Input/Output: [(-13 32 32 -50) -50]
Test Case: 858 | Input/Output: [(-32 89 -87 34) -87]
Test Case: 859 | Input/Output: [(50 61 -50 -24) -50]
Test Case: 860 | Input/Output: [(-87 -67 -68 81) -87]
Test Case: 861 | Input/Output: [(52 -38 -48 44) -48]
Test Case: 862 | Input/Output: [(59 -39 -74 -6) -74]
Test Case: 863 | Input/Output: [(-98 64 -90 -78) -98]
Test Case: 864 | Input/Output: [(-29 36 -70 29) -70]
Test Case: 865 | Input/Output: [(94 -15 99 65) -15]
Test Case: 866 | Input/Output: [(-23 25 79 -29) -29]
Test Case: 867 | Input/Output: [(21 -31 88 -68) -68]
Test Case: 868 | Input/Output: [(-46 -88 -4 59) -88]
Test Case: 869 | Input/Output: [(50 -89 39 -36) -89]
Test Case: 870 | Input/Output: [(78 19 -67 -19) -67]
Test Case: 871 | Input/Output: [(65 -30 71 -35) -35]
Test Case: 872 | Input/Output: [(31 67 -83 -11) -83]
Test Case: 873 | Input/Output: [(90 -36 -56 75) -56]
Test Case: 874 | Input/Output: [(-24 81 32 3) -24]
Test Case: 875 | Input/Output: [(4 55 -8 4) -8]
Test Case: 876 | Input/Output: [(64 46 41 63) 41]
Test Case: 877 | Input/Output: [(65 40 -78 24) -78]
Test Case: 878 | Input/Output: [(31 43 -50 -69) -69]
Test Case: 879 | Input/Output: [(-67 -3 44 -43) -67]
Test Case: 880 | Input/Output: [(86 89 -47 -58) -58]
Test Case: 881 | Input/Output: [(57 73 60 27) 27]
Test Case: 882 | Input/Output: [(4 36 15 10) 4]
Test Case: 883 | Input/Output: [(68 28 -81 12) -81]
Test Case: 884 | Input/Output: [(-47 46 92 82) -47]
Test Case: 885 | Input/Output: [(76 7 89 -92) -92]
Test Case: 886 | Input/Output: [(-96 77 59 -66) -96]
Test Case: 887 | Input/Output: [(-58 87 30 90) -58]
Test Case: 888 | Input/Output: [(-29 -10 -43 72) -43]
Test Case: 889 | Input/Output: [(5 52 -31 -4) -31]
Test Case: 890 | Input/Output: [(-99 40 -39 19) -99]
Test Case: 891 | Input/Output: [(38 -83 -70 22) -83]
Test Case: 892 | Input/Output: [(-40 8 -79 81) -79]
Test Case: 893 | Input/Output: [(27 -33 -74 -18) -74]
Test Case: 894 | Input/Output: [(-42 -42 -17 -26) -42]
Test Case: 895 | Input/Output: [(-13 96 16 -29) -29]
Test Case: 896 | Input/Output: [(34 -96 60 47) -96]
Test Case: 897 | Input/Output: [(-43 -97 -10 82) -97]
Test Case: 898 | Input/Output: [(74 -62 -83 25) -83]
Test Case: 899 | Input/Output: [(15 -53 22 -83) -83]
Test Case: 900 | Input/Output: [(58 -60 71 -86) -86]
Test Case: 901 | Input/Output: [(22 27 71 63) 22]
Test Case: 902 | Input/Output: [(-99 -51 24 85) -99]
Test Case: 903 | Input/Output: [(77 -24 -44 67) -44]
Test Case: 904 | Input/Output: [(89 29 -58 -50) -58]
Test Case: 905 | Input/Output: [(85 85 56 -44) -44]
Test Case: 906 | Input/Output: [(-79 -42 96 37) -79]
Test Case: 907 | Input/Output: [(20 -90 -62 48) -90]
Test Case: 908 | Input/Output: [(-9 -63 65 -98) -98]
Test Case: 909 | Input/Output: [(65 3 -10 33) -10]
Test Case: 910 | Input/Output: [(-8 -35 76 25) -35]
Test Case: 911 | Input/Output: [(-73 -12 17 -55) -73]
Test Case: 912 | Input/Output: [(-36 0 3 -15) -36]
Test Case: 913 | Input/Output: [(-19 -99 93 -83) -99]
Test Case: 914 | Input/Output: [(67 10 -50 88) -50]
Test Case: 915 | Input/Output: [(49 8 -36 -82) -82]
Test Case: 916 | Input/Output: [(72 -98 0 -86) -98]
Test Case: 917 | Input/Output: [(95 -74 -67 -28) -74]
Test Case: 918 | Input/Output: [(75 -60 -92 60) -92]
Test Case: 919 | Input/Output: [(66 -63 56 62) -63]
Test Case: 920 | Input/Output: [(65 -63 85 16) -63]
Test Case: 921 | Input/Output: [(-83 61 51 49) -83]
Test Case: 922 | Input/Output: [(-13 14 -15 10) -15]
Test Case: 923 | Input/Output: [(-18 -52 -12 22) -52]
Test Case: 924 | Input/Output: [(-18 95 -27 -61) -61]
Test Case: 925 | Input/Output: [(99 -90 -76 -75) -90]
Test Case: 926 | Input/Output: [(-65 -83 -46 96) -83]
Test Case: 927 | Input/Output: [(83 87 44 22) 22]
Test Case: 928 | Input/Output: [(15 -22 -27 -18) -27]
Test Case: 929 | Input/Output: [(-97 52 82 88) -97]
Test Case: 930 | Input/Output: [(-46 -91 -46 75) -91]
Test Case: 931 | Input/Output: [(75 -24 -32 -59) -59]
Test Case: 932 | Input/Output: [(28 73 -20 -81) -81]
Test Case: 933 | Input/Output: [(1 0 -49 6) -49]
Test Case: 934 | Input/Output: [(-2 -11 72 67) -11]
Test Case: 935 | Input/Output: [(41 -41 -99 39) -99]
Test Case: 936 | Input/Output: [(91 -28 46 47) -28]
Test Case: 937 | Input/Output: [(-74 -61 -73 43) -74]
Test Case: 938 | Input/Output: [(96 -94 -44 9) -94]
Test Case: 939 | Input/Output: [(46 -75 -67 54) -75]
Test Case: 940 | Input/Output: [(25 -13 -16 39) -16]
Test Case: 941 | Input/Output: [(-44 -39 -17 97) -44]
Test Case: 942 | Input/Output: [(-73 64 23 -42) -73]
Test Case: 943 | Input/Output: [(-100 92 18 9) -100]
Test Case: 944 | Input/Output: [(77 -56 -96 -55) -96]
Test Case: 945 | Input/Output: [(58 37 -84 -74) -84]
Test Case: 946 | Input/Output: [(-34 78 23 41) -34]
Test Case: 947 | Input/Output: [(75 72 42 79) 42]
Test Case: 948 | Input/Output: [(-44 -26 -76 89) -76]
Test Case: 949 | Input/Output: [(11 3 90 54) 3]
Test Case: 950 | Input/Output: [(-90 49 -91 -91) -91]
Test Case: 951 | Input/Output: [(-22 -61 -43 30) -61]
Test Case: 952 | Input/Output: [(21 -38 -26 -8) -38]
Test Case: 953 | Input/Output: [(-48 90 13 33) -48]
Test Case: 954 | Input/Output: [(25 60 -100 -90) -100]
Test Case: 955 | Input/Output: [(-41 -62 -39 -27) -62]
Test Case: 956 | Input/Output: [(36 33 -19 -75) -75]
Test Case: 957 | Input/Output: [(-37 100 -93 79) -93]
Test Case: 958 | Input/Output: [(60 76 17 12) 12]
Test Case: 959 | Input/Output: [(25 -53 63 62) -53]
Test Case: 960 | Input/Output: [(-60 34 92 -35) -60]
Test Case: 961 | Input/Output: [(-31 20 78 85) -31]
Test Case: 962 | Input/Output: [(-39 23 7 -69) -69]
Test Case: 963 | Input/Output: [(-46 -8 50 -10) -46]
Test Case: 964 | Input/Output: [(87 -35 -13 -1) -35]
Test Case: 965 | Input/Output: [(-7 92 -25 -39) -39]
Test Case: 966 | Input/Output: [(-20 -76 17 88) -76]
Test Case: 967 | Input/Output: [(-85 -54 26 -28) -85]
Test Case: 968 | Input/Output: [(-13 61 -10 83) -13]
Test Case: 969 | Input/Output: [(12 48 -45 89) -45]
Test Case: 970 | Input/Output: [(-95 -18 30 43) -95]
Test Case: 971 | Input/Output: [(-30 70 1 31) -30]
Test Case: 972 | Input/Output: [(-35 34 64 44) -35]
Test Case: 973 | Input/Output: [(99 -60 49 -81) -81]
Test Case: 974 | Input/Output: [(-41 22 44 -86) -86]
Test Case: 975 | Input/Output: [(84 -23 -50 99) -50]
Test Case: 976 | Input/Output: [(82 68 -21 82) -21]
Test Case: 977 | Input/Output: [(39 36 -67 -62) -67]
Test Case: 978 | Input/Output: [(70 70 22 -65) -65]
Test Case: 979 | Input/Output: [(-23 32 39 -92) -92]
Test Case: 980 | Input/Output: [(81 -58 50 -62) -62]
Test Case: 981 | Input/Output: [(-67 -10 87 74) -67]
Test Case: 982 | Input/Output: [(85 -45 -66 -70) -70]
Test Case: 983 | Input/Output: [(-45 -73 0 -32) -73]
Test Case: 984 | Input/Output: [(27 58 -59 -98) -98]
Test Case: 985 | Input/Output: [(53 -8 -22 51) -22]
Test Case: 986 | Input/Output: [(-100 56 -86 57) -100]
Test Case: 987 | Input/Output: [(-79 -72 29 7) -79]
Test Case: 988 | Input/Output: [(-72 10 -68 97) -72]
Test Case: 989 | Input/Output: [(-59 93 75 -81) -81]
Test Case: 990 | Input/Output: [(-9 -69 32 44) -69]
Test Case: 991 | Input/Output: [(-25 18 -91 95) -91]
Test Case: 992 | Input/Output: [(51 63 54 80) 51]
Test Case: 993 | Input/Output: [(95 -72 -22 -90) -90]
Test Case: 994 | Input/Output: [(-71 -8 90 18) -71]
Test Case: 995 | Input/Output: [(-100 -80 41 29) -100]
Test Case: 996 | Input/Output: [(10 -84 -100 -99) -100]
Test Case: 997 | Input/Output: [(-41 34 53 -81) -81]
Test Case: 998 | Input/Output: [(-21 -38 35 36) -38]
Test Case: 999 | Input/Output: [(73 -86 66 -83) -86]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -41 -125 -119 -92 -17 -20 27 96 18 13 -8 48 107 6 62 -89
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-100 -100 -98 -100] -100] [[11 5 11 11] 5] [[-27 -27 -42 -27] -42] [[51 51 52 51] 51] [[-80 40 40 40] -80] [[-32 -54 -54 -54] -54] [[95 -1 95 95] -1] [[-43 24 24 24] -43] [[73 -93 -93 -93] -93] [[-97 88 88 88] -97] [(42 42 42 42) 42] [(-59 -59 -59 -59) -59] [(56 56 56 56) 56] [(100 100 100 100) 100] [(8 8 8 8) 8] [(74 50 12 78) 12] [(28 71 12 78) 12] [(58 65 23 14) 14] [(53 40 99 92) 40] [(3 72 80 92) 3] [(57 75 58 10) 10] [(1 86 89 78) 1] [(81 0 90 7) 0] [(81 27 60 78) 27] [(76 21 30 40) 21] [(17 46 81 10) 10] [(49 42 32 96) 32] [(51 94 81 1) 1] [(72 74 68 94) 68] [(52 65 96 96) 52] [(27 13 31 95) 13] [(19 36 86 41) 19] [(54 25 19 24) 19] [(36 56 7 71) 7] [(71 47 33 78) 33] [(-64 -99 44 96) -99] [(-7 10 60 -54) -54] [(-65 70 -2 -98) -98] [(-55 -58 -23 -79) -79] [(94 -85 -96 -75) -96] [(16 94 -19 -10) -19] [(-47 -77 -4 86) -77] [(67 -91 -6 -26) -91] [(-77 -73 33 14) -77] [(29 40 95 -95) -95] [(-12 -58 95 68) -58] [(-43 -28 73 -74) -74] [(94 -28 77 93) -28] [(60 18 -57 56) -57] [(11 -71 15 -30) -71] [(10 85 46 -100) -100] [(-5 -32 -93 -15) -93] [(-85 94 77 82) -85] [(54 100 90 69) 54] [(50 89 -35 74) -35] [(37 -20 66 -44) -44] [(-48 66 86 71) -48] [(-94 -81 11 -51) -94] [(-62 46 52 -59) -62] [(-2 -30 -48 43) -48] [(-32 43 -65 -2) -65] [(-93 73 88 -56) -93] [(10 -40 -57 69) -57] [(-12 14 20 36) -12] [(93 -72 -85 -25) -85] [(45 -87 70 80) -87] [(88 18 16 -96) -96] [(-62 -88 -80 -61) -88] [(19 56 49 -4) -4] [(-17 -79 -2 -38) -79] [(-1 -14 24 80) -14] [(-50 68 -96 9) -96] [(41 -55 70 91) -55] [(-93 -86 -9 -40) -93] [(64 -87 -59 73) -87] [(55 71 -17 7) -17] [(-27 13 39 11) -27] [(48 34 34 -68) -68] [(-29 45 -3 -50) -50] [(-70 -59 36 56) -70] [(28 -74 -37 -85) -85] [(-28 -9 99 -64) -64] [(36 -69 -32 -2) -69] [(100 58 -2 61) -2] [(3 63 -68 -79) -79] [(42 67 -100 37) -100] [(0 14 -92 9) -92] [(39 -81 -15 97) -81] [(35 84 -38 -43) -43] [(65 -17 90 84) -17] [(79 -63 42 -78) -78] [(-55 -24 -38 58) -55] [(-4 10 15 -100) -100] [(40 -48 61 -4) -48] [(99 100 -74 -81) -81])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 2 3 2 1 3 2 1 3 1)
Population mean number of elite cases: 0.02
Count of perfect (error zero) individuals by case: (1 2 3 2 1 3 2 1 3 1)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Errors: [0 1 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 9.981
Median total errors in population: 10
Error averages by case: (0.999 0.998 0.997 0.998 0.999 0.997 0.998 0.999 0.997 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.796
Average program size in population (points): 68.666
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 484598
--- Timings ---
Current time: 1559583538196 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.9 seconds, 35.3%
Fitness Testing:      1.5 seconds, 60.4%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Lexicase best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer print_boolean integer_fromboolean boolean_pop exec_yank exec_yankdup in1)
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Zero cases best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer print_boolean integer_fromboolean boolean_pop exec_yank exec_yankdup in1)
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 504 393 6 6 278 393 271 393 277)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (230 504 393 6 6 278 393 271 393 277)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_integer_62} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Best program: (boolean_dup_items boolean_or tag_integer_62 exec_yankdup boolean_pop exec_pop (integer_rot in2 in1 boolean_eq print_boolean boolean_shove integer_rot) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) ()))
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.249
Median total errors in population: 7
Error averages by case: (0.77 0.496 0.607 0.994 0.994 0.722 0.607 0.729 0.607 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.542
Average program size in population (points): 43.343
Average percent parens in population: 0.243
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.504
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 340
Genome diversity (% unique genomes):	 0.37
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 347
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 924731
--- Timings ---
Current time: 1559583540790 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 49.2%
Fitness Testing:      2.0 seconds, 41.9%
Report:               0.3 seconds,  6.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_958} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod exec_when (boolean_flush exec_do*times () in2) boolean_dup_times print_boolean) boolean_dup_times exec_eq) (boolean_frominteger in2 print_boolean) exec_do*count (print_integer exec_eq integer_gt exec_y (integer_eq integer_rot boolean_or boolean_pop integer_max integer_empty) integer_shove integer_gt integer_lt integer_dup_times) integer_min boolean_or integer_min integer_yank boolean_flush exec_s (in4 integer_dup) () (exec_noop) boolean_flush boolean_empty exec_y_when_autoconstructing (boolean_empty boolean_stackdepth integer_dup exec_while (print_boolean integer_eq exec_dup_items exec_swap (integer_lte integer_dec boolean_yank exec_do*range (exec_while (exec_dup_items)) exec_swap (integer_lte integer_dec exec_swap (integer_min) (integer_mult integer_dup exec_do*times (integer_shove exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_invert_second_then_and integer_dup) print_exec (boolean_invert_first_then_and exec_yankdup exec_do*times (boolean_rot) boolean_swap exec_swap (integer_flush) (exec_dup_items integer_mult) boolean_dup print_exec (boolean_invert_second_then_and)) tag_boolean_958 boolean_and exec_k_when_autoconstructing (integer_gte integer_dup boolean_not) (integer_mult boolean_swap integer_rot integer_lt exec_pop ()))))) ()) ())))
Lexicase best errors: [1 1 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 126
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s} {:close 0, :instruction in4} {:close 2, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_exec} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction tag_boolean_958} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod exec_when (boolean_flush exec_do*times () in2) boolean_dup_times print_boolean) boolean_dup_times exec_eq) (boolean_frominteger in2 print_boolean) exec_do*count (print_integer exec_eq integer_gt exec_y (integer_eq integer_rot boolean_or boolean_pop integer_max integer_empty) integer_shove integer_gt integer_lt integer_dup_times) integer_min boolean_or integer_min integer_yank boolean_flush exec_s (in4 integer_dup) () (exec_noop) boolean_flush boolean_empty exec_y_when_autoconstructing (boolean_empty boolean_stackdepth integer_dup exec_while (print_boolean integer_eq exec_dup_items exec_swap (integer_lte integer_dec boolean_yank exec_do*range (exec_while (exec_dup_items)) exec_swap (integer_lte integer_dec exec_swap (integer_min) (integer_mult integer_dup exec_do*times (integer_shove exec_y_when_autoconstructing (exec_y_when_autoconstructing (boolean_invert_second_then_and integer_dup) print_exec (boolean_invert_first_then_and exec_yankdup exec_do*times (boolean_rot) boolean_swap exec_swap (integer_flush) (exec_dup_items integer_mult) boolean_dup print_exec (boolean_invert_second_then_and)) tag_boolean_958 boolean_and exec_k_when_autoconstructing (integer_gte integer_dup boolean_not) (integer_mult boolean_swap integer_rot integer_lt exec_pop ()))))) ()) ())))
Zero cases best errors: [1 1 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 126
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (319 320 317 115 272 217 217 272 116 116)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (319 320 317 115 272 217 217 272 116 116)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction tag_integer_62} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Best program: (boolean_dup_items boolean_or tag_integer_62 exec_yankdup boolean_pop exec_pop (integer_rot in2 in1 boolean_eq print_boolean boolean_shove integer_rot) boolean_dup exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) ()))
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 40
Size: 51
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.719
Median total errors in population: 8
Error averages by case: (0.681 0.68 0.683 0.885 0.728 0.783 0.783 0.728 0.884 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.585
Average program size in population (points): 30.431
Average percent parens in population: 0.237
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.005
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.004
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1233595
--- Timings ---
Current time: 1559583543481 milliseconds
Total Time:           7.7 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.3 seconds, 55.6%
Fitness Testing:      2.4 seconds, 31.2%
Report:               0.9 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Lexicase best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer print_boolean integer_fromboolean boolean_pop exec_yank exec_yankdup in1)
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 15
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Zero cases best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer print_boolean integer_fromboolean boolean_pop exec_yank exec_yankdup in1)
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 15
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (268 205 270 264 270 205 269 185 185 656)
Population mean number of elite cases: 2.78
Count of perfect (error zero) individuals by case: (268 205 270 264 270 205 269 185 185 656)
Population mean number of perfect (error zero) cases: 2.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1})
Best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer print_boolean integer_fromboolean boolean_pop exec_yank exec_yankdup in1)
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.223
Median total errors in population: 7
Error averages by case: (0.732 0.795 0.73 0.736 0.73 0.795 0.731 0.815 0.815 0.344)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.019
Average program size in population (points): 39.092
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.478
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.459
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1677993
--- Timings ---
Current time: 1559583546295 milliseconds
Total Time:          10.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 59.6%
Fitness Testing:      2.9 seconds, 26.6%
Report:               1.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 233 236 233 236 914 81 550 80 236)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (236 233 236 233 236 914 81 550 80 236)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 6
Error averages by case: (0.764 0.767 0.764 0.767 0.764 0.086 0.919 0.45 0.92 0.764)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.228
Average program size in population (points): 26.886
Average percent parens in population: 0.231
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.9835
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1972504
--- Timings ---
Current time: 1559583548995 milliseconds
Total Time:          13.5 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.7 seconds, 64.2%
Fitness Testing:      3.2 seconds, 23.4%
Report:               1.6 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Lexicase best errors: [1 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 13
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec))
Zero cases best errors: [1 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 13
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 207 348 1 383 207 348 207 348 348)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (1 207 348 1 383 207 348 207 348 348)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (boolean_invert_second_then_and boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) ())))
Errors: [1 1 0 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 33
Size: 44
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.602
Median total errors in population: 7
Error averages by case: (0.999 0.793 0.652 0.999 0.617 0.793 0.652 0.793 0.652 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.151
Average program size in population (points): 26.249
Average percent parens in population: 0.277
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.4513125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.392
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.359
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2255383
--- Timings ---
Current time: 1559583552044 milliseconds
Total Time:          16.6 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        11.3 seconds, 68.0%
Fitness Testing:      3.5 seconds, 21.1%
Report:               1.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_not in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_fromboolean print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)))
Lexicase best errors: [0 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 19
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_not in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_fromboolean print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)))
Zero cases best errors: [0 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 19
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (930 365 89 89 176 89 287 477 365 364)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (930 365 89 89 176 89 287 477 365 364)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap) integer_dec)
Errors: [0 0 1 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 13
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.769
Median total errors in population: 7
Error averages by case: (0.07 0.635 0.911 0.911 0.824 0.911 0.713 0.523 0.635 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.284
Average program size in population (points): 35.87
Average percent parens in population: 0.274
Minimum age in population: 6.0
Maximum age in population: 10.9375
Average age in population: 8.88040625
Median age in population: 8.921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.493
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.465
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2780220
--- Timings ---
Current time: 1559583554763 milliseconds
Total Time:          19.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.3 seconds, 69.1%
Fitness Testing:      4.0 seconds, 20.8%
Report:               1.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Lexicase best program: (exec_eq exec_flush integer_dup_items in4 exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean integer_dup integer_lt integer_dup_times boolean_not) in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty integer_shove) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) ())))) () ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in4} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Zero cases best program: (exec_eq exec_flush integer_dup_items in4 exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean integer_dup integer_lt integer_dup_times boolean_not) in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty integer_shove) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) ())))) () ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 141 144 142 765 141 143 141 306 329)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (295 141 144 142 765 141 143 141 306 329)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range () exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) () ()))) ())) () ())
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 7.453
Median total errors in population: 8
Error averages by case: (0.705 0.859 0.856 0.858 0.235 0.859 0.857 0.859 0.694 0.671)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.075
Average program size in population (points): 26.459
Average percent parens in population: 0.263
Minimum age in population: 7.0
Maximum age in population: 12.328125
Average age in population: 10.363765625
Median age in population: 10.4609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.417
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3124825
--- Timings ---
Current time: 1559583558385 milliseconds
Total Time:          22.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.9 seconds, 71.1%
Fitness Testing:      4.3 seconds, 19.5%
Report:               2.0 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)) ())
Lexicase best errors: [0 1 0 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)) ())
Zero cases best errors: [0 1 0 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (111 366 111 111 128 32 366 68 111 605)
Population mean number of elite cases: 2.01
Count of perfect (error zero) individuals by case: (111 366 111 111 128 32 366 68 111 605)
Population mean number of perfect (error zero) cases: 2.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (integer_dup) exec_if (integer_dec) ())
Errors: [0 1 0 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 14
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.991
Median total errors in population: 8
Error averages by case: (0.889 0.634 0.889 0.889 0.872 0.968 0.634 0.932 0.889 0.395)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.448
Average program size in population (points): 42.156
Average percent parens in population: 0.288
Minimum age in population: 9.3125
Maximum age in population: 13.78125
Average age in population: 11.80221875
Median age in population: 11.84375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3788493
--- Timings ---
Current time: 1559583561382 milliseconds
Total Time:          25.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.1 seconds, 69.9%
Fitness Testing:      5.0 seconds, 19.2%
Report:               2.7 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and})
Lexicase best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_fromboolean exec_pop (exec_noop exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if (exec_when (exec_noop) boolean_not boolean_and) ()))) ()))) ()))) ())) ()))) () ())
Lexicase best errors: [0 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 85
Percent parens: 0.388
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and})
Zero cases best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_fromboolean exec_pop (exec_noop exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if (exec_when (exec_noop) boolean_not boolean_and) ()))) ()))) ()))) ())) ()))) () ())
Zero cases best errors: [0 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 85
Percent parens: 0.388
--- Lexicase Population Statistics ---
Count of elite individuals by case: (762 106 442 213 106 213 189 762 405 443)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (762 106 442 213 106 213 189 762 405 443)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean)) ()))) () ())
Errors: [0 1 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 20
Size: 32
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.359
Median total errors in population: 6
Error averages by case: (0.238 0.894 0.558 0.787 0.894 0.787 0.811 0.238 0.595 0.557)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.086
Average program size in population (points): 30.306
Average percent parens in population: 0.280
Minimum age in population: 10.5
Maximum age in population: 15.33984375
Average age in population: 13.394890625
Median age in population: 13.43359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.452
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4219701
--- Timings ---
Current time: 1559583564824 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.4 seconds, 70.8%
Fitness Testing:      5.4 seconds, 18.7%
Report:               2.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_eq exec_flush integer_dup_items exec_while () exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (in2 print_boolean) exec_do*count (print_integer exec_eq integer_gt exec_y (integer_eq integer_rot boolean_or exec_s_when_autoconstructing (integer_max integer_empty) (integer_shove) ()))) ())))) () ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 56
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_eq exec_flush integer_dup_items exec_while () exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (in2 print_boolean) exec_do*count (print_integer exec_eq integer_gt exec_y (integer_eq integer_rot boolean_or exec_s_when_autoconstructing (integer_max integer_empty) (integer_shove) ()))) ())))) () ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 56
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 833 345 345 346 345 345 345 98 325)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (230 833 345 345 346 345 345 345 98 325)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*times} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in2} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 2, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod exec_when (boolean_flush exec_do*times () in2) boolean_dup_times print_boolean) boolean_dup_times exec_eq) (boolean_frominteger in2 print_boolean) exec_do*count (print_integer exec_eq integer_gt exec_y (integer_eq boolean_pop) integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_s () (integer_dup exec_k_when_autoconstructing (boolean_dup_items) (integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_yank)) boolean_yank exec_k (integer_fromboolean exec_shove (in2)) ()) ())) ()))
Errors: [1 0 0 0 0 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 46
Size: 67
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 6.443
Median total errors in population: 7
Error averages by case: (0.77 0.167 0.655 0.655 0.654 0.655 0.655 0.655 0.902 0.675)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.415
Average program size in population (points): 33.32
Average percent parens in population: 0.297
Minimum age in population: 11.5
Maximum age in population: 16.837890625
Average age in population: 14.829232421875
Median age in population: 14.876953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4709497
--- Timings ---
Current time: 1559583567935 milliseconds
Total Time:          32.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.5 seconds, 70.1%
Fitness Testing:      5.9 seconds, 18.4%
Report:               3.6 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove})
Lexicase best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove) ()))) ())) ()))) () ())
Lexicase best errors: [0 1 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove})
Zero cases best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove) ()))) ())) ()))) () ())
Zero cases best errors: [0 1 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (610 180 609 610 3 180 3 3 116 906)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (610 180 609 610 3 180 3 3 116 906)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub})
Best program: (integer_gt exec_shove (integer_sub) exec_stackdepth exec_dup_items print_integer print_integer boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) () ())))))
Errors: [0 1 0 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 25
Size: 34
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.78
Median total errors in population: 6
Error averages by case: (0.39 0.82 0.391 0.39 0.997 0.82 0.997 0.997 0.884 0.094)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.714
Average program size in population (points): 43.897
Average percent parens in population: 0.330
Minimum age in population: 13.671875
Maximum age in population: 18.26953125
Average age in population: 16.344009765625
Median age in population: 16.357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5469869
--- Timings ---
Current time: 1559583571398 milliseconds
Total Time:          35.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 69.3%
Fitness Testing:      6.6 seconds, 18.7%
Report:               4.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean exec_s (print_integer tag_exec_863 (exec_k () (integer_swap integer_dec))) () ())
Lexicase best errors: [0 1 1 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 17
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_k} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean exec_s (print_integer tag_exec_863 (exec_k () (integer_swap integer_dec))) () ())
Zero cases best errors: [0 1 1 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 17
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 318 318 318 98 191 318 318 318 318)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (318 318 318 318 98 191 318 318 318 318)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) integer_shove integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing ())) ())) () ())
Errors: [1 0 0 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 7.167
Median total errors in population: 6
Error averages by case: (0.682 0.682 0.682 0.682 0.902 0.809 0.682 0.682 0.682 0.682)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.61
Average program size in population (points): 36.291
Average percent parens in population: 0.328
Minimum age in population: 15.0
Maximum age in population: 19.84228515625
Average age in population: 17.9698955078125
Median age in population: 18.0732421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6043142
--- Timings ---
Current time: 1559583574402 milliseconds
Total Time:          38.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.3 seconds, 68.4%
Fitness Testing:      7.2 seconds, 18.7%
Report:               4.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y})
Lexicase best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth) exec_pop ()) (exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y ())) ()))) ()))) ()))) ())
Lexicase best errors: [1 1 0 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y})
Zero cases best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth) exec_pop ()) (exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y ())) ()))) ()))) ()))) ())
Zero cases best errors: [1 1 0 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (83 83 936 405 365 365 365 75 405 83)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (83 83 936 405 365 365 365 75 405 83)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Best program: (boolean_and integer_pop integer_dup_times integer_eq boolean_invert_first_then_and exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_shove boolean_swap exec_do*range (exec_k (in2 print_integer) ())))
Errors: [1 1 0 1 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.835
Median total errors in population: 7
Error averages by case: (0.917 0.917 0.064 0.595 0.635 0.635 0.635 0.925 0.595 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.776
Average program size in population (points): 37.149
Average percent parens in population: 0.342
Minimum age in population: 16.59375
Maximum age in population: 21.442626953125
Average age in population: 19.4812294921875
Median age in population: 19.51611328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6669411
--- Timings ---
Current time: 1559583577416 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.5 seconds, 68.1%
Fitness Testing:      7.8 seconds, 18.6%
Report:               5.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and})
Lexicase best program: (integer_gt exec_shove () integer_sub exec_stackdepth exec_dup_items print_integer print_integer boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop (exec_noop exec_while (exec_when (boolean_pop boolean_and))))) ()))) ()))) ()))
Lexicase best errors: [0 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 65
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_and})
Zero cases best program: (integer_gt exec_shove () integer_sub exec_stackdepth exec_dup_items print_integer print_integer boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop (exec_noop exec_while (exec_when (boolean_pop boolean_and))))) ()))) ()))) ()))
Zero cases best errors: [0 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 65
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (280 280 280 315 220 114 115 114 315 280)
Population mean number of elite cases: 2.31
Count of perfect (error zero) individuals by case: (280 280 280 315 220 114 115 114 315 280)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (exec_yankdup integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (in3 boolean_shove boolean_stackdepth integer_empty integer_mult integer_min))) ())) ()))) () ())
Errors: [0 0 0 1 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 49
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 7.687
Median total errors in population: 8
Error averages by case: (0.72 0.72 0.72 0.685 0.78 0.886 0.885 0.886 0.685 0.72)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.597
Average program size in population (points): 32.606
Average percent parens in population: 0.312
Minimum age in population: 17.9609375
Maximum age in population: 22.859130859375
Average age in population: 20.905568359375
Median age in population: 20.952392578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.541
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7164700
--- Timings ---
Current time: 1559583581049 milliseconds
Total Time:          44.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 68.7%
Fitness Testing:      8.3 seconds, 18.5%
Report:               5.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer integer_swap integer_dec) ())
Lexicase best errors: [1 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer integer_swap integer_dec) ())
Zero cases best errors: [1 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 271 199 93 93 268 348 623 199 200)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (93 271 199 93 93 268 348 623 199 200)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 1, :instruction in2})
Best program: (integer_dup_times exec_pop (integer_eq in2 in1 boolean_eq print_boolean boolean_shove integer_rot) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (exec_do*while (integer_dup integer_lt integer_dup_times boolean_not) in4 boolean_pop) (integer_yank integer_dup exec_rot (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (in2)) ()) () ()))
Errors: [1 0 1 1 1 0 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 7.613
Median total errors in population: 7
Error averages by case: (0.907 0.729 0.801 0.907 0.907 0.732 0.652 0.377 0.801 0.8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.455
Average program size in population (points): 37.845
Average percent parens in population: 0.312
Minimum age in population: 18.9609375
Maximum age in population: 24.34552001953125
Average age in population: 22.36175689697266
Median age in population: 22.40594482421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7751382
--- Timings ---
Current time: 1559583584694 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.5 seconds, 68.5%
Fitness Testing:      8.8 seconds, 18.1%
Report:               6.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt})
Lexicase best program: (boolean_and in4 integer_dup_times integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap boolean_dup_items exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times) integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (boolean_flush exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult tagged_416 exec_do*range (exec_pop () integer_lt)) ())) ()) ())) () ())
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 55
Percent parens: 0.345
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_416} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt})
Zero cases best program: (boolean_and in4 integer_dup_times integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap boolean_dup_items exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times) integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (boolean_flush exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult tagged_416 exec_do*range (exec_pop () integer_lt)) ())) ()) ())) () ())
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 55
Percent parens: 0.345
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 316 637 931 106 294 106 106 106 294)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (214 316 637 931 106 294 106 106 106 294)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Best program: (exec_eq exec_flush integer_dup_items integer_eq boolean_invert_first_then_and exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer) ())))
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 15
Size: 22
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 6.89
Median total errors in population: 7
Error averages by case: (0.786 0.684 0.363 0.069 0.894 0.706 0.894 0.894 0.894 0.706)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.882
Average program size in population (points): 29.418
Average percent parens in population: 0.305
Minimum age in population: 20.841796875
Maximum age in population: 25.68563842773438
Average age in population: 23.86364935302734
Median age in population: 23.90853881835938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8144066
--- Timings ---
Current time: 1559583587142 milliseconds
Total Time:          51.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.4 seconds, 68.5%
Fitness Testing:      9.3 seconds, 17.9%
Report:               6.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (integer_dup) exec_if (integer_dec) ())
Lexicase best errors: [0 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (integer_dup) exec_if (integer_dec) ())
Zero cases best errors: [0 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 339 112 921 470 471 121 112 121 218)
Population mean number of elite cases: 3.10
Count of perfect (error zero) individuals by case: (219 339 112 921 470 471 121 112 121 218)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_stackdepth} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dec})
Best program: (integer_stackdepth in4 integer_dup_times integer_fromboolean in3 print_integer integer_dec exec_dup (exec_s_when_autoconstructing (integer_dec) () ()))
Errors: [0 0 1 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 10
Size: 15
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.896
Median total errors in population: 7
Error averages by case: (0.781 0.661 0.888 0.079 0.53 0.529 0.879 0.888 0.879 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.142
Average program size in population (points): 35.432
Average percent parens in population: 0.331
Minimum age in population: 21.841796875
Maximum age in population: 27.28141784667969
Average age in population: 25.28764239501953
Median age in population: 25.32559204101562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8731899
--- Timings ---
Current time: 1559583590381 milliseconds
Total Time:          54.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.9 seconds, 69.1%
Fitness Testing:      9.8 seconds, 17.9%
Report:               7.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () exec_s () () ()))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.400
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_s})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () exec_s () () ()))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.400
--- Lexicase Population Statistics ---
Count of elite individuals by case: (292 292 197 197 937 190 251 935 252 930)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (292 292 197 197 937 190 251 935 252 930)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean})
Best program: (boolean_and exec_if () (integer_rot) exec_pop (integer_rot in2 in1 integer_swap print_boolean boolean_shove integer_rot) boolean_shove boolean_dup_times exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_lt integer_fromboolean) () ())
Errors: [1 1 1 1 0 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 28
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.527
Median total errors in population: 5
Error averages by case: (0.708 0.708 0.803 0.803 0.063 0.81 0.749 0.065 0.748 0.07)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.468
Average program size in population (points): 31.762
Average percent parens in population: 0.308
Minimum age in population: 24.1416015625
Maximum age in population: 28.681396484375
Average age in population: 26.75087607574463
Median age in population: 26.82197189331055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9144755
--- Timings ---
Current time: 1559583592948 milliseconds
Total Time:          57.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 69.5%
Fitness Testing:     10.2 seconds, 17.8%
Report:               7.2 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Lexicase best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)) ())
Lexicase best errors: [0 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Zero cases best program: (boolean_and in4 exec_s () (integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)) ())
Zero cases best errors: [0 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (683 258 130 131 285 266 266 267 266 131)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (683 258 130 131 285 266 266 267 266 131)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 print_integer tag_exec_863 (exec_dup () integer_fromboolean print_integer tag_exec_863 (exec_dup () integer_swap integer_dec)))
Errors: [0 1 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 14
Size: 19
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.317
Median total errors in population: 8
Error averages by case: (0.317 0.742 0.87 0.869 0.715 0.734 0.734 0.733 0.734 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.19
Average program size in population (points): 29.786
Average percent parens in population: 0.308
Minimum age in population: 25.46371459960938
Maximum age in population: 30.43900299072266
Average age in population: 28.26390670776367
Median age in population: 28.34613418579102
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9508764
--- Timings ---
Current time: 1559583595610 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.1 seconds, 69.9%
Fitness Testing:     10.6 seconds, 17.6%
Report:               7.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_gt exec_shove (integer_sub) boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean) boolean_shove integer_div exec_s_when_autoconstructing (integer_sub exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop () exec_noop) integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_yankdup print_exec (exec_noop exec_pop (exec_noop) exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if (exec_when (exec_noop) boolean_not boolean_and) ())) ()))) ()))) ()))) () ())
Lexicase best errors: [1 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_gt exec_shove (integer_sub) boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean) boolean_shove integer_div exec_s_when_autoconstructing (integer_sub exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop () exec_noop) integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_yankdup print_exec (exec_noop exec_pop (exec_noop) exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if (exec_when (exec_noop) boolean_not boolean_and) ())) ()))) ()))) ()))) () ())
Zero cases best errors: [1 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 89 279 279 103 279 89 103 279 941)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (91 89 279 279 103 279 89 103 279 941)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_mult boolean_swap exec_do*range (exec_k (in2 print_integer) ()))) ())
Errors: [1 1 0 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 23
Percent parens: 0.435
--- Population Statistics ---
Average total errors in population: 7.468
Median total errors in population: 9
Error averages by case: (0.909 0.911 0.721 0.721 0.897 0.721 0.911 0.897 0.721 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.64
Average program size in population (points): 26.389
Average percent parens in population: 0.312
Minimum age in population: 26.46371459960938
Maximum age in population: 31.84773445129395
Average age in population: 29.74751137542725
Median age in population: 29.78679656982422
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9870240
--- Timings ---
Current time: 1559583598523 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.5 seconds, 70.5%
Fitness Testing:     11.0 seconds, 17.4%
Report:               7.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing})
Lexicase best program: (integer_dup_times exec_pop (integer_eq in2 in1 boolean_eq print_boolean boolean_shove integer_rot) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_s_when_autoconstructing () () ()) ())))
Lexicase best errors: [1 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.346
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_s_when_autoconstructing})
Zero cases best program: (integer_dup_times exec_pop (integer_eq in2 in1 boolean_eq print_boolean boolean_shove integer_rot) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_s_when_autoconstructing () () ()) ())))
Zero cases best errors: [1 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.346
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 1000 1000 325 391 391 326 325 391 391)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (326 0 0 325 391 391 326 325 391 391)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop})
Best program: (exec_pop (exec_shove () integer_sub) exec_stackdepth exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_div) boolean_dup_items exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_mult exec_if (exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_s (print_exec () integer_max exec_pop (exec_noop exec_while (exec_when (boolean_pop)))) () ()) ()))) ()) ()))) ()))) () ())
Errors: [1 1 1 1 0 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 39
Size: 71
Percent parens: 0.451
--- Population Statistics ---
Average total errors in population: 7.134
Median total errors in population: 6
Error averages by case: (0.674 1.0 1.0 0.675 0.609 0.609 0.674 0.675 0.609 0.609)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 23.856
Average program size in population (points): 35.933
Average percent parens in population: 0.333
Minimum age in population: 27.46371459960938
Maximum age in population: 33.41490364074707
Average age in population: 31.17830412578583
Median age in population: 31.21106910705566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 10434133
--- Timings ---
Current time: 1559583602355 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.8 seconds, 70.8%
Fitness Testing:     11.5 seconds, 17.4%
Report:               7.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if})
Lexicase best program: (exec_eq exec_flush integer_dup_items integer_min exec_s (boolean_shove) (integer_swap exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup in3 integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_do*count (boolean_dup_items integer_empty tagged_96 in2 integer_fromboolean integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop (exec_noop) integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_yankdup print_exec (exec_noop exec_pop (exec_noop exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if () ()))) ())))) ()))) ())) ())
Lexicase best errors: [1 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 85
Percent parens: 0.353
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 1, :instruction print_exec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_while} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_if})
Zero cases best program: (exec_eq exec_flush integer_dup_items integer_min exec_s (boolean_shove) (integer_swap exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup in3 integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_do*count (boolean_dup_items integer_empty tagged_96 in2 integer_fromboolean integer_empty exec_yank) boolean_yank exec_k (exec_dup_items exec_shove (exec_y (exec_rot () (exec_dup (print_exec () integer_max exec_pop (exec_noop) integer_min exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_yankdup print_exec (exec_noop exec_pop (exec_noop exec_while (exec_when (boolean_pop exec_noop) exec_yankdup) exec_if () ()))) ())))) ()))) ())) ())
Zero cases best errors: [1 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 85
Percent parens: 0.353
--- Lexicase Population Statistics ---
Count of elite individuals by case: (470 1000 1000 436 1000 1000 435 436 435 1000)
Population mean number of elite cases: 7.21
Count of perfect (error zero) individuals by case: (470 0 0 436 0 0 435 436 435 0)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times})
Best program: (integer_dup_times exec_pop (integer_eq in2 in1 boolean_eq print_boolean boolean_shove integer_rot) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times ()) ()))
Errors: [1 1 1 0 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 29
Size: 37
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.788
Median total errors in population: 9
Error averages by case: (0.53 1.0 1.0 0.564 1.0 1.0 0.565 0.564 0.565 1.0)
Error minima by case: (0 1 1 0 1 1 0 0 0 1)
Average genome size in population (length): 26.009
Average program size in population (points): 38.905
Average percent parens in population: 0.331
Minimum age in population: 29.93489074707031
Maximum age in population: 34.58323287963867
Average age in population: 32.68100000619888
Median age in population: 32.72228717803955
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 11012212
--- Timings ---
Current time: 1559583605027 milliseconds
Total Time:          69.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.7 seconds, 70.1%
Fitness Testing:     12.0 seconds, 17.3%
Report:               8.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_gt exec_y_when_autoconstructing (boolean_shove boolean_swap exec_do*range (exec_k (in2 print_integer exec_y () exec_y_when_autoconstructing (integer_lt integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_empty boolean_stackdepth integer_empty integer_dup integer_add exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup ()) ()))) ()))) ()) ())))
Lexicase best errors: [1 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_gt exec_y_when_autoconstructing (boolean_shove boolean_swap exec_do*range (exec_k (in2 print_integer exec_y () exec_y_when_autoconstructing (integer_lt integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_empty boolean_stackdepth integer_empty integer_dup integer_add exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup ()) ()))) ()))) ()) ())))
Zero cases best errors: [1 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (700 700 1000 203 203 904 1000 1000 701 203)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (700 700 0 203 203 904 0 0 701 203)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_not} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub})
Best program: (exec_pop (integer_eq in2 in1 boolean_eq print_boolean boolean_shove print_boolean) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times boolean_not) (in4 boolean_pop) (integer_add integer_dup exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty boolean_flush boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) () ())) ()))
Errors: [0 0 1 1 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 6.386
Median total errors in population: 6
Error averages by case: (0.3 0.3 1.0 0.797 0.797 0.096 1.0 1.0 0.299 0.797)
Error minima by case: (0 0 1 0 0 0 1 1 0 0)
Average genome size in population (length): 26.951
Average program size in population (points): 39.23
Average percent parens in population: 0.309
Minimum age in population: 30.93489074707031
Maximum age in population: 36.03116178512573
Average age in population: 34.17941493296623
Median age in population: 34.23538684844971
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 11526523
--- Timings ---
Current time: 1559583607642 milliseconds
Total Time:          71.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.3 seconds, 70.0%
Fitness Testing:     12.5 seconds, 17.4%
Report:               8.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Lexicase best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_863 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer integer_rot exec_y_when_autoconstructing (integer_dup_times integer_div) exec_swap (integer_dup integer_div) ()) ())))))
Lexicase best errors: [1 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Zero cases best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_863 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer integer_rot exec_y_when_autoconstructing (integer_dup_times integer_div) exec_swap (integer_dup integer_div) ()) ())))))
Zero cases best errors: [1 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (450 1000 1000 453 1 469 1 469 1000 469)
Population mean number of elite cases: 5.31
Count of perfect (error zero) individuals by case: (450 0 0 453 1 469 1 469 0 469)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y ()) ()))) () ())
Errors: [1 1 1 1 1 0 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 16
Size: 27
Percent parens: 0.407
--- Population Statistics ---
Average total errors in population: 7.688
Median total errors in population: 8
Error averages by case: (0.55 1.0 1.0 0.547 0.999 0.531 0.999 0.531 1.0 0.531)
Error minima by case: (0 1 1 0 0 0 0 0 1 0)
Average genome size in population (length): 25.72
Average program size in population (points): 38.464
Average percent parens in population: 0.329
Minimum age in population: 31.93489074707031
Maximum age in population: 37.41605305671692
Average age in population: 35.58809965717793
Median age in population: 35.67058485746384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 12105905
--- Timings ---
Current time: 1559583610296 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.9 seconds, 69.7%
Fitness Testing:     13.1 seconds, 17.6%
Report:               9.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_dup})
Lexicase best program: (integer_gt exec_y_when_autoconstructing (boolean_shove boolean_swap exec_do*range (exec_k (in2 print_integer exec_y () exec_y_when_autoconstructing (integer_lt integer_div) integer_fromboolean boolean_shove integer_div integer_shove integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_dup integer_add exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup ()) ()))) ()))))))
Lexicase best errors: [0 0 1 0 1 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 49
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_dup})
Zero cases best program: (integer_gt exec_y_when_autoconstructing (boolean_shove boolean_swap exec_do*range (exec_k (in2 print_integer exec_y () exec_y_when_autoconstructing (integer_lt integer_div) integer_fromboolean boolean_shove integer_div integer_shove integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if (boolean_shove boolean_stackdepth integer_empty integer_dup integer_add exec_do*range (exec_pop () integer_lt exec_y (exec_rot () (exec_dup ()) ()))) ()))))))
Zero cases best errors: [0 0 1 0 1 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 49
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (397 397 1000 397 273 273 255 270 1000 1000)
Population mean number of elite cases: 5.26
Count of perfect (error zero) individuals by case: (397 397 0 397 273 273 255 270 0 0)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div})
Best program: (exec_eq exec_if (integer_dup_items integer_eq) (exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup boolean_swap exec_do*range () integer_add in2 print_integer exec_y (exec_yankdup integer_div) integer_fromboolean) boolean_shove integer_div) () ()))
Errors: [0 0 1 0 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.738
Median total errors in population: 7
Error averages by case: (0.603 0.603 1.0 0.603 0.727 0.727 0.745 0.73 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 0 0 1 1)
Average genome size in population (length): 20.432
Average program size in population (points): 30.205
Average percent parens in population: 0.295
Minimum age in population: 33.15131187438965
Maximum age in population: 38.96321654319763
Average age in population: 37.31992319303751
Median age in population: 37.37058055400848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 232
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12830107
--- Timings ---
Current time: 1559583613323 milliseconds
Total Time:          77.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.6 seconds, 69.3%
Fitness Testing:     13.7 seconds, 17.7%
Report:               9.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div})
Lexicase best program: (exec_eq exec_if (integer_dup_items integer_eq) (exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup boolean_swap exec_do*range () integer_add in2 print_integer exec_y (exec_yankdup integer_div) integer_fromboolean) boolean_shove integer_div) () ()))
Lexicase best errors: [1 1 0 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_div} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div})
Zero cases best program: (exec_eq exec_if (integer_dup_items integer_eq) (exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup boolean_swap exec_do*range () integer_add in2 print_integer exec_y (exec_yankdup integer_div) integer_fromboolean) boolean_shove integer_div) () ()))
Zero cases best errors: [1 1 0 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 1000 386 552 930 376 1000 387 1000 374)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (165 0 386 552 930 376 0 387 0 374)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Best program: (integer_dup_times exec_pop (integer_eq in2 in1 print_newline print_boolean print_integer) boolean_rot integer_mod boolean_pop in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div integer_lt integer_rot print_integer tag_exec_863 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap) exec_shove (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing () integer_dup_times integer_div) exec_swap (integer_dup integer_div) ()) ()))))))
Errors: [1 1 0 0 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.83
Median total errors in population: 7
Error averages by case: (0.835 1.0 0.614 0.448 0.07 0.624 1.0 0.613 1.0 0.626)
Error minima by case: (0 1 0 0 0 0 1 0 1 0)
Average genome size in population (length): 22.244
Average program size in population (points): 32.935
Average percent parens in population: 0.305
Minimum age in population: 34.18203353881836
Maximum age in population: 40.55131122469902
Average age in population: 38.70729910713434
Median age in population: 38.79720075428486
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 13422185
--- Timings ---
Current time: 1559583617362 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 69.1%
Fitness Testing:     14.3 seconds, 17.7%
Report:              10.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_s_when_autoconstructing (boolean_dup_times exec_eq exec_flush integer_dup_items) () (integer_eq) exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div)) integer_fromboolean boolean_shove integer_div) (exec_s_when_autoconstructing () () ())))) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.419
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 2, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 2, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_s_when_autoconstructing (boolean_dup_times exec_eq exec_flush integer_dup_items) () (integer_eq) exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div)) integer_fromboolean boolean_shove integer_div) (exec_s_when_autoconstructing () () ())))) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.419
--- Lexicase Population Statistics ---
Count of elite individuals by case: (424 424 424 200 307 932 425 424 1000 305)
Population mean number of elite cases: 4.86
Count of perfect (error zero) individuals by case: (424 424 424 200 307 932 425 424 0 305)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_yankdup} {:close 3, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_eq integer_gte integer_dup_items integer_eq exec_s (exec_when (exec_yankdup exec_pop ())) (exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_stackdepth integer_eq in2 print_integer exec_y (exec_y_when_autoconstructing ()))) ())
Errors: [0 0 0 1 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 26
Percent parens: 0.346
--- Population Statistics ---
Average total errors in population: 6.135
Median total errors in population: 7
Error averages by case: (0.576 0.576 0.576 0.8 0.693 0.068 0.575 0.576 1.0 0.695)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 21.395
Average program size in population (points): 31.675
Average percent parens in population: 0.303
Minimum age in population: 35.18203353881836
Maximum age in population: 42.41639184951782
Average age in population: 40.1629303035289
Median age in population: 40.26178458333015
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 155
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 14031018
--- Timings ---
Current time: 1559583620640 milliseconds
Total Time:          84.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 68.5%
Fitness Testing:     14.8 seconds, 17.5%
Report:              11.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y})
Lexicase best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod exec_when (exec_empty exec_dup_items in1 print_integer exec_eq exec_k (in2 print_integer exec_y ()) ()))) ())
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 23
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y})
Zero cases best program: (exec_s_when_autoconstructing () (boolean_dup_times exec_do*count (integer_mod exec_when (exec_empty exec_dup_items in1 print_integer exec_eq exec_k (in2 print_integer exec_y ()) ()))) ())
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 23
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 811 115 1000 1000 246 246 811 248 563)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (0 811 115 0 0 246 246 811 248 563)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times})
Best program: (boolean_and in4 integer_dup_times integer_fromboolean exec_stackdepth exec_shove (in1 print_integer exec_s_when_autoconstructing (integer_dup exec_dup_times ()) () ()))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 11
Size: 17
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 7
Error averages by case: (1.0 0.189 0.885 1.0 1.0 0.754 0.754 0.189 0.752 0.437)
Error minima by case: (1 0 0 1 1 0 0 0 0 0)
Average genome size in population (length): 22.52
Average program size in population (points): 33.821
Average percent parens in population: 0.320
Minimum age in population: 36.18203353881836
Maximum age in population: 43.5883671566844
Average age in population: 41.60071763088554
Median age in population: 41.66200294345617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 14695363
--- Timings ---
Current time: 1559583623340 milliseconds
Total Time:          87.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.9 seconds, 68.2%
Fitness Testing:     15.5 seconds, 17.6%
Report:              12.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Lexicase best program: (exec_eq integer_swap integer_dup_items integer_eq boolean_invert_first_then_and exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer) ())))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 22
Percent parens: 0.318
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Zero cases best program: (exec_eq integer_swap integer_dup_items integer_eq boolean_invert_first_then_and exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer) ())))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 22
Percent parens: 0.318
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 191 1000 170 563 170 170 191 563 170)
Population mean number of elite cases: 4.19
Count of perfect (error zero) individuals by case: (0 191 0 170 563 170 170 191 563 170)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_do*range (exec_k (in2 print_integer exec_y (boolean_invert_first_then_and integer_yank exec_do*times () integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing ())) ())) ())))) () ())
Errors: [1 1 1 0 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 45
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 7.812
Median total errors in population: 8
Error averages by case: (1.0 0.809 1.0 0.83 0.437 0.83 0.83 0.809 0.437 0.83)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 21.426
Average program size in population (points): 30.482
Average percent parens in population: 0.268
Minimum age in population: 40.54686062037945
Maximum age in population: 45.10282899439335
Average age in population: 43.19988649318367
Median age in population: 43.31186565756798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.535
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 15068495
--- Timings ---
Current time: 1559583626381 milliseconds
Total Time:          90.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 68.5%
Fitness Testing:     15.8 seconds, 17.5%
Report:              12.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if})
Lexicase best program: (boolean_and integer_eq integer_fromboolean exec_do*range (exec_k (in2 integer_dup_items boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup exec_dup_times (integer_dup_times boolean_not exec_eq integer_dup integer_lt exec_y_when_autoconstructing (boolean_not) exec_k (boolean_pop integer_add integer_dup exec_s (integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if () ()))) ()) () ()) ())) () ()) ()))
Lexicase best errors: [1 1 0 1 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 54
Percent parens: 0.389
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if})
Zero cases best program: (boolean_and integer_eq integer_fromboolean exec_do*range (exec_k (in2 integer_dup_items boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup exec_dup_times (integer_dup_times boolean_not exec_eq integer_dup integer_lt exec_y_when_autoconstructing (boolean_not) exec_k (boolean_pop integer_add integer_dup exec_s (integer_div exec_s_when_autoconstructing (integer_sub) (exec_while (exec_y_when_autoconstructing (exec_if () ()))) ()) () ()) ())) () ()) ()))
Zero cases best errors: [1 1 0 1 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 54
Percent parens: 0.389
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 229 477 229 1000 1000 214 214 477)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (0 0 229 477 229 0 0 214 214 477)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty})
Best program: (exec_eq exec_flush exec_do*times (integer_eq) exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean exec_yank integer_div integer_dup_times exec_dup_times () in4 boolean_pop) integer_add integer_dup) (exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2 exec_dup_times (integer_empty)) ()))) () ())
Errors: [1 1 1 0 1 1 1 1 1 0]
Total: 8
Mean: 0.8
Genome size: 33
Size: 49
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 8.16
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.771 0.523 0.771 1.0 1.0 0.786 0.786 0.523)
Error minima by case: (1 1 0 0 0 1 1 0 0 0)
Average genome size in population (length): 20.756
Average program size in population (points): 30.536
Average percent parens in population: 0.283
Minimum age in population: 41.97260963916779
Maximum age in population: 46.680329548195
Average age in population: 44.623655304607
Median age in population: 44.69275622069836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.002
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 15485796
--- Timings ---
Current time: 1559583629889 milliseconds
Total Time:          93.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 68.4%
Fitness Testing:     16.3 seconds, 17.3%
Report:              13.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_896} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Lexicase best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_896 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer integer_rot exec_y_when_autoconstructing (exec_while (integer_div) exec_swap (integer_dup integer_div) ())) ())))))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_896} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div})
Zero cases best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_896 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer integer_rot exec_y_when_autoconstructing (exec_while (integer_div) exec_swap (integer_dup integer_div) ())) ())))))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 302 303 302 641 1000 1000 282 339 282)
Population mean number of elite cases: 4.73
Count of perfect (error zero) individuals by case: (283 302 303 302 641 0 0 282 339 282)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction tag_integer_594} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean})
Best program: (exec_eq integer_min integer_dup_items integer_eq exec_s (exec_s (boolean_stackdepth tag_integer_594) () (exec_y_when_autoconstructing (exec_eq exec_flush integer_dup_items integer_mult) exec_s (exec_when (boolean_stackdepth integer_lte)) (exec_y_when_autoconstructing (exec_dup (boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_rot) integer_fromboolean boolean_shove integer_fromboolean)) ())))) ())) () ())
Errors: [1 0 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 50
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 7.266
Median total errors in population: 7
Error averages by case: (0.717 0.698 0.697 0.698 0.359 1.0 1.0 0.718 0.661 0.718)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 19.036
Average program size in population (points): 27.073
Average percent parens in population: 0.249
Minimum age in population: 43.19937434792519
Maximum age in population: 48.11582884099334
Average age in population: 46.16524352732208
Median age in population: 46.24765325849876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.531
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 15808451
--- Timings ---
Current time: 1559583632857 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 68.2%
Fitness Testing:     16.6 seconds, 17.1%
Report:              14.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 boolean_or print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 1 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 boolean_or print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 1 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 153 153 153 352 429 935 936 348)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (1 1 153 153 153 352 429 935 936 348)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 integer_add print_integer exec_swap (integer_gt boolean_or integer_eq integer_rot) ())
Errors: [1 1 0 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 9
Size: 12
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.539
Median total errors in population: 6
Error averages by case: (0.999 0.999 0.847 0.847 0.847 0.648 0.571 0.065 0.064 0.652)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.773
Average program size in population (points): 31.965
Average percent parens in population: 0.294
Minimum age in population: 44.78880109637976
Maximum age in population: 49.46863124566153
Average age in population: 47.5934578786185
Median age in population: 47.68442060030065
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 16213519
--- Timings ---
Current time: 1559583635670 milliseconds
Total Time:         100.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 68.1%
Fitness Testing:     17.0 seconds, 17.0%
Report:              14.9 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_eq boolean_not integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (in3 boolean_shove exec_do*range (exec_k (in2 print_integer integer_gt boolean_or) ()))) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_eq boolean_not integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (in3 boolean_shove exec_do*range (exec_k (in2 print_integer integer_gt boolean_or) ()))) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (362 250 103 103 103 103 362 103 249 230)
Population mean number of elite cases: 1.97
Count of perfect (error zero) individuals by case: (362 250 103 103 103 103 362 103 249 230)
Population mean number of perfect (error zero) cases: 1.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_96} {:close 0, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty})
Best program: (exec_eq exec_when (boolean_stackdepth integer_add) exec_y_when_autoconstructing (integer_dup_times exec_k (in2 print_integer exec_y () exec_y_when_autoconstructing (integer_dup_times exec_dup (integer_fromboolean boolean_shove integer_div integer_dup_times exec_dup_times () in4 boolean_pop) integer_add integer_dup) exec_k_when_autoconstructing (boolean_dup_items boolean_not tagged_96 in2 exec_dup_times (integer_empty)) ()) ()))
Errors: [1 1 0 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 29
Size: 41
Percent parens: 0.293
--- Population Statistics ---
Average total errors in population: 8.032
Median total errors in population: 8
Error averages by case: (0.638 0.75 0.897 0.897 0.897 0.897 0.638 0.897 0.751 0.77)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.662
Average program size in population (points): 19.547
Average percent parens in population: 0.192
Minimum age in population: 46.52828743122518
Maximum age in population: 51.08419691468589
Average age in population: 49.35211414679
Median age in population: 49.45075865043327
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 205
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 210
Syntactic diversity (% unique Push programs):	 0.391
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 16406170
--- Timings ---
Current time: 1559583638260 milliseconds
Total Time:         102.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.1 seconds, 68.4%
Fitness Testing:     17.2 seconds, 16.8%
Report:              15.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 771 209 454 945 454 176 107 107 176)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (209 771 209 454 945 454 176 107 107 176)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 in3 print_integer integer_yank integer_gt boolean_or exec_stackdepth integer_rot)
Errors: [1 0 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.392
Median total errors in population: 6
Error averages by case: (0.791 0.229 0.791 0.546 0.055 0.546 0.824 0.893 0.893 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.547
Average program size in population (points): 25.549
Average percent parens in population: 0.267
Minimum age in population: 47.52828743122518
Maximum age in population: 52.75287674716674
Average age in population: 50.7751261147944
Median age in population: 50.88018864148762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 16745367
--- Timings ---
Current time: 1559583641147 milliseconds
Total Time:         105.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 68.6%
Fitness Testing:     17.6 seconds, 16.6%
Report:              15.5 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 0 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 0 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 265 265 239 256 256 265 239 191 265)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (239 265 265 239 256 256 265 239 191 265)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [1 0 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.52
Median total errors in population: 7
Error averages by case: (0.761 0.735 0.735 0.761 0.744 0.744 0.735 0.761 0.809 0.735)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.64
Average program size in population (points): 20.136
Average percent parens in population: 0.215
Minimum age in population: 48.52828743122518
Maximum age in population: 54.33342169848038
Average age in population: 52.28403299878462
Median age in population: 52.36873958172509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.433
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 189
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 16991253
--- Timings ---
Current time: 1559583643897 milliseconds
Total Time:         108.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.9 seconds, 69.0%
Fitness Testing:     17.9 seconds, 16.5%
Report:              15.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times})
Lexicase best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 boolean_stackdepth exec_pop () exec_y_when_autoconstructing (integer_dup_times boolean_swap in3 exec_k (in2 print_integer) (exec_y (exec_y_when_autoconstructing (exec_empty integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub integer_max exec_do*times ()) () ()))))
Lexicase best errors: [1 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*times})
Zero cases best program: (boolean_and in4 integer_dup_times integer_fromboolean in3 boolean_stackdepth exec_pop () exec_y_when_autoconstructing (integer_dup_times boolean_swap in3 exec_k (in2 print_integer) (exec_y (exec_y_when_autoconstructing (exec_empty integer_div) integer_fromboolean boolean_shove integer_div exec_s_when_autoconstructing (integer_sub integer_max exec_do*times ()) () ()))))
Zero cases best errors: [1 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (372 97 282 282 97 282 205 282 372 282)
Population mean number of elite cases: 2.55
Count of perfect (error zero) individuals by case: (372 97 282 282 97 282 205 282 372 282)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_sub})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (boolean_or in1 exec_pop ()) (exec_y_when_autoconstructing (integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_shove integer_div integer_dup_times exec_dup_times () in4 boolean_pop) integer_add exec_dup_times (exec_rot (boolean_flush integer_dup_times integer_div exec_s_when_autoconstructing (integer_sub) () ()) () ())) ()))) ())
Errors: [1 1 0 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 53
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 7.447
Median total errors in population: 8
Error averages by case: (0.628 0.903 0.718 0.718 0.903 0.718 0.795 0.718 0.628 0.718)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.652
Average program size in population (points): 18.616
Average percent parens in population: 0.205
Minimum age in population: 50.52691229595803
Maximum age in population: 55.9440447447123
Average age in population: 53.83818282389332
Median age in population: 53.88320004550042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 240
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 17222358
--- Timings ---
Current time: 1559583647078 milliseconds
Total Time:         111.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 69.4%
Fitness Testing:     18.1 seconds, 16.3%
Report:              15.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Lexicase best program: (integer_rot in2 integer_dup_times integer_fromboolean boolean_rot print_integer tag_exec_863 (exec_dup (integer_swap exec_when ())))
Lexicase best errors: [0 1 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 14
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when})
Zero cases best program: (integer_rot in2 integer_dup_times integer_fromboolean boolean_rot print_integer tag_exec_863 (exec_dup (integer_swap exec_when ())))
Zero cases best errors: [0 1 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 14
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (939 184 476 187 476 186 94 476 478 189)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (939 184 476 187 476 186 94 476 478 189)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 1, :instruction exec_if} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 3, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction print_integer})
Best program: (exec_eq exec_if () (integer_dup_items integer_eq) exec_s (exec_when (boolean_stackdepth exec_pop ())) (exec_y_when_autoconstructing (integer_dup boolean_swap exec_do*range () integer_add in2 print_integer)) ())
Errors: [0 1 0 1 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 25
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.315
Median total errors in population: 6
Error averages by case: (0.061 0.816 0.524 0.813 0.524 0.814 0.906 0.524 0.522 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 16.924
Average program size in population (points): 24.754
Average percent parens in population: 0.276
Minimum age in population: 52.49197463272139
Maximum age in population: 57.28964415039809
Average age in population: 55.29699647740349
Median age in population: 55.38064642826794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 17561213
--- Timings ---
Current time: 1559583649611 milliseconds
Total Time:         114.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.1 seconds, 69.3%
Fitness Testing:     18.5 seconds, 16.2%
Report:              16.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 exec_empty print_integer exec_eq integer_gt integer_add exec_when () integer_rot)
Lexicase best errors: [1 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 exec_empty print_integer exec_eq integer_gt integer_add exec_when () integer_rot)
Zero cases best errors: [1 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (389 332 111 831 109 609 942 109 332 109)
Population mean number of elite cases: 3.87
Count of perfect (error zero) individuals by case: (389 332 111 831 109 609 942 109 332 109)
Population mean number of perfect (error zero) cases: 3.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (integer_rot in2 boolean_rot integer_fromboolean boolean_and in4 exec_empty print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [1 1 1 0 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 6.127
Median total errors in population: 6
Error averages by case: (0.611 0.668 0.889 0.169 0.891 0.391 0.058 0.891 0.668 0.891)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 17.562
Average program size in population (points): 25.596
Average percent parens in population: 0.283
Minimum age in population: 53.49197463272139
Maximum age in population: 58.8837461383373
Average age in population: 56.76755029040615
Median age in population: 56.7992662527322
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.509
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 17907495
--- Timings ---
Current time: 1559583652092 milliseconds
Total Time:         116.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.1 seconds, 69.5%
Fitness Testing:     18.8 seconds, 16.2%
Report:              16.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div})
Lexicase best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_863 (exec_dup (integer_swap print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times boolean_frominteger exec_swap (boolean_shove integer_div) ())))))
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.292
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div})
Zero cases best program: (integer_rot in2 in1 integer_fromboolean boolean_dup_items print_integer tag_exec_863 (exec_dup (integer_swap print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times boolean_frominteger exec_swap (boolean_shove integer_div) ())))))
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.292
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 437 437 155 155 155 114 154 437 155)
Population mean number of elite cases: 2.35
Count of perfect (error zero) individuals by case: (154 437 437 155 155 155 114 154 437 155)
Population mean number of perfect (error zero) cases: 2.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times})
Best program: (integer_rot in2 integer_fromboolean print_integer boolean_dup_items boolean_dup_items tag_exec_863 (exec_dup (integer_swap exec_when (boolean_stackdepth exec_pop ()) exec_y_when_autoconstructing (integer_dup_times))))
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 14
Size: 20
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.647
Median total errors in population: 7
Error averages by case: (0.846 0.563 0.563 0.845 0.845 0.845 0.886 0.846 0.563 0.845)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.886
Average program size in population (points): 18.817
Average percent parens in population: 0.211
Minimum age in population: 54.49197463272139
Maximum age in population: 60.31738839397076
Average age in population: 58.23988299287132
Median age in population: 58.33953047353134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 18108745
--- Timings ---
Current time: 1559583654710 milliseconds
Total Time:         119.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.4 seconds, 69.9%
Fitness Testing:     19.1 seconds, 16.0%
Report:              16.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 boolean_or print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 boolean_or print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 4 555 276 937 937 555 276 102 276)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (102 4 555 276 937 937 555 276 102 276)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 integer_add print_integer exec_eq print_exec (boolean_or integer_eq integer_rot))
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.98
Median total errors in population: 6
Error averages by case: (0.898 0.996 0.445 0.724 0.063 0.063 0.445 0.724 0.898 0.724)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 14.904
Average program size in population (points): 21.595
Average percent parens in population: 0.259
Minimum age in population: 56.80953175867035
Maximum age in population: 61.70900370860909
Average age in population: 59.81142073099235
Median age in population: 59.84887772876755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.419
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.389
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 18394240
--- Timings ---
Current time: 1559583657083 milliseconds
Total Time:         121.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.3 seconds, 70.1%
Fitness Testing:     19.4 seconds, 15.9%
Report:              16.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_142} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2})
Lexicase best program: (exec_k (in2 print_integer) (tag_exec_142 () exec_pop (integer_eq in2 boolean_stackdepth exec_do*count () print_boolean integer_flush integer_shove) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times exec_yankdup) () (in4 boolean_pop) integer_add print_boolean exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2) ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 42
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 1, :instruction tag_exec_142} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 2, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_96} {:close 0, :instruction in2})
Zero cases best program: (exec_k (in2 print_integer) (tag_exec_142 () exec_pop (integer_eq in2 boolean_stackdepth exec_do*count () print_boolean integer_flush integer_shove) boolean_shove exec_empty exec_dup_items in1 print_integer exec_s_when_autoconstructing (integer_dup integer_lt integer_dup_times exec_yankdup) () (in4 boolean_pop) integer_add print_boolean exec_k_when_autoconstructing (boolean_dup_items integer_empty tagged_96 in2) ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 42
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (383 220 383 383 220 220 231 231 231 220)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (383 220 383 383 220 220 231 231 231 220)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot})
Best program: (exec_eq boolean_not integer_dup_items integer_dup_items integer_eq integer_empty boolean_stackdepth exec_pop () boolean_stackdepth boolean_swap exec_do*range (exec_k (in2 print_integer integer_rot) ()))
Errors: [1 0 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.278
Median total errors in population: 7
Error averages by case: (0.617 0.78 0.617 0.617 0.78 0.78 0.769 0.769 0.769 0.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.825
Average program size in population (points): 17.362
Average percent parens in population: 0.202
Minimum age in population: 57.80953175867035
Maximum age in population: 63.11641508634148
Average age in population: 61.39097995877072
Median age in population: 61.48354986009417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 18556698
--- Timings ---
Current time: 1559583659138 milliseconds
Total Time:         123.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.0 seconds, 70.4%
Fitness Testing:     19.6 seconds, 15.8%
Report:              16.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_and integer_gt exec_swap (boolean_yank boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_not integer_div exec_s_when_autoconstructing () () ())) ())) ())
Lexicase best errors: [0 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.393
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_and integer_gt exec_swap (boolean_yank boolean_swap exec_do*range (exec_k (in2 print_integer exec_y (exec_y_when_autoconstructing (integer_dup_times integer_div) integer_fromboolean boolean_not integer_div exec_s_when_autoconstructing () () ())) ())) ())
Zero cases best errors: [0 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.393
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 275 947 380 380 379 292 292 275 1)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (380 275 947 380 380 379 292 292 275 1)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 0, :instruction in2} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_shove})
Best program: (exec_eq exec_flush integer_dup_items integer_eq exec_s (exec_when (boolean_stackdepth exec_pop ()) boolean_pop integer_dup_times boolean_swap exec_do*range (exec_k (in2 print_integer) (exec_y (exec_shove ())))) () ())
Errors: [0 1 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 17
Size: 28
Percent parens: 0.393
--- Population Statistics ---
Average total errors in population: 6.399
Median total errors in population: 7
Error averages by case: (0.62 0.725 0.053 0.62 0.62 0.621 0.708 0.708 0.725 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.592
Average program size in population (points): 17.237
Average percent parens in population: 0.212
Minimum age in population: 58.80953175867035
Maximum age in population: 64.76433713401593
Average age in population: 62.87910590235904
Median age in population: 62.94885348075195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.42
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.385
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 18771063
--- Timings ---
Current time: 1559583661616 milliseconds
Total Time:         126.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.1 seconds, 70.6%
Fitness Testing:     19.8 seconds, 15.7%
Report:              17.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_rot in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_rot in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 119 212 183 183 183 183 947 120 950)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (183 119 212 183 183 183 183 947 120 950)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (exec_y_when_autoconstructing (integer_stackdepth) in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.737
Median total errors in population: 7
Error averages by case: (0.817 0.881 0.788 0.817 0.817 0.817 0.817 0.053 0.88 0.05)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.542
Average program size in population (points): 17.678
Average percent parens in population: 0.243
Minimum age in population: 60.70131765975384
Maximum age in population: 66.18264457086957
Average age in population: 64.21000911983091
Median age in population: 64.25818911515091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.409
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.372
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 19012873
--- Timings ---
Current time: 1559583664050 milliseconds
Total Time:         128.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.2 seconds, 70.9%
Fitness Testing:     20.1 seconds, 15.6%
Report:              17.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (exec_s_when_autoconstructing (boolean_dup_times exec_do*count (integer_mod boolean_and in4) exec_noop print_integer exec_y (exec_y_when_autoconstructing ())) () ())
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.412
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (exec_s_when_autoconstructing (boolean_dup_times exec_do*count (integer_mod boolean_and in4) exec_noop print_integer exec_y (exec_y_when_autoconstructing ())) () ())
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.412
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 132 964 568 3 132 3 132 568 3)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (396 132 964 568 3 132 3 132 568 3)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 integer_add print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.099
Median total errors in population: 7
Error averages by case: (0.604 0.868 0.036 0.432 0.997 0.868 0.997 0.868 0.432 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.777
Average program size in population (points): 10.673
Average percent parens in population: 0.170
Minimum age in population: 62.5622916952766
Maximum age in population: 67.87374839989639
Average age in population: 65.59777327936769
Median age in population: 65.66697470676445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 220
Genome diversity (% unique genomes):	 0.248
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.219
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 19093872
--- Timings ---
Current time: 1559583666392 milliseconds
Total Time:         131.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.3 seconds, 71.2%
Fitness Testing:     20.2 seconds, 15.5%
Report:              17.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 boolean_or print_integer integer_max integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 boolean_or print_integer integer_max integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 964 214 394 356 1000 967 964 1000 394)
Population mean number of elite cases: 6.47
Count of perfect (error zero) individuals by case: (214 964 214 394 356 0 967 964 0 394)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 in3 print_integer print_boolean integer_gt boolean_or integer_rot)
Errors: [0 0 0 1 1 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 9
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.533
Median total errors in population: 5
Error averages by case: (0.786 0.036 0.786 0.606 0.644 1.0 0.033 0.036 1.0 0.606)
Error minima by case: (0 0 0 0 0 1 0 0 1 0)
Average genome size in population (length): 9.042
Average program size in population (points): 11.518
Average percent parens in population: 0.199
Minimum age in population: 64.69949777201441
Maximum age in population: 69.05927237964778
Average age in population: 67.07481060968001
Median age in population: 67.1100371592297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.239
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.202
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 19200422
--- Timings ---
Current time: 1559583668328 milliseconds
Total Time:         132.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.0 seconds, 71.5%
Fitness Testing:     20.4 seconds, 15.3%
Report:              17.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [1 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [1 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 368 402 185 955 368 554 956 402 402)
Population mean number of elite cases: 4.78
Count of perfect (error zero) individuals by case: (185 368 402 185 955 368 554 956 402 402)
Population mean number of perfect (error zero) cases: 4.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_676} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and boolean_and in4 in3 print_integer exec_eq tagged_676 boolean_or integer_eq integer_rot)
Errors: [1 1 0 1 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 5.223
Median total errors in population: 5
Error averages by case: (0.815 0.632 0.598 0.815 0.045 0.632 0.446 0.044 0.598 0.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.091
Average program size in population (points): 11.223
Average percent parens in population: 0.174
Minimum age in population: 65.7037657277242
Maximum age in population: 70.61733458941569
Average age in population: 68.68418969682054
Median age in population: 68.7380947091242
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.289
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.252
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 19301300
--- Timings ---
Current time: 1559583670579 milliseconds
Total Time:         135.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.0 seconds, 71.8%
Fitness Testing:     20.5 seconds, 15.2%
Report:              17.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [0 1 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [0 1 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (953 287 292 1 373 1 292 287 373 1)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (953 287 292 1 373 1 292 287 373 1)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [0 1 1 0 1 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.14
Median total errors in population: 7
Error averages by case: (0.047 0.713 0.708 0.999 0.627 0.999 0.708 0.713 0.627 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.833
Average program size in population (points): 11.061
Average percent parens in population: 0.191
Minimum age in population: 67.03622817737096
Maximum age in population: 72.03480099787194
Average age in population: 70.1683356174353
Median age in population: 70.24549679167107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.301
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.264
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 19406130
--- Timings ---
Current time: 1559583672677 milliseconds
Total Time:         137.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        98.9 seconds, 72.0%
Fitness Testing:     20.7 seconds, 15.1%
Report:              17.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_676} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and boolean_and in4 in3 print_integer exec_eq tagged_676 boolean_or integer_eq integer_rot)
Lexicase best errors: [1 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 11
Percent parens: 0.091
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction boolean_and} {:close 2, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction tagged_676} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and boolean_and in4 in3 print_integer exec_eq tagged_676 boolean_or integer_eq integer_rot)
Zero cases best errors: [1 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 11
Percent parens: 0.091
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 222 223 207 222 222 522 223 315 315)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (223 222 223 207 222 222 522 223 315 315)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or in4 integer_rot)
Errors: [1 0 1 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 7.306
Median total errors in population: 7
Error averages by case: (0.777 0.778 0.777 0.793 0.778 0.778 0.478 0.777 0.685 0.685)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.565
Average program size in population (points): 11.018
Average percent parens in population: 0.217
Minimum age in population: 68.43151924976974
Maximum age in population: 73.72088631118284
Average age in population: 72.07731264097758
Median age in population: 72.23612754893512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 282
Genome diversity (% unique genomes):	 0.298
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 287
Syntactic diversity (% unique Push programs):	 0.259
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 19501360
--- Timings ---
Current time: 1559583674825 milliseconds
Total Time:         139.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.8 seconds, 72.3%
Fitness Testing:     20.8 seconds, 14.9%
Report:              17.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_or in4 boolean_or print_integer integer_max boolean_shove boolean_or integer_eq integer_rot)
Lexicase best errors: [0 1 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_or in4 boolean_or print_integer integer_max boolean_shove boolean_or integer_eq integer_rot)
Zero cases best errors: [0 1 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 122 122 279 309 252 309 122 252 252)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (309 122 122 279 309 252 309 122 252 252)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [1 1 1 1 1 0 1 1 0 0]
Total: 7
Mean: 0.7
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.672
Median total errors in population: 7
Error averages by case: (0.691 0.878 0.878 0.721 0.691 0.748 0.691 0.878 0.748 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.786
Average program size in population (points): 11.02
Average percent parens in population: 0.197
Minimum age in population: 70.24118648083476
Maximum age in population: 75.49372342479838
Average age in population: 73.54153685838794
Median age in population: 73.62036098725359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.329
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.28
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 19614316
--- Timings ---
Current time: 1559583677280 milliseconds
Total Time:         141.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.0 seconds, 72.6%
Fitness Testing:     20.9 seconds, 14.8%
Report:              17.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 boolean_or print_integer integer_max integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 10
Percent parens: 0.100
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 boolean_or print_integer integer_max integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 10
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 285 291 101 953 101 852 101 285 291)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (291 285 291 101 953 101 852 101 285 291)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 exec_y (print_integer exec_eq print_boolean boolean_or integer_eq integer_rot))
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 6.449
Median total errors in population: 6
Error averages by case: (0.709 0.715 0.709 0.899 0.047 0.899 0.148 0.899 0.715 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.648
Average program size in population (points): 11.257
Average percent parens in population: 0.227
Minimum age in population: 71.24118648083476
Maximum age in population: 77.24372342479838
Average age in population: 75.04996842495515
Median age in population: 75.1396588993407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.319
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.278
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 19719751
--- Timings ---
Current time: 1559583680318 milliseconds
Total Time:         144.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.1 seconds, 72.9%
Fitness Testing:     21.1 seconds, 14.6%
Report:              17.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_701} {:close 0, :instruction exec_dup})
Lexicase best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or boolean_dup_items print_integer tag_exec_701 (exec_dup ()))
Lexicase best errors: [1 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 14
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_701} {:close 0, :instruction exec_dup})
Zero cases best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or boolean_dup_items print_integer tag_exec_701 (exec_dup ()))
Zero cases best errors: [1 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 14
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 1000 373 1000 333 333 1000 373 261 333)
Population mean number of elite cases: 5.38
Count of perfect (error zero) individuals by case: (373 0 373 0 333 333 0 373 261 333)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 exec_empty print_integer exec_eq integer_gt integer_add exec_pop () integer_rot)
Errors: [0 1 0 1 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 7.621
Median total errors in population: 7
Error averages by case: (0.627 1.0 0.627 1.0 0.667 0.667 1.0 0.627 0.739 0.667)
Error minima by case: (0 1 0 1 0 0 1 0 0 0)
Average genome size in population (length): 8.974
Average program size in population (points): 11.187
Average percent parens in population: 0.189
Minimum age in population: 72.24118648083476
Maximum age in population: 78.61467295983803
Average age in population: 76.47777173842562
Median age in population: 76.57075005056171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.301
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.264
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 19823166
--- Timings ---
Current time: 1559583682651 milliseconds
Total Time:         147.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.2 seconds, 72.8%
Fitness Testing:     21.2 seconds, 14.4%
Report:              18.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_925} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_925 (exec_dup ()))
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_925} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_925 (exec_dup ()))
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (128 128 396 3 396 956 399 432 128 128)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (128 128 396 3 396 956 399 432 128 128)
Population mean number of perfect (error zero) cases: 3.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.906
Median total errors in population: 6
Error averages by case: (0.872 0.872 0.604 0.997 0.604 0.044 0.601 0.568 0.872 0.872)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.128
Average program size in population (points): 11.119
Average percent parens in population: 0.171
Minimum age in population: 73.24118648083476
Maximum age in population: 80.19710340746855
Average age in population: 77.9562308105996
Median age in population: 78.03763686805046
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.325
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.286
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 19940268
--- Timings ---
Current time: 1559583684781 milliseconds
Total Time:         149.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.1 seconds, 73.0%
Fitness Testing:     21.4 seconds, 14.3%
Report:              18.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 627
Test mean error for best: 0.62700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 52                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 99                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 89                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 81                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 86                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: 60                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: 95                 
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 86                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: 52                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 88                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 39                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 15                 
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt})
Lexicase best program: (in3 print_integer exec_eq integer_gt)
Lexicase best errors: [0 1 0 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt})
Zero cases best program: (in3 print_integer exec_eq integer_gt)
Zero cases best errors: [0 1 0 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (301 103 845 434 301 434 301 110 434 301)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (301 103 845 434 301 434 301 110 434 301)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 in3 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [0 1 0 1 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 9
Size: 10
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 6.436
Median total errors in population: 6
Error averages by case: (0.699 0.897 0.155 0.566 0.699 0.566 0.699 0.89 0.566 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.598
Average program size in population (points): 11.355
Average percent parens in population: 0.236
Minimum age in population: 74.24118648083476
Maximum age in population: 81.40441856263486
Average age in population: 79.42664146571971
Median age in population: 79.46411033239798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.298
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.26
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 20028000
--- Timings ---
Current time: 1559583686951 milliseconds
Total Time:         151.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.0 seconds, 73.3%
Fitness Testing:     21.5 seconds, 14.2%
Report:              18.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_945} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 exec_empty exec_stackdepth boolean_dup_items print_integer tag_exec_945 (exec_dup ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 11
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_945} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 exec_empty exec_stackdepth boolean_dup_items print_integer tag_exec_945 (exec_dup ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 11
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 962 105 115 471 492 272 377 272 471)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (115 962 105 115 471 492 272 377 272 471)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.348
Median total errors in population: 7
Error averages by case: (0.885 0.038 0.895 0.885 0.529 0.508 0.728 0.623 0.728 0.529)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.81
Average program size in population (points): 11.288
Average percent parens in population: 0.212
Minimum age in population: 77.49578263521299
Maximum age in population: 82.8621007954611
Average age in population: 80.88933550502549
Median age in population: 80.97348364514444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.306
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.263
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 20114393
--- Timings ---
Current time: 1559583689186 milliseconds
Total Time:         153.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.0 seconds, 73.5%
Fitness Testing:     21.7 seconds, 14.1%
Report:              19.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -32                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: 73                 
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 81                 
Correct output: 21                  | Program output: 76                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 54                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: 94                 
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: 67                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 94                 
Correct output: -57                 | Program output: 60                 
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -5                 
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: 93                 
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 88                 
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 48                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: 28                 
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: 36                 
Correct output: -2                  | Program output: 100                
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 79                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer integer_yankdup exec_dup ())
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 10
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_stackdepth boolean_dup_items print_integer integer_yankdup exec_dup ())
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 10
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (310 214 183 255 214 183 255 183 183 255)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (310 214 183 255 214 183 255 183 183 255)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_925} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () integer_fromboolean print_integer tag_exec_925 (exec_dup ()))
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.765
Median total errors in population: 8
Error averages by case: (0.69 0.786 0.817 0.745 0.786 0.817 0.745 0.817 0.817 0.745)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.719
Average program size in population (points): 11.469
Average percent parens in population: 0.230
Minimum age in population: 79.73210562958668
Maximum age in population: 84.48800762794785
Average age in population: 82.37110725190605
Median age in population: 82.43969946948734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.329
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.283
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 20206267
--- Timings ---
Current time: 1559583691426 milliseconds
Total Time:         156.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.0 seconds, 73.7%
Fitness Testing:     21.8 seconds, 14.0%
Report:              19.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 955 94 94 94 287 955 94 388 388)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (287 955 94 94 94 287 955 94 388 388)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.364
Median total errors in population: 6
Error averages by case: (0.713 0.045 0.906 0.906 0.906 0.713 0.045 0.906 0.612 0.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.662
Average program size in population (points): 11.462
Average percent parens in population: 0.234
Minimum age in population: 81.03513758022814
Maximum age in population: 85.98341213497987
Average age in population: 83.88302580842719
Median age in population: 83.9403029321055
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.287
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 20304314
--- Timings ---
Current time: 1559583693875 milliseconds
Total Time:         158.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.2 seconds, 74.0%
Fitness Testing:     22.0 seconds, 13.9%
Report:              19.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [1 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [1 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 219 219 480 249 480 699 249 1000 1000)
Population mean number of elite cases: 5.59
Count of perfect (error zero) individuals by case: (0 219 219 480 249 480 699 249 0 0)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [1 1 1 0 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.405
Median total errors in population: 7
Error averages by case: (1.0 0.781 0.781 0.52 0.751 0.52 0.301 0.751 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 8.479
Average program size in population (points): 11.665
Average percent parens in population: 0.269
Minimum age in population: 82.03513758022814
Maximum age in population: 87.43048817598932
Average age in population: 85.34600057687896
Median age in population: 85.42930657834358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 132
Genome diversity (% unique genomes):	 0.272
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 168
Syntactic diversity (% unique Push programs):	 0.245
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 20387150
--- Timings ---
Current time: 1559583696230 milliseconds
Total Time:         160.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.3 seconds, 74.2%
Fitness Testing:     22.1 seconds, 13.7%
Report:              19.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 71                 
Correct output: 14                  | Program output: 65                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 75                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 94                 
Correct output: 68                  | Program output: 74                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 56                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: 70                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 94                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 85                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: 94                 
Correct output: 54                  | Program output: 100                
Correct output: -35                 | Program output: 89                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: 43                 
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 56                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: 68                 
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 71                 
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: 45                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 63                 
Correct output: -100                | Program output: 67                 
Correct output: -92                 | Program output: 14                 
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 84                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -24                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 100                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in2 exec_while () exec_empty print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in2 exec_while () exec_empty print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 970 337 364 269 969 364 364)
Population mean number of elite cases: 6.64
Count of perfect (error zero) individuals by case: (0 0 0 970 337 364 269 969 364 364)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 integer_empty exec_stackdepth boolean_dup_items print_integer tag_exec_863 (exec_dup ()))
Errors: [1 1 1 0 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 8
Size: 11
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 6.363
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.03 0.663 0.636 0.731 0.031 0.636 0.636)
Error minima by case: (1 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 8.606
Average program size in population (points): 11.56
Average percent parens in population: 0.249
Minimum age in population: 83.03513758022814
Maximum age in population: 88.7962479984791
Average age in population: 86.8328498933469
Median age in population: 86.91081297757928
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.283
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.246
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 20476046
--- Timings ---
Current time: 1559583698307 milliseconds
Total Time:         162.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.2 seconds, 74.4%
Fitness Testing:     22.2 seconds, 13.6%
Report:              19.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 boolean_dup in4 boolean_shove print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Lexicase best errors: [0 0 1 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction in4} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 boolean_dup in4 boolean_shove print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Zero cases best errors: [0 0 1 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 201 1 1 582 201 583 1 955 201)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (201 201 1 1 582 201 583 1 955 201)
Population mean number of perfect (error zero) cases: 2.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in4} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (integer_rot in2 in1 exec_while () boolean_dup_items in4 boolean_or print_integer integer_empty integer_gt boolean_or integer_eq integer_rot)
Errors: [0 0 1 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 13
Size: 15
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 7.073
Median total errors in population: 7
Error averages by case: (0.799 0.799 0.999 0.999 0.418 0.799 0.417 0.999 0.045 0.799)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.478
Average program size in population (points): 11.563
Average percent parens in population: 0.263
Minimum age in population: 85.1899220339399
Maximum age in population: 90.32680647663786
Average age in population: 88.29792934728721
Median age in population: 88.33666659991184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.297
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.257
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 20559824
--- Timings ---
Current time: 1559583700503 milliseconds
Total Time:         165.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       123.1 seconds, 74.6%
Fitness Testing:     22.3 seconds, 13.5%
Report:              19.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer})
Lexicase best program: (boolean_stackdepth in4 integer_add print_integer)
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 5
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in4} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer})
Zero cases best program: (boolean_stackdepth in4 integer_add print_integer)
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 5
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (417 322 4 417 417 4 322 953 956 4)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (417 322 4 417 417 4 322 953 956 4)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_and} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot})
Best program: (boolean_and in4 print_integer exec_eq integer_gt boolean_or integer_eq integer_rot)
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 9
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 6.184
Median total errors in population: 6
Error averages by case: (0.583 0.678 0.996 0.583 0.583 0.996 0.678 0.047 0.044 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.918
Average program size in population (points): 10.78
Average percent parens in population: 0.165
Minimum age in population: 86.66623267519714
Maximum age in population: 91.4745039925275
Average age in population: 89.8626969820509
Median age in population: 89.85497632975803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 291
Genome diversity (% unique genomes):	 0.282
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 298
Syntactic diversity (% unique Push programs):	 0.241
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 20649629
--- Timings ---
Current time: 1559583702437 milliseconds
Total Time:         167.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.8 seconds, 74.7%
Fitness Testing:     22.5 seconds, 13.5%
Report:              19.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 78                 
Correct output: 12                  | Program output: 78                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 92                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 96                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 94                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 95                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 71                 
Correct output: 33                  | Program output: 78                 
Correct output: -99                 | Program output: 96                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: 86                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: 82                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: 74                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: 43                 
Correct output: -65                 | Program output: -2                 
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: 69                 
Correct output: -12                 | Program output: 36                 
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 80                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -61                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 80                 
Correct output: -96                 | Program output: 9                  
Correct output: -55                 | Program output: 91                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: 73                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 56                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 9                  
Correct output: -81                 | Program output: 97                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: 58                 
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot})
Lexicase best program: (boolean_and in4 integer_gt print_integer exec_eq integer_gt exec_while (integer_dec integer_rot))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 11
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_rot})
Zero cases best program: (boolean_and in4 integer_gt print_integer exec_eq integer_gt exec_while (integer_dec integer_rot))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 11
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 738 380 351 351 379 357 351 380 380)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (380 738 380 351 351 379 357 351 380 380)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tag_integer_817} {:close 0, :instruction in4} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush})
Best program: (tag_integer_817 in4 boolean_rot print_integer exec_eq print_integer exec_while (integer_eq boolean_flush))
Errors: [0 0 0 1 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 9
Size: 11
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.953
Median total errors in population: 5
Error averages by case: (0.62 0.262 0.62 0.649 0.649 0.621 0.643 0.649 0.62 0.62)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.683
Average program size in population (points): 11.066
Average percent parens in population: 0.207
Minimum age in population: 88.74178326004537
Maximum age in population: 92.99934502746179
Average age in population: 91.56760508317163
Median age in population: 91.55130735471396
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 324
Genome diversity (% unique genomes):	 0.22
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.193
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 20737128
--- Timings ---
Current time: 1559583704519 milliseconds
Total Time:         169.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.7 seconds, 74.9%
Fitness Testing:     22.6 seconds, 13.4%
Report:              19.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (442 446 446 446 508 957 446 446 446 954)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (442 446 446 446 508 957 446 446 446 954)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.463
Median total errors in population: 7
Error averages by case: (0.558 0.554 0.554 0.554 0.492 0.043 0.554 0.554 0.554 0.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.6
Average program size in population (points): 11.332
Average percent parens in population: 0.234
Minimum age in population: 90.25595363004076
Maximum age in population: 94.63849714863684
Average age in population: 93.08299521212156
Median age in population: 93.17442918216213
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 375
Genome diversity (% unique genomes):	 0.234
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 388
Syntactic diversity (% unique Push programs):	 0.212
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 20824075
--- Timings ---
Current time: 1559583706695 milliseconds
Total Time:         171.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.6 seconds, 75.1%
Fitness Testing:     22.7 seconds, 13.3%
Report:              19.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 15
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 15
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 117 117 841 117 1000 117 953 836)
Population mean number of elite cases: 6.10
Count of perfect (error zero) individuals by case: (0 0 117 117 841 117 0 117 953 836)
Population mean number of perfect (error zero) cases: 3.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Errors: [1 1 0 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 8
Size: 15
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 6.902
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.883 0.883 0.159 0.883 1.0 0.883 0.047 0.164)
Error minima by case: (1 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 8.24
Average program size in population (points): 11.952
Average percent parens in population: 0.309
Minimum age in population: 92.34147288758993
Maximum age in population: 96.55153657280331
Average age in population: 94.72725198004824
Median age in population: 94.79617156071261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 663
Genome diversity (% unique genomes):	 0.19
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 692
Syntactic diversity (% unique Push programs):	 0.172
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 20897275
--- Timings ---
Current time: 1559583708830 milliseconds
Total Time:         173.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.5 seconds, 75.3%
Fitness Testing:     22.8 seconds, 13.2%
Report:              19.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 50                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 58                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 42                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 25                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -85                
Correct output: -19                 | Program output: 16                 
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: 18                 
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -30                
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -40                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -72                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 18                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: 58                 
Correct output: -79                 | Program output: 3                  
Correct output: -100                | Program output: 42                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: 35                 
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (947 183 183 1000 960 947 946 961 766 183)
Population mean number of elite cases: 7.08
Count of perfect (error zero) individuals by case: (947 183 183 0 960 947 946 961 766 183)
Population mean number of perfect (error zero) cases: 6.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ()))
Errors: [0 0 0 1 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.924
Median total errors in population: 4
Error averages by case: (0.053 0.817 0.817 1.0 0.04 0.053 0.054 0.039 0.234 0.817)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 8.028
Average program size in population (points): 14.45
Average percent parens in population: 0.441
Minimum age in population: 94.4047064859541
Maximum age in population: 97.94048643664885
Average age in population: 96.02904594081079
Median age in population: 96.18480421967698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 713
Genome diversity (% unique genomes):	 0.134
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 715
Syntactic diversity (% unique Push programs):	 0.123
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 20970020
--- Timings ---
Current time: 1559583710610 milliseconds
Total Time:         175.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.1 seconds, 75.4%
Fitness Testing:     23.0 seconds, 13.1%
Report:              20.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 15
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 15
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (246 246 247 703 246 955 703 246 703 1000)
Population mean number of elite cases: 5.30
Count of perfect (error zero) individuals by case: (246 246 247 703 246 955 703 246 703 0)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 8
Size: 15
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 5.705
Median total errors in population: 6
Error averages by case: (0.754 0.754 0.753 0.297 0.754 0.045 0.297 0.754 0.297 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 8.186
Average program size in population (points): 12.974
Average percent parens in population: 0.365
Minimum age in population: 95.46794008431826
Maximum age in population: 99.50705062751865
Average age in population: 97.6307772890387
Median age in population: 97.63456157337961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 488
Genome diversity (% unique genomes):	 0.141
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 512
Syntactic diversity (% unique Push programs):	 0.128
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 21044281
--- Timings ---
Current time: 1559583712691 milliseconds
Total Time:         177.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.9 seconds, 75.5%
Fitness Testing:     23.1 seconds, 13.0%
Report:              20.2 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 15
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 15
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (961 1000 1000 961 607 1000 607 607 344 344)
Population mean number of elite cases: 7.43
Count of perfect (error zero) individuals by case: (961 0 0 961 607 0 607 607 344 344)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Errors: [0 1 1 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 8
Size: 15
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 5.569
Median total errors in population: 5
Error averages by case: (0.039 1.0 1.0 0.039 0.393 1.0 0.393 0.393 0.656 0.656)
Error minima by case: (0 1 1 0 0 1 0 0 0 0)
Average genome size in population (length): 8.166
Average program size in population (points): 14.09
Average percent parens in population: 0.414
Minimum age in population: 97.10155411481226
Maximum age in population: 100.8274666764484
Average age in population: 99.05684596710338
Median age in population: 99.11244587179806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 516
Genome diversity (% unique genomes):	 0.156
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 520
Syntactic diversity (% unique Push programs):	 0.145
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 21115558
--- Timings ---
Current time: 1559583715204 milliseconds
Total Time:         179.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.2 seconds, 75.7%
Fitness Testing:     23.2 seconds, 12.9%
Report:              20.3 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 15
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 15
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (957 563 563 563 564 963 964 563 957 1000)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (957 563 563 563 564 963 964 563 957 0)
Population mean number of perfect (error zero) cases: 6.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 8
Size: 15
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 3.343
Median total errors in population: 1
Error averages by case: (0.043 0.437 0.437 0.437 0.436 0.037 0.036 0.437 0.043 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 8.187
Average program size in population (points): 13.934
Average percent parens in population: 0.406
Minimum age in population: 98.10155411481226
Maximum age in population: 102.5677571014739
Average age in population: 100.5904694368898
Median age in population: 100.6703324464323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 435
Genome diversity (% unique genomes):	 0.194
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 440
Syntactic diversity (% unique Push programs):	 0.183
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 21187738
--- Timings ---
Current time: 1559583717078 milliseconds
Total Time:         181.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.8 seconds, 75.9%
Fitness Testing:     23.3 seconds, 12.9%
Report:              20.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -27                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 74                 
Correct output: 12                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 78                 
Correct output: 21                  | Program output: 40                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 49                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 72                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 24                 
Correct output: 7                   | Program output: 36                 
Correct output: 33                  | Program output: 71                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -75                
Correct output: -19                 | Program output: -10                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 93                 
Correct output: -57                 | Program output: 56                 
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -15                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: 50                 
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -2                 
Correct output: -65                 | Program output: -32                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -25                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -62                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -50                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: 64                 
Correct output: -17                 | Program output: 7                  
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -2                 
Correct output: -2                  | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: 37                 
Correct output: -92                 | Program output: 0                  
Correct output: -81                 | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 15
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 15
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (968 967 952 952 1 1000 952 1 952 1)
Population mean number of elite cases: 6.75
Count of perfect (error zero) individuals by case: (968 967 952 952 1 0 952 1 952 1)
Population mean number of perfect (error zero) cases: 5.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1 exec_while () integer_min print_integer tag_exec_863 (exec_dup ())) () ())
Errors: [0 0 0 0 1 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 8
Size: 15
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 4.254
Median total errors in population: 4
Error averages by case: (0.032 0.033 0.048 0.048 0.999 1.0 0.048 0.999 0.048 0.999)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 8.162
Average program size in population (points): 15.143
Average percent parens in population: 0.461
Minimum age in population: 99.46794008431826
Maximum age in population: 103.8708150290491
Average age in population: 102.0476471712896
Median age in population: 102.1244441446393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 689
Genome diversity (% unique genomes):	 0.161
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 692
Syntactic diversity (% unique Push programs):	 0.153
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.009
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 21260150
--- Timings ---
Current time: 1559583719330 milliseconds
Total Time:         183.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.8 seconds, 76.0%
Fitness Testing:     23.5 seconds, 12.8%
Report:              20.5 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 408
Test mean error for best: 0.40800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 53                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 81                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 27                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -64                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -47                
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -12                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 11                 
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 37                 
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 45                 
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -17                
Correct output: -14                 | Program output: -1                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 41                 
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: 65                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: 40                 
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 integer_dup_times exec_rot (in1 in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 integer_dup_times exec_rot (in1 in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 955 485 483 465 464 2 2 2 965)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (2 955 485 483 465 464 2 2 2 965)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 integer_dup_times exec_rot (in1 in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Errors: [0 0 1 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 10
Size: 16
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.175
Median total errors in population: 6
Error averages by case: (0.998 0.045 0.515 0.517 0.535 0.536 0.998 0.998 0.998 0.035)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.164
Average program size in population (points): 16.211
Average percent parens in population: 0.436
Minimum age in population: 100.6076680083647
Maximum age in population: 105.2460442179949
Average age in population: 103.5278662037293
Median age in population: 103.5643109094764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 411
Genome diversity (% unique genomes):	 0.174
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 418
Syntactic diversity (% unique Push programs):	 0.165
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 21343918
--- Timings ---
Current time: 1559583721021 milliseconds
Total Time:         185.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.2 seconds, 76.1%
Fitness Testing:     23.6 seconds, 12.7%
Report:              20.6 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 7                  
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -26                
Correct output: -77                 | Program output: 14                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 68                 
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -30                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: -51                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -38                
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -40                
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 84                 
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 13
Percent parens: 0.462
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 13
Percent parens: 0.462
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 249 484 483 250 250 484 225 954 484)
Population mean number of elite cases: 4.09
Count of perfect (error zero) individuals by case: (223 249 484 483 250 250 484 225 954 484)
Population mean number of perfect (error zero) cases: 4.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 7
Size: 13
Percent parens: 0.462
--- Population Statistics ---
Average total errors in population: 5.914
Median total errors in population: 6
Error averages by case: (0.777 0.751 0.516 0.517 0.75 0.75 0.516 0.775 0.046 0.516)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.522
Average program size in population (points): 15.989
Average percent parens in population: 0.405
Minimum age in population: 102.2022500555479
Maximum age in population: 106.5340814501813
Average age in population: 105.3104963163367
Median age in population: 105.1627873366983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 436
Genome diversity (% unique genomes):	 0.176
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 438
Syntactic diversity (% unique Push programs):	 0.169
Total error diversity:				 0.007
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 21434283
--- Timings ---
Current time: 1559583722997 milliseconds
Total Time:         187.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       142.9 seconds, 76.2%
Fitness Testing:     23.8 seconds, 12.7%
Report:              20.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 353 960 353 960 353 948 948 353)
Population mean number of elite cases: 7.23
Count of perfect (error zero) individuals by case: (0 0 353 960 353 960 353 948 948 353)
Population mean number of perfect (error zero) cases: 5.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 integer_dup_times exec_rot (in2 in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Errors: [1 1 0 0 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 10
Size: 16
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 4.772
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.647 0.04 0.647 0.04 0.647 0.052 0.052 0.647)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 7.932
Average program size in population (points): 13.641
Average percent parens in population: 0.421
Minimum age in population: 106.0675721195042
Maximum age in population: 108.3367552130908
Average age in population: 107.4345644582574
Median age in population: 107.3367552130908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 562
Genome diversity (% unique genomes):	 0.106
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 563
Syntactic diversity (% unique Push programs):	 0.101
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 21504048
--- Timings ---
Current time: 1559583725086 milliseconds
Total Time:         189.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       144.7 seconds, 76.3%
Fitness Testing:     23.9 seconds, 12.6%
Report:              20.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 58                 
Correct output: 1                   | Program output: 86                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 46                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 81                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: 10                 
Correct output: -98                 | Program output: -2                 
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -28                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 90                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: 46                 
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: 73                 
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 49                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 13                 
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -3                 
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -9                 
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: 10                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (integer_rot in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 16
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (integer_rot in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 16
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 961 974 974 961 954 954 954 954 954)
Population mean number of elite cases: 9.64
Count of perfect (error zero) individuals by case: (0 961 974 974 961 954 954 954 954 954)
Population mean number of perfect (error zero) cases: 8.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (integer_rot in2 integer_dup_times exec_rot (in2 in3) (integer_min print_integer tag_exec_863 (exec_dup ())) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 10
Size: 16
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 1.36
Median total errors in population: 1
Error averages by case: (1.0 0.039 0.026 0.026 0.039 0.046 0.046 0.046 0.046 0.046)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 9.497
Average program size in population (points): 14.704
Average percent parens in population: 0.347
Minimum age in population: 107.0675721195042
Maximum age in population: 110.2021636662975
Average age in population: 108.5061247995517
Median age in population: 108.6047025402765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.133
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 222
Syntactic diversity (% unique Push programs):	 0.126
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 21590810
--- Timings ---
Current time: 1559583727514 milliseconds
Total Time:         192.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       146.9 seconds, 76.5%
Fitness Testing:     24.0 seconds, 12.5%
Report:              21.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 474
Test mean error for best: 0.47400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -98                
Correct output: 5                   | Program output: 11                 
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: 95                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 92                 
Correct output: 3                   | Program output: 80                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 90                 
Correct output: 27                  | Program output: 60                 
Correct output: 21                  | Program output: 30                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 96                 
Correct output: 13                  | Program output: 31                 
Correct output: 19                  | Program output: 41                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: 44                 
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -23                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -4                 
Correct output: -91                 | Program output: -6                 
Correct output: -77                 | Program output: 33                 
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: 95                 
Correct output: -74                 | Program output: 73                 
Correct output: -28                 | Program output: 77                 
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: 15                 
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: 66                 
Correct output: -48                 | Program output: 71                 
Correct output: -94                 | Program output: 11                 
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 20                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: 70                 
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -80                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -2                 
Correct output: -14                 | Program output: 24                 
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: 70                 
Correct output: -93                 | Program output: -9                 
Correct output: -87                 | Program output: -59                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: 36                 
Correct output: -85                 | Program output: -37                
Correct output: -64                 | Program output: 99                 
Correct output: -69                 | Program output: -32                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: 90                 
Correct output: -78                 | Program output: 42                 
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: 61                 
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Lexicase best program: (in4 in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer) ())
Lexicase best errors: [1 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 12
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Zero cases best program: (in4 in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer) ())
Zero cases best errors: [1 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 12
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 977 962 977 960 1000 972 1 958)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (0 1 977 962 977 960 0 972 1 958)
Population mean number of perfect (error zero) cases: 5.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer})
Best program: (in4 in2 integer_dup_times exec_rot (integer_rot in3) (integer_min print_integer) ())
Errors: [1 0 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 8
Size: 12
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.192
Median total errors in population: 4
Error averages by case: (1.0 0.999 0.023 0.038 0.023 0.04 1.0 0.028 0.999 0.042)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 9.427
Average program size in population (points): 14.55
Average percent parens in population: 0.346
Minimum age in population: 108.0675721195042
Maximum age in population: 111.653433103287
Average age in population: 109.9436339281612
Median age in population: 109.9962591552178
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 237
Genome diversity (% unique genomes):	 0.156
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.145
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 21676689
--- Timings ---
Current time: 1559583729189 milliseconds
Total Time:         193.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       148.3 seconds, 76.6%
Fitness Testing:     24.2 seconds, 12.5%
Report:              21.1 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Lexicase best errors: [0 0 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 22
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Zero cases best errors: [0 0 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 22
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (655 654 655 1 308 1 955 310 955 1)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (655 654 655 1 308 1 955 310 955 1)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [0 0 0 1 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 5.505
Median total errors in population: 5
Error averages by case: (0.345 0.346 0.345 0.999 0.692 0.999 0.045 0.69 0.045 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 8.482
Average program size in population (points): 12.881
Average percent parens in population: 0.338
Minimum age in population: 109.0675721195042
Maximum age in population: 113.2149288055646
Average age in population: 112.0499336054664
Median age in population: 111.8526939448317
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 613
Genome diversity (% unique genomes):	 0.137
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 615
Syntactic diversity (% unique Push programs):	 0.127
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 21758702
--- Timings ---
Current time: 1559583730959 milliseconds
Total Time:         195.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       149.8 seconds, 76.6%
Fitness Testing:     24.3 seconds, 12.4%
Report:              21.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 in4 in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 24
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 in4 in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 24
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (662 683 662 670 277 683 680 662 277 969)
Population mean number of elite cases: 6.22
Count of perfect (error zero) individuals by case: (662 683 662 670 277 683 680 662 277 969)
Population mean number of perfect (error zero) cases: 6.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 3.775
Median total errors in population: 2
Error averages by case: (0.338 0.317 0.338 0.33 0.723 0.317 0.32 0.338 0.723 0.031)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.558
Average program size in population (points): 19.108
Average percent parens in population: 0.387
Minimum age in population: 112.15169183625
Maximum age in population: 114.8526939448317
Average age in population: 113.1524774371958
Median age in population: 113.15169183625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 573
Genome diversity (% unique genomes):	 0.151
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 574
Syntactic diversity (% unique Push programs):	 0.149
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 21868637
--- Timings ---
Current time: 1559583733075 milliseconds
Total Time:         197.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       151.6 seconds, 76.7%
Fitness Testing:     24.5 seconds, 12.4%
Report:              21.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 22
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 22
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (731 732 224 712 714 712 957 733 716 714)
Population mean number of elite cases: 6.95
Count of perfect (error zero) individuals by case: (731 732 224 712 714 712 957 733 716 714)
Population mean number of perfect (error zero) cases: 6.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in3) (integer_min integer_dup_times) (exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 3.055
Median total errors in population: 1
Error averages by case: (0.269 0.268 0.776 0.288 0.286 0.288 0.043 0.267 0.284 0.286)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 11.858
Average program size in population (points): 19.678
Average percent parens in population: 0.391
Minimum age in population: 113.15169183625
Maximum age in population: 116.4274434176862
Average age in population: 114.605120119194
Median age in population: 114.65169183625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 581
Genome diversity (% unique genomes):	 0.184
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 582
Syntactic diversity (% unique Push programs):	 0.18
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 21983651
--- Timings ---
Current time: 1559583735128 milliseconds
Total Time:         199.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       153.3 seconds, 76.8%
Fitness Testing:     24.7 seconds, 12.4%
Report:              21.6 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 208
Test mean error for best: 0.20800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: 40                 
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: 24                 
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: 88                 
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 72                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 78                 
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 65                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 36                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -73                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: 77                 
Correct output: 54                  | Program output: 69                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: 66                 
Correct output: -94                 | Program output: -81                
Correct output: -62                 | Program output: -59                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: 14                 
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -86                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: 11                 
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -59                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -38                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 in2 integer_dup_times exec_rot (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ()) () ())
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 29
Percent parens: 0.414
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 in2 integer_dup_times exec_rot (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ()) () ())
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 29
Percent parens: 0.414
--- Lexicase Population Statistics ---
Count of elite individuals by case: (824 829 100 830 810 100 851 823 866 956)
Population mean number of elite cases: 6.99
Count of perfect (error zero) individuals by case: (824 829 100 830 810 100 851 823 866 956)
Population mean number of perfect (error zero) cases: 6.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in3) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 3.011
Median total errors in population: 2
Error averages by case: (0.176 0.171 0.9 0.17 0.19 0.9 0.149 0.177 0.134 0.044)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 12.573
Average program size in population (points): 21.032
Average percent parens in population: 0.400
Minimum age in population: 114.15169183625
Maximum age in population: 117.9648181541135
Average age in population: 116.0096073885014
Median age in population: 116.0769423633954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 604
Genome diversity (% unique genomes):	 0.226
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 605
Syntactic diversity (% unique Push programs):	 0.223
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 22103048
--- Timings ---
Current time: 1559583737131 milliseconds
Total Time:         201.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       154.9 seconds, 76.8%
Fitness Testing:     24.9 seconds, 12.3%
Report:              21.7 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 23                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 57                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 17                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 51                 
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -7                 
Correct output: -98                 | Program output: -65                
Correct output: -79                 | Program output: -58                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: 29                 
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -43                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: 10                 
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -20                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: 16                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: 19                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: 34                 
Correct output: -50                 | Program output: -29                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -74                
Correct output: -64                 | Program output: -28                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -38                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -63                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -4                 
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -74                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_yank exec_rot (in3) (integer_min in1 exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 22
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_yank exec_rot (in3) (integer_min in1 exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 22
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (565 917 918 959 959 918 566 947 356 357)
Population mean number of elite cases: 7.46
Count of perfect (error zero) individuals by case: (565 917 918 959 959 918 566 947 356 357)
Population mean number of perfect (error zero) cases: 7.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (exec_yank exec_rot (in3) (integer_min in1 exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 2.538
Median total errors in population: 2
Error averages by case: (0.435 0.083 0.082 0.041 0.041 0.082 0.434 0.053 0.644 0.643)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.084
Average program size in population (points): 22.063
Average percent parens in population: 0.407
Minimum age in population: 115.15169183625
Maximum age in population: 119.3958802587545
Average age in population: 117.8125099464874
Median age in population: 117.90169183625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 376
Genome diversity (% unique genomes):	 0.254
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 378
Syntactic diversity (% unique Push programs):	 0.249
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 22227539
--- Timings ---
Current time: 1559583739216 milliseconds
Total Time:         203.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       156.7 seconds, 76.9%
Fitness Testing:     25.0 seconds, 12.3%
Report:              21.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Lexicase best program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 22
Percent parens: 0.409
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Zero cases best program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 22
Percent parens: 0.409
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 934 961 960 934 966 458 473 969 957)
Population mean number of elite cases: 8.09
Count of perfect (error zero) individuals by case: (473 934 961 960 934 966 458 473 969 957)
Population mean number of perfect (error zero) cases: 8.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction tag_exec_863} {:close 0, :instruction exec_dup})
Best program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 13
Size: 22
Percent parens: 0.409
--- Population Statistics ---
Average total errors in population: 1.915
Median total errors in population: 2
Error averages by case: (0.527 0.066 0.039 0.04 0.066 0.034 0.542 0.527 0.031 0.043)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 13.077
Average program size in population (points): 22.065
Average percent parens in population: 0.407
Minimum age in population: 116.15169183625
Maximum age in population: 121.1645676269681
Average age in population: 119.286065433358
Median age in population: 119.3143797316091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 257
Genome diversity (% unique genomes):	 0.261
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 259
Syntactic diversity (% unique Push programs):	 0.251
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 22352899
--- Timings ---
Current time: 1559583741334 milliseconds
Total Time:         205.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       158.4 seconds, 77.0%
Fitness Testing:     25.2 seconds, 12.3%
Report:              22.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 79
Successful program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 22


Auto-simplifying with starting size: 22
step: 0
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 500
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1000
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 1500
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2000
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 2500
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3000
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 3500
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4000
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 4500
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

step: 5000
program: (in4 exec_rot (in1) (integer_min integer_dup_times exec_rot (in2 in3) (integer_min integer_min print_integer tag_exec_863 (exec_dup ())) ()) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 22

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -100                | Program output: -100               
Correct output: 5                   | Program output: 5                  
Correct output: -42                 | Program output: -42                
Correct output: 51                  | Program output: 51                 
Correct output: -80                 | Program output: -80                
Correct output: -54                 | Program output: -54                
Correct output: -1                  | Program output: -1                 
Correct output: -43                 | Program output: -43                
Correct output: -93                 | Program output: -93                
Correct output: -97                 | Program output: -97                
Correct output: 42                  | Program output: 42                 
Correct output: -59                 | Program output: -59                
Correct output: 56                  | Program output: 56                 
Correct output: 100                 | Program output: 100                
Correct output: 8                   | Program output: 8                  
Correct output: 12                  | Program output: 12                 
Correct output: 12                  | Program output: 12                 
Correct output: 14                  | Program output: 14                 
Correct output: 40                  | Program output: 40                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 27                  | Program output: 27                 
Correct output: 21                  | Program output: 21                 
Correct output: 10                  | Program output: 10                 
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: 68                  | Program output: 68                 
Correct output: 52                  | Program output: 52                 
Correct output: 13                  | Program output: 13                 
Correct output: 19                  | Program output: 19                 
Correct output: 19                  | Program output: 19                 
Correct output: 7                   | Program output: 7                  
Correct output: 33                  | Program output: 33                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -98                 | Program output: -98                
Correct output: -79                 | Program output: -79                
Correct output: -96                 | Program output: -96                
Correct output: -19                 | Program output: -19                
Correct output: -77                 | Program output: -77                
Correct output: -91                 | Program output: -91                
Correct output: -77                 | Program output: -77                
Correct output: -95                 | Program output: -95                
Correct output: -58                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -28                 | Program output: -28                
Correct output: -57                 | Program output: -57                
Correct output: -71                 | Program output: -71                
Correct output: -100                | Program output: -100               
Correct output: -93                 | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: 54                  | Program output: 54                 
Correct output: -35                 | Program output: -35                
Correct output: -44                 | Program output: -44                
Correct output: -48                 | Program output: -48                
Correct output: -94                 | Program output: -94                
Correct output: -62                 | Program output: -62                
Correct output: -48                 | Program output: -48                
Correct output: -65                 | Program output: -65                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: -12                 | Program output: -12                
Correct output: -85                 | Program output: -85                
Correct output: -87                 | Program output: -87                
Correct output: -96                 | Program output: -96                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -79                 | Program output: -79                
Correct output: -14                 | Program output: -14                
Correct output: -96                 | Program output: -96                
Correct output: -55                 | Program output: -55                
Correct output: -93                 | Program output: -93                
Correct output: -87                 | Program output: -87                
Correct output: -17                 | Program output: -17                
Correct output: -27                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -50                 | Program output: -50                
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -69                 | Program output: -69                
Correct output: -2                  | Program output: -2                 
Correct output: -79                 | Program output: -79                
Correct output: -100                | Program output: -100               
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -43                 | Program output: -43                
Correct output: -17                 | Program output: -17                
Correct output: -78                 | Program output: -78                
Correct output: -55                 | Program output: -55                
Correct output: -100                | Program output: -100               
Correct output: -48                 | Program output: -48                
Correct output: -81                 | Program output: -81                
;;******************************
