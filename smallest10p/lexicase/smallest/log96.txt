Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -53 85 85] -53] [[-14 -14 -14 15] -14] [[15 25 15 15] 15] [[68 68 -81 68] -81] [[21 21 -8 21] -8] [[49 49 52 49] 49] [[-77 -77 -77 43] -77] [[27 -41 -41 -41] -41] [[48 -67 -67 -67] -67] [[-39 47 -39 -39] -39] [(70 70 70 70) 70] [(-50 -50 -50 -50) -50] [(-54 -54 -54 -54) -54] [(22 22 22 22) 22] [(0 0 0 0) 0] [(73 2 47 49) 2] [(35 3 33 12) 3] [(87 10 51 22) 10] [(64 21 87 0) 0] [(38 46 48 15) 15] [(83 26 22 1) 1] [(67 66 42 61) 42] [(35 11 84 62) 11] [(67 27 100 18) 18] [(34 75 82 10) 10] [(58 80 15 25) 15] [(7 19 31 64) 7] [(64 17 73 49) 17] [(60 19 27 70) 19] [(73 97 75 10) 10] [(32 33 18 15) 15] [(26 25 47 25) 25] [(43 80 2 38) 2] [(76 49 29 52) 29] [(48 22 11 24) 11] [(-42 19 44 6) -42] [(61 51 -57 -98) -98] [(-60 -3 82 -76) -76] [(36 32 -64 99) -64] [(31 13 1 75) 1] [(-73 -75 -56 30) -75] [(-54 -73 -54 -60) -73] [(-92 17 87 85) -92] [(94 -91 -82 47) -91] [(-1 74 76 99) -1] [(10 -97 15 76) -97] [(-100 97 -74 9) -100] [(95 15 87 -81) -81] [(-73 39 46 14) -73] [(-6 82 63 62) -6] [(-6 82 -26 -88) -88] [(50 -70 -8 14) -70] [(63 -98 51 -46) -98] [(-2 -84 -66 64) -84] [(4 -80 -89 -75) -89] [(68 4 -59 -76) -76] [(-33 -12 -9 87) -33] [(-39 39 -46 31) -46] [(-21 -39 -69 20) -69] [(74 81 92 -18) -18] [(-29 -58 20 -22) -58] [(65 -41 -84 -82) -84] [(-50 -74 -90 -46) -90] [(-90 -40 -52 5) -90] [(-55 -51 -86 -36) -86] [(91 32 -88 71) -88] [(57 48 -79 9) -79] [(12 -48 59 -84) -84] [(56 20 -65 98) -65] [(-24 22 40 52) -24] [(-85 52 -75 66) -85] [(59 31 -50 -64) -64] [(49 -87 42 -18) -87] [(-15 28 88 -61) -61] [(3 -14 41 -93) -93] [(32 -11 50 -90) -90] [(49 -69 33 -80) -80] [(69 -26 -46 -62) -62] [(12 -92 10 -78) -92] [(-48 -22 70 -12) -48] [(-10 -89 30 69) -89] [(7 -43 77 6) -43] [(-95 -22 -69 -99) -99] [(-98 59 -76 -49) -98] [(-42 -68 32 98) -68] [(-66 29 -4 -83) -83] [(36 -76 100 96) -76] [(82 61 76 -58) -58] [(-84 -31 88 73) -84] [(-92 38 22 -51) -92] [(34 41 -54 3) -54] [(22 -79 -47 84) -79] [(-72 20 87 -4) -72] [(7 -30 79 72) -30] [(-35 51 -47 -34) -47])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[85 -53 85 85] -53]
Train Case:   6 | Input/Output: [[-14 -14 -14 15] -14]
Train Case:   7 | Input/Output: [[15 25 15 15] 15]
Train Case:   8 | Input/Output: [[68 68 -81 68] -81]
Train Case:   9 | Input/Output: [[21 21 -8 21] -8]
Train Case:  10 | Input/Output: [[49 49 52 49] 49]
Train Case:  11 | Input/Output: [[-77 -77 -77 43] -77]
Train Case:  12 | Input/Output: [[27 -41 -41 -41] -41]
Train Case:  13 | Input/Output: [[48 -67 -67 -67] -67]
Train Case:  14 | Input/Output: [[-39 47 -39 -39] -39]
Train Case:  15 | Input/Output: [(70 70 70 70) 70]
Train Case:  16 | Input/Output: [(-50 -50 -50 -50) -50]
Train Case:  17 | Input/Output: [(-54 -54 -54 -54) -54]
Train Case:  18 | Input/Output: [(22 22 22 22) 22]
Train Case:  19 | Input/Output: [(0 0 0 0) 0]
Train Case:  20 | Input/Output: [(73 2 47 49) 2]
Train Case:  21 | Input/Output: [(35 3 33 12) 3]
Train Case:  22 | Input/Output: [(87 10 51 22) 10]
Train Case:  23 | Input/Output: [(64 21 87 0) 0]
Train Case:  24 | Input/Output: [(38 46 48 15) 15]
Train Case:  25 | Input/Output: [(83 26 22 1) 1]
Train Case:  26 | Input/Output: [(67 66 42 61) 42]
Train Case:  27 | Input/Output: [(35 11 84 62) 11]
Train Case:  28 | Input/Output: [(67 27 100 18) 18]
Train Case:  29 | Input/Output: [(34 75 82 10) 10]
Train Case:  30 | Input/Output: [(58 80 15 25) 15]
Train Case:  31 | Input/Output: [(7 19 31 64) 7]
Train Case:  32 | Input/Output: [(64 17 73 49) 17]
Train Case:  33 | Input/Output: [(60 19 27 70) 19]
Train Case:  34 | Input/Output: [(73 97 75 10) 10]
Train Case:  35 | Input/Output: [(32 33 18 15) 15]
Train Case:  36 | Input/Output: [(26 25 47 25) 25]
Train Case:  37 | Input/Output: [(43 80 2 38) 2]
Train Case:  38 | Input/Output: [(76 49 29 52) 29]
Train Case:  39 | Input/Output: [(48 22 11 24) 11]
Train Case:  40 | Input/Output: [(-42 19 44 6) -42]
Train Case:  41 | Input/Output: [(61 51 -57 -98) -98]
Train Case:  42 | Input/Output: [(-60 -3 82 -76) -76]
Train Case:  43 | Input/Output: [(36 32 -64 99) -64]
Train Case:  44 | Input/Output: [(31 13 1 75) 1]
Train Case:  45 | Input/Output: [(-73 -75 -56 30) -75]
Train Case:  46 | Input/Output: [(-54 -73 -54 -60) -73]
Train Case:  47 | Input/Output: [(-92 17 87 85) -92]
Train Case:  48 | Input/Output: [(94 -91 -82 47) -91]
Train Case:  49 | Input/Output: [(-1 74 76 99) -1]
Train Case:  50 | Input/Output: [(10 -97 15 76) -97]
Train Case:  51 | Input/Output: [(-100 97 -74 9) -100]
Train Case:  52 | Input/Output: [(95 15 87 -81) -81]
Train Case:  53 | Input/Output: [(-73 39 46 14) -73]
Train Case:  54 | Input/Output: [(-6 82 63 62) -6]
Train Case:  55 | Input/Output: [(-6 82 -26 -88) -88]
Train Case:  56 | Input/Output: [(50 -70 -8 14) -70]
Train Case:  57 | Input/Output: [(63 -98 51 -46) -98]
Train Case:  58 | Input/Output: [(-2 -84 -66 64) -84]
Train Case:  59 | Input/Output: [(4 -80 -89 -75) -89]
Train Case:  60 | Input/Output: [(68 4 -59 -76) -76]
Train Case:  61 | Input/Output: [(-33 -12 -9 87) -33]
Train Case:  62 | Input/Output: [(-39 39 -46 31) -46]
Train Case:  63 | Input/Output: [(-21 -39 -69 20) -69]
Train Case:  64 | Input/Output: [(74 81 92 -18) -18]
Train Case:  65 | Input/Output: [(-29 -58 20 -22) -58]
Train Case:  66 | Input/Output: [(65 -41 -84 -82) -84]
Train Case:  67 | Input/Output: [(-50 -74 -90 -46) -90]
Train Case:  68 | Input/Output: [(-90 -40 -52 5) -90]
Train Case:  69 | Input/Output: [(-55 -51 -86 -36) -86]
Train Case:  70 | Input/Output: [(91 32 -88 71) -88]
Train Case:  71 | Input/Output: [(57 48 -79 9) -79]
Train Case:  72 | Input/Output: [(12 -48 59 -84) -84]
Train Case:  73 | Input/Output: [(56 20 -65 98) -65]
Train Case:  74 | Input/Output: [(-24 22 40 52) -24]
Train Case:  75 | Input/Output: [(-85 52 -75 66) -85]
Train Case:  76 | Input/Output: [(59 31 -50 -64) -64]
Train Case:  77 | Input/Output: [(49 -87 42 -18) -87]
Train Case:  78 | Input/Output: [(-15 28 88 -61) -61]
Train Case:  79 | Input/Output: [(3 -14 41 -93) -93]
Train Case:  80 | Input/Output: [(32 -11 50 -90) -90]
Train Case:  81 | Input/Output: [(49 -69 33 -80) -80]
Train Case:  82 | Input/Output: [(69 -26 -46 -62) -62]
Train Case:  83 | Input/Output: [(12 -92 10 -78) -92]
Train Case:  84 | Input/Output: [(-48 -22 70 -12) -48]
Train Case:  85 | Input/Output: [(-10 -89 30 69) -89]
Train Case:  86 | Input/Output: [(7 -43 77 6) -43]
Train Case:  87 | Input/Output: [(-95 -22 -69 -99) -99]
Train Case:  88 | Input/Output: [(-98 59 -76 -49) -98]
Train Case:  89 | Input/Output: [(-42 -68 32 98) -68]
Train Case:  90 | Input/Output: [(-66 29 -4 -83) -83]
Train Case:  91 | Input/Output: [(36 -76 100 96) -76]
Train Case:  92 | Input/Output: [(82 61 76 -58) -58]
Train Case:  93 | Input/Output: [(-84 -31 88 73) -84]
Train Case:  94 | Input/Output: [(-92 38 22 -51) -92]
Train Case:  95 | Input/Output: [(34 41 -54 3) -54]
Train Case:  96 | Input/Output: [(22 -79 -47 84) -79]
Train Case:  97 | Input/Output: [(-72 20 87 -4) -72]
Train Case:  98 | Input/Output: [(7 -30 79 72) -30]
Train Case:  99 | Input/Output: [(-35 51 -47 -34) -47]
Test Case:   0 | Input/Output: [[-70 -70 20 -70] -70]
Test Case:   1 | Input/Output: [[89 89 -38 89] -38]
Test Case:   2 | Input/Output: [[87 72 72 72] 72]
Test Case:   3 | Input/Output: [[58 -63 58 58] -63]
Test Case:   4 | Input/Output: [[84 -46 -46 -46] -46]
Test Case:   5 | Input/Output: [[99 99 99 -37] -37]
Test Case:   6 | Input/Output: [[12 12 12 40] 12]
Test Case:   7 | Input/Output: [[-32 -32 44 -32] -32]
Test Case:   8 | Input/Output: [[86 86 86 -41] -41]
Test Case:   9 | Input/Output: [[-4 -87 -4 -4] -87]
Test Case:  10 | Input/Output: [[99 99 99 99] 99]
Test Case:  11 | Input/Output: [[-77 -77 -77 25] -77]
Test Case:  12 | Input/Output: [[-67 -67 -67 23] -67]
Test Case:  13 | Input/Output: [[10 10 46 10] 10]
Test Case:  14 | Input/Output: [[32 32 -51 32] -51]
Test Case:  15 | Input/Output: [[92 -36 -36 -36] -36]
Test Case:  16 | Input/Output: [[15 -13 -13 -13] -13]
Test Case:  17 | Input/Output: [[98 34 34 34] 34]
Test Case:  18 | Input/Output: [[-45 -45 51 -45] -45]
Test Case:  19 | Input/Output: [[-6 -6 -56 -6] -56]
Test Case:  20 | Input/Output: [[9 9 48 9] 9]
Test Case:  21 | Input/Output: [[71 71 71 68] 68]
Test Case:  22 | Input/Output: [[73 73 0 73] 0]
Test Case:  23 | Input/Output: [[-80 -80 -80 -88] -88]
Test Case:  24 | Input/Output: [[-54 22 -54 -54] -54]
Test Case:  25 | Input/Output: [[7 100 100 100] 7]
Test Case:  26 | Input/Output: [[-94 -93 -94 -94] -94]
Test Case:  27 | Input/Output: [[-85 -85 -33 -85] -85]
Test Case:  28 | Input/Output: [[-73 63 -73 -73] -73]
Test Case:  29 | Input/Output: [[-62 96 -62 -62] -62]
Test Case:  30 | Input/Output: [[19 19 19 26] 19]
Test Case:  31 | Input/Output: [[82 82 82 89] 82]
Test Case:  32 | Input/Output: [[-16 -16 69 -16] -16]
Test Case:  33 | Input/Output: [[-33 12 -33 -33] -33]
Test Case:  34 | Input/Output: [[-57 -57 -57 80] -57]
Test Case:  35 | Input/Output: [[-46 -46 -46 73] -46]
Test Case:  36 | Input/Output: [[36 -62 -62 -62] -62]
Test Case:  37 | Input/Output: [[-17 -68 -17 -17] -68]
Test Case:  38 | Input/Output: [[-77 -50 -50 -50] -77]
Test Case:  39 | Input/Output: [[54 16 16 16] 16]
Test Case:  40 | Input/Output: [[-29 -29 -29 56] -29]
Test Case:  41 | Input/Output: [[36 36 -29 36] -29]
Test Case:  42 | Input/Output: [[-6 30 -6 -6] -6]
Test Case:  43 | Input/Output: [[-23 -78 -23 -23] -78]
Test Case:  44 | Input/Output: [[-75 -90 -90 -90] -90]
Test Case:  45 | Input/Output: [[35 -46 -46 -46] -46]
Test Case:  46 | Input/Output: [[98 98 98 76] 76]
Test Case:  47 | Input/Output: [[22 22 22 -51] -51]
Test Case:  48 | Input/Output: [[27 27 -94 27] -94]
Test Case:  49 | Input/Output: [[-55 49 -55 -55] -55]
Test Case:  50 | Input/Output: [[73 73 73 -70] -70]
Test Case:  51 | Input/Output: [[28 0 0 0] 0]
Test Case:  52 | Input/Output: [[-59 -59 -59 76] -59]
Test Case:  53 | Input/Output: [[32 45 45 45] 32]
Test Case:  54 | Input/Output: [[-63 33 33 33] -63]
Test Case:  55 | Input/Output: [[19 58 58 58] 19]
Test Case:  56 | Input/Output: [[97 31 97 97] 31]
Test Case:  57 | Input/Output: [[-29 -29 -29 80] -29]
Test Case:  58 | Input/Output: [[48 48 6 48] 6]
Test Case:  59 | Input/Output: [[67 67 79 67] 67]
Test Case:  60 | Input/Output: [[55 55 60 55] 55]
Test Case:  61 | Input/Output: [[-13 -13 -13 36] -13]
Test Case:  62 | Input/Output: [[11 11 11 69] 11]
Test Case:  63 | Input/Output: [[4 4 4 69] 4]
Test Case:  64 | Input/Output: [[5 5 5 -54] -54]
Test Case:  65 | Input/Output: [[-10 -10 58 -10] -10]
Test Case:  66 | Input/Output: [[-49 24 24 24] -49]
Test Case:  67 | Input/Output: [[-56 -56 36 -56] -56]
Test Case:  68 | Input/Output: [[48 -9 48 48] -9]
Test Case:  69 | Input/Output: [[-25 -25 -47 -25] -47]
Test Case:  70 | Input/Output: [[-20 -20 2 -20] -20]
Test Case:  71 | Input/Output: [[70 70 70 -20] -20]
Test Case:  72 | Input/Output: [[3 3 3 -74] -74]
Test Case:  73 | Input/Output: [[41 41 41 84] 41]
Test Case:  74 | Input/Output: [[58 56 56 56] 56]
Test Case:  75 | Input/Output: [[-93 -93 -14 -93] -93]
Test Case:  76 | Input/Output: [[-24 9 -24 -24] -24]
Test Case:  77 | Input/Output: [[54 54 54 -20] -20]
Test Case:  78 | Input/Output: [[57 57 -7 57] -7]
Test Case:  79 | Input/Output: [[-21 -21 -85 -21] -85]
Test Case:  80 | Input/Output: [[76 60 60 60] 60]
Test Case:  81 | Input/Output: [[21 18 21 21] 18]
Test Case:  82 | Input/Output: [[9 9 9 -72] -72]
Test Case:  83 | Input/Output: [[-20 -20 -20 3] -20]
Test Case:  84 | Input/Output: [[-87 -87 -11 -87] -87]
Test Case:  85 | Input/Output: [[-78 -37 -78 -78] -78]
Test Case:  86 | Input/Output: [[81 35 81 81] 35]
Test Case:  87 | Input/Output: [[8 8 8 -66] -66]
Test Case:  88 | Input/Output: [[-53 16 -53 -53] -53]
Test Case:  89 | Input/Output: [[12 12 3 12] 3]
Test Case:  90 | Input/Output: [[9 9 -69 9] -69]
Test Case:  91 | Input/Output: [[-93 -52 -93 -93] -93]
Test Case:  92 | Input/Output: [[16 -40 -40 -40] -40]
Test Case:  93 | Input/Output: [[82 82 82 -30] -30]
Test Case:  94 | Input/Output: [[-80 -80 -80 28] -80]
Test Case:  95 | Input/Output: [[-6 -6 -6 -48] -48]
Test Case:  96 | Input/Output: [[-59 -48 -59 -59] -59]
Test Case:  97 | Input/Output: [[-32 53 -32 -32] -32]
Test Case:  98 | Input/Output: [[20 20 -56 20] -56]
Test Case:  99 | Input/Output: [[-76 -56 -56 -56] -76]
Test Case: 100 | Input/Output: [(91 91 91 91) 91]
Test Case: 101 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 102 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 103 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 104 | Input/Output: [(84 84 84 84) 84]
Test Case: 105 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 106 | Input/Output: [(36 36 36 36) 36]
Test Case: 107 | Input/Output: [(60 60 60 60) 60]
Test Case: 108 | Input/Output: [(7 7 7 7) 7]
Test Case: 109 | Input/Output: [(90 90 90 90) 90]
Test Case: 110 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 111 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 112 | Input/Output: [(93 93 93 93) 93]
Test Case: 113 | Input/Output: [(94 94 94 94) 94]
Test Case: 114 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 115 | Input/Output: [(44 44 44 44) 44]
Test Case: 116 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 117 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 118 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 119 | Input/Output: [(53 53 53 53) 53]
Test Case: 120 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 121 | Input/Output: [(59 59 59 59) 59]
Test Case: 122 | Input/Output: [(68 68 68 68) 68]
Test Case: 123 | Input/Output: [(3 3 3 3) 3]
Test Case: 124 | Input/Output: [(30 30 30 30) 30]
Test Case: 125 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 126 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 127 | Input/Output: [(22 22 22 22) 22]
Test Case: 128 | Input/Output: [(3 3 3 3) 3]
Test Case: 129 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 130 | Input/Output: [(76 76 76 76) 76]
Test Case: 131 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 132 | Input/Output: [(21 21 21 21) 21]
Test Case: 133 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 134 | Input/Output: [(23 23 23 23) 23]
Test Case: 135 | Input/Output: [(5 5 5 5) 5]
Test Case: 136 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 137 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 138 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 139 | Input/Output: [(12 12 12 12) 12]
Test Case: 140 | Input/Output: [(93 93 93 93) 93]
Test Case: 141 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 142 | Input/Output: [(70 70 70 70) 70]
Test Case: 143 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 144 | Input/Output: [(23 23 23 23) 23]
Test Case: 145 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 146 | Input/Output: [(84 84 84 84) 84]
Test Case: 147 | Input/Output: [(21 21 21 21) 21]
Test Case: 148 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 149 | Input/Output: [(64 64 64 64) 64]
Test Case: 150 | Input/Output: [(21 21 21 21) 21]
Test Case: 151 | Input/Output: [(37 37 37 37) 37]
Test Case: 152 | Input/Output: [(60 60 60 60) 60]
Test Case: 153 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 154 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 155 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 156 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 157 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 158 | Input/Output: [(24 24 24 24) 24]
Test Case: 159 | Input/Output: [(8 8 8 8) 8]
Test Case: 160 | Input/Output: [(70 70 70 70) 70]
Test Case: 161 | Input/Output: [(64 64 64 64) 64]
Test Case: 162 | Input/Output: [(77 77 77 77) 77]
Test Case: 163 | Input/Output: [(55 55 55 55) 55]
Test Case: 164 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 165 | Input/Output: [(67 67 67 67) 67]
Test Case: 166 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 167 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 168 | Input/Output: [(64 64 64 64) 64]
Test Case: 169 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 170 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 171 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 172 | Input/Output: [(80 80 80 80) 80]
Test Case: 173 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 174 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 175 | Input/Output: [(43 43 43 43) 43]
Test Case: 176 | Input/Output: [(7 7 7 7) 7]
Test Case: 177 | Input/Output: [(64 64 64 64) 64]
Test Case: 178 | Input/Output: [(86 86 86 86) 86]
Test Case: 179 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 180 | Input/Output: [(66 66 66 66) 66]
Test Case: 181 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 182 | Input/Output: [(95 95 95 95) 95]
Test Case: 183 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 184 | Input/Output: [(67 67 67 67) 67]
Test Case: 185 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 186 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 187 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 188 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 189 | Input/Output: [(96 96 96 96) 96]
Test Case: 190 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 191 | Input/Output: [(81 81 81 81) 81]
Test Case: 192 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 193 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 194 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 195 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 196 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 197 | Input/Output: [(6 6 6 6) 6]
Test Case: 198 | Input/Output: [(56 56 56 56) 56]
Test Case: 199 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 200 | Input/Output: [(93 61 99 14) 14]
Test Case: 201 | Input/Output: [(97 74 64 53) 53]
Test Case: 202 | Input/Output: [(84 66 92 26) 26]
Test Case: 203 | Input/Output: [(44 35 98 79) 35]
Test Case: 204 | Input/Output: [(6 20 12 81) 6]
Test Case: 205 | Input/Output: [(87 4 12 72) 4]
Test Case: 206 | Input/Output: [(33 47 38 26) 26]
Test Case: 207 | Input/Output: [(53 17 12 19) 12]
Test Case: 208 | Input/Output: [(75 11 80 17) 11]
Test Case: 209 | Input/Output: [(36 2 11 81) 2]
Test Case: 210 | Input/Output: [(15 9 24 80) 9]
Test Case: 211 | Input/Output: [(91 3 8 6) 3]
Test Case: 212 | Input/Output: [(51 80 82 100) 51]
Test Case: 213 | Input/Output: [(30 73 66 98) 30]
Test Case: 214 | Input/Output: [(51 83 65 31) 31]
Test Case: 215 | Input/Output: [(86 33 28 43) 28]
Test Case: 216 | Input/Output: [(82 86 53 32) 32]
Test Case: 217 | Input/Output: [(57 93 64 57) 57]
Test Case: 218 | Input/Output: [(87 60 61 75) 60]
Test Case: 219 | Input/Output: [(29 53 19 44) 19]
Test Case: 220 | Input/Output: [(78 16 22 43) 16]
Test Case: 221 | Input/Output: [(13 30 80 13) 13]
Test Case: 222 | Input/Output: [(5 82 50 3) 3]
Test Case: 223 | Input/Output: [(36 34 81 79) 34]
Test Case: 224 | Input/Output: [(63 23 93 10) 10]
Test Case: 225 | Input/Output: [(42 75 94 12) 12]
Test Case: 226 | Input/Output: [(38 12 89 11) 11]
Test Case: 227 | Input/Output: [(59 75 70 21) 21]
Test Case: 228 | Input/Output: [(93 53 16 61) 16]
Test Case: 229 | Input/Output: [(32 91 73 98) 32]
Test Case: 230 | Input/Output: [(88 8 19 95) 8]
Test Case: 231 | Input/Output: [(99 53 84 58) 53]
Test Case: 232 | Input/Output: [(61 62 38 37) 37]
Test Case: 233 | Input/Output: [(61 63 21 54) 21]
Test Case: 234 | Input/Output: [(75 3 98 37) 3]
Test Case: 235 | Input/Output: [(54 11 38 78) 11]
Test Case: 236 | Input/Output: [(54 14 7 18) 7]
Test Case: 237 | Input/Output: [(41 18 58 92) 18]
Test Case: 238 | Input/Output: [(89 63 52 36) 36]
Test Case: 239 | Input/Output: [(90 83 30 2) 2]
Test Case: 240 | Input/Output: [(65 15 74 74) 15]
Test Case: 241 | Input/Output: [(49 99 7 96) 7]
Test Case: 242 | Input/Output: [(21 1 78 87) 1]
Test Case: 243 | Input/Output: [(23 93 28 62) 23]
Test Case: 244 | Input/Output: [(33 95 87 49) 33]
Test Case: 245 | Input/Output: [(67 78 65 13) 13]
Test Case: 246 | Input/Output: [(57 71 3 59) 3]
Test Case: 247 | Input/Output: [(24 31 1 45) 1]
Test Case: 248 | Input/Output: [(98 10 88 23) 10]
Test Case: 249 | Input/Output: [(65 70 87 62) 62]
Test Case: 250 | Input/Output: [(73 83 96 24) 24]
Test Case: 251 | Input/Output: [(16 46 6 46) 6]
Test Case: 252 | Input/Output: [(1 96 64 29) 1]
Test Case: 253 | Input/Output: [(35 93 44 46) 35]
Test Case: 254 | Input/Output: [(0 100 19 45) 0]
Test Case: 255 | Input/Output: [(15 75 67 5) 5]
Test Case: 256 | Input/Output: [(58 5 12 82) 5]
Test Case: 257 | Input/Output: [(10 71 83 47) 10]
Test Case: 258 | Input/Output: [(88 10 40 22) 10]
Test Case: 259 | Input/Output: [(84 30 25 56) 25]
Test Case: 260 | Input/Output: [(11 72 92 43) 11]
Test Case: 261 | Input/Output: [(95 13 92 41) 13]
Test Case: 262 | Input/Output: [(14 38 37 48) 14]
Test Case: 263 | Input/Output: [(54 52 39 17) 17]
Test Case: 264 | Input/Output: [(83 18 88 36) 18]
Test Case: 265 | Input/Output: [(78 93 79 89) 78]
Test Case: 266 | Input/Output: [(14 90 4 98) 4]
Test Case: 267 | Input/Output: [(65 75 20 18) 18]
Test Case: 268 | Input/Output: [(21 31 72 78) 21]
Test Case: 269 | Input/Output: [(83 53 23 97) 23]
Test Case: 270 | Input/Output: [(10 9 31 28) 9]
Test Case: 271 | Input/Output: [(16 3 34 5) 3]
Test Case: 272 | Input/Output: [(3 25 12 72) 3]
Test Case: 273 | Input/Output: [(96 60 91 91) 60]
Test Case: 274 | Input/Output: [(50 23 89 58) 23]
Test Case: 275 | Input/Output: [(18 6 45 64) 6]
Test Case: 276 | Input/Output: [(9 63 63 88) 9]
Test Case: 277 | Input/Output: [(58 23 90 93) 23]
Test Case: 278 | Input/Output: [(56 70 94 75) 56]
Test Case: 279 | Input/Output: [(100 19 27 42) 19]
Test Case: 280 | Input/Output: [(67 9 66 83) 9]
Test Case: 281 | Input/Output: [(92 16 35 49) 16]
Test Case: 282 | Input/Output: [(37 18 98 45) 18]
Test Case: 283 | Input/Output: [(4 52 88 79) 4]
Test Case: 284 | Input/Output: [(0 0 16 67) 0]
Test Case: 285 | Input/Output: [(30 33 62 51) 30]
Test Case: 286 | Input/Output: [(88 59 89 47) 47]
Test Case: 287 | Input/Output: [(13 28 45 8) 8]
Test Case: 288 | Input/Output: [(72 93 85 87) 72]
Test Case: 289 | Input/Output: [(10 88 21 42) 10]
Test Case: 290 | Input/Output: [(90 40 79 54) 40]
Test Case: 291 | Input/Output: [(28 75 21 34) 21]
Test Case: 292 | Input/Output: [(77 77 65 88) 65]
Test Case: 293 | Input/Output: [(35 32 47 83) 32]
Test Case: 294 | Input/Output: [(74 37 68 61) 37]
Test Case: 295 | Input/Output: [(80 29 27 88) 27]
Test Case: 296 | Input/Output: [(53 54 47 34) 34]
Test Case: 297 | Input/Output: [(48 39 95 43) 39]
Test Case: 298 | Input/Output: [(34 50 43 6) 6]
Test Case: 299 | Input/Output: [(55 1 70 86) 1]
Test Case: 300 | Input/Output: [(64 78 66 55) 55]
Test Case: 301 | Input/Output: [(64 35 91 100) 35]
Test Case: 302 | Input/Output: [(29 92 76 40) 29]
Test Case: 303 | Input/Output: [(1 81 68 72) 1]
Test Case: 304 | Input/Output: [(91 38 21 2) 2]
Test Case: 305 | Input/Output: [(41 67 74 7) 7]
Test Case: 306 | Input/Output: [(100 69 81 42) 42]
Test Case: 307 | Input/Output: [(1 99 15 43) 1]
Test Case: 308 | Input/Output: [(4 76 49 17) 4]
Test Case: 309 | Input/Output: [(46 94 3 46) 3]
Test Case: 310 | Input/Output: [(99 51 15 33) 15]
Test Case: 311 | Input/Output: [(4 15 67 16) 4]
Test Case: 312 | Input/Output: [(8 38 87 14) 8]
Test Case: 313 | Input/Output: [(55 68 57 84) 55]
Test Case: 314 | Input/Output: [(84 25 67 59) 25]
Test Case: 315 | Input/Output: [(66 67 88 34) 34]
Test Case: 316 | Input/Output: [(73 80 48 74) 48]
Test Case: 317 | Input/Output: [(70 87 53 99) 53]
Test Case: 318 | Input/Output: [(37 74 35 34) 34]
Test Case: 319 | Input/Output: [(76 8 39 15) 8]
Test Case: 320 | Input/Output: [(70 60 48 8) 8]
Test Case: 321 | Input/Output: [(74 64 61 83) 61]
Test Case: 322 | Input/Output: [(42 95 75 33) 33]
Test Case: 323 | Input/Output: [(36 68 15 14) 14]
Test Case: 324 | Input/Output: [(37 25 76 54) 25]
Test Case: 325 | Input/Output: [(95 44 11 22) 11]
Test Case: 326 | Input/Output: [(64 51 46 96) 46]
Test Case: 327 | Input/Output: [(1 9 81 86) 1]
Test Case: 328 | Input/Output: [(72 87 32 18) 18]
Test Case: 329 | Input/Output: [(96 81 86 32) 32]
Test Case: 330 | Input/Output: [(69 20 62 64) 20]
Test Case: 331 | Input/Output: [(36 3 42 9) 3]
Test Case: 332 | Input/Output: [(97 38 61 95) 38]
Test Case: 333 | Input/Output: [(100 20 85 43) 20]
Test Case: 334 | Input/Output: [(39 44 66 4) 4]
Test Case: 335 | Input/Output: [(3 49 47 24) 3]
Test Case: 336 | Input/Output: [(3 16 19 90) 3]
Test Case: 337 | Input/Output: [(24 22 29 76) 22]
Test Case: 338 | Input/Output: [(71 17 6 10) 6]
Test Case: 339 | Input/Output: [(87 71 53 61) 53]
Test Case: 340 | Input/Output: [(17 80 64 92) 17]
Test Case: 341 | Input/Output: [(79 74 46 100) 46]
Test Case: 342 | Input/Output: [(44 98 5 72) 5]
Test Case: 343 | Input/Output: [(87 39 30 88) 30]
Test Case: 344 | Input/Output: [(41 59 25 37) 25]
Test Case: 345 | Input/Output: [(17 31 18 36) 17]
Test Case: 346 | Input/Output: [(21 48 37 71) 21]
Test Case: 347 | Input/Output: [(35 46 15 20) 15]
Test Case: 348 | Input/Output: [(29 12 95 64) 12]
Test Case: 349 | Input/Output: [(75 27 0 19) 0]
Test Case: 350 | Input/Output: [(78 84 74 48) 48]
Test Case: 351 | Input/Output: [(1 96 64 56) 1]
Test Case: 352 | Input/Output: [(50 62 85 48) 48]
Test Case: 353 | Input/Output: [(0 79 52 23) 0]
Test Case: 354 | Input/Output: [(77 6 77 65) 6]
Test Case: 355 | Input/Output: [(14 58 37 93) 14]
Test Case: 356 | Input/Output: [(25 74 73 100) 25]
Test Case: 357 | Input/Output: [(21 69 84 99) 21]
Test Case: 358 | Input/Output: [(79 42 73 95) 42]
Test Case: 359 | Input/Output: [(40 70 84 9) 9]
Test Case: 360 | Input/Output: [(25 8 57 6) 6]
Test Case: 361 | Input/Output: [(3 49 30 45) 3]
Test Case: 362 | Input/Output: [(91 5 7 94) 5]
Test Case: 363 | Input/Output: [(67 26 36 88) 26]
Test Case: 364 | Input/Output: [(50 93 44 15) 15]
Test Case: 365 | Input/Output: [(81 76 72 57) 57]
Test Case: 366 | Input/Output: [(49 31 5 10) 5]
Test Case: 367 | Input/Output: [(14 25 5 72) 5]
Test Case: 368 | Input/Output: [(75 11 0 76) 0]
Test Case: 369 | Input/Output: [(50 94 28 91) 28]
Test Case: 370 | Input/Output: [(80 69 3 80) 3]
Test Case: 371 | Input/Output: [(38 11 24 69) 11]
Test Case: 372 | Input/Output: [(60 71 64 94) 60]
Test Case: 373 | Input/Output: [(48 75 2 12) 2]
Test Case: 374 | Input/Output: [(62 40 94 10) 10]
Test Case: 375 | Input/Output: [(59 10 98 40) 10]
Test Case: 376 | Input/Output: [(8 51 4 66) 4]
Test Case: 377 | Input/Output: [(86 44 15 43) 15]
Test Case: 378 | Input/Output: [(30 82 48 55) 30]
Test Case: 379 | Input/Output: [(68 40 94 64) 40]
Test Case: 380 | Input/Output: [(5 89 30 97) 5]
Test Case: 381 | Input/Output: [(24 44 31 85) 24]
Test Case: 382 | Input/Output: [(11 93 42 47) 11]
Test Case: 383 | Input/Output: [(61 62 99 22) 22]
Test Case: 384 | Input/Output: [(74 21 16 7) 7]
Test Case: 385 | Input/Output: [(56 70 19 68) 19]
Test Case: 386 | Input/Output: [(19 82 26 49) 19]
Test Case: 387 | Input/Output: [(49 7 15 46) 7]
Test Case: 388 | Input/Output: [(43 41 82 73) 41]
Test Case: 389 | Input/Output: [(25 51 96 66) 25]
Test Case: 390 | Input/Output: [(10 2 16 75) 2]
Test Case: 391 | Input/Output: [(8 99 79 42) 8]
Test Case: 392 | Input/Output: [(92 80 63 57) 57]
Test Case: 393 | Input/Output: [(94 61 13 29) 13]
Test Case: 394 | Input/Output: [(27 7 41 84) 7]
Test Case: 395 | Input/Output: [(78 96 45 50) 45]
Test Case: 396 | Input/Output: [(8 58 27 85) 8]
Test Case: 397 | Input/Output: [(58 8 84 80) 8]
Test Case: 398 | Input/Output: [(70 29 59 86) 29]
Test Case: 399 | Input/Output: [(55 14 54 97) 14]
Test Case: 400 | Input/Output: [(56 -36 -2 -36) -36]
Test Case: 401 | Input/Output: [(89 -2 90 72) -2]
Test Case: 402 | Input/Output: [(-84 13 90 -8) -84]
Test Case: 403 | Input/Output: [(98 -26 52 95) -26]
Test Case: 404 | Input/Output: [(56 -1 -21 -91) -91]
Test Case: 405 | Input/Output: [(42 -27 -59 82) -59]
Test Case: 406 | Input/Output: [(-27 15 81 -72) -72]
Test Case: 407 | Input/Output: [(-63 36 96 74) -63]
Test Case: 408 | Input/Output: [(-15 -61 77 -67) -67]
Test Case: 409 | Input/Output: [(-66 -39 -38 -100) -100]
Test Case: 410 | Input/Output: [(37 89 -50 -20) -50]
Test Case: 411 | Input/Output: [(5 -89 79 -56) -89]
Test Case: 412 | Input/Output: [(-69 -21 5 -53) -69]
Test Case: 413 | Input/Output: [(-2 28 -7 -37) -37]
Test Case: 414 | Input/Output: [(-67 80 -1 23) -67]
Test Case: 415 | Input/Output: [(-68 -62 -20 -37) -68]
Test Case: 416 | Input/Output: [(-5 -9 32 62) -9]
Test Case: 417 | Input/Output: [(83 -83 -97 -55) -97]
Test Case: 418 | Input/Output: [(-51 6 69 -41) -51]
Test Case: 419 | Input/Output: [(-40 81 -15 96) -40]
Test Case: 420 | Input/Output: [(58 62 -63 -36) -63]
Test Case: 421 | Input/Output: [(48 96 -92 -17) -92]
Test Case: 422 | Input/Output: [(-100 -33 24 -74) -100]
Test Case: 423 | Input/Output: [(15 79 -40 31) -40]
Test Case: 424 | Input/Output: [(-95 55 -31 15) -95]
Test Case: 425 | Input/Output: [(-79 -39 -94 -82) -94]
Test Case: 426 | Input/Output: [(15 -46 -73 100) -73]
Test Case: 427 | Input/Output: [(85 -59 -46 -41) -59]
Test Case: 428 | Input/Output: [(-77 -43 -30 10) -77]
Test Case: 429 | Input/Output: [(19 63 -54 67) -54]
Test Case: 430 | Input/Output: [(-81 29 -60 98) -81]
Test Case: 431 | Input/Output: [(35 45 -86 26) -86]
Test Case: 432 | Input/Output: [(46 -36 17 12) -36]
Test Case: 433 | Input/Output: [(67 31 -10 -86) -86]
Test Case: 434 | Input/Output: [(-63 -9 -85 93) -85]
Test Case: 435 | Input/Output: [(72 -60 69 -70) -70]
Test Case: 436 | Input/Output: [(48 -90 -37 -66) -90]
Test Case: 437 | Input/Output: [(-13 16 -2 -97) -97]
Test Case: 438 | Input/Output: [(-97 -76 65 18) -97]
Test Case: 439 | Input/Output: [(38 67 51 5) 5]
Test Case: 440 | Input/Output: [(-11 32 30 93) -11]
Test Case: 441 | Input/Output: [(77 -73 71 66) -73]
Test Case: 442 | Input/Output: [(84 25 -6 -22) -22]
Test Case: 443 | Input/Output: [(-53 -5 -50 26) -53]
Test Case: 444 | Input/Output: [(46 -42 -71 100) -71]
Test Case: 445 | Input/Output: [(-67 -98 -67 32) -98]
Test Case: 446 | Input/Output: [(40 -58 -58 1) -58]
Test Case: 447 | Input/Output: [(-13 -88 -25 2) -88]
Test Case: 448 | Input/Output: [(-48 -11 -99 71) -99]
Test Case: 449 | Input/Output: [(-85 16 4 -91) -91]
Test Case: 450 | Input/Output: [(59 -27 -10 27) -27]
Test Case: 451 | Input/Output: [(27 89 -42 42) -42]
Test Case: 452 | Input/Output: [(80 27 82 -78) -78]
Test Case: 453 | Input/Output: [(2 21 27 32) 2]
Test Case: 454 | Input/Output: [(-37 -86 20 -65) -86]
Test Case: 455 | Input/Output: [(-9 -43 25 -6) -43]
Test Case: 456 | Input/Output: [(94 3 -98 15) -98]
Test Case: 457 | Input/Output: [(-78 -93 -42 71) -93]
Test Case: 458 | Input/Output: [(22 19 36 97) 19]
Test Case: 459 | Input/Output: [(-7 -97 12 -58) -97]
Test Case: 460 | Input/Output: [(-1 -36 -79 -96) -96]
Test Case: 461 | Input/Output: [(-64 4 16 -19) -64]
Test Case: 462 | Input/Output: [(-10 79 -14 39) -14]
Test Case: 463 | Input/Output: [(31 71 -7 -4) -7]
Test Case: 464 | Input/Output: [(-31 94 40 39) -31]
Test Case: 465 | Input/Output: [(-63 -37 -89 79) -89]
Test Case: 466 | Input/Output: [(90 39 80 -55) -55]
Test Case: 467 | Input/Output: [(3 96 -28 36) -28]
Test Case: 468 | Input/Output: [(-51 -59 -82 -42) -82]
Test Case: 469 | Input/Output: [(71 14 -24 -67) -67]
Test Case: 470 | Input/Output: [(83 58 97 -61) -61]
Test Case: 471 | Input/Output: [(-14 45 89 88) -14]
Test Case: 472 | Input/Output: [(-84 -45 18 -74) -84]
Test Case: 473 | Input/Output: [(33 9 39 -30) -30]
Test Case: 474 | Input/Output: [(85 -42 37 10) -42]
Test Case: 475 | Input/Output: [(-78 -60 -40 18) -78]
Test Case: 476 | Input/Output: [(-38 -48 -5 13) -48]
Test Case: 477 | Input/Output: [(71 64 72 -7) -7]
Test Case: 478 | Input/Output: [(-100 71 -91 24) -100]
Test Case: 479 | Input/Output: [(-86 19 -85 12) -86]
Test Case: 480 | Input/Output: [(-3 8 -37 -65) -65]
Test Case: 481 | Input/Output: [(5 -87 46 23) -87]
Test Case: 482 | Input/Output: [(37 -92 -97 80) -97]
Test Case: 483 | Input/Output: [(35 -49 40 -91) -91]
Test Case: 484 | Input/Output: [(-99 -49 85 -57) -99]
Test Case: 485 | Input/Output: [(18 60 -62 -6) -62]
Test Case: 486 | Input/Output: [(9 67 -90 52) -90]
Test Case: 487 | Input/Output: [(11 62 -100 -98) -100]
Test Case: 488 | Input/Output: [(-59 77 -70 -62) -70]
Test Case: 489 | Input/Output: [(83 94 -83 29) -83]
Test Case: 490 | Input/Output: [(33 78 59 -58) -58]
Test Case: 491 | Input/Output: [(-38 -35 -85 -48) -85]
Test Case: 492 | Input/Output: [(-34 -7 -8 -19) -34]
Test Case: 493 | Input/Output: [(92 -31 100 -13) -31]
Test Case: 494 | Input/Output: [(-89 -21 65 -62) -89]
Test Case: 495 | Input/Output: [(10 21 47 -26) -26]
Test Case: 496 | Input/Output: [(-60 -63 89 4) -63]
Test Case: 497 | Input/Output: [(7 -5 -46 64) -46]
Test Case: 498 | Input/Output: [(-68 62 74 -65) -68]
Test Case: 499 | Input/Output: [(-41 77 -1 0) -41]
Test Case: 500 | Input/Output: [(26 55 -48 -91) -91]
Test Case: 501 | Input/Output: [(53 -40 -25 27) -40]
Test Case: 502 | Input/Output: [(64 92 49 18) 18]
Test Case: 503 | Input/Output: [(2 16 54 -78) -78]
Test Case: 504 | Input/Output: [(-67 -94 -13 -44) -94]
Test Case: 505 | Input/Output: [(46 -17 46 -32) -32]
Test Case: 506 | Input/Output: [(-47 38 -13 -82) -82]
Test Case: 507 | Input/Output: [(-74 95 50 -32) -74]
Test Case: 508 | Input/Output: [(-90 -62 -1 -90) -90]
Test Case: 509 | Input/Output: [(14 -16 12 -1) -16]
Test Case: 510 | Input/Output: [(92 -58 14 -47) -58]
Test Case: 511 | Input/Output: [(82 -91 -89 34) -91]
Test Case: 512 | Input/Output: [(-56 4 -62 -80) -80]
Test Case: 513 | Input/Output: [(89 12 67 76) 12]
Test Case: 514 | Input/Output: [(55 10 -76 -49) -76]
Test Case: 515 | Input/Output: [(6 -73 3 69) -73]
Test Case: 516 | Input/Output: [(57 -65 -85 78) -85]
Test Case: 517 | Input/Output: [(-89 -47 40 -88) -89]
Test Case: 518 | Input/Output: [(-64 -20 -41 29) -64]
Test Case: 519 | Input/Output: [(37 46 50 28) 28]
Test Case: 520 | Input/Output: [(-21 52 44 -62) -62]
Test Case: 521 | Input/Output: [(-79 29 -40 60) -79]
Test Case: 522 | Input/Output: [(84 -97 24 -87) -97]
Test Case: 523 | Input/Output: [(-14 -71 -93 -1) -93]
Test Case: 524 | Input/Output: [(-60 -86 5 48) -86]
Test Case: 525 | Input/Output: [(-52 36 88 58) -52]
Test Case: 526 | Input/Output: [(-45 72 -81 -80) -81]
Test Case: 527 | Input/Output: [(5 -74 -21 11) -74]
Test Case: 528 | Input/Output: [(-85 50 88 43) -85]
Test Case: 529 | Input/Output: [(-64 -92 42 44) -92]
Test Case: 530 | Input/Output: [(-87 54 85 -27) -87]
Test Case: 531 | Input/Output: [(4 27 81 -21) -21]
Test Case: 532 | Input/Output: [(-44 51 59 87) -44]
Test Case: 533 | Input/Output: [(73 -68 93 7) -68]
Test Case: 534 | Input/Output: [(57 37 69 100) 37]
Test Case: 535 | Input/Output: [(-78 -46 47 -12) -78]
Test Case: 536 | Input/Output: [(-55 -66 76 1) -66]
Test Case: 537 | Input/Output: [(44 -23 26 46) -23]
Test Case: 538 | Input/Output: [(71 -86 20 -7) -86]
Test Case: 539 | Input/Output: [(79 -100 -53 1) -100]
Test Case: 540 | Input/Output: [(-25 51 95 31) -25]
Test Case: 541 | Input/Output: [(20 -33 -42 -37) -42]
Test Case: 542 | Input/Output: [(-97 -86 -60 -22) -97]
Test Case: 543 | Input/Output: [(15 35 99 -80) -80]
Test Case: 544 | Input/Output: [(-92 -87 32 44) -92]
Test Case: 545 | Input/Output: [(91 -7 61 -55) -55]
Test Case: 546 | Input/Output: [(47 76 30 16) 16]
Test Case: 547 | Input/Output: [(1 67 76 35) 1]
Test Case: 548 | Input/Output: [(-48 19 -68 -15) -68]
Test Case: 549 | Input/Output: [(-91 92 82 90) -91]
Test Case: 550 | Input/Output: [(-36 25 59 -95) -95]
Test Case: 551 | Input/Output: [(31 49 -30 -31) -31]
Test Case: 552 | Input/Output: [(-86 40 -66 -54) -86]
Test Case: 553 | Input/Output: [(13 22 99 35) 13]
Test Case: 554 | Input/Output: [(64 34 -88 -15) -88]
Test Case: 555 | Input/Output: [(97 -95 -80 59) -95]
Test Case: 556 | Input/Output: [(99 -47 -55 -88) -88]
Test Case: 557 | Input/Output: [(-91 30 -3 49) -91]
Test Case: 558 | Input/Output: [(46 48 -53 -4) -53]
Test Case: 559 | Input/Output: [(-45 -70 -10 -9) -70]
Test Case: 560 | Input/Output: [(66 59 -95 89) -95]
Test Case: 561 | Input/Output: [(67 -92 -4 -72) -92]
Test Case: 562 | Input/Output: [(-14 -89 -55 55) -89]
Test Case: 563 | Input/Output: [(23 -20 -100 -40) -100]
Test Case: 564 | Input/Output: [(-89 79 73 89) -89]
Test Case: 565 | Input/Output: [(-80 -75 -4 -21) -80]
Test Case: 566 | Input/Output: [(-34 -50 77 17) -50]
Test Case: 567 | Input/Output: [(-93 100 -64 46) -93]
Test Case: 568 | Input/Output: [(-50 100 43 -78) -78]
Test Case: 569 | Input/Output: [(73 -16 60 16) -16]
Test Case: 570 | Input/Output: [(49 -43 70 -82) -82]
Test Case: 571 | Input/Output: [(-81 94 10 16) -81]
Test Case: 572 | Input/Output: [(-47 -20 -92 90) -92]
Test Case: 573 | Input/Output: [(-89 -20 -98 -34) -98]
Test Case: 574 | Input/Output: [(-68 72 70 63) -68]
Test Case: 575 | Input/Output: [(-34 -45 98 7) -45]
Test Case: 576 | Input/Output: [(59 -66 -66 -38) -66]
Test Case: 577 | Input/Output: [(-53 -68 41 55) -68]
Test Case: 578 | Input/Output: [(48 -99 -16 -34) -99]
Test Case: 579 | Input/Output: [(3 85 9 87) 3]
Test Case: 580 | Input/Output: [(6 11 4 39) 4]
Test Case: 581 | Input/Output: [(-29 92 65 65) -29]
Test Case: 582 | Input/Output: [(26 -29 -37 51) -37]
Test Case: 583 | Input/Output: [(33 -37 -61 -44) -61]
Test Case: 584 | Input/Output: [(69 63 -44 -15) -44]
Test Case: 585 | Input/Output: [(62 98 38 -14) -14]
Test Case: 586 | Input/Output: [(-73 63 -81 48) -81]
Test Case: 587 | Input/Output: [(70 34 78 -10) -10]
Test Case: 588 | Input/Output: [(-25 -52 -74 2) -74]
Test Case: 589 | Input/Output: [(-100 -70 -12 -13) -100]
Test Case: 590 | Input/Output: [(18 55 -98 2) -98]
Test Case: 591 | Input/Output: [(32 76 84 -36) -36]
Test Case: 592 | Input/Output: [(54 41 31 100) 31]
Test Case: 593 | Input/Output: [(-25 -6 -93 -85) -93]
Test Case: 594 | Input/Output: [(-48 1 80 89) -48]
Test Case: 595 | Input/Output: [(-25 -94 73 -64) -94]
Test Case: 596 | Input/Output: [(-41 -82 -68 -45) -82]
Test Case: 597 | Input/Output: [(68 36 -72 9) -72]
Test Case: 598 | Input/Output: [(74 -67 -22 41) -67]
Test Case: 599 | Input/Output: [(84 -68 -17 100) -68]
Test Case: 600 | Input/Output: [(-82 -60 22 65) -82]
Test Case: 601 | Input/Output: [(32 19 80 -10) -10]
Test Case: 602 | Input/Output: [(25 -83 49 -35) -83]
Test Case: 603 | Input/Output: [(9 -89 -75 76) -89]
Test Case: 604 | Input/Output: [(-75 72 -47 89) -75]
Test Case: 605 | Input/Output: [(-44 -29 41 -5) -44]
Test Case: 606 | Input/Output: [(14 -45 -100 67) -100]
Test Case: 607 | Input/Output: [(-55 -20 -3 71) -55]
Test Case: 608 | Input/Output: [(-10 52 -57 17) -57]
Test Case: 609 | Input/Output: [(99 6 61 -50) -50]
Test Case: 610 | Input/Output: [(64 71 43 -10) -10]
Test Case: 611 | Input/Output: [(81 70 30 71) 30]
Test Case: 612 | Input/Output: [(23 43 -71 -100) -100]
Test Case: 613 | Input/Output: [(88 46 -61 -21) -61]
Test Case: 614 | Input/Output: [(-16 -7 97 63) -16]
Test Case: 615 | Input/Output: [(-89 -64 -30 -72) -89]
Test Case: 616 | Input/Output: [(25 24 82 -78) -78]
Test Case: 617 | Input/Output: [(-16 65 26 -36) -36]
Test Case: 618 | Input/Output: [(86 -59 -19 27) -59]
Test Case: 619 | Input/Output: [(-24 -75 -47 99) -75]
Test Case: 620 | Input/Output: [(-49 -56 -81 -52) -81]
Test Case: 621 | Input/Output: [(71 -29 -97 -27) -97]
Test Case: 622 | Input/Output: [(-78 -91 -73 47) -91]
Test Case: 623 | Input/Output: [(-6 -62 -45 -33) -62]
Test Case: 624 | Input/Output: [(-49 -71 -85 -87) -87]
Test Case: 625 | Input/Output: [(-14 -4 -34 72) -34]
Test Case: 626 | Input/Output: [(-51 -89 80 11) -89]
Test Case: 627 | Input/Output: [(-24 -44 98 94) -44]
Test Case: 628 | Input/Output: [(89 -1 78 -17) -17]
Test Case: 629 | Input/Output: [(-14 -91 96 -52) -91]
Test Case: 630 | Input/Output: [(-4 -46 -52 -15) -52]
Test Case: 631 | Input/Output: [(-85 -72 14 48) -85]
Test Case: 632 | Input/Output: [(31 -6 -26 36) -26]
Test Case: 633 | Input/Output: [(-52 -42 63 73) -52]
Test Case: 634 | Input/Output: [(47 9 -80 -22) -80]
Test Case: 635 | Input/Output: [(-44 21 -16 -76) -76]
Test Case: 636 | Input/Output: [(-76 -49 -3 98) -76]
Test Case: 637 | Input/Output: [(-5 -9 99 18) -9]
Test Case: 638 | Input/Output: [(61 77 49 78) 49]
Test Case: 639 | Input/Output: [(-37 -3 -39 82) -39]
Test Case: 640 | Input/Output: [(-5 54 12 53) -5]
Test Case: 641 | Input/Output: [(-87 -50 76 -70) -87]
Test Case: 642 | Input/Output: [(50 -61 67 -54) -61]
Test Case: 643 | Input/Output: [(-45 4 -91 -68) -91]
Test Case: 644 | Input/Output: [(-95 -59 82 -47) -95]
Test Case: 645 | Input/Output: [(95 -58 32 -83) -83]
Test Case: 646 | Input/Output: [(-6 -18 22 44) -18]
Test Case: 647 | Input/Output: [(-78 -57 -37 -60) -78]
Test Case: 648 | Input/Output: [(89 1 83 -5) -5]
Test Case: 649 | Input/Output: [(-9 -42 -63 50) -63]
Test Case: 650 | Input/Output: [(20 50 -16 -56) -56]
Test Case: 651 | Input/Output: [(97 64 93 4) 4]
Test Case: 652 | Input/Output: [(-35 -72 -82 -58) -82]
Test Case: 653 | Input/Output: [(95 -37 94 -55) -55]
Test Case: 654 | Input/Output: [(-75 26 10 28) -75]
Test Case: 655 | Input/Output: [(-9 73 53 -90) -90]
Test Case: 656 | Input/Output: [(15 -95 -88 75) -95]
Test Case: 657 | Input/Output: [(77 60 94 1) 1]
Test Case: 658 | Input/Output: [(-7 -75 86 96) -75]
Test Case: 659 | Input/Output: [(70 72 -36 86) -36]
Test Case: 660 | Input/Output: [(82 -98 43 27) -98]
Test Case: 661 | Input/Output: [(-78 -31 8 -38) -78]
Test Case: 662 | Input/Output: [(31 -23 24 -29) -29]
Test Case: 663 | Input/Output: [(-54 -32 -69 -46) -69]
Test Case: 664 | Input/Output: [(5 -7 -72 72) -72]
Test Case: 665 | Input/Output: [(-75 -17 -89 32) -89]
Test Case: 666 | Input/Output: [(-60 -52 82 -84) -84]
Test Case: 667 | Input/Output: [(-26 -69 -90 77) -90]
Test Case: 668 | Input/Output: [(15 -41 -78 33) -78]
Test Case: 669 | Input/Output: [(-83 -9 -62 -93) -93]
Test Case: 670 | Input/Output: [(-53 -58 12 -90) -90]
Test Case: 671 | Input/Output: [(6 -97 -36 -93) -97]
Test Case: 672 | Input/Output: [(71 42 71 72) 42]
Test Case: 673 | Input/Output: [(81 82 -58 66) -58]
Test Case: 674 | Input/Output: [(-49 -40 -82 -73) -82]
Test Case: 675 | Input/Output: [(43 16 86 65) 16]
Test Case: 676 | Input/Output: [(-86 -1 -65 0) -86]
Test Case: 677 | Input/Output: [(-22 45 9 36) -22]
Test Case: 678 | Input/Output: [(-46 77 17 -44) -46]
Test Case: 679 | Input/Output: [(-88 49 8 -90) -90]
Test Case: 680 | Input/Output: [(37 -27 -33 32) -33]
Test Case: 681 | Input/Output: [(-30 -68 77 26) -68]
Test Case: 682 | Input/Output: [(-80 13 -80 -87) -87]
Test Case: 683 | Input/Output: [(44 21 24 85) 21]
Test Case: 684 | Input/Output: [(52 59 59 -45) -45]
Test Case: 685 | Input/Output: [(72 88 -56 -87) -87]
Test Case: 686 | Input/Output: [(39 70 -39 23) -39]
Test Case: 687 | Input/Output: [(-34 43 -86 -85) -86]
Test Case: 688 | Input/Output: [(86 -53 90 -61) -61]
Test Case: 689 | Input/Output: [(-78 63 -98 56) -98]
Test Case: 690 | Input/Output: [(-97 65 -94 76) -97]
Test Case: 691 | Input/Output: [(30 -12 11 -26) -26]
Test Case: 692 | Input/Output: [(-97 -99 32 71) -99]
Test Case: 693 | Input/Output: [(-72 -26 29 -96) -96]
Test Case: 694 | Input/Output: [(-59 85 22 92) -59]
Test Case: 695 | Input/Output: [(89 81 52 38) 38]
Test Case: 696 | Input/Output: [(-77 74 -18 53) -77]
Test Case: 697 | Input/Output: [(19 35 -16 -23) -23]
Test Case: 698 | Input/Output: [(5 71 -65 -70) -70]
Test Case: 699 | Input/Output: [(-66 -82 15 -82) -82]
Test Case: 700 | Input/Output: [(10 -87 -60 -78) -87]
Test Case: 701 | Input/Output: [(37 95 58 -58) -58]
Test Case: 702 | Input/Output: [(-9 -81 74 -51) -81]
Test Case: 703 | Input/Output: [(-85 7 61 -47) -85]
Test Case: 704 | Input/Output: [(39 75 -14 -57) -57]
Test Case: 705 | Input/Output: [(-23 -78 8 -27) -78]
Test Case: 706 | Input/Output: [(-39 53 -65 -92) -92]
Test Case: 707 | Input/Output: [(-32 -44 -12 -12) -44]
Test Case: 708 | Input/Output: [(16 -18 52 44) -18]
Test Case: 709 | Input/Output: [(-55 -50 -10 -99) -99]
Test Case: 710 | Input/Output: [(34 -93 84 45) -93]
Test Case: 711 | Input/Output: [(21 -55 -75 -22) -75]
Test Case: 712 | Input/Output: [(-74 -83 31 -90) -90]
Test Case: 713 | Input/Output: [(47 -91 -99 -8) -99]
Test Case: 714 | Input/Output: [(-4 95 54 -82) -82]
Test Case: 715 | Input/Output: [(-30 13 -99 -59) -99]
Test Case: 716 | Input/Output: [(1 -9 -81 62) -81]
Test Case: 717 | Input/Output: [(86 -10 -98 -43) -98]
Test Case: 718 | Input/Output: [(94 33 45 100) 33]
Test Case: 719 | Input/Output: [(26 95 -98 -64) -98]
Test Case: 720 | Input/Output: [(-56 36 -8 95) -56]
Test Case: 721 | Input/Output: [(-97 -95 92 -47) -97]
Test Case: 722 | Input/Output: [(-15 63 58 95) -15]
Test Case: 723 | Input/Output: [(-48 94 65 21) -48]
Test Case: 724 | Input/Output: [(-58 -27 59 85) -58]
Test Case: 725 | Input/Output: [(-83 -6 14 5) -83]
Test Case: 726 | Input/Output: [(-54 96 76 -67) -67]
Test Case: 727 | Input/Output: [(52 -27 -8 -39) -39]
Test Case: 728 | Input/Output: [(41 83 -6 1) -6]
Test Case: 729 | Input/Output: [(-39 4 -99 -86) -99]
Test Case: 730 | Input/Output: [(-72 48 -95 -32) -95]
Test Case: 731 | Input/Output: [(14 -38 -22 88) -38]
Test Case: 732 | Input/Output: [(-50 53 17 28) -50]
Test Case: 733 | Input/Output: [(-40 -85 2 -24) -85]
Test Case: 734 | Input/Output: [(27 87 12 -52) -52]
Test Case: 735 | Input/Output: [(-83 100 -47 -61) -83]
Test Case: 736 | Input/Output: [(88 2 27 -69) -69]
Test Case: 737 | Input/Output: [(20 -57 40 84) -57]
Test Case: 738 | Input/Output: [(9 65 31 58) 9]
Test Case: 739 | Input/Output: [(56 -51 -15 -44) -51]
Test Case: 740 | Input/Output: [(-15 18 -21 20) -21]
Test Case: 741 | Input/Output: [(-38 -35 38 -13) -38]
Test Case: 742 | Input/Output: [(31 2 -49 -87) -87]
Test Case: 743 | Input/Output: [(-91 13 -68 -33) -91]
Test Case: 744 | Input/Output: [(20 -28 87 -52) -52]
Test Case: 745 | Input/Output: [(-85 -97 -87 -75) -97]
Test Case: 746 | Input/Output: [(47 65 19 -84) -84]
Test Case: 747 | Input/Output: [(-36 72 -38 -50) -50]
Test Case: 748 | Input/Output: [(-21 -92 -86 -7) -92]
Test Case: 749 | Input/Output: [(-38 -1 21 55) -38]
Test Case: 750 | Input/Output: [(95 -39 30 -91) -91]
Test Case: 751 | Input/Output: [(44 40 -26 17) -26]
Test Case: 752 | Input/Output: [(98 -82 -74 -65) -82]
Test Case: 753 | Input/Output: [(-29 50 69 -85) -85]
Test Case: 754 | Input/Output: [(-2 27 97 87) -2]
Test Case: 755 | Input/Output: [(-81 -60 3 80) -81]
Test Case: 756 | Input/Output: [(96 -88 55 1) -88]
Test Case: 757 | Input/Output: [(74 90 -93 11) -93]
Test Case: 758 | Input/Output: [(-37 -31 -7 -75) -75]
Test Case: 759 | Input/Output: [(53 39 -40 92) -40]
Test Case: 760 | Input/Output: [(-60 100 -39 19) -60]
Test Case: 761 | Input/Output: [(59 85 -75 -47) -75]
Test Case: 762 | Input/Output: [(-30 22 2 21) -30]
Test Case: 763 | Input/Output: [(57 -24 -64 67) -64]
Test Case: 764 | Input/Output: [(51 32 53 -73) -73]
Test Case: 765 | Input/Output: [(-46 54 51 -74) -74]
Test Case: 766 | Input/Output: [(-47 -39 -38 -27) -47]
Test Case: 767 | Input/Output: [(76 47 -84 64) -84]
Test Case: 768 | Input/Output: [(-49 -74 -52 -64) -74]
Test Case: 769 | Input/Output: [(11 -57 -79 -89) -89]
Test Case: 770 | Input/Output: [(-77 -67 -70 -49) -77]
Test Case: 771 | Input/Output: [(76 -4 -12 -63) -63]
Test Case: 772 | Input/Output: [(71 -35 -94 -83) -94]
Test Case: 773 | Input/Output: [(-36 75 -73 34) -73]
Test Case: 774 | Input/Output: [(69 12 45 -81) -81]
Test Case: 775 | Input/Output: [(58 -43 -58 -39) -58]
Test Case: 776 | Input/Output: [(87 -5 -55 -1) -55]
Test Case: 777 | Input/Output: [(96 -15 47 6) -15]
Test Case: 778 | Input/Output: [(94 -53 -41 61) -53]
Test Case: 779 | Input/Output: [(-99 -85 22 -9) -99]
Test Case: 780 | Input/Output: [(-36 78 -69 2) -69]
Test Case: 781 | Input/Output: [(-70 -18 92 52) -70]
Test Case: 782 | Input/Output: [(15 32 33 -26) -26]
Test Case: 783 | Input/Output: [(75 -63 -3 31) -63]
Test Case: 784 | Input/Output: [(31 57 66 60) 31]
Test Case: 785 | Input/Output: [(18 -66 -28 -42) -66]
Test Case: 786 | Input/Output: [(-59 -75 -1 -43) -75]
Test Case: 787 | Input/Output: [(-16 -59 21 12) -59]
Test Case: 788 | Input/Output: [(62 -33 79 63) -33]
Test Case: 789 | Input/Output: [(17 -44 -83 34) -83]
Test Case: 790 | Input/Output: [(-27 -42 -78 -58) -78]
Test Case: 791 | Input/Output: [(67 -79 -62 -60) -79]
Test Case: 792 | Input/Output: [(33 -12 -47 65) -47]
Test Case: 793 | Input/Output: [(82 -80 -98 -44) -98]
Test Case: 794 | Input/Output: [(-61 -44 -62 84) -62]
Test Case: 795 | Input/Output: [(51 -50 -58 -41) -58]
Test Case: 796 | Input/Output: [(44 -53 -68 57) -68]
Test Case: 797 | Input/Output: [(-75 -92 89 83) -92]
Test Case: 798 | Input/Output: [(-45 -51 -31 -43) -51]
Test Case: 799 | Input/Output: [(18 62 29 -29) -29]
Test Case: 800 | Input/Output: [(36 80 -3 -78) -78]
Test Case: 801 | Input/Output: [(35 22 55 79) 22]
Test Case: 802 | Input/Output: [(80 62 35 -58) -58]
Test Case: 803 | Input/Output: [(17 -89 28 -78) -89]
Test Case: 804 | Input/Output: [(47 -48 -97 -78) -97]
Test Case: 805 | Input/Output: [(16 21 49 94) 16]
Test Case: 806 | Input/Output: [(23 -85 94 -23) -85]
Test Case: 807 | Input/Output: [(39 69 -38 -61) -61]
Test Case: 808 | Input/Output: [(-3 -25 12 -72) -72]
Test Case: 809 | Input/Output: [(-10 82 34 75) -10]
Test Case: 810 | Input/Output: [(35 -70 48 62) -70]
Test Case: 811 | Input/Output: [(99 47 21 -19) -19]
Test Case: 812 | Input/Output: [(11 14 41 -12) -12]
Test Case: 813 | Input/Output: [(61 62 26 77) 26]
Test Case: 814 | Input/Output: [(-81 34 43 82) -81]
Test Case: 815 | Input/Output: [(-75 46 -37 -16) -75]
Test Case: 816 | Input/Output: [(-5 90 81 -82) -82]
Test Case: 817 | Input/Output: [(-44 -1 -48 8) -48]
Test Case: 818 | Input/Output: [(75 -46 46 46) -46]
Test Case: 819 | Input/Output: [(71 -28 93 10) -28]
Test Case: 820 | Input/Output: [(-10 64 4 -96) -96]
Test Case: 821 | Input/Output: [(-59 72 -72 -59) -72]
Test Case: 822 | Input/Output: [(-77 80 -6 39) -77]
Test Case: 823 | Input/Output: [(-12 -96 -93 -88) -96]
Test Case: 824 | Input/Output: [(44 -50 3 -54) -54]
Test Case: 825 | Input/Output: [(-38 46 6 18) -38]
Test Case: 826 | Input/Output: [(-43 -94 -18 -53) -94]
Test Case: 827 | Input/Output: [(29 -5 -56 -70) -70]
Test Case: 828 | Input/Output: [(20 89 60 -59) -59]
Test Case: 829 | Input/Output: [(16 4 53 -100) -100]
Test Case: 830 | Input/Output: [(1 -37 -59 -60) -60]
Test Case: 831 | Input/Output: [(18 2 -31 82) -31]
Test Case: 832 | Input/Output: [(33 97 89 3) 3]
Test Case: 833 | Input/Output: [(85 38 -52 -64) -64]
Test Case: 834 | Input/Output: [(22 43 72 -45) -45]
Test Case: 835 | Input/Output: [(18 50 41 -57) -57]
Test Case: 836 | Input/Output: [(21 -100 -2 -46) -100]
Test Case: 837 | Input/Output: [(26 67 89 -68) -68]
Test Case: 838 | Input/Output: [(80 -78 -31 66) -78]
Test Case: 839 | Input/Output: [(42 -64 -24 -38) -64]
Test Case: 840 | Input/Output: [(-34 -71 47 54) -71]
Test Case: 841 | Input/Output: [(-68 -18 92 -22) -68]
Test Case: 842 | Input/Output: [(92 -38 80 90) -38]
Test Case: 843 | Input/Output: [(-5 -52 -15 47) -52]
Test Case: 844 | Input/Output: [(-5 -56 -33 89) -56]
Test Case: 845 | Input/Output: [(49 11 -42 -90) -90]
Test Case: 846 | Input/Output: [(41 -42 -89 32) -89]
Test Case: 847 | Input/Output: [(-10 -92 32 11) -92]
Test Case: 848 | Input/Output: [(46 45 18 -99) -99]
Test Case: 849 | Input/Output: [(-71 -84 -20 -99) -99]
Test Case: 850 | Input/Output: [(13 -97 -21 84) -97]
Test Case: 851 | Input/Output: [(74 -88 76 66) -88]
Test Case: 852 | Input/Output: [(-32 74 17 -10) -32]
Test Case: 853 | Input/Output: [(36 -76 -99 -96) -99]
Test Case: 854 | Input/Output: [(51 29 -43 -86) -86]
Test Case: 855 | Input/Output: [(26 29 8 9) 8]
Test Case: 856 | Input/Output: [(-37 -24 -25 38) -37]
Test Case: 857 | Input/Output: [(-100 -49 -43 17) -100]
Test Case: 858 | Input/Output: [(-8 -30 -30 71) -30]
Test Case: 859 | Input/Output: [(65 -92 -56 12) -92]
Test Case: 860 | Input/Output: [(1 -29 3 -10) -29]
Test Case: 861 | Input/Output: [(75 -2 -76 3) -76]
Test Case: 862 | Input/Output: [(-19 10 75 32) -19]
Test Case: 863 | Input/Output: [(8 13 -21 -47) -47]
Test Case: 864 | Input/Output: [(-9 -99 10 -60) -99]
Test Case: 865 | Input/Output: [(63 -97 55 71) -97]
Test Case: 866 | Input/Output: [(51 76 -6 60) -6]
Test Case: 867 | Input/Output: [(72 26 -47 53) -47]
Test Case: 868 | Input/Output: [(6 33 46 34) 6]
Test Case: 869 | Input/Output: [(-55 11 -75 12) -75]
Test Case: 870 | Input/Output: [(98 48 -78 -22) -78]
Test Case: 871 | Input/Output: [(71 -24 -72 -16) -72]
Test Case: 872 | Input/Output: [(2 20 71 -78) -78]
Test Case: 873 | Input/Output: [(1 61 -64 -89) -89]
Test Case: 874 | Input/Output: [(4 -66 -57 -33) -66]
Test Case: 875 | Input/Output: [(68 -37 -65 96) -65]
Test Case: 876 | Input/Output: [(83 -74 4 55) -74]
Test Case: 877 | Input/Output: [(-69 91 -32 5) -69]
Test Case: 878 | Input/Output: [(-36 -79 -40 59) -79]
Test Case: 879 | Input/Output: [(-65 58 29 51) -65]
Test Case: 880 | Input/Output: [(75 67 0 -4) -4]
Test Case: 881 | Input/Output: [(-2 -65 -62 -59) -65]
Test Case: 882 | Input/Output: [(83 6 90 20) 6]
Test Case: 883 | Input/Output: [(52 -63 8 -36) -63]
Test Case: 884 | Input/Output: [(59 -95 5 -39) -95]
Test Case: 885 | Input/Output: [(71 56 -39 81) -39]
Test Case: 886 | Input/Output: [(-31 -27 -15 -3) -31]
Test Case: 887 | Input/Output: [(87 -16 11 -50) -50]
Test Case: 888 | Input/Output: [(-32 -29 -88 46) -88]
Test Case: 889 | Input/Output: [(-97 69 -76 80) -97]
Test Case: 890 | Input/Output: [(-56 98 -29 81) -56]
Test Case: 891 | Input/Output: [(-55 56 -98 92) -98]
Test Case: 892 | Input/Output: [(43 71 -19 62) -19]
Test Case: 893 | Input/Output: [(-74 -54 38 -100) -100]
Test Case: 894 | Input/Output: [(-83 -18 54 -83) -83]
Test Case: 895 | Input/Output: [(-78 -72 53 -76) -78]
Test Case: 896 | Input/Output: [(13 -89 81 15) -89]
Test Case: 897 | Input/Output: [(6 -40 -68 -36) -68]
Test Case: 898 | Input/Output: [(55 -44 59 83) -44]
Test Case: 899 | Input/Output: [(94 -17 -86 -95) -95]
Test Case: 900 | Input/Output: [(92 -70 25 33) -70]
Test Case: 901 | Input/Output: [(16 57 -18 54) -18]
Test Case: 902 | Input/Output: [(1 -24 39 -95) -95]
Test Case: 903 | Input/Output: [(-31 -78 -77 14) -78]
Test Case: 904 | Input/Output: [(13 12 -49 -30) -49]
Test Case: 905 | Input/Output: [(52 -62 80 58) -62]
Test Case: 906 | Input/Output: [(79 -46 32 -29) -46]
Test Case: 907 | Input/Output: [(30 10 92 -35) -35]
Test Case: 908 | Input/Output: [(74 -78 97 -95) -95]
Test Case: 909 | Input/Output: [(-85 65 -24 68) -85]
Test Case: 910 | Input/Output: [(51 -49 -25 34) -49]
Test Case: 911 | Input/Output: [(56 91 22 -74) -74]
Test Case: 912 | Input/Output: [(18 -90 62 7) -90]
Test Case: 913 | Input/Output: [(10 -98 -55 70) -98]
Test Case: 914 | Input/Output: [(58 -83 -4 67) -83]
Test Case: 915 | Input/Output: [(97 71 81 35) 35]
Test Case: 916 | Input/Output: [(-86 -78 23 89) -86]
Test Case: 917 | Input/Output: [(60 -93 -39 -1) -93]
Test Case: 918 | Input/Output: [(92 -33 -99 -74) -99]
Test Case: 919 | Input/Output: [(50 -40 -78 21) -78]
Test Case: 920 | Input/Output: [(0 89 24 72) 0]
Test Case: 921 | Input/Output: [(56 80 -24 72) -24]
Test Case: 922 | Input/Output: [(33 33 -96 29) -96]
Test Case: 923 | Input/Output: [(19 20 -4 96) -4]
Test Case: 924 | Input/Output: [(95 53 -55 -73) -73]
Test Case: 925 | Input/Output: [(-54 92 -5 27) -54]
Test Case: 926 | Input/Output: [(-8 -7 87 15) -8]
Test Case: 927 | Input/Output: [(68 -55 63 95) -55]
Test Case: 928 | Input/Output: [(-5 -20 81 -40) -40]
Test Case: 929 | Input/Output: [(45 -64 -43 64) -64]
Test Case: 930 | Input/Output: [(82 -84 -36 96) -84]
Test Case: 931 | Input/Output: [(-21 -91 17 40) -91]
Test Case: 932 | Input/Output: [(-26 -51 -76 -36) -76]
Test Case: 933 | Input/Output: [(80 -31 3 69) -31]
Test Case: 934 | Input/Output: [(71 73 -17 38) -17]
Test Case: 935 | Input/Output: [(-86 -39 43 60) -86]
Test Case: 936 | Input/Output: [(-26 4 -76 53) -76]
Test Case: 937 | Input/Output: [(-9 -24 -27 11) -27]
Test Case: 938 | Input/Output: [(96 29 7 49) 7]
Test Case: 939 | Input/Output: [(60 -45 -17 -57) -57]
Test Case: 940 | Input/Output: [(-96 -26 -49 9) -96]
Test Case: 941 | Input/Output: [(93 -55 -84 -44) -84]
Test Case: 942 | Input/Output: [(53 -100 50 45) -100]
Test Case: 943 | Input/Output: [(-60 -46 -5 -73) -73]
Test Case: 944 | Input/Output: [(-88 45 -15 -73) -88]
Test Case: 945 | Input/Output: [(35 -51 89 -65) -65]
Test Case: 946 | Input/Output: [(79 -52 4 24) -52]
Test Case: 947 | Input/Output: [(35 55 -17 -83) -83]
Test Case: 948 | Input/Output: [(-65 -49 -23 64) -65]
Test Case: 949 | Input/Output: [(81 -55 -42 -83) -83]
Test Case: 950 | Input/Output: [(84 41 22 15) 15]
Test Case: 951 | Input/Output: [(-46 -98 30 73) -98]
Test Case: 952 | Input/Output: [(61 27 70 0) 0]
Test Case: 953 | Input/Output: [(4 -62 46 -9) -62]
Test Case: 954 | Input/Output: [(-74 27 63 -50) -74]
Test Case: 955 | Input/Output: [(70 -48 -24 -89) -89]
Test Case: 956 | Input/Output: [(9 -32 14 64) -32]
Test Case: 957 | Input/Output: [(-61 91 -23 52) -61]
Test Case: 958 | Input/Output: [(68 76 -31 -52) -52]
Test Case: 959 | Input/Output: [(65 78 -51 -35) -51]
Test Case: 960 | Input/Output: [(59 -27 -66 -63) -66]
Test Case: 961 | Input/Output: [(25 16 -63 -48) -63]
Test Case: 962 | Input/Output: [(67 -23 85 -86) -86]
Test Case: 963 | Input/Output: [(71 61 28 16) 16]
Test Case: 964 | Input/Output: [(-46 11 -29 23) -46]
Test Case: 965 | Input/Output: [(-86 -93 34 -23) -93]
Test Case: 966 | Input/Output: [(-68 -15 -82 84) -82]
Test Case: 967 | Input/Output: [(95 -7 -7 19) -7]
Test Case: 968 | Input/Output: [(-13 -47 82 -32) -47]
Test Case: 969 | Input/Output: [(73 -86 11 -65) -86]
Test Case: 970 | Input/Output: [(-30 23 49 -22) -30]
Test Case: 971 | Input/Output: [(-64 -99 63 -8) -99]
Test Case: 972 | Input/Output: [(-18 -89 -13 8) -89]
Test Case: 973 | Input/Output: [(21 50 54 -10) -10]
Test Case: 974 | Input/Output: [(83 -29 25 -79) -79]
Test Case: 975 | Input/Output: [(-82 -26 75 -59) -82]
Test Case: 976 | Input/Output: [(52 -100 64 -79) -100]
Test Case: 977 | Input/Output: [(31 95 -96 -15) -96]
Test Case: 978 | Input/Output: [(-32 24 69 -92) -92]
Test Case: 979 | Input/Output: [(-50 8 -97 34) -97]
Test Case: 980 | Input/Output: [(34 -36 -65 13) -65]
Test Case: 981 | Input/Output: [(-13 -71 -53 -70) -71]
Test Case: 982 | Input/Output: [(-6 19 13 87) -6]
Test Case: 983 | Input/Output: [(-67 -74 -53 -88) -88]
Test Case: 984 | Input/Output: [(-12 -34 84 -30) -34]
Test Case: 985 | Input/Output: [(13 -24 92 99) -24]
Test Case: 986 | Input/Output: [(-75 -32 28 -52) -75]
Test Case: 987 | Input/Output: [(-31 -81 -94 1) -94]
Test Case: 988 | Input/Output: [(2 -97 -43 92) -97]
Test Case: 989 | Input/Output: [(34 44 68 88) 34]
Test Case: 990 | Input/Output: [(-21 -25 -91 23) -91]
Test Case: 991 | Input/Output: [(-1 69 -89 10) -89]
Test Case: 992 | Input/Output: [(88 0 62 -13) -13]
Test Case: 993 | Input/Output: [(-26 93 -99 92) -99]
Test Case: 994 | Input/Output: [(-4 2 -59 71) -59]
Test Case: 995 | Input/Output: [(-18 62 23 42) -18]
Test Case: 996 | Input/Output: [(68 68 -41 -32) -41]
Test Case: 997 | Input/Output: [(72 -84 18 65) -84]
Test Case: 998 | Input/Output: [(54 66 54 44) 44]
Test Case: 999 | Input/Output: [(40 -63 84 18) -63]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -9 -113 45 45 114 106 7 66 -66 -95 -114 -68 -65 19 -48 -125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[85 -53 85 85] -53] [[-14 -14 -14 15] -14] [[15 25 15 15] 15] [[68 68 -81 68] -81] [[21 21 -8 21] -8] [[49 49 52 49] 49] [[-77 -77 -77 43] -77] [[27 -41 -41 -41] -41] [[48 -67 -67 -67] -67] [[-39 47 -39 -39] -39] [(70 70 70 70) 70] [(-50 -50 -50 -50) -50] [(-54 -54 -54 -54) -54] [(22 22 22 22) 22] [(0 0 0 0) 0] [(73 2 47 49) 2] [(35 3 33 12) 3] [(87 10 51 22) 10] [(64 21 87 0) 0] [(38 46 48 15) 15] [(83 26 22 1) 1] [(67 66 42 61) 42] [(35 11 84 62) 11] [(67 27 100 18) 18] [(34 75 82 10) 10] [(58 80 15 25) 15] [(7 19 31 64) 7] [(64 17 73 49) 17] [(60 19 27 70) 19] [(73 97 75 10) 10] [(32 33 18 15) 15] [(26 25 47 25) 25] [(43 80 2 38) 2] [(76 49 29 52) 29] [(48 22 11 24) 11] [(-42 19 44 6) -42] [(61 51 -57 -98) -98] [(-60 -3 82 -76) -76] [(36 32 -64 99) -64] [(31 13 1 75) 1] [(-73 -75 -56 30) -75] [(-54 -73 -54 -60) -73] [(-92 17 87 85) -92] [(94 -91 -82 47) -91] [(-1 74 76 99) -1] [(10 -97 15 76) -97] [(-100 97 -74 9) -100] [(95 15 87 -81) -81] [(-73 39 46 14) -73] [(-6 82 63 62) -6] [(-6 82 -26 -88) -88] [(50 -70 -8 14) -70] [(63 -98 51 -46) -98] [(-2 -84 -66 64) -84] [(4 -80 -89 -75) -89] [(68 4 -59 -76) -76] [(-33 -12 -9 87) -33] [(-39 39 -46 31) -46] [(-21 -39 -69 20) -69] [(74 81 92 -18) -18] [(-29 -58 20 -22) -58] [(65 -41 -84 -82) -84] [(-50 -74 -90 -46) -90] [(-90 -40 -52 5) -90] [(-55 -51 -86 -36) -86] [(91 32 -88 71) -88] [(57 48 -79 9) -79] [(12 -48 59 -84) -84] [(56 20 -65 98) -65] [(-24 22 40 52) -24] [(-85 52 -75 66) -85] [(59 31 -50 -64) -64] [(49 -87 42 -18) -87] [(-15 28 88 -61) -61] [(3 -14 41 -93) -93] [(32 -11 50 -90) -90] [(49 -69 33 -80) -80] [(69 -26 -46 -62) -62] [(12 -92 10 -78) -92] [(-48 -22 70 -12) -48] [(-10 -89 30 69) -89] [(7 -43 77 6) -43] [(-95 -22 -69 -99) -99] [(-98 59 -76 -49) -98] [(-42 -68 32 98) -68] [(-66 29 -4 -83) -83] [(36 -76 100 96) -76] [(82 61 76 -58) -58] [(-84 -31 88 73) -84] [(-92 38 22 -51) -92] [(34 41 -54 3) -54] [(22 -79 -47 84) -79] [(-72 20 87 -4) -72] [(7 -30 79 72) -30] [(-35 51 -47 -34) -47])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: 47                 
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -3                 
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 97                 
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 82                 
Correct output: -88                 | Program output: 82                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: 39                 
Correct output: -69                 | Program output: -39                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -40                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: 52                 
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: 28                 
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -22                
Correct output: -98                 | Program output: 59                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: 38                 
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 20                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_eq boolean_invert_first_then_and exec_if () (boolean_dup_items integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap)) exec_yank exec_y_when_autoconstructing (integer_lte))
Lexicase best errors: [1 1 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_eq boolean_invert_first_then_and exec_if () (boolean_dup_items integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap)) exec_yank exec_y_when_autoconstructing (integer_lte))
Zero cases best errors: [1 1 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 5 5 11 5 2 1 2 1)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (1 0 5 5 11 5 2 1 2 1)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_230} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction 90} {:close 1, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 2, :instruction in2} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and})
Best program: (boolean_or integer_dup_items integer_dup_items exec_s_when_autoconstructing () (exec_dup_items integer_fromboolean) (boolean_or integer_shove integer_dec tagged_230) boolean_flush integer_yankdup boolean_shove exec_swap () (boolean_yankdup integer_fromboolean exec_do*times () boolean_yankdup 90) integer_div exec_when (integer_dec exec_y_when_autoconstructing (integer_sub exec_pop (boolean_yankdup)) integer_stackdepth integer_pop integer_inc exec_k_when_autoconstructing (exec_s_when_autoconstructing (in2 exec_rot (exec_if (integer_dup print_integer integer_swap exec_dup_times () exec_pop (integer_lte exec_pop () integer_mod integer_sub) exec_y_when_autoconstructing (exec_y () in2)) (exec_empty) exec_if () (exec_dup (integer_dec integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_frominteger integer_fromboolean exec_when (exec_flush boolean_and)))) () ()) () ()) ()))
Errors: [1 1 0 0 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 90
Percent parens: 0.322
--- Population Statistics ---
Average total errors in population: 9.967
Median total errors in population: 10
Error averages by case: (0.999 1.0 0.995 0.995 0.989 0.995 0.998 0.999 0.998 0.999)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.499
Average program size in population (points): 70.658
Average percent parens in population: 0.277
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.288
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 477736
--- Timings ---
Current time: 1559584683344 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.2%
Reproduction:         0.8 seconds, 34.6%
Fitness Testing:      1.5 seconds, 61.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer boolean_yank integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 in3 boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 94
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer boolean_yank integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 in3 boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 94
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 256 319 114 920 114 319 256 1 233)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (256 256 319 114 920 114 319 256 1 233)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 in3 boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 62
Size: 94
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 7.212
Median total errors in population: 7
Error averages by case: (0.744 0.744 0.681 0.886 0.08 0.886 0.681 0.744 0.999 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.263
Average program size in population (points): 70.56
Average percent parens in population: 0.258
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1333477
--- Timings ---
Current time: 1559584686863 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.8%
Reproduction:         2.4 seconds, 43.2%
Fitness Testing:      2.4 seconds, 42.4%
Report:               0.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 boolean_eq boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 boolean_eq boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 313 313 313 180 102 903 311 725 313)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (313 313 313 313 180 102 903 311 725 313)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) integer_gt) (in3 in3 boolean_swap) boolean_not boolean_flush integer_add) (integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())) () ()) () ())
Errors: [0 0 0 0 1 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 94
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 6.214
Median total errors in population: 7
Error averages by case: (0.687 0.687 0.687 0.687 0.82 0.898 0.097 0.689 0.275 0.687)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.485
Average program size in population (points): 84.236
Average percent parens in population: 0.285
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.18
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2461367
--- Timings ---
Current time: 1559584691397 milliseconds
Total Time:          10.2 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         4.9 seconds, 48.1%
Fitness Testing:      3.5 seconds, 33.9%
Report:               1.7 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: 47                 
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -3                 
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 97                 
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 82                 
Correct output: -88                 | Program output: 82                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: 39                 
Correct output: -69                 | Program output: -39                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -40                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: 52                 
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: 28                 
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -22                
Correct output: -98                 | Program output: 59                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: 38                 
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 20                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_eq boolean_invert_first_then_and exec_if () (boolean_dup_items integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap)) exec_yank exec_y_when_autoconstructing (integer_lte))
Lexicase best errors: [0 0 0 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_eq boolean_invert_first_then_and exec_if () (boolean_dup_items integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap)) exec_yank exec_y_when_autoconstructing (integer_lte))
Zero cases best errors: [0 0 0 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 96 95 135 135 581 135 97 97 716)
Population mean number of elite cases: 3.04
Count of perfect (error zero) individuals by case: (948 96 95 135 135 581 135 97 97 716)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction print_exec} {:close 0, :instruction tagged_964} {:close 0, :instruction exec_flush} {:close 0, :instruction 41} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_139} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction 35} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_integer_630} {:close 0, :instruction integer_add} {:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 1, :instruction integer_shove})
Best program: (exec_do*while (in2 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (in3 exec_dup_items) (in3 exec_s () (boolean_stackdepth in1) (exec_yankdup integer_fromboolean boolean_pop) integer_div) print_exec () tagged_964 exec_flush 41 boolean_frominteger boolean_dup_items) boolean_swap integer_flush exec_y (integer_lte integer_add exec_do*times (tag_exec_139 (integer_dup_items boolean_shove) integer_add integer_swap integer_inc) integer_fromboolean exec_eq integer_max in3 exec_y_when_autoconstructing (35 integer_dup) boolean_dup_times integer_mult exec_swap (exec_shove (integer_mod tag_integer_630 integer_add exec_rot (print_integer integer_shove) () ())) ())))
Errors: [0 0 0 1 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 81
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 6.965
Median total errors in population: 7
Error averages by case: (0.052 0.904 0.905 0.865 0.865 0.419 0.865 0.903 0.903 0.284)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.908
Average program size in population (points): 85.159
Average percent parens in population: 0.302
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.5865
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.834
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3619281
--- Timings ---
Current time: 1559584696172 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.5 seconds, 50.7%
Fitness Testing:      4.4 seconds, 30.1%
Report:               2.7 seconds, 18.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 27                 
Correct output: -67                 | Program output: 48                 
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 73                 
Correct output: 3                   | Program output: 35                 
Correct output: 10                  | Program output: 87                 
Correct output: 0                   | Program output: 64                 
Correct output: 15                  | Program output: 38                 
Correct output: 1                   | Program output: 83                 
Correct output: 42                  | Program output: 67                 
Correct output: 11                  | Program output: 35                 
Correct output: 18                  | Program output: 67                 
Correct output: 10                  | Program output: 34                 
Correct output: 15                  | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 64                 
Correct output: 19                  | Program output: 60                 
Correct output: 10                  | Program output: 73                 
Correct output: 15                  | Program output: 32                 
Correct output: 25                  | Program output: 26                 
Correct output: 2                   | Program output: 43                 
Correct output: 29                  | Program output: 76                 
Correct output: 11                  | Program output: 48                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 61                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 36                 
Correct output: 1                   | Program output: 31                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: 94                 
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 95                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: 50                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: 4                  
Correct output: -76                 | Program output: 68                 
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 74                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: 65                 
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 91                 
Correct output: -79                 | Program output: 57                 
Correct output: -84                 | Program output: 12                 
Correct output: -65                 | Program output: 56                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 59                 
Correct output: -87                 | Program output: 49                 
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: 3                  
Correct output: -90                 | Program output: 32                 
Correct output: -80                 | Program output: 49                 
Correct output: -62                 | Program output: 69                 
Correct output: -92                 | Program output: 12                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: 7                  
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: 36                 
Correct output: -58                 | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 34                 
Correct output: -79                 | Program output: 22                 
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: 7                  
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_or})
Lexicase best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt integer_lte integer_lt in1 integer_rot print_integer integer_dup_items exec_yank integer_yank exec_do*range (exec_y_when_autoconstructing (boolean_flush exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) (tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y ()) (integer_div exec_do*range (exec_k () (boolean_or)))))))
Lexicase best errors: [0 1 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_or})
Zero cases best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt integer_lte integer_lt in1 integer_rot print_integer integer_dup_items exec_yank integer_yank exec_do*range (exec_y_when_autoconstructing (boolean_flush exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) (tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y ()) (integer_div exec_do*range (exec_k () (boolean_or)))))))
Zero cases best errors: [0 1 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (904 1 154 391 391 154 358 1 749 904)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (904 1 154 391 391 154 358 1 749 904)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_323} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush})
Best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt integer_lte integer_lt in1 integer_rot print_integer integer_dup_items exec_yank integer_yank exec_do*range (exec_y_when_autoconstructing (boolean_flush exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) (tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y () integer_div boolean_pop boolean_flush print_boolean exec_do*count (integer_div) exec_do*range (integer_dec exec_s_when_autoconstructing (integer_gt exec_when (in1) boolean_frominteger) () (exec_dup_items integer_mod integer_mult tag_boolean_323 boolean_dup boolean_xor integer_lte) integer_sub) print_newline integer_dup integer_dup_items exec_if (boolean_invert_first_then_and integer_yankdup boolean_flush) ()) ()))))
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.993
Median total errors in population: 6
Error averages by case: (0.096 0.999 0.846 0.609 0.609 0.846 0.642 0.999 0.251 0.096)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.477
Average program size in population (points): 70.756
Average percent parens in population: 0.246
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.082
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4380778
--- Timings ---
Current time: 1559584699448 milliseconds
Total Time:          18.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.4 seconds, 50.6%
Fitness Testing:      5.2 seconds, 27.7%
Report:               3.9 seconds, 21.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_323} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush})
Lexicase best program: (boolean_dup_times exec_do*while () integer_dup integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop exec_y_when_autoconstructing (exec_s (print_newline exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer exec_do*count (integer_div exec_do*range (integer_dec in2 integer_gt exec_when (in1) boolean_frominteger)) exec_dup_items print_exec (integer_mult tag_boolean_323 boolean_dup boolean_xor integer_lte) integer_sub) print_newline integer_dup integer_dup_items exec_if (boolean_invert_first_then_and integer_yankdup boolean_flush) ()) ()) () ())) () ()))) () ())
Lexicase best errors: [1 1 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 86
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction print_newline} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_323} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_flush})
Zero cases best program: (boolean_dup_times exec_do*while () integer_dup integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop exec_y_when_autoconstructing (exec_s (print_newline exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer exec_do*count (integer_div exec_do*range (integer_dec in2 integer_gt exec_when (in1) boolean_frominteger)) exec_dup_items print_exec (integer_mult tag_boolean_323 boolean_dup boolean_xor integer_lte) integer_sub) print_newline integer_dup integer_dup_items exec_if (boolean_invert_first_then_and integer_yankdup boolean_flush) ()) ()) () ())) () ()))) () ())
Zero cases best errors: [1 1 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 86
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (150 232 292 292 630 251 251 251 251 251)
Population mean number of elite cases: 2.85
Count of perfect (error zero) individuals by case: (150 232 292 292 630 251 251 251 251 251)
Population mean number of perfect (error zero) cases: 2.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer})
Best program: (exec_do*while (in2 boolean_shove) boolean_dup_times boolean_dup_items boolean_swap integer_rot in3 print_integer exec_noop boolean_swap exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing (exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer)) () ())) () ()))) () ())
Errors: [1 1 1 1 0 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 43
Size: 65
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 7.149
Median total errors in population: 8
Error averages by case: (0.85 0.768 0.708 0.708 0.37 0.749 0.749 0.749 0.749 0.749)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.499
Average program size in population (points): 69.208
Average percent parens in population: 0.239
Minimum age in population: 5.0
Maximum age in population: 9.625
Average age in population: 7.496625
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 120
Genome diversity (% unique genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5089957
--- Timings ---
Current time: 1559584703070 milliseconds
Total Time:          21.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.4 seconds, 52.2%
Fitness Testing:      5.8 seconds, 26.5%
Report:               4.6 seconds, 20.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not})
Lexicase best program: (boolean_dup_times exec_do*while () in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (boolean_and integer_gt) integer_gt integer_lte) integer_lt in1 integer_rot) (print_integer integer_dup_items exec_yank integer_yank) () exec_do*range (integer_eq boolean_flush exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) () tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y ()) (integer_div boolean_pop boolean_flush print_boolean exec_do*count (print_integer integer_swap in2 integer_yank)) 14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not)) ())
Lexicase best errors: [1 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_lt} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 2, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not})
Zero cases best program: (boolean_dup_times exec_do*while () in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (boolean_and integer_gt) integer_gt integer_lte) integer_lt in1 integer_rot) (print_integer integer_dup_items exec_yank integer_yank) () exec_do*range (integer_eq boolean_flush exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) () tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y ()) (integer_div boolean_pop boolean_flush print_boolean exec_do*count (print_integer integer_swap in2 integer_yank)) 14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not)) ())
Zero cases best errors: [1 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 927 927 111 534 534 182 111 182 100)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (102 927 927 111 534 534 182 111 182 100)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction tag_boolean_956} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_sub} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction tag_boolean_323} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_sub} {:close 0, :instruction print_newline} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if})
Best program: (boolean_dup_times exec_do*while (boolean_swap) integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) exec_swap (integer_mult) (integer_pop exec_s_when_autoconstructing (boolean_dup_items integer_dup_times) (integer_empty) (tag_boolean_956 exec_empty exec_y () exec_eq exec_k_when_autoconstructing (exec_y ()) (integer_div boolean_pop boolean_flush print_boolean exec_do*count (integer_div exec_do*range (integer_dec exec_s_when_autoconstructing (integer_gt exec_when (in1) boolean_frominteger) () (exec_dup_items integer_mod integer_mult integer_sub) print_boolean exec_do*count (integer_div exec_do*range (integer_dec exec_s_when_autoconstructing (integer_gt exec_when (in1) boolean_frominteger) () (exec_dup_items integer_mod integer_mult tag_boolean_323 boolean_dup boolean_xor integer_lte) integer_sub) print_newline integer_dup integer_dup_items exec_if () ()))))))) () ())
Errors: [1 0 0 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 67
Size: 98
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.29
Median total errors in population: 6
Error averages by case: (0.898 0.073 0.073 0.889 0.466 0.466 0.818 0.889 0.818 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.386
Average program size in population (points): 76.451
Average percent parens in population: 0.275
Minimum age in population: 6.625
Maximum age in population: 10.78125
Average age in population: 9.0049375
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6015337
--- Timings ---
Current time: 1559584707374 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 53.3%
Fitness Testing:      6.6 seconds, 25.2%
Report:               5.5 seconds, 21.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 2, :instruction in2} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt integer_lte integer_lt integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div) in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop exec_if (integer_dup print_integer integer_swap exec_dup_times () exec_pop (integer_lte integer_inc) integer_mod exec_s_when_autoconstructing () (exec_y_when_autoconstructing (exec_y () in2)) (exec_empty) exec_if () (exec_dup (integer_dec integer_mult integer_dup_times boolean_frominteger integer_div integer_add) integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ()))) ())))
Lexicase best errors: [0 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 1, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_y} {:close 2, :instruction in2} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt integer_lte integer_lt integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div) in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop exec_if (integer_dup print_integer integer_swap exec_dup_times () exec_pop (integer_lte integer_inc) integer_mod exec_s_when_autoconstructing () (exec_y_when_autoconstructing (exec_y () in2)) (exec_empty) exec_if () (exec_dup (integer_dec integer_mult integer_dup_times boolean_frominteger integer_div integer_add) integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ()))) ())))
Zero cases best errors: [0 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 230 439 243 223 223 217 215 909 223)
Population mean number of elite cases: 3.14
Count of perfect (error zero) individuals by case: (216 230 439 243 223 223 217 215 909 223)
Population mean number of perfect (error zero) cases: 3.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in4} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_882} {:close 1, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_or})
Best program: (exec_do*while (in2 boolean_shove) integer_eq integer_max in4 exec_noop print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_newline boolean_yankdup integer_yankdup integer_shove integer_dup_items exec_noop integer_fromboolean integer_swap boolean_xor integer_lte exec_noop integer_eq boolean_yank print_newline integer_add exec_when (integer_mod tag_boolean_882 integer_min) integer_sub exec_eq exec_noop exec_do*range (exec_k () (boolean_or)))
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 49
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.862
Median total errors in population: 8
Error averages by case: (0.784 0.77 0.561 0.757 0.777 0.777 0.783 0.785 0.091 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.351
Average program size in population (points): 67.231
Average percent parens in population: 0.235
Minimum age in population: 7.625
Maximum age in population: 12.4375
Average age in population: 10.44209375
Median age in population: 10.5234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.812
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 6678711
--- Timings ---
Current time: 1559584710591 milliseconds
Total Time:          30.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 54.2%
Fitness Testing:      7.2 seconds, 23.9%
Report:               6.5 seconds, 21.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: 47                 
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -3                 
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 97                 
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 82                 
Correct output: -88                 | Program output: 82                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: 39                 
Correct output: -69                 | Program output: -39                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -40                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: 52                 
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: 28                 
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -22                
Correct output: -98                 | Program output: 59                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: 38                 
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 20                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Lexicase best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec exec_noop) integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) boolean_pop integer_mult) (integer_pop exec_y () exec_eq exec_do*range (exec_y_when_autoconstructing (boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap) () exec_yank exec_y_when_autoconstructing (integer_lte))) () ())
Lexicase best errors: [1 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_and} {:close 2, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lte})
Zero cases best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec exec_noop) integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) boolean_shove) boolean_pop integer_mult) (integer_pop exec_y () exec_eq exec_do*range (exec_y_when_autoconstructing (boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add) boolean_and boolean_swap) () exec_yank exec_y_when_autoconstructing (integer_lte))) () ())
Zero cases best errors: [1 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (343 124 124 124 124 344 364 344 567 706)
Population mean number of elite cases: 3.16
Count of perfect (error zero) individuals by case: (343 124 124 124 124 344 364 344 567 706)
Population mean number of perfect (error zero) cases: 3.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Best program: (exec_do*while (in2 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 boolean_stackdepth integer_pop integer_pop) (exec_y_when_autoconstructing () exec_s (in1 exec_eq exec_do*while (integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) (in3 in3 boolean_swap) exec_dup_times (boolean_flush integer_add) integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) () ())) () ()))))
Errors: [0 1 1 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 93
Percent parens: 0.312
--- Population Statistics ---
Average total errors in population: 6.836
Median total errors in population: 8
Error averages by case: (0.657 0.876 0.876 0.876 0.876 0.656 0.636 0.656 0.433 0.294)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.744
Average program size in population (points): 61.393
Average percent parens in population: 0.207
Minimum age in population: 8.75
Maximum age in population: 14.046875
Average age in population: 11.8857265625
Median age in population: 11.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7178191
--- Timings ---
Current time: 1559584713435 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.5 seconds, 56.2%
Fitness Testing:      7.6 seconds, 23.1%
Report:               6.7 seconds, 20.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) in3 in3 boolean_swap) exec_dup_times (boolean_flush integer_add) integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ()))) () ())
Lexicase best errors: [0 1 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 91
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_mod) boolean_dup_times integer_lt exec_dup_times (exec_y_when_autoconstructing (exec_when (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times exec_pop (integer_eq) boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte boolean_not integer_pop boolean_invert_second_then_and) boolean_invert_first_then_and) in3 in3 boolean_swap) exec_dup_times (boolean_flush integer_add) integer_lte exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ()))) () ())
Zero cases best errors: [0 1 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 91
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (412 1000 401 906 411 907 1000 909 413 486)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (412 0 401 906 411 907 0 909 413 486)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_882} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_or})
Best program: (exec_yank boolean_dup_times integer_mult boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 print_integer) boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing () exec_s (in1 exec_eq integer_add exec_when (integer_mod tag_boolean_882 integer_min) boolean_xor) (exec_eq) (exec_noop exec_do*range (exec_k (boolean_or) ()))) () ())
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 52
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 5.155
Median total errors in population: 5
Error averages by case: (0.588 1.0 0.599 0.094 0.589 0.093 1.0 0.091 0.587 0.514)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 49.558
Average program size in population (points): 66.945
Average percent parens in population: 0.244
Minimum age in population: 10.0
Maximum age in population: 15.4609375
Average age in population: 13.34812109375
Median age in population: 13.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 7935729
--- Timings ---
Current time: 1559584717137 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.7 seconds, 57.4%
Fitness Testing:      8.3 seconds, 23.0%
Report:               6.9 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: 47                 
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -3                 
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 97                 
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 82                 
Correct output: -88                 | Program output: 82                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: 39                 
Correct output: -69                 | Program output: -39                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -40                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: 52                 
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: 28                 
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -22                
Correct output: -98                 | Program output: 59                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: 38                 
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 20                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction -68} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Lexicase best program: (exec_do*while (in2 boolean_shove) integer_eq integer_max in3 boolean_yank integer_gte boolean_eq in2 21 integer_shove print_integer integer_swap integer_gte integer_sub -68 boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_newline integer_mult integer_yankdup integer_shove integer_dup_items exec_noop integer_lte integer_swap boolean_xor integer_lte exec_noop integer_eq boolean_yank print_newline integer_add exec_when (integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_lte boolean_invert_first_then_and) in3) (in3 boolean_swap) boolean_not boolean_flush integer_add) exec_k (exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())
Lexicase best errors: [0 0 1 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction -68} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction in3} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Zero cases best program: (exec_do*while (in2 boolean_shove) integer_eq integer_max in3 boolean_yank integer_gte boolean_eq in2 21 integer_shove print_integer integer_swap integer_gte integer_sub -68 boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_newline integer_mult integer_yankdup integer_shove integer_dup_items exec_noop integer_lte integer_swap boolean_xor integer_lte exec_noop integer_eq boolean_yank print_newline integer_add exec_when (integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_lte boolean_invert_first_then_and) in3) (in3 boolean_swap) boolean_not boolean_flush integer_add) exec_k (exec_when (in1) print_exec (exec_s_when_autoconstructing (exec_when ()) () ())) ())
Zero cases best errors: [0 0 1 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (340 340 580 1 1000 341 1 341 339 341)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (340 340 580 1 0 341 1 341 339 341)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 2, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_exec} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_when})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth exec_while (boolean_dup_items) exec_flush boolean_swap print_newline boolean_yankdup integer_yankdup exec_flush boolean_swap print_newline boolean_yankdup exec_do*times (integer_eq integer_empty boolean_dup_items) exec_k (exec_while (boolean_yankdup integer_swap in2 integer_yank)) (integer_stackdepth exec_noop print_integer) integer_lte integer_dup_items integer_yankdup exec_s (integer_dup_items) (exec_shove (boolean_not exec_stackdepth boolean_invert_second_then_and) exec_empty) (in3 in3 boolean_swap) boolean_not in1 print_exec (exec_s_when_autoconstructing (exec_when ()) () ()))
Errors: [0 0 1 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 7.376
Median total errors in population: 9
Error averages by case: (0.66 0.66 0.42 0.999 1.0 0.659 0.999 0.659 0.661 0.659)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 50.52
Average program size in population (points): 69.763
Average percent parens in population: 0.263
Minimum age in population: 11.0
Maximum age in population: 16.96875
Average age in population: 14.842357421875
Median age in population: 14.8720703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 8827389
--- Timings ---
Current time: 1559584720023 milliseconds
Total Time:          39.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.6 seconds, 57.0%
Fitness Testing:      9.0 seconds, 22.8%
Report:               7.9 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 621
Test mean error for best: 0.62100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: 47                 
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -3                 
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: 97                 
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 82                 
Correct output: -88                 | Program output: 82                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: 39                 
Correct output: -69                 | Program output: -39                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -40                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: 52                 
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: 28                 
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -22                
Correct output: -98                 | Program output: 59                 
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: 29                 
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: 38                 
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: 20                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction 60} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction 41} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_139} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_913} {:close 1, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_or})
Lexicase best program: (exec_do*while (in2 boolean_shove integer_eq integer_max integer_gte boolean_eq) in2 21 integer_shove print_integer 60 integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_newline boolean_yankdup integer_yankdup integer_shove integer_dup_items 41 exec_do*while (boolean_dup_items) integer_pop integer_flush integer_max integer_lte integer_add exec_do*times (tag_exec_139 (integer_dup_items boolean_shove) integer_add integer_swap integer_inc) integer_fromboolean tag_boolean_913 integer_min integer_sub exec_eq exec_noop exec_do*range (exec_k () (boolean_or)))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.155
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction 60} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_newline} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction 41} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_exec_139} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tag_boolean_913} {:close 1, :instruction integer_min} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_or})
Zero cases best program: (exec_do*while (in2 boolean_shove integer_eq integer_max integer_gte boolean_eq) in2 21 integer_shove print_integer 60 integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_newline boolean_yankdup integer_yankdup integer_shove integer_dup_items 41 exec_do*while (boolean_dup_items) integer_pop integer_flush integer_max integer_lte integer_add exec_do*times (tag_exec_139 (integer_dup_items boolean_shove) integer_add integer_swap integer_inc) integer_fromboolean tag_boolean_913 integer_min integer_sub exec_eq exec_noop exec_do*range (exec_k () (boolean_or)))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.155
--- Lexicase Population Statistics ---
Count of elite individuals by case: (573 572 910 115 115 222 572 573 910 115)
Population mean number of elite cases: 4.68
Count of perfect (error zero) individuals by case: (573 572 910 115 115 222 572 573 910 115)
Population mean number of perfect (error zero) cases: 4.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Best program: (exec_yank exec_dup_items boolean_and integer_gt integer_gt exec_yank boolean_and in4 integer_shove boolean_xor in2 exec_dup (boolean_xor boolean_swap in1) integer_eq exec_noop integer_rot print_integer boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 41
Percent parens: 0.098
--- Population Statistics ---
Average total errors in population: 5.323
Median total errors in population: 4
Error averages by case: (0.427 0.428 0.09 0.885 0.885 0.778 0.428 0.427 0.09 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.1
Average program size in population (points): 58.637
Average percent parens in population: 0.198
Minimum age in population: 14.0703125
Maximum age in population: 18.150390625
Average age in population: 16.44159765625
Median age in population: 16.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9309431
--- Timings ---
Current time: 1559584722825 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.6 seconds, 58.3%
Fitness Testing:      9.4 seconds, 22.3%
Report:               8.1 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not) integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1) integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Lexicase best errors: [0 0 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.146
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not) integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1) integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Zero cases best errors: [0 0 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (109 109 109 439 1000 438 438 356 110 899)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (109 109 109 439 0 438 438 356 110 899)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_and})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_noop integer_eq boolean_yank exec_k_when_autoconstructing (exec_s_when_autoconstructing (in2 exec_rot (exec_if (integer_dup print_integer print_integer integer_swap in2 integer_yank) () 14 exec_empty) (exec_if () (exec_dup (boolean_pop integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_frominteger integer_fromboolean exec_when (exec_flush boolean_and)))) ()) () ()) ()) ())))
Errors: [0 0 0 1 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 68
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.993
Median total errors in population: 6
Error averages by case: (0.891 0.891 0.891 0.561 1.0 0.562 0.562 0.644 0.89 0.101)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 47.717
Average program size in population (points): 62.919
Average percent parens in population: 0.226
Minimum age in population: 15.228515625
Maximum age in population: 19.6171875
Average age in population: 17.9497099609375
Median age in population: 18.014404296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9946025
--- Timings ---
Current time: 1559584725378 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.4 seconds, 58.8%
Fitness Testing:     10.0 seconds, 22.2%
Report:               8.4 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not) integer_inc boolean_invert_second_then_and in1) integer_sub integer_lte) boolean_eq in3 boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items)
Lexicase best errors: [1 0 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.130
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not) integer_inc boolean_invert_second_then_and in1) integer_sub integer_lte) boolean_eq in3 boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items)
Zero cases best errors: [1 0 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 469 333 468 445 111 469 468 110 911)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (334 469 333 468 445 111 469 468 110 911)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not) integer_inc integer_pop) integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min boolean_not exec_rot (integer_fromboolean boolean_pop) (integer_div) (integer_dup_items) exec_noop integer_lte)
Errors: [1 0 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.882
Median total errors in population: 6
Error averages by case: (0.666 0.531 0.667 0.532 0.555 0.889 0.531 0.532 0.89 0.089)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.048
Average program size in population (points): 56.594
Average percent parens in population: 0.191
Minimum age in population: 16.375
Maximum age in population: 21.203857421875
Average age in population: 19.48404272460938
Median age in population: 19.5506591796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10402321
--- Timings ---
Current time: 1559584727964 milliseconds
Total Time:          47.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 59.8%
Fitness Testing:     10.4 seconds, 21.8%
Report:               8.6 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_389} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_dup integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (tag_exec_389 () exec_noop) (integer_rot print_integer boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Lexicase best errors: [0 1 0 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 36
Percent parens: 0.194
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_389} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_dup integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (tag_exec_389 () exec_noop) (integer_rot print_integer boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Zero cases best errors: [0 1 0 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 36
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 219 500 280 627 1000 280 1000 408 408)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (279 219 500 280 627 0 280 0 408 408)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_rot} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dec} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction tag_integer_395} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction integer_mod} {:close 0, :instruction tag_boolean_882} {:close 1, :instruction integer_min} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_or})
Best program: (boolean_dup_times exec_do*while () boolean_swap integer_rot in3 print_integer exec_noop integer_stackdepth exec_s (exec_k_when_autoconstructing () (exec_y (integer_dec tag_integer_718 boolean_pop) integer_sub boolean_pop boolean_stackdepth exec_while (boolean_dup_items) exec_flush in1 print_newline) boolean_yankdup) (integer_yankdup integer_shove) (integer_dup_items) exec_noop integer_lte integer_swap boolean_xor tag_integer_395 exec_noop integer_eq exec_k (print_newline integer_add exec_when (integer_mod tag_boolean_882 integer_min) exec_k () (boolean_or)) ())
Errors: [0 1 0 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.999
Median total errors in population: 7
Error averages by case: (0.721 0.781 0.5 0.72 0.373 1.0 0.72 1.0 0.592 0.592)
Error minima by case: (0 0 0 0 0 1 0 1 0 0)
Average genome size in population (length): 45.341
Average program size in population (points): 58.666
Average percent parens in population: 0.212
Minimum age in population: 17.8125
Maximum age in population: 22.8765869140625
Average age in population: 20.94974609375
Median age in population: 21.0439453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 10990147
--- Timings ---
Current time: 1559584731359 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 60.4%
Fitness Testing:     10.9 seconds, 21.6%
Report:               8.9 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_gt integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times integer_yankdup integer_eq) (boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add))))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 2, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_add})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_gt integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (boolean_pop exec_when (integer_yankdup integer_flush exec_do*while () boolean_xor integer_max integer_div in2 boolean_not) integer_div boolean_dup_times integer_yankdup integer_eq) (boolean_pop boolean_shove print_integer exec_shove ()) integer_dup exec_y (in3 integer_yankdup integer_add))))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 432 276 219 1 276 709 218 276 432)
Population mean number of elite cases: 3.06
Count of perfect (error zero) individuals by case: (218 432 276 219 1 276 709 218 276 432)
Population mean number of perfect (error zero) cases: 3.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_pop print_integer boolean_dup_times integer_sub) boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items in3 boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte) boolean_eq integer_min) boolean_not) exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 48
Size: 57
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 6.943
Median total errors in population: 7
Error averages by case: (0.782 0.568 0.724 0.781 0.999 0.724 0.291 0.782 0.724 0.568)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.614
Average program size in population (points): 60.367
Average percent parens in population: 0.230
Minimum age in population: 19.015625
Maximum age in population: 24.40814208984375
Average age in population: 22.40442895507812
Median age in population: 22.46484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 11694543
--- Timings ---
Current time: 1559584734728 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.9 seconds, 60.6%
Fitness Testing:     11.5 seconds, 21.1%
Report:               9.8 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 27                 
Correct output: -67                 | Program output: 48                 
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 73                 
Correct output: 3                   | Program output: 35                 
Correct output: 10                  | Program output: 87                 
Correct output: 0                   | Program output: 64                 
Correct output: 15                  | Program output: 38                 
Correct output: 1                   | Program output: 83                 
Correct output: 42                  | Program output: 67                 
Correct output: 11                  | Program output: 35                 
Correct output: 18                  | Program output: 67                 
Correct output: 10                  | Program output: 34                 
Correct output: 15                  | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 64                 
Correct output: 19                  | Program output: 60                 
Correct output: 10                  | Program output: 73                 
Correct output: 15                  | Program output: 32                 
Correct output: 25                  | Program output: 26                 
Correct output: 2                   | Program output: 43                 
Correct output: 29                  | Program output: 76                 
Correct output: 11                  | Program output: 48                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 61                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 36                 
Correct output: 1                   | Program output: 31                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: 94                 
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 95                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: 50                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: 4                  
Correct output: -76                 | Program output: 68                 
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 74                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: 65                 
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 91                 
Correct output: -79                 | Program output: 57                 
Correct output: -84                 | Program output: 12                 
Correct output: -65                 | Program output: 56                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 59                 
Correct output: -87                 | Program output: 49                 
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: 3                  
Correct output: -90                 | Program output: 32                 
Correct output: -80                 | Program output: 49                 
Correct output: -62                 | Program output: 69                 
Correct output: -92                 | Program output: 12                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: 7                  
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: 36                 
Correct output: -58                 | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 34                 
Correct output: -79                 | Program output: 22                 
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: 7                  
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_do*while (in4 boolean_swap in1) exec_when (exec_noop) integer_rot print_integer boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Lexicase best errors: [1 1 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.161
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_do*while (in4 boolean_swap in1) exec_when (exec_noop) integer_rot print_integer boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Zero cases best errors: [1 1 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (325 205 821 111 290 317 327 111 111 291)
Population mean number of elite cases: 2.91
Count of perfect (error zero) individuals by case: (325 205 821 111 290 317 327 111 111 291)
Population mean number of perfect (error zero) cases: 2.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Best program: (exec_do*while (in4 boolean_swap in1) exec_when (exec_noop) integer_rot print_integer boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop exec_when (integer_swap tag_integer_559 boolean_yank))
Errors: [1 1 1 0 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 26
Size: 31
Percent parens: 0.161
--- Population Statistics ---
Average total errors in population: 7.091
Median total errors in population: 7
Error averages by case: (0.675 0.795 0.179 0.889 0.71 0.683 0.673 0.889 0.889 0.709)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.209
Average program size in population (points): 53.777
Average percent parens in population: 0.201
Minimum age in population: 20.015625
Maximum age in population: 25.650634765625
Average age in population: 23.81565734863281
Median age in population: 23.86724853515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 12216452
--- Timings ---
Current time: 1559584737334 milliseconds
Total Time:          56.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.8 seconds, 61.2%
Fitness Testing:     11.9 seconds, 20.9%
Report:              10.1 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction 41} {:close 0, :instruction in1} {:close 0, :instruction tagged_964} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 41} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (boolean_dup_items) exec_flush boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte) exec_rot (exec_flush 41 in1 tagged_964 integer_stackdepth 41 boolean_frominteger boolean_dup_items) (exec_if () ()) ())
Lexicase best errors: [0 0 1 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction 41} {:close 0, :instruction in1} {:close 0, :instruction tagged_964} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction 41} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_if})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (boolean_dup_items) exec_flush boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte) exec_rot (exec_flush 41 in1 tagged_964 integer_stackdepth 41 boolean_frominteger boolean_dup_items) (exec_if () ()) ())
Zero cases best errors: [0 0 1 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 414 700 734 734 224 355 926 223 189)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (223 414 700 734 734 224 355 926 223 189)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (in3 boolean_not integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1) integer_sub integer_lte boolean_eq integer_min) boolean_not exec_yankdup)
Errors: [0 0 1 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 42
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 5.278
Median total errors in population: 5
Error averages by case: (0.777 0.586 0.3 0.266 0.266 0.776 0.645 0.074 0.777 0.811)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.74
Average program size in population (points): 47.516
Average percent parens in population: 0.191
Minimum age in population: 22.38671875
Maximum age in population: 27.15463256835938
Average age in population: 25.19330206298828
Median age in population: 25.26410675048828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 12692720
--- Timings ---
Current time: 1559584740380 milliseconds
Total Time:          60.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.3 seconds, 62.1%
Fitness Testing:     12.3 seconds, 20.5%
Report:              10.3 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_775} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop exec_if (print_integer tag_integer_775 boolean_pop) (boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing (exec_s (in1 exec_eq exec_do*while (integer_lt)) () ()))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_775} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_lt})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop exec_if (print_integer tag_integer_775 boolean_pop) (boolean_shove) exec_swap (integer_mult) (integer_pop integer_pop) exec_y_when_autoconstructing (exec_s (in1 exec_eq exec_do*while (integer_lt)) () ()))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (923 164 165 4 4 4 523 523 523 4)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (923 164 165 4 4 4 523 523 523 4)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 1, :instruction boolean_not})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 in3 exec_noop integer_pop print_integer boolean_dup_times boolean_empty boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 integer_lt in3 boolean_dup) (in3 boolean_not) integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_eq boolean_invert_second_then_and in1) integer_sub integer_lte boolean_eq integer_min boolean_not)
Errors: [0 1 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 7.163
Median total errors in population: 6
Error averages by case: (0.077 0.836 0.835 0.996 0.996 0.996 0.477 0.477 0.477 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.991
Average program size in population (points): 46.483
Average percent parens in population: 0.176
Minimum age in population: 23.38671875
Maximum age in population: 28.95009613037109
Average age in population: 26.71244290161133
Median age in population: 26.80252456665039
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 13050312
--- Timings ---
Current time: 1559584743240 milliseconds
Total Time:          62.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.6 seconds, 63.0%
Fitness Testing:     12.6 seconds, 20.0%
Report:              10.5 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq in3 boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty exec_s_when_autoconstructing (integer_div exec_do*times (exec_do*while (integer_empty boolean_dup_items))) () ())
Lexicase best errors: [0 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq in3 boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty exec_s_when_autoconstructing (integer_div exec_do*times (exec_do*while (integer_empty boolean_dup_items))) () ())
Zero cases best errors: [0 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (514 305 3 208 428 945 304 306 304 2)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (514 305 3 208 428 945 304 306 304 2)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt in3 exec_dup_items) (exec_eq boolean_not) integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () exec_empty in3 boolean_not) integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Errors: [0 0 1 1 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 6.681
Median total errors in population: 7
Error averages by case: (0.486 0.695 0.997 0.792 0.572 0.055 0.696 0.694 0.696 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.514
Average program size in population (points): 47.462
Average percent parens in population: 0.208
Minimum age in population: 25.32359313964844
Maximum age in population: 29.99944305419922
Average age in population: 28.21063366699219
Median age in population: 28.30973052978516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 13365989
--- Timings ---
Current time: 1559584745792 milliseconds
Total Time:          65.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.6 seconds, 63.7%
Fitness Testing:     12.9 seconds, 19.7%
Report:              10.8 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Lexicase best program: (in4 boolean_shove integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and) (in1) integer_sub integer_lte) boolean_eq integer_min) tag_integer_559 boolean_yank)
Lexicase best errors: [0 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Zero cases best program: (in4 boolean_shove integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and) (in1) integer_sub integer_lte) boolean_eq integer_min) tag_integer_559 boolean_yank)
Zero cases best errors: [0 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 462 462 884 881 211 673 462 92 422)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (462 462 462 884 881 211 673 462 92 422)
Population mean number of perfect (error zero) cases: 5.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction tag_integer_718} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_shove} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lte})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop boolean_dup_items print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (exec_pop (integer_yankdup exec_swap (integer_lt exec_noop exec_dup_items) (tag_integer_718 boolean_pop) integer_shove) in1) exec_eq exec_do*while (exec_dup_items in3 integer_div exec_do*times () boolean_and integer_empty boolean_dup_items exec_k (exec_while (print_integer integer_swap in2 integer_yank)) (14 exec_noop print_integer) integer_lte))
Errors: [0 0 0 0 0 1 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 4.989
Median total errors in population: 5
Error averages by case: (0.538 0.538 0.538 0.116 0.119 0.789 0.327 0.538 0.908 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.001
Average program size in population (points): 51.81
Average percent parens in population: 0.186
Minimum age in population: 26.98377227783203
Maximum age in population: 31.39185523986816
Average age in population: 29.72999681854248
Median age in population: 29.75658130645752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 13690770
--- Timings ---
Current time: 1559584748232 milliseconds
Total Time:          67.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.5 seconds, 64.2%
Fitness Testing:     13.1 seconds, 19.4%
Report:              11.1 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 643
Test mean error for best: 0.64300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: 15                 
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 6                  
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: 30                 
Correct output: -73                 | Program output: -60                
Correct output: -92                 | Program output: 85                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 99                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 14                 
Correct output: -6                  | Program output: 62                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: 64                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: 87                 
Correct output: -46                 | Program output: 31                 
Correct output: -69                 | Program output: 20                 
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -22                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -46                
Correct output: -90                 | Program output: 5                  
Correct output: -86                 | Program output: -36                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 52                 
Correct output: -85                 | Program output: 66                 
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -12                
Correct output: -89                 | Program output: 69                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: 98                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 73                 
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (integer_dup_times integer_yankdup exec_swap (integer_lt in3 boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup boolean_not) integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Lexicase best errors: [0 1 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_div} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop integer_pop print_integer boolean_dup_times integer_sub exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (integer_dup_times integer_yankdup exec_swap (integer_lt in3 boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup boolean_not) integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () integer_sub integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Zero cases best errors: [0 1 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (676 142 240 3 918 240 531 532 920 3)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (676 142 240 3 918 240 531 532 920 3)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_integer_559} {:close 0, :instruction boolean_yank})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max integer_rot print_integer boolean_not integer_inc integer_pop integer_sub boolean_yankdup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_lte boolean_eq integer_min integer_pop boolean_dup integer_swap tag_integer_559 boolean_yank)
Errors: [0 1 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 5.795
Median total errors in population: 5
Error averages by case: (0.324 0.858 0.76 0.997 0.082 0.76 0.469 0.468 0.08 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.581
Average program size in population (points): 49.355
Average percent parens in population: 0.197
Minimum age in population: 27.98377227783203
Maximum age in population: 33.21700572967529
Average age in population: 31.1421774520874
Median age in population: 31.1842188835144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 14014485
--- Timings ---
Current time: 1559584750846 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.6 seconds, 64.8%
Fitness Testing:     13.4 seconds, 19.1%
Report:              11.3 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: 27                 
Correct output: -67                 | Program output: 48                 
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 73                 
Correct output: 3                   | Program output: 35                 
Correct output: 10                  | Program output: 87                 
Correct output: 0                   | Program output: 64                 
Correct output: 15                  | Program output: 38                 
Correct output: 1                   | Program output: 83                 
Correct output: 42                  | Program output: 67                 
Correct output: 11                  | Program output: 35                 
Correct output: 18                  | Program output: 67                 
Correct output: 10                  | Program output: 34                 
Correct output: 15                  | Program output: 58                 
Correct output: 7                   | Program output: 7                  
Correct output: 17                  | Program output: 64                 
Correct output: 19                  | Program output: 60                 
Correct output: 10                  | Program output: 73                 
Correct output: 15                  | Program output: 32                 
Correct output: 25                  | Program output: 26                 
Correct output: 2                   | Program output: 43                 
Correct output: 29                  | Program output: 76                 
Correct output: 11                  | Program output: 48                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 61                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 36                 
Correct output: 1                   | Program output: 31                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: 94                 
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 95                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: 50                 
Correct output: -98                 | Program output: 63                 
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: 4                  
Correct output: -76                 | Program output: 68                 
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 74                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: 65                 
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 91                 
Correct output: -79                 | Program output: 57                 
Correct output: -84                 | Program output: 12                 
Correct output: -65                 | Program output: 56                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 59                 
Correct output: -87                 | Program output: 49                 
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: 3                  
Correct output: -90                 | Program output: 32                 
Correct output: -80                 | Program output: 49                 
Correct output: -62                 | Program output: 69                 
Correct output: -92                 | Program output: 12                 
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: 7                  
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: 36                 
Correct output: -58                 | Program output: 82                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 34                 
Correct output: -79                 | Program output: 22                 
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: 7                  
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction -3} {:close 0, :instruction tagged_154} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_empty integer_yank boolean_yank integer_gte in1 in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth boolean_dup_times boolean_dup_items exec_flush boolean_swap print_exec () boolean_yankdup integer_yankdup integer_shove boolean_pop integer_lt boolean_flush exec_dup_items integer_stackdepth boolean_not integer_inc -3 tagged_154 boolean_dup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_flush integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq print_integer integer_swap exec_noop exec_do*range (integer_lt) integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and)) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 62
Percent parens: 0.145
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction -3} {:close 0, :instruction tagged_154} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_empty integer_yank boolean_yank integer_gte in1 in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth boolean_dup_times boolean_dup_items exec_flush boolean_swap print_exec () boolean_yankdup integer_yankdup integer_shove boolean_pop integer_lt boolean_flush exec_dup_items integer_stackdepth boolean_not integer_inc -3 tagged_154 boolean_dup exec_do*times () exec_empty boolean_invert_second_then_and in1 integer_sub integer_flush integer_stackdepth exec_s_when_autoconstructing (integer_div exec_do*times () integer_eq print_integer integer_swap exec_noop exec_do*range (integer_lt) integer_dup_items) (exec_shove (boolean_not integer_pop boolean_invert_second_then_and)) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 62
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 280 142 142 142 280 288 288 142 287)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (142 280 142 142 142 280 288 288 142 287)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_flush})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 21 in2 exec_dup (boolean_xor boolean_swap in1) in2 21 integer_shove print_integer integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_exec () boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty integer_yank exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_flush exec_when (exec_flush)))) ()))
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 58
Size: 73
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.867
Median total errors in population: 8
Error averages by case: (0.858 0.72 0.858 0.858 0.858 0.72 0.712 0.712 0.858 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.068
Average program size in population (points): 49.827
Average percent parens in population: 0.188
Minimum age in population: 29.21511840820312
Maximum age in population: 34.49709272384644
Average age in population: 32.66790535354614
Median age in population: 32.76392078399658
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 14301943
--- Timings ---
Current time: 1559584753143 milliseconds
Total Time:          72.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 65.2%
Fitness Testing:     13.7 seconds, 18.8%
Report:              11.5 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 52                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 47                 
Correct output: 3                   | Program output: 33                 
Correct output: 10                  | Program output: 51                 
Correct output: 0                   | Program output: 87                 
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 22                 
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 84                 
Correct output: 18                  | Program output: 100                
Correct output: 10                  | Program output: 82                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 31                 
Correct output: 17                  | Program output: 73                 
Correct output: 19                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 47                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -57                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: -82                
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 15                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: 87                 
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: -8                 
Correct output: -98                 | Program output: 51                 
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -89                
Correct output: -76                 | Program output: -59                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 92                 
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -84                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: 59                 
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -50                
Correct output: -87                 | Program output: 42                 
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: 41                 
Correct output: -90                 | Program output: 50                 
Correct output: -80                 | Program output: 33                 
Correct output: -62                 | Program output: -46                
Correct output: -92                 | Program output: 10                 
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 77                 
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 100                
Correct output: -58                 | Program output: 76                 
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -47                
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 79                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop exec_rot () (boolean_invert_second_then_and boolean_yank integer_gte in1) (in2 21 integer_shove print_integer) integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth boolean_dup_times boolean_dup_items exec_flush boolean_swap print_exec () boolean_yankdup integer_yankdup integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty integer_yank exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean))) ())
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 71
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction 21} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 exec_noop exec_rot () (boolean_invert_second_then_and boolean_yank integer_gte in1) (in2 21 integer_shove print_integer) integer_swap integer_gte integer_sub boolean_pop boolean_stackdepth boolean_dup_times boolean_dup_items exec_flush boolean_swap print_exec () boolean_yankdup integer_yankdup integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty integer_yank exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean))) ())
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 71
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 3 181 3 643 460 459 276 276 3)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (181 3 181 3 643 460 459 276 276 3)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_sub} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 2, :instruction integer_min} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 2, :instruction integer_dup_items} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth integer_pop print_integer boolean_dup_times integer_sub exec_noop integer_pop print_integer boolean_dup_times integer_sub boolean_swap exec_do*range (integer_dup_times integer_yankdup exec_swap (integer_lt in3 boolean_not) (integer_inc integer_pop) integer_sub boolean_yankdup exec_do*times () integer_sub) integer_lte boolean_eq integer_min boolean_not exec_yankdup integer_fromboolean boolean_pop integer_div integer_dup_items exec_noop integer_lte)
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 47
Percent parens: 0.128
--- Population Statistics ---
Average total errors in population: 7.515
Median total errors in population: 8
Error averages by case: (0.819 0.997 0.819 0.997 0.357 0.54 0.541 0.724 0.724 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.696
Average program size in population (points): 53.931
Average percent parens in population: 0.179
Minimum age in population: 31.91078472137451
Maximum age in population: 35.92316031455994
Average age in population: 34.23857506132126
Median age in population: 34.30066227912903
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 14576582
--- Timings ---
Current time: 1559584756179 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.7 seconds, 65.9%
Fitness Testing:     13.9 seconds, 18.4%
Report:              11.7 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Lexicase best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div exec_flush tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Zero cases best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div exec_flush tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (242 242 807 314 314 327 13 341 911 224)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (242 242 807 314 314 327 13 341 911 224)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())))
Errors: [1 1 0 0 0 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 75
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.265
Median total errors in population: 6
Error averages by case: (0.758 0.758 0.193 0.686 0.686 0.673 0.987 0.659 0.089 0.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.276
Average program size in population (points): 59.354
Average percent parens in population: 0.196
Minimum age in population: 33.30331993103027
Maximum age in population: 37.41315519809723
Average age in population: 35.70843979740143
Median age in population: 35.78773200511932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14920040
--- Timings ---
Current time: 1559584758594 milliseconds
Total Time:          78.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 66.1%
Fitness Testing:     14.2 seconds, 18.2%
Report:              12.2 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Lexicase best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte exec_y (boolean_pop boolean_stackdepth exec_while () boolean_dup_items) exec_flush boolean_swap print_exec ()) (boolean_yankdup) exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())))
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Zero cases best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte exec_y (boolean_pop boolean_stackdepth exec_while () boolean_dup_items) exec_flush boolean_swap print_exec ()) (boolean_yankdup) exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())))
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (531 105 360 531 358 104 240 105 531 240)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (531 105 360 531 358 104 240 105 531 240)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq exec_s (exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ())) () ()))
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.895
Median total errors in population: 7
Error averages by case: (0.469 0.895 0.64 0.469 0.642 0.896 0.76 0.895 0.469 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.765
Average program size in population (points): 60.961
Average percent parens in population: 0.209
Minimum age in population: 34.34111309051514
Maximum age in population: 38.96504718065262
Average age in population: 37.33926863032579
Median age in population: 37.46387082338333
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 15246758
--- Timings ---
Current time: 1559584761307 milliseconds
Total Time:          80.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.8 seconds, 66.6%
Fitness Testing:     14.5 seconds, 17.9%
Report:              12.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s})
Lexicase best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s () () ())) ())))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s})
Zero cases best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s () () ())) ())))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (503 145 489 412 12 493 490 494 494 267)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (503 145 489 412 12 493 490 494 494 267)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_shove})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush exec_shove (print_exec ()) boolean_yankdup) exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_shove ()))) ())))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 57
Size: 76
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.201
Median total errors in population: 7
Error averages by case: (0.497 0.855 0.511 0.588 0.988 0.507 0.51 0.506 0.506 0.733)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.305
Average program size in population (points): 65.092
Average percent parens in population: 0.223
Minimum age in population: 36.06679916381836
Maximum age in population: 40.49789392948151
Average age in population: 38.80079456982017
Median age in population: 38.81968688964844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 15621802
--- Timings ---
Current time: 1559584763816 milliseconds
Total Time:          83.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.8 seconds, 66.9%
Fitness Testing:     14.8 seconds, 17.8%
Report:              12.7 seconds, 15.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 25                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 21                 
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 26                 
Correct output: 42                  | Program output: 66                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 80                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 97                 
Correct output: 15                  | Program output: 33                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 80                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: 51                 
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: 15                 
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: 4                  
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: 81                 
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -41                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 48                 
Correct output: -84                 | Program output: -48                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: 31                 
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -14                
Correct output: -90                 | Program output: -11                
Correct output: -80                 | Program output: -69                
Correct output: -62                 | Program output: -26                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: 61                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Lexicase best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_exec ()) (boolean_yankdup) exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq exec_dup (print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ()))))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_when})
Zero cases best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items exec_flush boolean_swap print_exec ()) (boolean_yankdup) exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq exec_dup (print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 boolean_flush integer_fromboolean exec_when ()))) ()))))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (593 77 599 78 715 156 716 5 5 5)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (593 77 599 78 715 156 716 5 5 5)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction 22} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_integer_543} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_fromboolean})
Best program: (integer_empty integer_yank boolean_yank integer_gte boolean_eq in2 22 in2 exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop) (boolean_stackdepth exec_while () boolean_dup_items) exec_flush exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div boolean_yank tag_integer_543 exec_eq integer_fromboolean))) ())
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.051
Median total errors in population: 6
Error averages by case: (0.407 0.923 0.401 0.922 0.285 0.844 0.284 0.995 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.687
Average program size in population (points): 67.047
Average percent parens in population: 0.225
Minimum age in population: 37.06679916381836
Maximum age in population: 42.22019974887371
Average age in population: 40.3280343310684
Median age in population: 40.35091295838356
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 16001082
--- Timings ---
Current time: 1559584766331 milliseconds
Total Time:          85.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 67.2%
Fitness Testing:     15.1 seconds, 17.6%
Report:              12.9 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max integer_yank boolean_yank exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div))) ())))
Lexicase best errors: [1 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max integer_yank boolean_yank exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div))) ())))
Zero cases best errors: [1 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 872 394 244 303 245 16 303 224 244)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (289 872 394 244 303 245 16 303 224 244)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Best program: (exec_do*while (in4 integer_min) integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Errors: [1 0 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 15
Size: 18
Percent parens: 0.167
--- Population Statistics ---
Average total errors in population: 6.866
Median total errors in population: 6
Error averages by case: (0.711 0.128 0.606 0.756 0.697 0.755 0.984 0.697 0.776 0.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.633
Average program size in population (points): 60.065
Average percent parens in population: 0.217
Minimum age in population: 38.79965710639954
Maximum age in population: 43.69694013148546
Average age in population: 41.61298300855607
Median age in population: 41.65590346977115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 16293571
--- Timings ---
Current time: 1559584768728 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 67.5%
Fitness Testing:     15.4 seconds, 17.4%
Report:              13.2 seconds, 15.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: 85                 
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 49                 
Correct output: 3                   | Program output: 12                 
Correct output: 10                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 64                 
Correct output: 17                  | Program output: 49                 
Correct output: 19                  | Program output: 70                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 52                 
Correct output: 11                  | Program output: 24                 
Correct output: -42                 | Program output: 44                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: 82                 
Correct output: -64                 | Program output: 99                 
Correct output: 1                   | Program output: 75                 
Correct output: -75                 | Program output: -56                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: 87                 
Correct output: -91                 | Program output: 47                 
Correct output: -1                  | Program output: 76                 
Correct output: -97                 | Program output: 76                 
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 46                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -26                
Correct output: -70                 | Program output: 14                 
Correct output: -98                 | Program output: -46                
Correct output: -84                 | Program output: -66                
Correct output: -89                 | Program output: -75                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -9                 
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: 20                 
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -86                
Correct output: -88                 | Program output: 71                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 98                 
Correct output: -24                 | Program output: 40                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -18                
Correct output: -61                 | Program output: 88                 
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -78                
Correct output: -48                 | Program output: 70                 
Correct output: -89                 | Program output: 30                 
Correct output: -43                 | Program output: 6                  
Correct output: -99                 | Program output: -69                
Correct output: -98                 | Program output: -76                
Correct output: -68                 | Program output: 32                 
Correct output: -83                 | Program output: -4                 
Correct output: -76                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 88                 
Correct output: -92                 | Program output: 22                 
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: 84                 
Correct output: -72                 | Program output: 87                 
Correct output: -30                 | Program output: 72                 
Correct output: -47                 | Program output: -47                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth integer_pop in1 in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div))) ())))
Lexicase best errors: [0 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth integer_pop in1 in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div))) ())))
Zero cases best errors: [0 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (78 442 443 25 363 919 443 78 25 78)
Population mean number of elite cases: 2.89
Count of perfect (error zero) individuals by case: (78 442 443 25 363 919 443 78 25 78)
Population mean number of perfect (error zero) cases: 2.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_swap} {:close 2, :instruction print_exec} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_div} {:close 1, :instruction exec_do*times} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 2, :instruction integer_yank} {:close 0, :instruction 14} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_div})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth integer_pop in1 in2 boolean_dup_items integer_shove print_integer exec_swap (integer_gte integer_sub boolean_pop boolean_stackdepth exec_while () boolean_dup_items) (exec_flush boolean_swap print_exec ()) boolean_yankdup exec_dup (integer_shove integer_fromboolean integer_div exec_do*times () integer_eq integer_div exec_do*times () integer_eq integer_empty print_exec (exec_k (exec_while (exec_s (integer_swap in2 integer_yank) () (14 exec_noop boolean_stackdepth) exec_shove (integer_mult integer_dup_times boolean_frominteger integer_div))) ())))
Errors: [0 0 0 1 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 7.106
Median total errors in population: 6
Error averages by case: (0.922 0.558 0.557 0.975 0.637 0.081 0.557 0.922 0.975 0.922)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.101
Average program size in population (points): 51.003
Average percent parens in population: 0.216
Minimum age in population: 39.79965710639954
Maximum age in population: 44.85623918473721
Average age in population: 43.30094483705983
Median age in population: 43.40098731219769
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 193
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 16557523
--- Timings ---
Current time: 1559584771217 milliseconds
Total Time:          90.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.6 seconds, 67.9%
Fitness Testing:     15.6 seconds, 17.2%
Report:              13.4 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 374
Test mean error for best: 0.37400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Lexicase best errors: [0 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Zero cases best errors: [0 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (809 805 809 193 914 803 16 10 26 118)
Population mean number of elite cases: 4.50
Count of perfect (error zero) individuals by case: (809 805 809 193 914 803 16 10 26 118)
Population mean number of perfect (error zero) cases: 4.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Best program: (exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 24
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.497
Median total errors in population: 5
Error averages by case: (0.191 0.195 0.191 0.807 0.086 0.197 0.984 0.99 0.974 0.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.873
Average program size in population (points): 56.938
Average percent parens in population: 0.233
Minimum age in population: 43.04169911891222
Maximum age in population: 46.33151445537806
Average age in population: 45.05909032998793
Median age in population: 45.03870090097189
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.495
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 246
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 16766992
--- Timings ---
Current time: 1559584773558 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 68.2%
Fitness Testing:     15.8 seconds, 17.0%
Report:              13.6 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 374
Test mean error for best: 0.37400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: 68                 
Correct output: -8                  | Program output: 21                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 61                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 18                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 25                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 10                 
Correct output: 15                  | Program output: 15                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 38                 
Correct output: 29                  | Program output: 49                 
Correct output: 11                  | Program output: 22                 
Correct output: -42                 | Program output: -42                
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -60                
Correct output: -64                 | Program output: 32                 
Correct output: 1                   | Program output: 13                 
Correct output: -75                 | Program output: -73                
Correct output: -73                 | Program output: -54                
Correct output: -92                 | Program output: -92                
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: -73                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -6                 
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -2                 
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -33                
Correct output: -46                 | Program output: -39                
Correct output: -69                 | Program output: -21                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -29                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -50                
Correct output: -90                 | Program output: -90                
Correct output: -86                 | Program output: -55                
Correct output: -88                 | Program output: 32                 
Correct output: -79                 | Program output: 9                  
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: 20                 
Correct output: -24                 | Program output: -24                
Correct output: -85                 | Program output: -85                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -48                
Correct output: -89                 | Program output: -10                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -95                
Correct output: -98                 | Program output: -98                
Correct output: -68                 | Program output: -42                
Correct output: -83                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -54                 | Program output: 3                  
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -72                
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 32
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (740 732 740 891 854 880 732 29 756 709)
Population mean number of elite cases: 7.06
Count of perfect (error zero) individuals by case: (740 732 740 891 854 880 732 29 756 709)
Population mean number of perfect (error zero) cases: 7.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Best program: (exec_do*while (in4 integer_max) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max integer_gte exec_noop exec_dup (boolean_xor boolean_swap in1) in2 boolean_dup_items integer_shove print_integer)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 24
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 2.937
Median total errors in population: 1
Error averages by case: (0.26 0.268 0.26 0.109 0.146 0.12 0.268 0.971 0.244 0.291)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.683
Average program size in population (points): 30.192
Average percent parens in population: 0.141
Minimum age in population: 45.10344466939569
Maximum age in population: 48.18449087999761
Average age in population: 47.20818586933054
Median age in population: 47.10221107304096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 280
Genome diversity (% unique genomes):	 0.347
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 301
Syntactic diversity (% unique Push programs):	 0.302
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 17086749
--- Timings ---
Current time: 1559584775898 milliseconds
Total Time:          95.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.4 seconds, 68.5%
Fitness Testing:     16.1 seconds, 16.9%
Report:              13.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 316
Test mean error for best: 0.31600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -34                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer})
Lexicase best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min print_integer)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 20
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 1, :instruction print_integer})
Zero cases best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min print_integer)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 20
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (841 389 920 841 919 389 216 877 389 888)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (841 389 920 841 919 389 216 877 389 888)
Population mean number of perfect (error zero) cases: 6.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 1, :instruction in3} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_eq} {:close 0, :instruction in2} {:close 1, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 1, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer})
Best program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 3.331
Median total errors in population: 4
Error averages by case: (0.159 0.611 0.08 0.159 0.081 0.611 0.784 0.123 0.611 0.112)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.912
Average program size in population (points): 27.557
Average percent parens in population: 0.131
Minimum age in population: 46.10344466939569
Maximum age in population: 50.11097909230739
Average age in population: 48.74661393421004
Median age in population: 48.80365324672312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.389
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.336
Total error diversity:				 0.011
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 17374087
--- Timings ---
Current time: 1559584778261 milliseconds
Total Time:          97.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 68.7%
Fitness Testing:     16.4 seconds, 16.7%
Report:              14.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 32
Successful program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 28


Auto-simplifying with starting size: 28
step: 0
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 500
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1000
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 1500
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2000
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 2500
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3000
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 3500
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4000
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 4500
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

step: 5000
program: (exec_do*while (in4 boolean_shove) integer_eq integer_max in3 boolean_stackdepth exec_do*while (in4 integer_empty) integer_yank boolean_yank integer_gte boolean_eq in2 integer_min integer_eq integer_max boolean_xor boolean_swap in1 in2 boolean_dup_items integer_shove print_integer)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 28

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 316
Test mean error for best: 0.31600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 1
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 1
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 1
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 1
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -53                 | Program output: -53                
Correct output: -14                 | Program output: -14                
Correct output: 15                  | Program output: 15                 
Correct output: -81                 | Program output: -81                
Correct output: -8                  | Program output: -8                 
Correct output: 49                  | Program output: 49                 
Correct output: -77                 | Program output: -77                
Correct output: -41                 | Program output: -41                
Correct output: -67                 | Program output: -67                
Correct output: -39                 | Program output: -39                
Correct output: 70                  | Program output: 70                 
Correct output: -50                 | Program output: -50                
Correct output: -54                 | Program output: -54                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: 15                  | Program output: 46                 
Correct output: 1                   | Program output: 1                  
Correct output: 42                  | Program output: 42                 
Correct output: 11                  | Program output: 11                 
Correct output: 18                  | Program output: 27                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 7                   | Program output: 19                 
Correct output: 17                  | Program output: 17                 
Correct output: 19                  | Program output: 19                 
Correct output: 10                  | Program output: 75                 
Correct output: 15                  | Program output: 18                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 2                  
Correct output: 29                  | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: -42                 | Program output: 19                 
Correct output: -98                 | Program output: -98                
Correct output: -76                 | Program output: -76                
Correct output: -64                 | Program output: -64                
Correct output: 1                   | Program output: 1                  
Correct output: -75                 | Program output: -75                
Correct output: -73                 | Program output: -73                
Correct output: -92                 | Program output: 17                 
Correct output: -91                 | Program output: -91                
Correct output: -1                  | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -74                
Correct output: -81                 | Program output: -81                
Correct output: -73                 | Program output: 39                 
Correct output: -6                  | Program output: 63                 
Correct output: -88                 | Program output: -88                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: -89                 | Program output: -80                
Correct output: -76                 | Program output: -76                
Correct output: -33                 | Program output: -12                
Correct output: -46                 | Program output: -46                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -82                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -52                
Correct output: -86                 | Program output: -51                
Correct output: -88                 | Program output: -88                
Correct output: -79                 | Program output: -79                
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -24                 | Program output: 22                 
Correct output: -85                 | Program output: -75                
Correct output: -64                 | Program output: -64                
Correct output: -87                 | Program output: -87                
Correct output: -61                 | Program output: -61                
Correct output: -93                 | Program output: -93                
Correct output: -90                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -62                 | Program output: -62                
Correct output: -92                 | Program output: -92                
Correct output: -48                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -43                 | Program output: -43                
Correct output: -99                 | Program output: -99                
Correct output: -98                 | Program output: -49                
Correct output: -68                 | Program output: -68                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -31                
Correct output: -92                 | Program output: -51                
Correct output: -54                 | Program output: -54                
Correct output: -79                 | Program output: -79                
Correct output: -72                 | Program output: -4                 
Correct output: -30                 | Program output: -30                
Correct output: -47                 | Program output: -34                
;;******************************
