Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[4 4 4 37] 4] [[-7 -54 -54 -54] -54] [[17 -63 -63 -63] -63] [[60 60 -92 60] -92] [[2 -38 2 2] -38] [[96 -73 96 96] -73] [[8 8 8 23] 8] [[-52 98 -52 -52] -52] [[-82 -92 -92 -92] -92] [[25 -33 25 25] -33] [(11 11 11 11) 11] [(93 93 93 93) 93] [(43 43 43 43) 43] [(-43 -43 -43 -43) -43] [(93 93 93 93) 93] [(78 44 54 74) 44] [(80 56 98 23) 23] [(43 33 36 45) 33] [(35 56 78 73) 35] [(17 44 94 6) 6] [(13 43 4 77) 4] [(11 46 22 1) 1] [(77 38 60 27) 27] [(51 47 37 97) 37] [(77 25 49 53) 25] [(5 63 15 8) 5] [(70 83 83 98) 70] [(65 95 84 31) 31] [(53 49 28 23) 23] [(75 28 62 55) 28] [(53 1 54 87) 1] [(76 14 46 92) 14] [(53 81 39 17) 17] [(47 4 37 85) 4] [(12 68 1 12) 1] [(35 49 98 52) 35] [(-66 -9 -10 -45) -66] [(-68 97 87 39) -68] [(45 20 1 35) 1] [(21 -36 95 22) -36] [(69 78 -67 -5) -67] [(28 29 97 58) 28] [(24 -14 -42 33) -42] [(36 91 -7 -97) -97] [(7 57 -73 8) -73] [(61 96 29 -16) -16] [(-98 -75 -4 -85) -98] [(9 94 -52 22) -52] [(-92 -12 -48 -20) -92] [(62 -68 80 13) -68] [(-38 0 44 -87) -87] [(99 60 99 60) 60] [(-1 -15 62 -4) -15] [(-4 -100 99 50) -100] [(-77 52 53 -83) -83] [(-53 82 -80 -25) -80] [(-50 43 62 -5) -50] [(28 82 70 -58) -58] [(-80 55 42 21) -80] [(-27 -28 62 -37) -37] [(-33 -23 46 -94) -94] [(-50 -80 -58 2) -80] [(-52 74 -4 -46) -52] [(-71 -95 -62 12) -95] [(-67 76 35 35) -67] [(-21 74 -83 -79) -83] [(53 46 9 -60) -60] [(-53 -96 -94 33) -96] [(-42 -41 91 76) -42] [(54 -75 -88 31) -88] [(96 35 -4 7) -4] [(57 -96 32 94) -96] [(5 -26 24 -36) -36] [(-60 87 -33 51) -60] [(50 92 -97 22) -97] [(36 -16 35 76) -16] [(74 3 -65 -43) -65] [(-55 84 -2 -28) -55] [(82 -94 70 42) -94] [(-100 64 -73 -96) -100] [(-69 85 39 74) -69] [(51 -14 -55 -99) -99] [(-10 3 25 -17) -17] [(18 -54 -25 -77) -77] [(-58 -99 -70 84) -99] [(23 -35 28 -47) -47] [(54 -11 -69 18) -69] [(23 74 78 -18) -18] [(28 -54 -20 31) -54] [(71 -8 -59 -64) -64] [(-93 -56 -60 -56) -93] [(-50 -12 44 -4) -50] [(-36 -22 33 8) -36] [(-28 -40 -18 -31) -40] [(49 -77 -15 -6) -77])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[4 4 4 37] 4]
Train Case:   6 | Input/Output: [[-7 -54 -54 -54] -54]
Train Case:   7 | Input/Output: [[17 -63 -63 -63] -63]
Train Case:   8 | Input/Output: [[60 60 -92 60] -92]
Train Case:   9 | Input/Output: [[2 -38 2 2] -38]
Train Case:  10 | Input/Output: [[96 -73 96 96] -73]
Train Case:  11 | Input/Output: [[8 8 8 23] 8]
Train Case:  12 | Input/Output: [[-52 98 -52 -52] -52]
Train Case:  13 | Input/Output: [[-82 -92 -92 -92] -92]
Train Case:  14 | Input/Output: [[25 -33 25 25] -33]
Train Case:  15 | Input/Output: [(11 11 11 11) 11]
Train Case:  16 | Input/Output: [(93 93 93 93) 93]
Train Case:  17 | Input/Output: [(43 43 43 43) 43]
Train Case:  18 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  19 | Input/Output: [(93 93 93 93) 93]
Train Case:  20 | Input/Output: [(78 44 54 74) 44]
Train Case:  21 | Input/Output: [(80 56 98 23) 23]
Train Case:  22 | Input/Output: [(43 33 36 45) 33]
Train Case:  23 | Input/Output: [(35 56 78 73) 35]
Train Case:  24 | Input/Output: [(17 44 94 6) 6]
Train Case:  25 | Input/Output: [(13 43 4 77) 4]
Train Case:  26 | Input/Output: [(11 46 22 1) 1]
Train Case:  27 | Input/Output: [(77 38 60 27) 27]
Train Case:  28 | Input/Output: [(51 47 37 97) 37]
Train Case:  29 | Input/Output: [(77 25 49 53) 25]
Train Case:  30 | Input/Output: [(5 63 15 8) 5]
Train Case:  31 | Input/Output: [(70 83 83 98) 70]
Train Case:  32 | Input/Output: [(65 95 84 31) 31]
Train Case:  33 | Input/Output: [(53 49 28 23) 23]
Train Case:  34 | Input/Output: [(75 28 62 55) 28]
Train Case:  35 | Input/Output: [(53 1 54 87) 1]
Train Case:  36 | Input/Output: [(76 14 46 92) 14]
Train Case:  37 | Input/Output: [(53 81 39 17) 17]
Train Case:  38 | Input/Output: [(47 4 37 85) 4]
Train Case:  39 | Input/Output: [(12 68 1 12) 1]
Train Case:  40 | Input/Output: [(35 49 98 52) 35]
Train Case:  41 | Input/Output: [(-66 -9 -10 -45) -66]
Train Case:  42 | Input/Output: [(-68 97 87 39) -68]
Train Case:  43 | Input/Output: [(45 20 1 35) 1]
Train Case:  44 | Input/Output: [(21 -36 95 22) -36]
Train Case:  45 | Input/Output: [(69 78 -67 -5) -67]
Train Case:  46 | Input/Output: [(28 29 97 58) 28]
Train Case:  47 | Input/Output: [(24 -14 -42 33) -42]
Train Case:  48 | Input/Output: [(36 91 -7 -97) -97]
Train Case:  49 | Input/Output: [(7 57 -73 8) -73]
Train Case:  50 | Input/Output: [(61 96 29 -16) -16]
Train Case:  51 | Input/Output: [(-98 -75 -4 -85) -98]
Train Case:  52 | Input/Output: [(9 94 -52 22) -52]
Train Case:  53 | Input/Output: [(-92 -12 -48 -20) -92]
Train Case:  54 | Input/Output: [(62 -68 80 13) -68]
Train Case:  55 | Input/Output: [(-38 0 44 -87) -87]
Train Case:  56 | Input/Output: [(99 60 99 60) 60]
Train Case:  57 | Input/Output: [(-1 -15 62 -4) -15]
Train Case:  58 | Input/Output: [(-4 -100 99 50) -100]
Train Case:  59 | Input/Output: [(-77 52 53 -83) -83]
Train Case:  60 | Input/Output: [(-53 82 -80 -25) -80]
Train Case:  61 | Input/Output: [(-50 43 62 -5) -50]
Train Case:  62 | Input/Output: [(28 82 70 -58) -58]
Train Case:  63 | Input/Output: [(-80 55 42 21) -80]
Train Case:  64 | Input/Output: [(-27 -28 62 -37) -37]
Train Case:  65 | Input/Output: [(-33 -23 46 -94) -94]
Train Case:  66 | Input/Output: [(-50 -80 -58 2) -80]
Train Case:  67 | Input/Output: [(-52 74 -4 -46) -52]
Train Case:  68 | Input/Output: [(-71 -95 -62 12) -95]
Train Case:  69 | Input/Output: [(-67 76 35 35) -67]
Train Case:  70 | Input/Output: [(-21 74 -83 -79) -83]
Train Case:  71 | Input/Output: [(53 46 9 -60) -60]
Train Case:  72 | Input/Output: [(-53 -96 -94 33) -96]
Train Case:  73 | Input/Output: [(-42 -41 91 76) -42]
Train Case:  74 | Input/Output: [(54 -75 -88 31) -88]
Train Case:  75 | Input/Output: [(96 35 -4 7) -4]
Train Case:  76 | Input/Output: [(57 -96 32 94) -96]
Train Case:  77 | Input/Output: [(5 -26 24 -36) -36]
Train Case:  78 | Input/Output: [(-60 87 -33 51) -60]
Train Case:  79 | Input/Output: [(50 92 -97 22) -97]
Train Case:  80 | Input/Output: [(36 -16 35 76) -16]
Train Case:  81 | Input/Output: [(74 3 -65 -43) -65]
Train Case:  82 | Input/Output: [(-55 84 -2 -28) -55]
Train Case:  83 | Input/Output: [(82 -94 70 42) -94]
Train Case:  84 | Input/Output: [(-100 64 -73 -96) -100]
Train Case:  85 | Input/Output: [(-69 85 39 74) -69]
Train Case:  86 | Input/Output: [(51 -14 -55 -99) -99]
Train Case:  87 | Input/Output: [(-10 3 25 -17) -17]
Train Case:  88 | Input/Output: [(18 -54 -25 -77) -77]
Train Case:  89 | Input/Output: [(-58 -99 -70 84) -99]
Train Case:  90 | Input/Output: [(23 -35 28 -47) -47]
Train Case:  91 | Input/Output: [(54 -11 -69 18) -69]
Train Case:  92 | Input/Output: [(23 74 78 -18) -18]
Train Case:  93 | Input/Output: [(28 -54 -20 31) -54]
Train Case:  94 | Input/Output: [(71 -8 -59 -64) -64]
Train Case:  95 | Input/Output: [(-93 -56 -60 -56) -93]
Train Case:  96 | Input/Output: [(-50 -12 44 -4) -50]
Train Case:  97 | Input/Output: [(-36 -22 33 8) -36]
Train Case:  98 | Input/Output: [(-28 -40 -18 -31) -40]
Train Case:  99 | Input/Output: [(49 -77 -15 -6) -77]
Test Case:   0 | Input/Output: [[17 93 17 17] 17]
Test Case:   1 | Input/Output: [[43 -95 -95 -95] -95]
Test Case:   2 | Input/Output: [[-36 -36 -36 72] -36]
Test Case:   3 | Input/Output: [[-36 -86 -86 -86] -86]
Test Case:   4 | Input/Output: [[-62 -62 -3 -62] -62]
Test Case:   5 | Input/Output: [[-8 -8 -8 -7] -8]
Test Case:   6 | Input/Output: [[-99 -91 -91 -91] -99]
Test Case:   7 | Input/Output: [[-97 -97 -97 -12] -97]
Test Case:   8 | Input/Output: [[-43 -43 -43 -46] -46]
Test Case:   9 | Input/Output: [[19 -94 19 19] -94]
Test Case:  10 | Input/Output: [[-5 -5 -5 -53] -53]
Test Case:  11 | Input/Output: [[-28 -28 -28 -99] -99]
Test Case:  12 | Input/Output: [[3 3 3 86] 3]
Test Case:  13 | Input/Output: [[60 -61 60 60] -61]
Test Case:  14 | Input/Output: [[-96 -96 -96 -38] -96]
Test Case:  15 | Input/Output: [[57 57 -78 57] -78]
Test Case:  16 | Input/Output: [[-62 50 -62 -62] -62]
Test Case:  17 | Input/Output: [[-64 -64 -64 69] -64]
Test Case:  18 | Input/Output: [[-22 -22 -5 -22] -22]
Test Case:  19 | Input/Output: [[-61 -61 -61 -55] -61]
Test Case:  20 | Input/Output: [[-64 -39 -39 -39] -64]
Test Case:  21 | Input/Output: [[-79 -88 -79 -79] -88]
Test Case:  22 | Input/Output: [[8 -5 -5 -5] -5]
Test Case:  23 | Input/Output: [[-50 -88 -88 -88] -88]
Test Case:  24 | Input/Output: [[34 34 34 23] 23]
Test Case:  25 | Input/Output: [[25 33 25 25] 25]
Test Case:  26 | Input/Output: [[-45 -48 -48 -48] -48]
Test Case:  27 | Input/Output: [[-70 56 56 56] -70]
Test Case:  28 | Input/Output: [[-42 -100 -42 -42] -100]
Test Case:  29 | Input/Output: [[-31 -31 6 -31] -31]
Test Case:  30 | Input/Output: [[67 67 10 67] 10]
Test Case:  31 | Input/Output: [[-54 -54 50 -54] -54]
Test Case:  32 | Input/Output: [[35 47 47 47] 35]
Test Case:  33 | Input/Output: [[94 94 58 94] 58]
Test Case:  34 | Input/Output: [[78 78 78 -45] -45]
Test Case:  35 | Input/Output: [[82 -78 -78 -78] -78]
Test Case:  36 | Input/Output: [[14 -3 14 14] -3]
Test Case:  37 | Input/Output: [[32 32 32 -67] -67]
Test Case:  38 | Input/Output: [[-70 -70 -88 -70] -88]
Test Case:  39 | Input/Output: [[-18 -18 -18 -12] -18]
Test Case:  40 | Input/Output: [[-65 -65 99 -65] -65]
Test Case:  41 | Input/Output: [[-6 -7 -7 -7] -7]
Test Case:  42 | Input/Output: [[-70 -70 -72 -70] -72]
Test Case:  43 | Input/Output: [[-35 -35 77 -35] -35]
Test Case:  44 | Input/Output: [[67 67 67 -27] -27]
Test Case:  45 | Input/Output: [[59 59 59 -86] -86]
Test Case:  46 | Input/Output: [[-1 -11 -1 -1] -11]
Test Case:  47 | Input/Output: [[48 44 44 44] 44]
Test Case:  48 | Input/Output: [[-41 -41 66 -41] -41]
Test Case:  49 | Input/Output: [[-62 -65 -65 -65] -65]
Test Case:  50 | Input/Output: [[-3 -3 72 -3] -3]
Test Case:  51 | Input/Output: [[-49 -87 -87 -87] -87]
Test Case:  52 | Input/Output: [[-16 -16 -84 -16] -84]
Test Case:  53 | Input/Output: [[-72 -72 59 -72] -72]
Test Case:  54 | Input/Output: [[-32 64 64 64] -32]
Test Case:  55 | Input/Output: [[60 51 51 51] 51]
Test Case:  56 | Input/Output: [[20 20 45 20] 20]
Test Case:  57 | Input/Output: [[5 11 11 11] 5]
Test Case:  58 | Input/Output: [[-96 -96 -96 -29] -96]
Test Case:  59 | Input/Output: [[94 33 94 94] 33]
Test Case:  60 | Input/Output: [[54 54 89 54] 54]
Test Case:  61 | Input/Output: [[30 29 29 29] 29]
Test Case:  62 | Input/Output: [[91 76 76 76] 76]
Test Case:  63 | Input/Output: [[-87 -87 -87 -73] -87]
Test Case:  64 | Input/Output: [[16 -8 -8 -8] -8]
Test Case:  65 | Input/Output: [[-71 97 -71 -71] -71]
Test Case:  66 | Input/Output: [[-24 -24 -24 -80] -80]
Test Case:  67 | Input/Output: [[-69 -69 -69 25] -69]
Test Case:  68 | Input/Output: [[-17 -17 -30 -17] -30]
Test Case:  69 | Input/Output: [[-77 -87 -87 -87] -87]
Test Case:  70 | Input/Output: [[-62 51 51 51] -62]
Test Case:  71 | Input/Output: [[-23 63 -23 -23] -23]
Test Case:  72 | Input/Output: [[31 31 -2 31] -2]
Test Case:  73 | Input/Output: [[59 55 55 55] 55]
Test Case:  74 | Input/Output: [[25 25 75 25] 25]
Test Case:  75 | Input/Output: [[-50 -50 -50 11] -50]
Test Case:  76 | Input/Output: [[-9 -9 -9 -85] -85]
Test Case:  77 | Input/Output: [[-81 -81 14 -81] -81]
Test Case:  78 | Input/Output: [[-34 85 85 85] -34]
Test Case:  79 | Input/Output: [[57 57 10 57] 10]
Test Case:  80 | Input/Output: [[-56 -56 -56 97] -56]
Test Case:  81 | Input/Output: [[44 29 29 29] 29]
Test Case:  82 | Input/Output: [[-28 -28 16 -28] -28]
Test Case:  83 | Input/Output: [[-58 77 -58 -58] -58]
Test Case:  84 | Input/Output: [[-64 65 65 65] -64]
Test Case:  85 | Input/Output: [[71 92 71 71] 71]
Test Case:  86 | Input/Output: [[-10 -10 -10 66] -10]
Test Case:  87 | Input/Output: [[-45 -45 -45 -92] -92]
Test Case:  88 | Input/Output: [[28 -9 -9 -9] -9]
Test Case:  89 | Input/Output: [[75 75 61 75] 61]
Test Case:  90 | Input/Output: [[-90 -90 83 -90] -90]
Test Case:  91 | Input/Output: [[-57 -57 -57 81] -57]
Test Case:  92 | Input/Output: [[96 96 96 65] 65]
Test Case:  93 | Input/Output: [[42 -71 -71 -71] -71]
Test Case:  94 | Input/Output: [[-97 8 8 8] -97]
Test Case:  95 | Input/Output: [[-21 -35 -21 -21] -35]
Test Case:  96 | Input/Output: [[-7 -7 -7 -42] -42]
Test Case:  97 | Input/Output: [[41 41 41 34] 34]
Test Case:  98 | Input/Output: [[-5 -5 -5 -52] -52]
Test Case:  99 | Input/Output: [[-33 69 69 69] -33]
Test Case: 100 | Input/Output: [(75 75 75 75) 75]
Test Case: 101 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 102 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 103 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 104 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 105 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 106 | Input/Output: [(75 75 75 75) 75]
Test Case: 107 | Input/Output: [(2 2 2 2) 2]
Test Case: 108 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 109 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 110 | Input/Output: [(39 39 39 39) 39]
Test Case: 111 | Input/Output: [(30 30 30 30) 30]
Test Case: 112 | Input/Output: [(56 56 56 56) 56]
Test Case: 113 | Input/Output: [(83 83 83 83) 83]
Test Case: 114 | Input/Output: [(93 93 93 93) 93]
Test Case: 115 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 116 | Input/Output: [(43 43 43 43) 43]
Test Case: 117 | Input/Output: [(19 19 19 19) 19]
Test Case: 118 | Input/Output: [(28 28 28 28) 28]
Test Case: 119 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 120 | Input/Output: [(40 40 40 40) 40]
Test Case: 121 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 122 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 123 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 124 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 125 | Input/Output: [(29 29 29 29) 29]
Test Case: 126 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 127 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 128 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 129 | Input/Output: [(87 87 87 87) 87]
Test Case: 130 | Input/Output: [(29 29 29 29) 29]
Test Case: 131 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 132 | Input/Output: [(69 69 69 69) 69]
Test Case: 133 | Input/Output: [(27 27 27 27) 27]
Test Case: 134 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 135 | Input/Output: [(57 57 57 57) 57]
Test Case: 136 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 137 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 138 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 139 | Input/Output: [(100 100 100 100) 100]
Test Case: 140 | Input/Output: [(5 5 5 5) 5]
Test Case: 141 | Input/Output: [(72 72 72 72) 72]
Test Case: 142 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 143 | Input/Output: [(70 70 70 70) 70]
Test Case: 144 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 145 | Input/Output: [(10 10 10 10) 10]
Test Case: 146 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 147 | Input/Output: [(42 42 42 42) 42]
Test Case: 148 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 149 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 150 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 151 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 152 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 153 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 154 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 155 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 156 | Input/Output: [(59 59 59 59) 59]
Test Case: 157 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 158 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 159 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 160 | Input/Output: [(58 58 58 58) 58]
Test Case: 161 | Input/Output: [(51 51 51 51) 51]
Test Case: 162 | Input/Output: [(77 77 77 77) 77]
Test Case: 163 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 164 | Input/Output: [(75 75 75 75) 75]
Test Case: 165 | Input/Output: [(76 76 76 76) 76]
Test Case: 166 | Input/Output: [(93 93 93 93) 93]
Test Case: 167 | Input/Output: [(43 43 43 43) 43]
Test Case: 168 | Input/Output: [(73 73 73 73) 73]
Test Case: 169 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 170 | Input/Output: [(15 15 15 15) 15]
Test Case: 171 | Input/Output: [(35 35 35 35) 35]
Test Case: 172 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 173 | Input/Output: [(1 1 1 1) 1]
Test Case: 174 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 175 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 176 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 177 | Input/Output: [(56 56 56 56) 56]
Test Case: 178 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 179 | Input/Output: [(31 31 31 31) 31]
Test Case: 180 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 181 | Input/Output: [(98 98 98 98) 98]
Test Case: 182 | Input/Output: [(13 13 13 13) 13]
Test Case: 183 | Input/Output: [(17 17 17 17) 17]
Test Case: 184 | Input/Output: [(50 50 50 50) 50]
Test Case: 185 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 186 | Input/Output: [(35 35 35 35) 35]
Test Case: 187 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 188 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 189 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 190 | Input/Output: [(37 37 37 37) 37]
Test Case: 191 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 192 | Input/Output: [(93 93 93 93) 93]
Test Case: 193 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 194 | Input/Output: [(41 41 41 41) 41]
Test Case: 195 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 196 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 197 | Input/Output: [(12 12 12 12) 12]
Test Case: 198 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 199 | Input/Output: [(11 11 11 11) 11]
Test Case: 200 | Input/Output: [(17 1 24 65) 1]
Test Case: 201 | Input/Output: [(48 33 17 79) 17]
Test Case: 202 | Input/Output: [(89 58 36 44) 36]
Test Case: 203 | Input/Output: [(59 53 83 9) 9]
Test Case: 204 | Input/Output: [(19 90 31 70) 19]
Test Case: 205 | Input/Output: [(7 64 48 27) 7]
Test Case: 206 | Input/Output: [(92 10 71 67) 10]
Test Case: 207 | Input/Output: [(16 54 8 63) 8]
Test Case: 208 | Input/Output: [(62 82 37 11) 11]
Test Case: 209 | Input/Output: [(44 62 51 58) 44]
Test Case: 210 | Input/Output: [(64 100 70 72) 64]
Test Case: 211 | Input/Output: [(45 74 86 21) 21]
Test Case: 212 | Input/Output: [(6 48 81 84) 6]
Test Case: 213 | Input/Output: [(24 79 32 88) 24]
Test Case: 214 | Input/Output: [(75 53 82 19) 19]
Test Case: 215 | Input/Output: [(38 13 38 17) 13]
Test Case: 216 | Input/Output: [(47 24 70 38) 24]
Test Case: 217 | Input/Output: [(47 2 100 12) 2]
Test Case: 218 | Input/Output: [(29 23 16 93) 16]
Test Case: 219 | Input/Output: [(15 68 50 13) 13]
Test Case: 220 | Input/Output: [(4 36 50 65) 4]
Test Case: 221 | Input/Output: [(42 90 88 71) 42]
Test Case: 222 | Input/Output: [(38 18 46 34) 18]
Test Case: 223 | Input/Output: [(8 59 59 35) 8]
Test Case: 224 | Input/Output: [(21 13 98 12) 12]
Test Case: 225 | Input/Output: [(59 75 13 6) 6]
Test Case: 226 | Input/Output: [(69 97 43 81) 43]
Test Case: 227 | Input/Output: [(50 73 84 27) 27]
Test Case: 228 | Input/Output: [(76 26 18 100) 18]
Test Case: 229 | Input/Output: [(26 78 83 2) 2]
Test Case: 230 | Input/Output: [(94 26 0 39) 0]
Test Case: 231 | Input/Output: [(75 93 18 39) 18]
Test Case: 232 | Input/Output: [(61 65 91 66) 61]
Test Case: 233 | Input/Output: [(44 59 37 9) 9]
Test Case: 234 | Input/Output: [(1 91 62 46) 1]
Test Case: 235 | Input/Output: [(13 12 20 3) 3]
Test Case: 236 | Input/Output: [(27 44 22 93) 22]
Test Case: 237 | Input/Output: [(5 38 25 95) 5]
Test Case: 238 | Input/Output: [(89 80 37 61) 37]
Test Case: 239 | Input/Output: [(31 6 99 13) 6]
Test Case: 240 | Input/Output: [(35 92 5 85) 5]
Test Case: 241 | Input/Output: [(64 54 89 93) 54]
Test Case: 242 | Input/Output: [(37 85 79 45) 37]
Test Case: 243 | Input/Output: [(92 47 36 68) 36]
Test Case: 244 | Input/Output: [(87 30 44 37) 30]
Test Case: 245 | Input/Output: [(25 64 52 95) 25]
Test Case: 246 | Input/Output: [(70 47 52 68) 47]
Test Case: 247 | Input/Output: [(17 48 71 16) 16]
Test Case: 248 | Input/Output: [(34 18 29 32) 18]
Test Case: 249 | Input/Output: [(28 21 58 10) 10]
Test Case: 250 | Input/Output: [(58 41 36 28) 28]
Test Case: 251 | Input/Output: [(93 39 66 96) 39]
Test Case: 252 | Input/Output: [(54 90 10 80) 10]
Test Case: 253 | Input/Output: [(86 46 86 18) 18]
Test Case: 254 | Input/Output: [(55 6 0 18) 0]
Test Case: 255 | Input/Output: [(68 44 35 4) 4]
Test Case: 256 | Input/Output: [(20 58 96 22) 20]
Test Case: 257 | Input/Output: [(34 14 51 3) 3]
Test Case: 258 | Input/Output: [(61 44 30 97) 30]
Test Case: 259 | Input/Output: [(72 40 98 76) 40]
Test Case: 260 | Input/Output: [(34 90 42 51) 34]
Test Case: 261 | Input/Output: [(87 97 53 74) 53]
Test Case: 262 | Input/Output: [(15 87 61 45) 15]
Test Case: 263 | Input/Output: [(56 92 6 63) 6]
Test Case: 264 | Input/Output: [(92 16 5 44) 5]
Test Case: 265 | Input/Output: [(66 39 49 55) 39]
Test Case: 266 | Input/Output: [(66 71 58 15) 15]
Test Case: 267 | Input/Output: [(13 62 78 21) 13]
Test Case: 268 | Input/Output: [(24 32 32 80) 24]
Test Case: 269 | Input/Output: [(85 55 83 96) 55]
Test Case: 270 | Input/Output: [(63 81 40 93) 40]
Test Case: 271 | Input/Output: [(38 30 99 66) 30]
Test Case: 272 | Input/Output: [(54 22 94 10) 10]
Test Case: 273 | Input/Output: [(43 35 36 90) 35]
Test Case: 274 | Input/Output: [(87 85 35 8) 8]
Test Case: 275 | Input/Output: [(87 42 75 25) 25]
Test Case: 276 | Input/Output: [(60 21 86 71) 21]
Test Case: 277 | Input/Output: [(27 88 29 8) 8]
Test Case: 278 | Input/Output: [(11 5 28 77) 5]
Test Case: 279 | Input/Output: [(38 87 0 43) 0]
Test Case: 280 | Input/Output: [(88 12 76 14) 12]
Test Case: 281 | Input/Output: [(6 37 22 35) 6]
Test Case: 282 | Input/Output: [(60 51 2 50) 2]
Test Case: 283 | Input/Output: [(1 47 44 86) 1]
Test Case: 284 | Input/Output: [(74 46 6 21) 6]
Test Case: 285 | Input/Output: [(75 57 89 29) 29]
Test Case: 286 | Input/Output: [(12 80 36 13) 12]
Test Case: 287 | Input/Output: [(6 94 99 96) 6]
Test Case: 288 | Input/Output: [(75 54 18 57) 18]
Test Case: 289 | Input/Output: [(30 4 91 16) 4]
Test Case: 290 | Input/Output: [(73 3 78 87) 3]
Test Case: 291 | Input/Output: [(58 21 61 66) 21]
Test Case: 292 | Input/Output: [(21 15 97 83) 15]
Test Case: 293 | Input/Output: [(29 29 11 17) 11]
Test Case: 294 | Input/Output: [(14 54 82 49) 14]
Test Case: 295 | Input/Output: [(58 48 25 61) 25]
Test Case: 296 | Input/Output: [(0 99 99 62) 0]
Test Case: 297 | Input/Output: [(31 74 42 16) 16]
Test Case: 298 | Input/Output: [(67 27 42 17) 17]
Test Case: 299 | Input/Output: [(71 69 80 87) 69]
Test Case: 300 | Input/Output: [(27 71 34 80) 27]
Test Case: 301 | Input/Output: [(86 83 49 46) 46]
Test Case: 302 | Input/Output: [(6 78 88 13) 6]
Test Case: 303 | Input/Output: [(82 43 19 58) 19]
Test Case: 304 | Input/Output: [(51 30 47 48) 30]
Test Case: 305 | Input/Output: [(35 30 7 67) 7]
Test Case: 306 | Input/Output: [(22 67 46 84) 22]
Test Case: 307 | Input/Output: [(40 86 64 16) 16]
Test Case: 308 | Input/Output: [(19 67 74 62) 19]
Test Case: 309 | Input/Output: [(85 6 65 22) 6]
Test Case: 310 | Input/Output: [(9 17 0 26) 0]
Test Case: 311 | Input/Output: [(25 50 25 29) 25]
Test Case: 312 | Input/Output: [(81 50 16 55) 16]
Test Case: 313 | Input/Output: [(96 68 54 20) 20]
Test Case: 314 | Input/Output: [(53 23 58 92) 23]
Test Case: 315 | Input/Output: [(55 77 73 35) 35]
Test Case: 316 | Input/Output: [(8 83 59 65) 8]
Test Case: 317 | Input/Output: [(34 36 7 57) 7]
Test Case: 318 | Input/Output: [(72 17 91 54) 17]
Test Case: 319 | Input/Output: [(65 70 82 43) 43]
Test Case: 320 | Input/Output: [(90 28 100 75) 28]
Test Case: 321 | Input/Output: [(100 51 41 15) 15]
Test Case: 322 | Input/Output: [(23 9 15 19) 9]
Test Case: 323 | Input/Output: [(81 38 5 92) 5]
Test Case: 324 | Input/Output: [(20 43 55 93) 20]
Test Case: 325 | Input/Output: [(13 26 99 76) 13]
Test Case: 326 | Input/Output: [(49 86 41 44) 41]
Test Case: 327 | Input/Output: [(43 12 18 81) 12]
Test Case: 328 | Input/Output: [(69 80 32 50) 32]
Test Case: 329 | Input/Output: [(93 80 68 26) 26]
Test Case: 330 | Input/Output: [(48 82 54 48) 48]
Test Case: 331 | Input/Output: [(6 43 42 45) 6]
Test Case: 332 | Input/Output: [(78 60 94 41) 41]
Test Case: 333 | Input/Output: [(30 46 44 29) 29]
Test Case: 334 | Input/Output: [(56 90 94 66) 56]
Test Case: 335 | Input/Output: [(55 28 44 91) 28]
Test Case: 336 | Input/Output: [(85 99 95 67) 67]
Test Case: 337 | Input/Output: [(74 17 32 67) 17]
Test Case: 338 | Input/Output: [(52 46 27 12) 12]
Test Case: 339 | Input/Output: [(19 79 93 98) 19]
Test Case: 340 | Input/Output: [(7 11 4 31) 4]
Test Case: 341 | Input/Output: [(97 38 7 72) 7]
Test Case: 342 | Input/Output: [(10 38 90 79) 10]
Test Case: 343 | Input/Output: [(95 87 97 53) 53]
Test Case: 344 | Input/Output: [(91 11 65 35) 11]
Test Case: 345 | Input/Output: [(38 14 1 93) 1]
Test Case: 346 | Input/Output: [(79 38 96 24) 24]
Test Case: 347 | Input/Output: [(62 86 33 22) 22]
Test Case: 348 | Input/Output: [(9 94 47 79) 9]
Test Case: 349 | Input/Output: [(96 8 8 31) 8]
Test Case: 350 | Input/Output: [(61 1 51 72) 1]
Test Case: 351 | Input/Output: [(11 59 11 10) 10]
Test Case: 352 | Input/Output: [(49 29 52 32) 29]
Test Case: 353 | Input/Output: [(85 16 72 24) 16]
Test Case: 354 | Input/Output: [(45 59 80 48) 45]
Test Case: 355 | Input/Output: [(63 3 8 56) 3]
Test Case: 356 | Input/Output: [(16 80 18 6) 6]
Test Case: 357 | Input/Output: [(51 28 78 47) 28]
Test Case: 358 | Input/Output: [(100 33 68 23) 23]
Test Case: 359 | Input/Output: [(33 66 95 11) 11]
Test Case: 360 | Input/Output: [(48 14 76 28) 14]
Test Case: 361 | Input/Output: [(92 45 31 95) 31]
Test Case: 362 | Input/Output: [(88 85 57 20) 20]
Test Case: 363 | Input/Output: [(68 37 94 2) 2]
Test Case: 364 | Input/Output: [(11 83 17 97) 11]
Test Case: 365 | Input/Output: [(83 52 4 65) 4]
Test Case: 366 | Input/Output: [(99 30 4 96) 4]
Test Case: 367 | Input/Output: [(58 22 5 56) 5]
Test Case: 368 | Input/Output: [(69 22 82 88) 22]
Test Case: 369 | Input/Output: [(58 85 65 15) 15]
Test Case: 370 | Input/Output: [(12 88 25 22) 12]
Test Case: 371 | Input/Output: [(38 9 12 7) 7]
Test Case: 372 | Input/Output: [(40 75 77 47) 40]
Test Case: 373 | Input/Output: [(62 61 65 51) 51]
Test Case: 374 | Input/Output: [(1 92 84 74) 1]
Test Case: 375 | Input/Output: [(82 94 77 22) 22]
Test Case: 376 | Input/Output: [(60 5 75 26) 5]
Test Case: 377 | Input/Output: [(1 53 8 13) 1]
Test Case: 378 | Input/Output: [(99 84 39 41) 39]
Test Case: 379 | Input/Output: [(75 33 90 13) 13]
Test Case: 380 | Input/Output: [(61 86 22 19) 19]
Test Case: 381 | Input/Output: [(22 21 66 65) 21]
Test Case: 382 | Input/Output: [(47 15 97 89) 15]
Test Case: 383 | Input/Output: [(69 7 13 44) 7]
Test Case: 384 | Input/Output: [(6 1 50 77) 1]
Test Case: 385 | Input/Output: [(3 32 10 48) 3]
Test Case: 386 | Input/Output: [(40 5 85 96) 5]
Test Case: 387 | Input/Output: [(62 58 54 92) 54]
Test Case: 388 | Input/Output: [(22 45 12 38) 12]
Test Case: 389 | Input/Output: [(54 35 96 21) 21]
Test Case: 390 | Input/Output: [(67 14 7 15) 7]
Test Case: 391 | Input/Output: [(46 3 7 12) 3]
Test Case: 392 | Input/Output: [(2 21 48 82) 2]
Test Case: 393 | Input/Output: [(48 18 35 40) 18]
Test Case: 394 | Input/Output: [(78 52 65 1) 1]
Test Case: 395 | Input/Output: [(33 84 6 11) 6]
Test Case: 396 | Input/Output: [(8 49 75 23) 8]
Test Case: 397 | Input/Output: [(71 37 70 79) 37]
Test Case: 398 | Input/Output: [(19 0 56 64) 0]
Test Case: 399 | Input/Output: [(53 19 69 50) 19]
Test Case: 400 | Input/Output: [(-31 -92 -98 -33) -98]
Test Case: 401 | Input/Output: [(-100 -16 -65 0) -100]
Test Case: 402 | Input/Output: [(61 -75 8 -41) -75]
Test Case: 403 | Input/Output: [(39 75 59 8) 8]
Test Case: 404 | Input/Output: [(8 11 -91 19) -91]
Test Case: 405 | Input/Output: [(-45 -70 83 -69) -70]
Test Case: 406 | Input/Output: [(-73 -65 -47 48) -73]
Test Case: 407 | Input/Output: [(27 96 -76 -66) -76]
Test Case: 408 | Input/Output: [(-28 100 88 1) -28]
Test Case: 409 | Input/Output: [(80 -79 48 -50) -79]
Test Case: 410 | Input/Output: [(31 -56 -11 -74) -74]
Test Case: 411 | Input/Output: [(81 -5 -93 42) -93]
Test Case: 412 | Input/Output: [(-47 -89 24 87) -89]
Test Case: 413 | Input/Output: [(-76 76 20 20) -76]
Test Case: 414 | Input/Output: [(50 99 -48 84) -48]
Test Case: 415 | Input/Output: [(46 -100 97 97) -100]
Test Case: 416 | Input/Output: [(-79 92 59 46) -79]
Test Case: 417 | Input/Output: [(-100 -100 -48 56) -100]
Test Case: 418 | Input/Output: [(25 -66 62 -64) -66]
Test Case: 419 | Input/Output: [(-47 -34 -8 -49) -49]
Test Case: 420 | Input/Output: [(-11 48 12 -79) -79]
Test Case: 421 | Input/Output: [(28 27 -43 -31) -43]
Test Case: 422 | Input/Output: [(-25 -70 -28 -85) -85]
Test Case: 423 | Input/Output: [(-89 73 45 -46) -89]
Test Case: 424 | Input/Output: [(92 97 74 73) 73]
Test Case: 425 | Input/Output: [(53 62 88 42) 42]
Test Case: 426 | Input/Output: [(-23 -71 -24 3) -71]
Test Case: 427 | Input/Output: [(20 98 -49 -64) -64]
Test Case: 428 | Input/Output: [(72 -60 -75 -51) -75]
Test Case: 429 | Input/Output: [(42 -99 -31 -21) -99]
Test Case: 430 | Input/Output: [(-73 40 -62 16) -73]
Test Case: 431 | Input/Output: [(66 35 68 21) 21]
Test Case: 432 | Input/Output: [(-57 -90 -51 -92) -92]
Test Case: 433 | Input/Output: [(8 -94 -53 -50) -94]
Test Case: 434 | Input/Output: [(28 44 88 -29) -29]
Test Case: 435 | Input/Output: [(5 -30 -42 7) -42]
Test Case: 436 | Input/Output: [(-75 -25 80 13) -75]
Test Case: 437 | Input/Output: [(-97 -38 98 71) -97]
Test Case: 438 | Input/Output: [(-5 -54 22 66) -54]
Test Case: 439 | Input/Output: [(49 50 -89 3) -89]
Test Case: 440 | Input/Output: [(91 -6 -64 53) -64]
Test Case: 441 | Input/Output: [(-56 -94 95 0) -94]
Test Case: 442 | Input/Output: [(-23 48 -49 -77) -77]
Test Case: 443 | Input/Output: [(78 -13 -17 -11) -17]
Test Case: 444 | Input/Output: [(-30 48 -14 -98) -98]
Test Case: 445 | Input/Output: [(-81 91 -93 -75) -93]
Test Case: 446 | Input/Output: [(52 -98 -13 -8) -98]
Test Case: 447 | Input/Output: [(-50 37 54 55) -50]
Test Case: 448 | Input/Output: [(58 31 -81 -38) -81]
Test Case: 449 | Input/Output: [(63 74 48 -97) -97]
Test Case: 450 | Input/Output: [(12 49 -29 -24) -29]
Test Case: 451 | Input/Output: [(-42 -52 0 67) -52]
Test Case: 452 | Input/Output: [(-57 -30 61 61) -57]
Test Case: 453 | Input/Output: [(-11 -58 -47 100) -58]
Test Case: 454 | Input/Output: [(14 9 7 -47) -47]
Test Case: 455 | Input/Output: [(8 14 -76 56) -76]
Test Case: 456 | Input/Output: [(41 23 -24 -84) -84]
Test Case: 457 | Input/Output: [(-15 60 -5 87) -15]
Test Case: 458 | Input/Output: [(30 -77 4 -60) -77]
Test Case: 459 | Input/Output: [(-82 24 29 -92) -92]
Test Case: 460 | Input/Output: [(-69 -41 36 -68) -69]
Test Case: 461 | Input/Output: [(-31 87 -90 82) -90]
Test Case: 462 | Input/Output: [(94 -97 10 -35) -97]
Test Case: 463 | Input/Output: [(31 58 -11 -98) -98]
Test Case: 464 | Input/Output: [(-97 64 93 56) -97]
Test Case: 465 | Input/Output: [(-29 -54 -92 -27) -92]
Test Case: 466 | Input/Output: [(58 65 53 -56) -56]
Test Case: 467 | Input/Output: [(5 -73 -14 61) -73]
Test Case: 468 | Input/Output: [(25 28 47 -56) -56]
Test Case: 469 | Input/Output: [(56 36 -75 38) -75]
Test Case: 470 | Input/Output: [(41 37 46 32) 32]
Test Case: 471 | Input/Output: [(3 -64 -61 -64) -64]
Test Case: 472 | Input/Output: [(59 -84 59 45) -84]
Test Case: 473 | Input/Output: [(-18 -21 -89 3) -89]
Test Case: 474 | Input/Output: [(-65 -39 -1 -15) -65]
Test Case: 475 | Input/Output: [(-43 33 30 -32) -43]
Test Case: 476 | Input/Output: [(52 97 -25 -60) -60]
Test Case: 477 | Input/Output: [(-30 -50 -64 -12) -64]
Test Case: 478 | Input/Output: [(42 10 68 22) 10]
Test Case: 479 | Input/Output: [(-93 -100 -18 -19) -100]
Test Case: 480 | Input/Output: [(64 -70 18 -73) -73]
Test Case: 481 | Input/Output: [(41 -57 -21 -79) -79]
Test Case: 482 | Input/Output: [(-64 -1 -20 -81) -81]
Test Case: 483 | Input/Output: [(14 -91 -46 -68) -91]
Test Case: 484 | Input/Output: [(19 -21 -66 8) -66]
Test Case: 485 | Input/Output: [(32 57 -4 11) -4]
Test Case: 486 | Input/Output: [(-6 -56 23 15) -56]
Test Case: 487 | Input/Output: [(-97 -27 -68 -94) -97]
Test Case: 488 | Input/Output: [(-95 87 2 -10) -95]
Test Case: 489 | Input/Output: [(-43 -45 -34 -58) -58]
Test Case: 490 | Input/Output: [(-17 -90 92 -66) -90]
Test Case: 491 | Input/Output: [(22 -90 -79 14) -90]
Test Case: 492 | Input/Output: [(50 55 1 -14) -14]
Test Case: 493 | Input/Output: [(-3 47 69 24) -3]
Test Case: 494 | Input/Output: [(24 43 -22 33) -22]
Test Case: 495 | Input/Output: [(90 57 98 -98) -98]
Test Case: 496 | Input/Output: [(-18 -94 -25 48) -94]
Test Case: 497 | Input/Output: [(-100 -5 -9 31) -100]
Test Case: 498 | Input/Output: [(-92 -21 53 -40) -92]
Test Case: 499 | Input/Output: [(-90 -49 68 -87) -90]
Test Case: 500 | Input/Output: [(18 -37 -1 -4) -37]
Test Case: 501 | Input/Output: [(23 -19 36 67) -19]
Test Case: 502 | Input/Output: [(-81 69 100 5) -81]
Test Case: 503 | Input/Output: [(44 -72 94 -91) -91]
Test Case: 504 | Input/Output: [(19 88 -76 -62) -76]
Test Case: 505 | Input/Output: [(43 16 -29 4) -29]
Test Case: 506 | Input/Output: [(47 -38 20 -20) -38]
Test Case: 507 | Input/Output: [(3 -91 -37 -53) -91]
Test Case: 508 | Input/Output: [(72 68 59 -73) -73]
Test Case: 509 | Input/Output: [(-1 30 -17 -47) -47]
Test Case: 510 | Input/Output: [(96 -58 -35 100) -58]
Test Case: 511 | Input/Output: [(-80 72 -88 82) -88]
Test Case: 512 | Input/Output: [(37 92 -17 25) -17]
Test Case: 513 | Input/Output: [(-76 -80 94 83) -80]
Test Case: 514 | Input/Output: [(-29 1 -11 -40) -40]
Test Case: 515 | Input/Output: [(24 -25 -13 -100) -100]
Test Case: 516 | Input/Output: [(-78 -96 -9 100) -96]
Test Case: 517 | Input/Output: [(-98 -2 -26 -100) -100]
Test Case: 518 | Input/Output: [(39 2 -38 -62) -62]
Test Case: 519 | Input/Output: [(60 -93 -83 -19) -93]
Test Case: 520 | Input/Output: [(20 7 63 -24) -24]
Test Case: 521 | Input/Output: [(14 -60 82 -12) -60]
Test Case: 522 | Input/Output: [(-45 -63 38 53) -63]
Test Case: 523 | Input/Output: [(-13 7 0 45) -13]
Test Case: 524 | Input/Output: [(-6 -50 -97 -26) -97]
Test Case: 525 | Input/Output: [(-7 71 59 -95) -95]
Test Case: 526 | Input/Output: [(17 38 -50 25) -50]
Test Case: 527 | Input/Output: [(-27 1 85 42) -27]
Test Case: 528 | Input/Output: [(-6 86 40 25) -6]
Test Case: 529 | Input/Output: [(-13 80 56 32) -13]
Test Case: 530 | Input/Output: [(4 -52 -45 81) -52]
Test Case: 531 | Input/Output: [(12 -96 0 35) -96]
Test Case: 532 | Input/Output: [(-51 -74 82 70) -74]
Test Case: 533 | Input/Output: [(-65 -42 85 -46) -65]
Test Case: 534 | Input/Output: [(63 15 54 81) 15]
Test Case: 535 | Input/Output: [(95 54 87 5) 5]
Test Case: 536 | Input/Output: [(88 -23 -59 67) -59]
Test Case: 537 | Input/Output: [(42 -50 -86 -19) -86]
Test Case: 538 | Input/Output: [(34 -15 -53 -30) -53]
Test Case: 539 | Input/Output: [(8 89 -75 54) -75]
Test Case: 540 | Input/Output: [(-20 6 3 -19) -20]
Test Case: 541 | Input/Output: [(42 -31 -73 -1) -73]
Test Case: 542 | Input/Output: [(2 44 7 -46) -46]
Test Case: 543 | Input/Output: [(49 -82 8 -74) -82]
Test Case: 544 | Input/Output: [(52 24 -54 -79) -79]
Test Case: 545 | Input/Output: [(70 -37 -50 62) -50]
Test Case: 546 | Input/Output: [(86 -46 -63 73) -63]
Test Case: 547 | Input/Output: [(67 96 78 -25) -25]
Test Case: 548 | Input/Output: [(-50 68 -38 91) -50]
Test Case: 549 | Input/Output: [(-37 -72 -40 59) -72]
Test Case: 550 | Input/Output: [(45 7 23 9) 7]
Test Case: 551 | Input/Output: [(-83 29 99 -3) -83]
Test Case: 552 | Input/Output: [(45 -67 86 -29) -67]
Test Case: 553 | Input/Output: [(-79 15 -28 -42) -79]
Test Case: 554 | Input/Output: [(-14 80 -35 -32) -35]
Test Case: 555 | Input/Output: [(-96 58 -12 26) -96]
Test Case: 556 | Input/Output: [(0 63 -95 0) -95]
Test Case: 557 | Input/Output: [(-32 -43 10 64) -43]
Test Case: 558 | Input/Output: [(59 -22 65 -17) -22]
Test Case: 559 | Input/Output: [(-46 -51 -31 -50) -51]
Test Case: 560 | Input/Output: [(-38 -19 87 98) -38]
Test Case: 561 | Input/Output: [(-59 19 -83 13) -83]
Test Case: 562 | Input/Output: [(53 51 -19 77) -19]
Test Case: 563 | Input/Output: [(96 -70 -14 77) -70]
Test Case: 564 | Input/Output: [(56 64 -40 66) -40]
Test Case: 565 | Input/Output: [(-8 85 -72 30) -72]
Test Case: 566 | Input/Output: [(8 89 88 -100) -100]
Test Case: 567 | Input/Output: [(-16 80 -42 -50) -50]
Test Case: 568 | Input/Output: [(65 -24 -19 -58) -58]
Test Case: 569 | Input/Output: [(-67 -18 28 -42) -67]
Test Case: 570 | Input/Output: [(67 -15 77 70) -15]
Test Case: 571 | Input/Output: [(13 -17 -40 -50) -50]
Test Case: 572 | Input/Output: [(59 27 4 77) 4]
Test Case: 573 | Input/Output: [(-37 -35 71 25) -37]
Test Case: 574 | Input/Output: [(-12 -7 -61 -70) -70]
Test Case: 575 | Input/Output: [(-35 -38 -42 -4) -42]
Test Case: 576 | Input/Output: [(29 -87 42 -3) -87]
Test Case: 577 | Input/Output: [(80 33 22 -28) -28]
Test Case: 578 | Input/Output: [(70 -68 64 -43) -68]
Test Case: 579 | Input/Output: [(70 -84 88 28) -84]
Test Case: 580 | Input/Output: [(-57 -26 9 73) -57]
Test Case: 581 | Input/Output: [(9 75 -66 34) -66]
Test Case: 582 | Input/Output: [(29 -34 -76 39) -76]
Test Case: 583 | Input/Output: [(8 -68 -25 54) -68]
Test Case: 584 | Input/Output: [(-87 -39 -3 -82) -87]
Test Case: 585 | Input/Output: [(-44 -29 20 -45) -45]
Test Case: 586 | Input/Output: [(-7 72 -82 -48) -82]
Test Case: 587 | Input/Output: [(44 5 -74 44) -74]
Test Case: 588 | Input/Output: [(-4 -63 80 -84) -84]
Test Case: 589 | Input/Output: [(28 79 -14 -37) -37]
Test Case: 590 | Input/Output: [(40 -46 -25 -5) -46]
Test Case: 591 | Input/Output: [(21 0 -4 6) -4]
Test Case: 592 | Input/Output: [(18 -40 49 -82) -82]
Test Case: 593 | Input/Output: [(5 -5 4 87) -5]
Test Case: 594 | Input/Output: [(-27 11 -64 30) -64]
Test Case: 595 | Input/Output: [(60 8 13 -95) -95]
Test Case: 596 | Input/Output: [(80 -80 47 -61) -80]
Test Case: 597 | Input/Output: [(79 -16 61 -39) -39]
Test Case: 598 | Input/Output: [(-51 17 66 31) -51]
Test Case: 599 | Input/Output: [(17 68 -71 -13) -71]
Test Case: 600 | Input/Output: [(69 -43 79 99) -43]
Test Case: 601 | Input/Output: [(17 -10 -46 -95) -95]
Test Case: 602 | Input/Output: [(-36 40 -71 13) -71]
Test Case: 603 | Input/Output: [(75 -33 -77 -28) -77]
Test Case: 604 | Input/Output: [(-96 64 17 59) -96]
Test Case: 605 | Input/Output: [(-91 97 -14 -22) -91]
Test Case: 606 | Input/Output: [(-80 0 -14 26) -80]
Test Case: 607 | Input/Output: [(36 -34 -69 21) -69]
Test Case: 608 | Input/Output: [(84 17 -63 -91) -91]
Test Case: 609 | Input/Output: [(94 23 48 65) 23]
Test Case: 610 | Input/Output: [(20 10 -18 -8) -18]
Test Case: 611 | Input/Output: [(39 -38 56 -31) -38]
Test Case: 612 | Input/Output: [(-73 0 -86 -71) -86]
Test Case: 613 | Input/Output: [(-22 78 38 72) -22]
Test Case: 614 | Input/Output: [(-41 73 -79 -81) -81]
Test Case: 615 | Input/Output: [(36 -87 93 43) -87]
Test Case: 616 | Input/Output: [(-91 15 -63 -11) -91]
Test Case: 617 | Input/Output: [(84 13 -43 -92) -92]
Test Case: 618 | Input/Output: [(29 -17 -25 -92) -92]
Test Case: 619 | Input/Output: [(-31 40 31 76) -31]
Test Case: 620 | Input/Output: [(-11 80 29 -59) -59]
Test Case: 621 | Input/Output: [(-73 -20 -42 -76) -76]
Test Case: 622 | Input/Output: [(69 -64 30 38) -64]
Test Case: 623 | Input/Output: [(0 -92 90 18) -92]
Test Case: 624 | Input/Output: [(90 52 78 -71) -71]
Test Case: 625 | Input/Output: [(-27 -45 -89 -90) -90]
Test Case: 626 | Input/Output: [(-26 79 41 -67) -67]
Test Case: 627 | Input/Output: [(81 -30 16 12) -30]
Test Case: 628 | Input/Output: [(71 -15 -44 33) -44]
Test Case: 629 | Input/Output: [(58 -91 -16 29) -91]
Test Case: 630 | Input/Output: [(-36 26 75 61) -36]
Test Case: 631 | Input/Output: [(18 32 -40 10) -40]
Test Case: 632 | Input/Output: [(100 -95 74 -82) -95]
Test Case: 633 | Input/Output: [(5 -89 -7 7) -89]
Test Case: 634 | Input/Output: [(-30 93 -37 43) -37]
Test Case: 635 | Input/Output: [(34 -62 -18 -92) -92]
Test Case: 636 | Input/Output: [(-56 72 -29 11) -56]
Test Case: 637 | Input/Output: [(-86 76 -22 30) -86]
Test Case: 638 | Input/Output: [(-59 82 59 78) -59]
Test Case: 639 | Input/Output: [(74 -79 -11 -6) -79]
Test Case: 640 | Input/Output: [(82 -7 36 62) -7]
Test Case: 641 | Input/Output: [(-81 -42 -71 -74) -81]
Test Case: 642 | Input/Output: [(-65 -96 41 75) -96]
Test Case: 643 | Input/Output: [(-49 40 -48 42) -49]
Test Case: 644 | Input/Output: [(8 35 37 80) 8]
Test Case: 645 | Input/Output: [(55 -29 34 33) -29]
Test Case: 646 | Input/Output: [(-89 -37 -65 1) -89]
Test Case: 647 | Input/Output: [(-54 -43 57 21) -54]
Test Case: 648 | Input/Output: [(32 -84 -35 49) -84]
Test Case: 649 | Input/Output: [(48 17 1 22) 1]
Test Case: 650 | Input/Output: [(83 90 -79 23) -79]
Test Case: 651 | Input/Output: [(66 -56 -45 -30) -56]
Test Case: 652 | Input/Output: [(15 50 -61 -6) -61]
Test Case: 653 | Input/Output: [(14 100 95 -1) -1]
Test Case: 654 | Input/Output: [(1 12 52 -99) -99]
Test Case: 655 | Input/Output: [(3 82 -14 -31) -31]
Test Case: 656 | Input/Output: [(-60 8 -71 -3) -71]
Test Case: 657 | Input/Output: [(-90 75 -62 -3) -90]
Test Case: 658 | Input/Output: [(-7 -23 -45 86) -45]
Test Case: 659 | Input/Output: [(-68 -49 -98 -14) -98]
Test Case: 660 | Input/Output: [(-55 14 17 -31) -55]
Test Case: 661 | Input/Output: [(36 55 -51 -19) -51]
Test Case: 662 | Input/Output: [(3 -97 -49 -95) -97]
Test Case: 663 | Input/Output: [(37 58 44 -83) -83]
Test Case: 664 | Input/Output: [(20 78 34 11) 11]
Test Case: 665 | Input/Output: [(83 54 32 45) 32]
Test Case: 666 | Input/Output: [(-39 -15 79 37) -39]
Test Case: 667 | Input/Output: [(-84 82 -70 71) -84]
Test Case: 668 | Input/Output: [(-86 -20 -98 -87) -98]
Test Case: 669 | Input/Output: [(74 -39 52 55) -39]
Test Case: 670 | Input/Output: [(10 49 96 23) 10]
Test Case: 671 | Input/Output: [(41 94 -72 -71) -72]
Test Case: 672 | Input/Output: [(59 -55 -74 6) -74]
Test Case: 673 | Input/Output: [(-51 67 -11 91) -51]
Test Case: 674 | Input/Output: [(92 78 -14 -42) -42]
Test Case: 675 | Input/Output: [(-87 -36 69 87) -87]
Test Case: 676 | Input/Output: [(1 -84 -19 -13) -84]
Test Case: 677 | Input/Output: [(-81 -94 -31 61) -94]
Test Case: 678 | Input/Output: [(-75 -19 -79 -97) -97]
Test Case: 679 | Input/Output: [(98 2 1 60) 1]
Test Case: 680 | Input/Output: [(57 31 -26 22) -26]
Test Case: 681 | Input/Output: [(46 73 82 -12) -12]
Test Case: 682 | Input/Output: [(-48 -40 -37 78) -48]
Test Case: 683 | Input/Output: [(94 -25 66 91) -25]
Test Case: 684 | Input/Output: [(35 -62 88 -96) -96]
Test Case: 685 | Input/Output: [(-64 50 -73 -41) -73]
Test Case: 686 | Input/Output: [(-73 -42 66 59) -73]
Test Case: 687 | Input/Output: [(-58 58 64 93) -58]
Test Case: 688 | Input/Output: [(-15 -61 -30 -56) -61]
Test Case: 689 | Input/Output: [(26 86 -60 38) -60]
Test Case: 690 | Input/Output: [(-85 2 -61 85) -85]
Test Case: 691 | Input/Output: [(-76 50 22 -68) -76]
Test Case: 692 | Input/Output: [(-85 20 -75 -86) -86]
Test Case: 693 | Input/Output: [(13 70 -25 87) -25]
Test Case: 694 | Input/Output: [(-70 -27 -27 -19) -70]
Test Case: 695 | Input/Output: [(-58 -65 100 -60) -65]
Test Case: 696 | Input/Output: [(84 34 83 40) 34]
Test Case: 697 | Input/Output: [(-28 -34 22 -73) -73]
Test Case: 698 | Input/Output: [(24 -67 -57 -87) -87]
Test Case: 699 | Input/Output: [(65 84 89 84) 65]
Test Case: 700 | Input/Output: [(60 59 -37 26) -37]
Test Case: 701 | Input/Output: [(-1 -63 19 -32) -63]
Test Case: 702 | Input/Output: [(-15 40 88 96) -15]
Test Case: 703 | Input/Output: [(-45 -96 74 -51) -96]
Test Case: 704 | Input/Output: [(23 -26 90 98) -26]
Test Case: 705 | Input/Output: [(-55 74 10 -45) -55]
Test Case: 706 | Input/Output: [(16 -36 -80 83) -80]
Test Case: 707 | Input/Output: [(37 -22 -18 -26) -26]
Test Case: 708 | Input/Output: [(-54 -80 -76 -78) -80]
Test Case: 709 | Input/Output: [(-7 25 24 62) -7]
Test Case: 710 | Input/Output: [(40 97 -35 -44) -44]
Test Case: 711 | Input/Output: [(76 79 62 8) 8]
Test Case: 712 | Input/Output: [(-4 -16 -52 -2) -52]
Test Case: 713 | Input/Output: [(88 -42 -28 14) -42]
Test Case: 714 | Input/Output: [(-37 76 -65 -94) -94]
Test Case: 715 | Input/Output: [(30 29 42 -84) -84]
Test Case: 716 | Input/Output: [(52 -42 50 77) -42]
Test Case: 717 | Input/Output: [(58 97 -60 37) -60]
Test Case: 718 | Input/Output: [(97 -17 -59 -9) -59]
Test Case: 719 | Input/Output: [(96 59 41 37) 37]
Test Case: 720 | Input/Output: [(92 -86 -70 51) -86]
Test Case: 721 | Input/Output: [(-45 -38 81 72) -45]
Test Case: 722 | Input/Output: [(96 -57 93 60) -57]
Test Case: 723 | Input/Output: [(99 -50 37 70) -50]
Test Case: 724 | Input/Output: [(11 57 17 -76) -76]
Test Case: 725 | Input/Output: [(38 70 98 -25) -25]
Test Case: 726 | Input/Output: [(40 24 14 -98) -98]
Test Case: 727 | Input/Output: [(66 -26 30 55) -26]
Test Case: 728 | Input/Output: [(34 22 51 63) 22]
Test Case: 729 | Input/Output: [(32 80 -51 -63) -63]
Test Case: 730 | Input/Output: [(-3 -70 -49 60) -70]
Test Case: 731 | Input/Output: [(-21 -48 97 -4) -48]
Test Case: 732 | Input/Output: [(-86 19 33 -68) -86]
Test Case: 733 | Input/Output: [(100 -30 91 97) -30]
Test Case: 734 | Input/Output: [(79 25 -74 -84) -84]
Test Case: 735 | Input/Output: [(75 42 73 -87) -87]
Test Case: 736 | Input/Output: [(41 -100 -32 50) -100]
Test Case: 737 | Input/Output: [(45 6 16 -78) -78]
Test Case: 738 | Input/Output: [(57 -65 50 -12) -65]
Test Case: 739 | Input/Output: [(-31 26 96 -72) -72]
Test Case: 740 | Input/Output: [(51 -94 -85 92) -94]
Test Case: 741 | Input/Output: [(-7 74 -25 39) -25]
Test Case: 742 | Input/Output: [(-32 28 92 -74) -74]
Test Case: 743 | Input/Output: [(12 -38 -27 -78) -78]
Test Case: 744 | Input/Output: [(-66 2 -48 -72) -72]
Test Case: 745 | Input/Output: [(-91 -89 -27 52) -91]
Test Case: 746 | Input/Output: [(8 -93 -74 -1) -93]
Test Case: 747 | Input/Output: [(-64 -70 -62 -4) -70]
Test Case: 748 | Input/Output: [(33 46 -80 53) -80]
Test Case: 749 | Input/Output: [(26 12 -98 16) -98]
Test Case: 750 | Input/Output: [(2 -51 -21 -82) -82]
Test Case: 751 | Input/Output: [(34 -39 31 -85) -85]
Test Case: 752 | Input/Output: [(52 -44 -78 3) -78]
Test Case: 753 | Input/Output: [(2 -52 5 60) -52]
Test Case: 754 | Input/Output: [(-98 3 16 43) -98]
Test Case: 755 | Input/Output: [(70 78 26 27) 26]
Test Case: 756 | Input/Output: [(-4 39 51 59) -4]
Test Case: 757 | Input/Output: [(-17 -66 -82 -99) -99]
Test Case: 758 | Input/Output: [(-35 66 -27 -2) -35]
Test Case: 759 | Input/Output: [(47 4 93 -83) -83]
Test Case: 760 | Input/Output: [(-52 -90 39 85) -90]
Test Case: 761 | Input/Output: [(-78 -21 -10 25) -78]
Test Case: 762 | Input/Output: [(88 -47 94 -26) -47]
Test Case: 763 | Input/Output: [(-76 -27 32 -92) -92]
Test Case: 764 | Input/Output: [(73 -2 -22 -93) -93]
Test Case: 765 | Input/Output: [(43 -85 30 -19) -85]
Test Case: 766 | Input/Output: [(24 -40 79 -74) -74]
Test Case: 767 | Input/Output: [(31 -27 -65 68) -65]
Test Case: 768 | Input/Output: [(-22 93 29 -98) -98]
Test Case: 769 | Input/Output: [(7 -57 -9 46) -57]
Test Case: 770 | Input/Output: [(-11 49 -90 -74) -90]
Test Case: 771 | Input/Output: [(-74 -79 -2 -91) -91]
Test Case: 772 | Input/Output: [(36 -97 -9 -63) -97]
Test Case: 773 | Input/Output: [(-88 -63 92 -66) -88]
Test Case: 774 | Input/Output: [(-66 -62 -40 64) -66]
Test Case: 775 | Input/Output: [(81 66 -95 -3) -95]
Test Case: 776 | Input/Output: [(64 74 -9 92) -9]
Test Case: 777 | Input/Output: [(56 25 -38 -98) -98]
Test Case: 778 | Input/Output: [(-54 -75 58 24) -75]
Test Case: 779 | Input/Output: [(-25 -63 -24 -11) -63]
Test Case: 780 | Input/Output: [(81 33 79 -68) -68]
Test Case: 781 | Input/Output: [(-48 -96 66 74) -96]
Test Case: 782 | Input/Output: [(38 29 87 -68) -68]
Test Case: 783 | Input/Output: [(88 7 -85 -11) -85]
Test Case: 784 | Input/Output: [(16 59 3 93) 3]
Test Case: 785 | Input/Output: [(34 -59 -95 -55) -95]
Test Case: 786 | Input/Output: [(29 100 -4 -44) -44]
Test Case: 787 | Input/Output: [(39 95 27 -80) -80]
Test Case: 788 | Input/Output: [(-84 -59 39 -75) -84]
Test Case: 789 | Input/Output: [(-21 81 75 58) -21]
Test Case: 790 | Input/Output: [(52 24 -67 15) -67]
Test Case: 791 | Input/Output: [(-96 -89 -1 -96) -96]
Test Case: 792 | Input/Output: [(-28 -17 1 40) -28]
Test Case: 793 | Input/Output: [(18 6 -10 63) -10]
Test Case: 794 | Input/Output: [(13 -46 84 -25) -46]
Test Case: 795 | Input/Output: [(-83 -97 -92 -39) -97]
Test Case: 796 | Input/Output: [(57 43 27 80) 27]
Test Case: 797 | Input/Output: [(34 -17 -8 -78) -78]
Test Case: 798 | Input/Output: [(55 -98 98 -58) -98]
Test Case: 799 | Input/Output: [(-27 23 -1 37) -27]
Test Case: 800 | Input/Output: [(-53 -79 11 84) -79]
Test Case: 801 | Input/Output: [(16 22 58 -27) -27]
Test Case: 802 | Input/Output: [(99 -65 88 95) -65]
Test Case: 803 | Input/Output: [(32 -23 -80 -6) -80]
Test Case: 804 | Input/Output: [(-9 88 -53 -82) -82]
Test Case: 805 | Input/Output: [(-78 -93 -15 -4) -93]
Test Case: 806 | Input/Output: [(63 63 78 -73) -73]
Test Case: 807 | Input/Output: [(6 5 -16 100) -16]
Test Case: 808 | Input/Output: [(34 -15 42 -37) -37]
Test Case: 809 | Input/Output: [(81 47 -13 -40) -40]
Test Case: 810 | Input/Output: [(32 -70 -4 -58) -70]
Test Case: 811 | Input/Output: [(96 21 89 95) 21]
Test Case: 812 | Input/Output: [(53 -51 90 -9) -51]
Test Case: 813 | Input/Output: [(69 -94 73 22) -94]
Test Case: 814 | Input/Output: [(-44 -6 -41 -34) -44]
Test Case: 815 | Input/Output: [(10 9 53 4) 4]
Test Case: 816 | Input/Output: [(-81 63 -10 -92) -92]
Test Case: 817 | Input/Output: [(-76 34 -40 78) -76]
Test Case: 818 | Input/Output: [(72 63 -28 -40) -40]
Test Case: 819 | Input/Output: [(25 -59 3 67) -59]
Test Case: 820 | Input/Output: [(-84 -13 9 61) -84]
Test Case: 821 | Input/Output: [(17 73 86 37) 17]
Test Case: 822 | Input/Output: [(-82 56 -73 -36) -82]
Test Case: 823 | Input/Output: [(-62 25 25 76) -62]
Test Case: 824 | Input/Output: [(-35 -16 9 -96) -96]
Test Case: 825 | Input/Output: [(-73 0 92 39) -73]
Test Case: 826 | Input/Output: [(-43 92 78 -11) -43]
Test Case: 827 | Input/Output: [(96 -76 -46 61) -76]
Test Case: 828 | Input/Output: [(77 -61 -10 -73) -73]
Test Case: 829 | Input/Output: [(-87 87 18 23) -87]
Test Case: 830 | Input/Output: [(85 -35 94 97) -35]
Test Case: 831 | Input/Output: [(21 85 76 -1) -1]
Test Case: 832 | Input/Output: [(38 -48 51 84) -48]
Test Case: 833 | Input/Output: [(-37 -64 97 76) -64]
Test Case: 834 | Input/Output: [(-52 -66 58 -95) -95]
Test Case: 835 | Input/Output: [(63 65 50 -60) -60]
Test Case: 836 | Input/Output: [(-47 -94 27 65) -94]
Test Case: 837 | Input/Output: [(-99 -84 -32 54) -99]
Test Case: 838 | Input/Output: [(-60 -12 95 43) -60]
Test Case: 839 | Input/Output: [(100 -7 -46 99) -46]
Test Case: 840 | Input/Output: [(-77 -42 76 -27) -77]
Test Case: 841 | Input/Output: [(46 -9 5 -13) -13]
Test Case: 842 | Input/Output: [(-75 -3 55 -65) -75]
Test Case: 843 | Input/Output: [(12 75 -53 -9) -53]
Test Case: 844 | Input/Output: [(-93 -2 -94 1) -94]
Test Case: 845 | Input/Output: [(22 -46 24 -39) -46]
Test Case: 846 | Input/Output: [(52 -50 -65 -82) -82]
Test Case: 847 | Input/Output: [(-84 -100 -58 -34) -100]
Test Case: 848 | Input/Output: [(94 -86 -33 45) -86]
Test Case: 849 | Input/Output: [(55 88 42 -50) -50]
Test Case: 850 | Input/Output: [(17 83 86 -70) -70]
Test Case: 851 | Input/Output: [(-76 -78 81 18) -78]
Test Case: 852 | Input/Output: [(-5 -28 89 72) -28]
Test Case: 853 | Input/Output: [(-58 87 -44 4) -58]
Test Case: 854 | Input/Output: [(-11 -92 84 75) -92]
Test Case: 855 | Input/Output: [(58 33 1 42) 1]
Test Case: 856 | Input/Output: [(-23 95 78 23) -23]
Test Case: 857 | Input/Output: [(93 95 -57 -51) -57]
Test Case: 858 | Input/Output: [(48 79 -100 1) -100]
Test Case: 859 | Input/Output: [(-6 56 -96 -46) -96]
Test Case: 860 | Input/Output: [(-76 65 93 -67) -76]
Test Case: 861 | Input/Output: [(73 5 -90 77) -90]
Test Case: 862 | Input/Output: [(16 58 5 -56) -56]
Test Case: 863 | Input/Output: [(-25 97 5 -13) -25]
Test Case: 864 | Input/Output: [(78 18 -50 75) -50]
Test Case: 865 | Input/Output: [(-62 53 75 -14) -62]
Test Case: 866 | Input/Output: [(45 14 42 -89) -89]
Test Case: 867 | Input/Output: [(60 -69 -42 61) -69]
Test Case: 868 | Input/Output: [(62 74 44 -89) -89]
Test Case: 869 | Input/Output: [(51 -64 -75 67) -75]
Test Case: 870 | Input/Output: [(-22 -73 -88 -67) -88]
Test Case: 871 | Input/Output: [(9 -43 58 18) -43]
Test Case: 872 | Input/Output: [(49 -95 98 17) -95]
Test Case: 873 | Input/Output: [(-89 88 -70 -72) -89]
Test Case: 874 | Input/Output: [(92 -89 -89 -79) -89]
Test Case: 875 | Input/Output: [(22 31 -66 96) -66]
Test Case: 876 | Input/Output: [(32 -100 -26 -34) -100]
Test Case: 877 | Input/Output: [(-12 -68 -21 89) -68]
Test Case: 878 | Input/Output: [(79 -30 -4 85) -30]
Test Case: 879 | Input/Output: [(-95 -17 -100 -97) -100]
Test Case: 880 | Input/Output: [(-32 3 -31 27) -32]
Test Case: 881 | Input/Output: [(74 30 -80 51) -80]
Test Case: 882 | Input/Output: [(78 -38 -19 -32) -38]
Test Case: 883 | Input/Output: [(-75 67 84 -32) -75]
Test Case: 884 | Input/Output: [(49 -96 41 -66) -96]
Test Case: 885 | Input/Output: [(-72 99 98 -17) -72]
Test Case: 886 | Input/Output: [(76 11 -26 -88) -88]
Test Case: 887 | Input/Output: [(-81 47 63 -53) -81]
Test Case: 888 | Input/Output: [(7 4 -4 28) -4]
Test Case: 889 | Input/Output: [(-65 0 -86 -57) -86]
Test Case: 890 | Input/Output: [(54 61 -88 -29) -88]
Test Case: 891 | Input/Output: [(-66 2 42 22) -66]
Test Case: 892 | Input/Output: [(-49 -71 -7 -30) -71]
Test Case: 893 | Input/Output: [(18 -51 36 6) -51]
Test Case: 894 | Input/Output: [(31 74 90 48) 31]
Test Case: 895 | Input/Output: [(87 70 -48 -72) -72]
Test Case: 896 | Input/Output: [(-91 -56 -8 25) -91]
Test Case: 897 | Input/Output: [(-100 93 -57 -77) -100]
Test Case: 898 | Input/Output: [(-35 -83 -19 -6) -83]
Test Case: 899 | Input/Output: [(-88 -87 -40 -71) -88]
Test Case: 900 | Input/Output: [(-53 4 -61 -75) -75]
Test Case: 901 | Input/Output: [(-13 50 11 95) -13]
Test Case: 902 | Input/Output: [(-77 77 -90 99) -90]
Test Case: 903 | Input/Output: [(12 80 89 -23) -23]
Test Case: 904 | Input/Output: [(96 -26 -17 86) -26]
Test Case: 905 | Input/Output: [(19 -94 -41 40) -94]
Test Case: 906 | Input/Output: [(-60 -61 65 -73) -73]
Test Case: 907 | Input/Output: [(-97 -13 90 65) -97]
Test Case: 908 | Input/Output: [(66 66 -67 -58) -67]
Test Case: 909 | Input/Output: [(20 -24 -89 67) -89]
Test Case: 910 | Input/Output: [(-57 -76 -94 0) -94]
Test Case: 911 | Input/Output: [(57 -22 -73 -39) -73]
Test Case: 912 | Input/Output: [(100 -8 39 -45) -45]
Test Case: 913 | Input/Output: [(-87 72 79 -66) -87]
Test Case: 914 | Input/Output: [(-97 -19 -93 -61) -97]
Test Case: 915 | Input/Output: [(-24 -56 89 49) -56]
Test Case: 916 | Input/Output: [(-27 15 66 -62) -62]
Test Case: 917 | Input/Output: [(-55 76 -46 91) -55]
Test Case: 918 | Input/Output: [(96 -87 -18 -31) -87]
Test Case: 919 | Input/Output: [(-9 38 -41 -66) -66]
Test Case: 920 | Input/Output: [(0 -98 -41 85) -98]
Test Case: 921 | Input/Output: [(50 -92 13 -33) -92]
Test Case: 922 | Input/Output: [(99 35 -48 64) -48]
Test Case: 923 | Input/Output: [(-13 12 -86 -93) -93]
Test Case: 924 | Input/Output: [(-28 3 -77 83) -77]
Test Case: 925 | Input/Output: [(-68 -74 -31 80) -74]
Test Case: 926 | Input/Output: [(86 -65 16 -14) -65]
Test Case: 927 | Input/Output: [(-26 -62 -60 -52) -62]
Test Case: 928 | Input/Output: [(-99 -16 75 81) -99]
Test Case: 929 | Input/Output: [(-9 -82 -2 -97) -97]
Test Case: 930 | Input/Output: [(34 2 -17 -94) -94]
Test Case: 931 | Input/Output: [(-38 -17 9 -33) -38]
Test Case: 932 | Input/Output: [(40 100 -44 66) -44]
Test Case: 933 | Input/Output: [(-39 79 -3 86) -39]
Test Case: 934 | Input/Output: [(-67 -69 -47 84) -69]
Test Case: 935 | Input/Output: [(46 -61 -26 17) -61]
Test Case: 936 | Input/Output: [(-6 26 12 8) -6]
Test Case: 937 | Input/Output: [(44 -25 84 -65) -65]
Test Case: 938 | Input/Output: [(90 57 -43 -20) -43]
Test Case: 939 | Input/Output: [(-71 -9 37 -73) -73]
Test Case: 940 | Input/Output: [(-37 8 4 -79) -79]
Test Case: 941 | Input/Output: [(-32 4 -68 4) -68]
Test Case: 942 | Input/Output: [(-44 61 57 56) -44]
Test Case: 943 | Input/Output: [(58 -1 28 80) -1]
Test Case: 944 | Input/Output: [(-44 79 -47 22) -47]
Test Case: 945 | Input/Output: [(-57 85 93 -3) -57]
Test Case: 946 | Input/Output: [(-79 -20 -74 -93) -93]
Test Case: 947 | Input/Output: [(-74 78 19 12) -74]
Test Case: 948 | Input/Output: [(-39 40 -40 -68) -68]
Test Case: 949 | Input/Output: [(35 92 92 -57) -57]
Test Case: 950 | Input/Output: [(-100 -44 -66 -84) -100]
Test Case: 951 | Input/Output: [(87 75 56 0) 0]
Test Case: 952 | Input/Output: [(-49 47 -72 8) -72]
Test Case: 953 | Input/Output: [(89 -50 -61 -26) -61]
Test Case: 954 | Input/Output: [(-16 79 64 -10) -16]
Test Case: 955 | Input/Output: [(90 -69 37 -1) -69]
Test Case: 956 | Input/Output: [(-33 72 -44 -44) -44]
Test Case: 957 | Input/Output: [(88 -82 -8 70) -82]
Test Case: 958 | Input/Output: [(-60 1 72 48) -60]
Test Case: 959 | Input/Output: [(-80 -46 83 86) -80]
Test Case: 960 | Input/Output: [(85 -27 33 -29) -29]
Test Case: 961 | Input/Output: [(-52 34 67 38) -52]
Test Case: 962 | Input/Output: [(6 51 -34 1) -34]
Test Case: 963 | Input/Output: [(38 -55 -49 -48) -55]
Test Case: 964 | Input/Output: [(96 79 78 49) 49]
Test Case: 965 | Input/Output: [(78 92 -47 -17) -47]
Test Case: 966 | Input/Output: [(-50 88 59 9) -50]
Test Case: 967 | Input/Output: [(60 -37 -39 76) -39]
Test Case: 968 | Input/Output: [(-100 -90 21 26) -100]
Test Case: 969 | Input/Output: [(-40 -57 -67 -77) -77]
Test Case: 970 | Input/Output: [(-50 -90 -93 16) -93]
Test Case: 971 | Input/Output: [(-28 61 -54 -33) -54]
Test Case: 972 | Input/Output: [(37 -34 -92 10) -92]
Test Case: 973 | Input/Output: [(47 -17 -13 -44) -44]
Test Case: 974 | Input/Output: [(-87 32 -55 2) -87]
Test Case: 975 | Input/Output: [(75 -18 -83 -79) -83]
Test Case: 976 | Input/Output: [(-64 95 73 65) -64]
Test Case: 977 | Input/Output: [(55 73 31 -43) -43]
Test Case: 978 | Input/Output: [(63 -39 -25 -81) -81]
Test Case: 979 | Input/Output: [(-46 10 -84 22) -84]
Test Case: 980 | Input/Output: [(-41 6 -83 -45) -83]
Test Case: 981 | Input/Output: [(-46 29 3 -64) -64]
Test Case: 982 | Input/Output: [(81 -5 -13 -6) -13]
Test Case: 983 | Input/Output: [(29 -88 26 -4) -88]
Test Case: 984 | Input/Output: [(51 -68 -52 8) -68]
Test Case: 985 | Input/Output: [(-3 93 87 -42) -42]
Test Case: 986 | Input/Output: [(-20 -65 40 -27) -65]
Test Case: 987 | Input/Output: [(-36 -8 -24 67) -36]
Test Case: 988 | Input/Output: [(-68 86 -65 -90) -90]
Test Case: 989 | Input/Output: [(-16 -76 -55 -52) -76]
Test Case: 990 | Input/Output: [(-18 59 70 54) -18]
Test Case: 991 | Input/Output: [(69 79 54 -42) -42]
Test Case: 992 | Input/Output: [(54 -95 2 -80) -95]
Test Case: 993 | Input/Output: [(44 64 -9 -24) -24]
Test Case: 994 | Input/Output: [(68 -18 -8 -54) -54]
Test Case: 995 | Input/Output: [(79 -58 77 -34) -58]
Test Case: 996 | Input/Output: [(89 13 -62 60) -62]
Test Case: 997 | Input/Output: [(52 -15 48 81) -15]
Test Case: 998 | Input/Output: [(-34 86 -17 -97) -97]
Test Case: 999 | Input/Output: [(-32 5 8 50) -32]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -68 76 68 31 -48 -97 71 -123 -107 -54 -26 92 77 65 -80 -68
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[4 4 4 37] 4] [[-7 -54 -54 -54] -54] [[17 -63 -63 -63] -63] [[60 60 -92 60] -92] [[2 -38 2 2] -38] [[96 -73 96 96] -73] [[8 8 8 23] 8] [[-52 98 -52 -52] -52] [[-82 -92 -92 -92] -92] [[25 -33 25 25] -33] [(11 11 11 11) 11] [(93 93 93 93) 93] [(43 43 43 43) 43] [(-43 -43 -43 -43) -43] [(93 93 93 93) 93] [(78 44 54 74) 44] [(80 56 98 23) 23] [(43 33 36 45) 33] [(35 56 78 73) 35] [(17 44 94 6) 6] [(13 43 4 77) 4] [(11 46 22 1) 1] [(77 38 60 27) 27] [(51 47 37 97) 37] [(77 25 49 53) 25] [(5 63 15 8) 5] [(70 83 83 98) 70] [(65 95 84 31) 31] [(53 49 28 23) 23] [(75 28 62 55) 28] [(53 1 54 87) 1] [(76 14 46 92) 14] [(53 81 39 17) 17] [(47 4 37 85) 4] [(12 68 1 12) 1] [(35 49 98 52) 35] [(-66 -9 -10 -45) -66] [(-68 97 87 39) -68] [(45 20 1 35) 1] [(21 -36 95 22) -36] [(69 78 -67 -5) -67] [(28 29 97 58) 28] [(24 -14 -42 33) -42] [(36 91 -7 -97) -97] [(7 57 -73 8) -73] [(61 96 29 -16) -16] [(-98 -75 -4 -85) -98] [(9 94 -52 22) -52] [(-92 -12 -48 -20) -92] [(62 -68 80 13) -68] [(-38 0 44 -87) -87] [(99 60 99 60) 60] [(-1 -15 62 -4) -15] [(-4 -100 99 50) -100] [(-77 52 53 -83) -83] [(-53 82 -80 -25) -80] [(-50 43 62 -5) -50] [(28 82 70 -58) -58] [(-80 55 42 21) -80] [(-27 -28 62 -37) -37] [(-33 -23 46 -94) -94] [(-50 -80 -58 2) -80] [(-52 74 -4 -46) -52] [(-71 -95 -62 12) -95] [(-67 76 35 35) -67] [(-21 74 -83 -79) -83] [(53 46 9 -60) -60] [(-53 -96 -94 33) -96] [(-42 -41 91 76) -42] [(54 -75 -88 31) -88] [(96 35 -4 7) -4] [(57 -96 32 94) -96] [(5 -26 24 -36) -36] [(-60 87 -33 51) -60] [(50 92 -97 22) -97] [(36 -16 35 76) -16] [(74 3 -65 -43) -65] [(-55 84 -2 -28) -55] [(82 -94 70 42) -94] [(-100 64 -73 -96) -100] [(-69 85 39 74) -69] [(51 -14 -55 -99) -99] [(-10 3 25 -17) -17] [(18 -54 -25 -77) -77] [(-58 -99 -70 84) -99] [(23 -35 28 -47) -47] [(54 -11 -69 18) -69] [(23 74 78 -18) -18] [(28 -54 -20 31) -54] [(71 -8 -59 -64) -64] [(-93 -56 -60 -56) -93] [(-50 -12 44 -4) -50] [(-36 -22 33 8) -36] [(-28 -40 -18 -31) -40] [(49 -77 -15 -6) -77])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_180} {:close 0, :instruction print_exec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction -94} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_mult exec_s_when_autoconstructing (integer_inc) (exec_y (integer_eq exec_swap (integer_empty integer_dup_times) (in2 exec_dup (exec_pop (exec_shove (exec_shove (exec_do*count (integer_gt integer_sub boolean_flush integer_sub integer_lte boolean_rot boolean_rot boolean_stackdepth integer_mod) boolean_frominteger tag_boolean_180 print_exec (print_integer) integer_dup_items print_integer integer_mod exec_do*count () -94 boolean_dup_items in2 boolean_xor boolean_frominteger in1) integer_empty) exec_empty integer_inc)) print_integer integer_dec exec_do*while (boolean_frominteger integer_gte exec_do*range (boolean_dup_times integer_empty) exec_stackdepth boolean_frominteger boolean_dup print_integer boolean_eq boolean_eq integer_pop boolean_eq integer_empty exec_yankdup) exec_s_when_autoconstructing (integer_flush print_exec (exec_yank exec_dup_times (boolean_shove boolean_and exec_noop exec_k_when_autoconstructing () (integer_mult exec_pop () exec_y_when_autoconstructing (boolean_shove print_newline exec_s (exec_eq exec_s (exec_if (boolean_and) ()) () ()) () ()))))) () ()))) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 110
Percent parens: 0.300
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_180} {:close 0, :instruction print_exec} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*count} {:close 0, :instruction -94} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in1} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 2, :instruction integer_inc} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_newline} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_mult exec_s_when_autoconstructing (integer_inc) (exec_y (integer_eq exec_swap (integer_empty integer_dup_times) (in2 exec_dup (exec_pop (exec_shove (exec_shove (exec_do*count (integer_gt integer_sub boolean_flush integer_sub integer_lte boolean_rot boolean_rot boolean_stackdepth integer_mod) boolean_frominteger tag_boolean_180 print_exec (print_integer) integer_dup_items print_integer integer_mod exec_do*count () -94 boolean_dup_items in2 boolean_xor boolean_frominteger in1) integer_empty) exec_empty integer_inc)) print_integer integer_dec exec_do*while (boolean_frominteger integer_gte exec_do*range (boolean_dup_times integer_empty) exec_stackdepth boolean_frominteger boolean_dup print_integer boolean_eq boolean_eq integer_pop boolean_eq integer_empty exec_yankdup) exec_s_when_autoconstructing (integer_flush print_exec (exec_yank exec_dup_times (boolean_shove boolean_and exec_noop exec_k_when_autoconstructing () (integer_mult exec_pop () exec_y_when_autoconstructing (boolean_shove print_newline exec_s (exec_eq exec_s (exec_if (boolean_and) ()) () ()) () ()))))) () ()))) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 110
Percent parens: 0.300
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 5 5 5 4 1000 4 13 3 5)
Population mean number of elite cases: 1.05
Count of perfect (error zero) individuals by case: (6 5 5 5 4 0 4 13 3 5)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction -89} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -63} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank})
Best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty) exec_dup_items) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y (print_boolean integer_empty exec_do*times () exec_empty integer_gt exec_swap () (boolean_dup) boolean_stackdepth integer_dup -89) exec_yankdup -63 exec_noop exec_do*times (exec_do*count () boolean_yankdup boolean_xor integer_yank))))))) ()))))
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 85
Size: 114
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 9.95
Median total errors in population: 10
Error averages by case: (0.994 0.995 0.995 0.995 0.996 1.0 0.996 0.987 0.997 0.995)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 47.759
Average program size in population (points): 65.708
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 452626
--- Timings ---
Current time: 1559583069739 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.7 seconds, 29.1%
Fitness Testing:      1.7 seconds, 66.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Lexicase best errors: [0 1 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Zero cases best errors: [0 1 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (599 118 599 1000 815 811 815 95 602 598)
Population mean number of elite cases: 6.05
Count of perfect (error zero) individuals by case: (599 118 599 0 815 811 815 95 602 598)
Population mean number of perfect (error zero) cases: 5.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction -89} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -63} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_yank})
Best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty) exec_dup_items) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y (print_boolean integer_empty exec_do*times () exec_empty integer_gt exec_swap () (boolean_dup) boolean_stackdepth integer_dup -89) exec_yankdup -63 exec_noop exec_do*times (exec_do*count () boolean_yankdup boolean_xor integer_yank))))))) ()))))
Errors: [0 1 0 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 85
Size: 114
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 4.948
Median total errors in population: 3
Error averages by case: (0.401 0.882 0.401 1.0 0.185 0.189 0.185 0.905 0.398 0.402)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 55.628
Average program size in population (points): 75.357
Average percent parens in population: 0.255
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.512
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1158430
--- Timings ---
Current time: 1559583072682 milliseconds
Total Time:           5.5 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 43.3%
Fitness Testing:      2.5 seconds, 45.9%
Report:               0.5 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Lexicase best errors: [1 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Zero cases best errors: [1 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 1000 162 162 142 515 515 515 1000 514)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (142 0 162 162 142 515 515 515 0 514)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction -89} {:close 0, :instruction exec_yankdup} {:close 0, :instruction -63} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_yankdup})
Best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (integer_shove exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty) exec_dup_items) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y (print_boolean integer_empty exec_do*times () exec_empty integer_gt exec_swap () (boolean_dup) boolean_stackdepth integer_dup -89) exec_yankdup -63 exec_noop exec_do*times (exec_do*count () boolean_yankdup))))))) ()))))
Errors: [1 1 1 1 1 0 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 83
Size: 112
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 7.333
Median total errors in population: 6
Error averages by case: (0.858 1.0 0.838 0.838 0.858 0.485 0.485 0.485 1.0 0.486)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 51.962
Average program size in population (points): 70.66
Average percent parens in population: 0.259
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0075
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 78
Genome diversity (% unique genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1782732
--- Timings ---
Current time: 1559583075709 milliseconds
Total Time:           8.6 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 50.8%
Fitness Testing:      3.2 seconds, 37.1%
Report:               0.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 98                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 78                 
Correct output: 6                   | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 22                 
Correct output: 27                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 15                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 84                 
Correct output: 23                  | Program output: 28                 
Correct output: 28                  | Program output: 62                 
Correct output: 1                   | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 98                 
Correct output: -66                 | Program output: -10                
Correct output: -68                 | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 95                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 97                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: 29                 
Correct output: -98                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -68                 | Program output: 80                 
Correct output: -87                 | Program output: 44                 
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: 62                 
Correct output: -100                | Program output: 99                 
Correct output: -83                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: 62                 
Correct output: -58                 | Program output: 70                 
Correct output: -80                 | Program output: 42                 
Correct output: -37                 | Program output: 62                 
Correct output: -94                 | Program output: 46                 
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -4                 
Correct output: -95                 | Program output: -62                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 9                  
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: 91                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: 24                 
Correct output: -60                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -2                 
Correct output: -94                 | Program output: 70                 
Correct output: -100                | Program output: -73                
Correct output: -69                 | Program output: 39                 
Correct output: -99                 | Program output: -55                
Correct output: -17                 | Program output: 25                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 78                 
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -59                
Correct output: -93                 | Program output: -60                
Correct output: -50                 | Program output: 44                 
Correct output: -36                 | Program output: 33                 
Correct output: -40                 | Program output: -18                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_dup_items integer_empty boolean_flush exec_y_when_autoconstructing (exec_if (boolean_dup in3 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) (exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())))
Lexicase best errors: [0 1 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_dup_items integer_empty boolean_flush exec_y_when_autoconstructing (exec_if (boolean_dup in3 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) (exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())))
Zero cases best errors: [0 1 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (882 1000 214 1000 424 214 213 1000 424 213)
Population mean number of elite cases: 5.58
Count of perfect (error zero) individuals by case: (882 0 214 0 424 214 213 0 424 213)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_127} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 2, :instruction exec_s_when_autoconstructing})
Best program: (integer_dec exec_s (boolean_frominteger integer_shove in3 tagged_127 boolean_xor integer_min boolean_eq boolean_xor integer_lt exec_k_when_autoconstructing (exec_swap () (boolean_invert_first_then_and print_integer exec_do*while () exec_dup_items integer_swap -10 boolean_eq print_boolean) exec_dup_times (exec_k (exec_k (integer_inc in2 integer_min print_newline integer_dup_times) (exec_flush exec_empty integer_sub exec_y () integer_gt exec_s (exec_yank) (boolean_invert_first_then_and) (boolean_or exec_s_when_autoconstructing () () ()))) ())) ()) () ())
Errors: [0 1 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 60
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 7.416
Median total errors in population: 7
Error averages by case: (0.118 1.0 0.786 1.0 0.576 0.786 0.787 1.0 0.576 0.787)
Error minima by case: (0 1 0 1 0 0 0 1 0 0)
Average genome size in population (length): 49.517
Average program size in population (points): 68.153
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.44725
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2335818
--- Timings ---
Current time: 1559583078804 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.6 seconds, 56.1%
Fitness Testing:      3.8 seconds, 31.9%
Report:               1.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction -89} {:close 0, :instruction exec_yankdup})
Lexicase best program: (boolean_dup_items exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty) exec_dup_items)) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y (print_boolean integer_empty exec_do*times () exec_empty integer_gt exec_swap () (boolean_dup) boolean_stackdepth integer_dup -89) exec_yankdup))))) () ()))))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 106
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 1, :instruction exec_empty} {:close 2, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction -89} {:close 0, :instruction exec_yankdup})
Zero cases best program: (boolean_dup_items exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty) exec_dup_items)) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y (print_boolean integer_empty exec_do*times () exec_empty integer_gt exec_swap () (boolean_dup) boolean_stackdepth integer_dup -89) exec_yankdup))))) () ()))))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 106
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (318 861 319 3 3 318 546 318 3 546)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (318 861 319 3 3 318 546 318 3 546)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_div integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Errors: [0 0 0 1 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 49
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 6.765
Median total errors in population: 7
Error averages by case: (0.682 0.139 0.681 0.997 0.997 0.682 0.454 0.682 0.997 0.454)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.267
Average program size in population (points): 65.246
Average percent parens in population: 0.289
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.897375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2858040
--- Timings ---
Current time: 1559583081768 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.8 seconds, 59.8%
Fitness Testing:      4.3 seconds, 29.0%
Report:               1.6 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 98                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 78                 
Correct output: 6                   | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 22                 
Correct output: 27                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 15                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 84                 
Correct output: 23                  | Program output: 28                 
Correct output: 28                  | Program output: 62                 
Correct output: 1                   | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 98                 
Correct output: -66                 | Program output: -10                
Correct output: -68                 | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 95                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 97                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: 29                 
Correct output: -98                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -68                 | Program output: 80                 
Correct output: -87                 | Program output: 44                 
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: 62                 
Correct output: -100                | Program output: 99                 
Correct output: -83                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: 62                 
Correct output: -58                 | Program output: 70                 
Correct output: -80                 | Program output: 42                 
Correct output: -37                 | Program output: 62                 
Correct output: -94                 | Program output: 46                 
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -4                 
Correct output: -95                 | Program output: -62                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 9                  
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: 91                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: 24                 
Correct output: -60                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -2                 
Correct output: -94                 | Program output: 70                 
Correct output: -100                | Program output: -73                
Correct output: -69                 | Program output: 39                 
Correct output: -99                 | Program output: -55                
Correct output: -17                 | Program output: 25                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 78                 
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -59                
Correct output: -93                 | Program output: -60                
Correct output: -50                 | Program output: 44                 
Correct output: -36                 | Program output: 33                 
Correct output: -40                 | Program output: -18                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_127} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (integer_dec) exec_s (boolean_frominteger integer_shove in3 tagged_127 boolean_xor integer_min boolean_eq boolean_xor integer_lt exec_k_when_autoconstructing (exec_swap () (boolean_invert_first_then_and print_integer exec_do*while () exec_dup_items integer_swap -10 boolean_eq boolean_xor exec_s (in2 exec_while (print_newline integer_dup_times) exec_flush exec_empty integer_sub exec_y () integer_gt exec_s (exec_yank) (exec_s (exec_do*while ()) () ()) ()) () ())) ()) () ())))
Lexicase best errors: [1 0 0 1 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 68
Percent parens: 0.382
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_127} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction exec_while} {:close 0, :instruction print_newline} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_y} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (integer_dec) exec_s (boolean_frominteger integer_shove in3 tagged_127 boolean_xor integer_min boolean_eq boolean_xor integer_lt exec_k_when_autoconstructing (exec_swap () (boolean_invert_first_then_and print_integer exec_do*while () exec_dup_items integer_swap -10 boolean_eq boolean_xor exec_s (in2 exec_while (print_newline integer_dup_times) exec_flush exec_empty integer_sub exec_y () integer_gt exec_s (exec_yank) (exec_s (exec_do*while ()) () ()) ()) () ())) ()) () ())))
Zero cases best errors: [1 0 0 1 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 68
Percent parens: 0.382
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 626 866 236 198 238 198 198 429 236)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (0 626 866 236 198 238 198 198 429 236)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_127} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_k} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (integer_dec exec_s (boolean_frominteger integer_shove in3 tagged_127 boolean_xor exec_do*range (boolean_eq boolean_xor integer_lt exec_k_when_autoconstructing (exec_swap () (boolean_invert_first_then_and print_integer exec_do*while () exec_dup_items integer_swap -10 boolean_eq print_boolean) exec_dup_times (exec_k (exec_k (integer_inc in2 integer_min print_newline exec_k (boolean_frominteger) (exec_eq)) ()) ())) ())) () ())
Errors: [1 0 0 1 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 48
Percent parens: 0.354
--- Population Statistics ---
Average total errors in population: 6.775
Median total errors in population: 7
Error averages by case: (1.0 0.374 0.134 0.764 0.802 0.762 0.802 0.802 0.571 0.764)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.53
Average program size in population (points): 68.658
Average percent parens in population: 0.287
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.4335
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3525329
--- Timings ---
Current time: 1559583084603 milliseconds
Total Time:          17.6 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.8 seconds, 61.0%
Fitness Testing:      4.9 seconds, 28.0%
Report:               1.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 636
Test mean error for best: 0.63600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output:                    
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output:                    
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) integer_swap in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Lexicase best errors: [0 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) integer_swap in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Zero cases best errors: [0 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 1000 712 117 829 397 1000 397 315 117)
Population mean number of elite cases: 5.20
Count of perfect (error zero) individuals by case: (315 0 712 117 829 397 0 397 315 117)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_364} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction 21} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (integer_max exec_rot () (integer_shove integer_empty) (in3 exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 integer_yank integer_swap boolean_swap exec_swap (exec_stackdepth integer_flush integer_shove) (exec_when (exec_y (integer_swap print_integer exec_pop () exec_k () (integer_sub integer_div exec_swap () (exec_swap () (exec_when (integer_dup_times boolean_shove tagged_364 boolean_frominteger) exec_dup_times (exec_s (integer_flush print_exec (exec_eq 21 exec_if () (exec_do*while (integer_inc boolean_yank)) exec_s_when_autoconstructing (integer_min boolean_frominteger) (integer_yankdup) (integer_add exec_k (integer_dup_items print_newline exec_yankdup integer_add) (print_exec () boolean_invert_second_then_and integer_lt integer_lte exec_do*range (integer_empty integer_inc) integer_fromboolean exec_yank boolean_dup) integer_mult integer_gte integer_pop exec_eq exec_while (exec_shove (boolean_not) print_boolean)))) () ())))))))))
Errors: [0 1 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 74
Size: 110
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.801
Median total errors in population: 6
Error averages by case: (0.685 1.0 0.288 0.883 0.171 0.603 1.0 0.603 0.685 0.883)
Error minima by case: (0 1 0 0 0 0 1 0 0 0)
Average genome size in population (length): 46.969
Average program size in population (points): 68.932
Average percent parens in population: 0.315
Minimum age in population: 6.0
Maximum age in population: 10.8125
Average age in population: 8.93840625
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4190642
--- Timings ---
Current time: 1559583089229 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 63.0%
Fitness Testing:      5.6 seconds, 26.7%
Report:               2.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and print_integer print_integer boolean_swap boolean_pop integer_gt boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Lexicase best errors: [0 0 0 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.125
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and print_integer print_integer boolean_swap boolean_pop integer_gt boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Zero cases best errors: [0 0 0 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (843 236 241 242 1000 297 1000 298 1000 241)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (843 236 241 242 0 297 0 298 0 241)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) in2 integer_div integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_dec boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ()))
Errors: [0 0 0 0 1 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 41
Percent parens: 0.341
--- Population Statistics ---
Average total errors in population: 7.602
Median total errors in population: 7
Error averages by case: (0.157 0.764 0.759 0.758 1.0 0.703 1.0 0.702 1.0 0.759)
Error minima by case: (0 0 0 0 1 0 1 0 1 0)
Average genome size in population (length): 46.075
Average program size in population (points): 66.885
Average percent parens in population: 0.305
Minimum age in population: 7.0
Maximum age in population: 12.265625
Average age in population: 10.3524375
Median age in population: 10.3984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.796
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4859187
--- Timings ---
Current time: 1559583092666 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.8 seconds, 61.4%
Fitness Testing:      6.3 seconds, 24.5%
Report:               3.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing () integer_gt exec_rot (boolean_frominteger integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty boolean_stackdepth exec_do*times (boolean_dup_times integer_add) boolean_rot integer_dup_items) (exec_dup_items) ()))))
Lexicase best errors: [1 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 62
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing () integer_gt exec_rot (boolean_frominteger integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times () exec_noop) integer_empty boolean_stackdepth exec_do*times (boolean_dup_times integer_add) boolean_rot integer_dup_items) (exec_dup_items) ()))))
Zero cases best errors: [1 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 62
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 254 1000 599 1000 1000 597 603 1000 1000)
Population mean number of elite cases: 7.31
Count of perfect (error zero) individuals by case: (258 254 0 599 0 0 597 603 0 0)
Population mean number of perfect (error zero) cases: 2.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*count} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Best program: (exec_do*count (integer_fromboolean) exec_when () integer_dec integer_empty exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_flush boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_rot exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Errors: [1 1 1 0 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 43
Size: 50
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 7.689
Median total errors in population: 7
Error averages by case: (0.742 0.746 1.0 0.401 1.0 1.0 0.403 0.397 1.0 1.0)
Error minima by case: (0 0 1 0 1 1 0 0 1 1)
Average genome size in population (length): 45.128
Average program size in population (points): 63.594
Average percent parens in population: 0.281
Minimum age in population: 8.0
Maximum age in population: 13.703125
Average age in population: 11.7697578125
Median age in population: 11.86328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5548346
--- Timings ---
Current time: 1559583095661 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.8 seconds, 62.1%
Fitness Testing:      7.0 seconds, 24.3%
Report:               3.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (boolean_stackdepth) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing () print_integer boolean_swap integer_lte integer_flush boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean boolean_not integer_rot exec_dup_times (integer_eq in2) boolean_eq boolean_empty boolean_dup)
Lexicase best errors: [0 1 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 44
Percent parens: 0.136
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_dup_items exec_shove () exec_pop (boolean_stackdepth) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing () print_integer boolean_swap integer_lte integer_flush boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean boolean_not integer_rot exec_dup_times (integer_eq in2) boolean_eq boolean_empty boolean_dup)
Zero cases best errors: [0 1 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (505 328 1 8 1 506 842 842 6 505)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (505 328 1 8 1 506 842 842 6 505)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_swap} {:close 0, :instruction -10} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s})
Best program: (integer_lt integer_gte exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) in2 integer_div print_integer integer_dup_times integer_lt exec_k_when_autoconstructing (exec_swap () (boolean_invert_first_then_and print_integer exec_do*while () exec_dup_items integer_swap -10 boolean_eq print_boolean) exec_dup_times (integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s () () ()) () ()) ()) ())))
Errors: [0 1 1 1 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 39
Size: 58
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.456
Median total errors in population: 5
Error averages by case: (0.495 0.672 0.999 0.992 0.999 0.494 0.158 0.158 0.994 0.495)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.077
Average program size in population (points): 64.3
Average percent parens in population: 0.289
Minimum age in population: 10.671875
Maximum age in population: 15.23828125
Average age in population: 13.22466796875
Median age in population: 13.296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.77
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6269561
--- Timings ---
Current time: 1559583098500 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 62.3%
Fitness Testing:      7.7 seconds, 24.5%
Report:               4.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y})
Lexicase best program: (exec_do*count (integer_fromboolean exec_when () integer_dec integer_empty boolean_yank integer_yank) boolean_swap exec_do*times (exec_eq exec_swap (integer_min boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) (integer_shove) integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times (exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty exec_dup_items) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y ())))))))) ()))))
Lexicase best errors: [1 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 28} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 1, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y})
Zero cases best program: (exec_do*count (integer_fromboolean exec_when () integer_dec integer_empty boolean_yank integer_yank) boolean_swap exec_do*times (exec_eq exec_swap (integer_min boolean_invert_first_then_and integer_div integer_swap exec_while () integer_pop) (integer_shove) integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer exec_yank integer_mod exec_do*times (exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty exec_yankdup integer_empty exec_do*count (integer_yank exec_do*count (boolean_yank exec_dup_times (28 boolean_invert_first_then_and integer_div exec_empty exec_dup_items) exec_shove () integer_max exec_when (exec_do*times (integer_empty integer_stackdepth print_exec (integer_add) print_integer boolean_invert_first_then_and exec_y ())))))))) ()))))
Zero cases best errors: [1 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 887 114 337 115 610 278 337 115 337)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (277 887 114 337 115 610 278 337 115 337)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) in2 integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq))
Errors: [1 0 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 21
Size: 29
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.593
Median total errors in population: 7
Error averages by case: (0.723 0.113 0.886 0.663 0.885 0.39 0.722 0.663 0.885 0.663)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.156
Average program size in population (points): 54.25
Average percent parens in population: 0.289
Minimum age in population: 11.671875
Maximum age in population: 16.787109375
Average age in population: 14.837947265625
Median age in population: 14.87109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6848097
--- Timings ---
Current time: 1559583101309 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 63.0%
Fitness Testing:      8.3 seconds, 24.0%
Report:               4.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output:                    
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output:                    
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output:                    
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -56} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times})
Lexicase best program: (exec_do*count (integer_fromboolean exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap) exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and -56 integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer integer_yankdup integer_mod exec_do*times ())) ()))))
Lexicase best errors: [1 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -56} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times})
Zero cases best program: (exec_do*count (integer_fromboolean exec_when () integer_dec integer_empty boolean_yank integer_yank boolean_swap) exec_do*times (exec_eq exec_swap (integer_min) (boolean_invert_first_then_and -56 integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_empty exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer integer_yankdup integer_mod exec_do*times ())) ()))))
Zero cases best errors: [1 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 329 334 329 332 333 210 5 329 5)
Population mean number of elite cases: 2.42
Count of perfect (error zero) individuals by case: (210 329 334 329 332 333 210 5 329 5)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction integer_dup_times} {:close 0, :instruction tag_exec_857} {:close 0, :instruction tagged_364} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction 21} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_frominteger} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction print_boolean})
Best program: (integer_max exec_rot () (integer_shove integer_empty in3 exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap) in4) (integer_yank integer_swap boolean_swap integer_div exec_stackdepth integer_flush integer_shove) boolean_invert_first_then_and exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div exec_swap () (exec_swap (exec_when (integer_dup_times boolean_dup_items exec_when (integer_dup_times) tag_exec_857 (tagged_364 boolean_frominteger exec_dup_times (exec_s (integer_flush print_exec (exec_eq 21 exec_if () (exec_do*while (integer_inc boolean_yank)) exec_s_when_autoconstructing (integer_min boolean_frominteger) (integer_yankdup) () integer_add exec_k (integer_dup_items print_newline exec_yankdup integer_add print_exec () boolean_invert_second_then_and integer_lt integer_lte exec_do*range (integer_empty integer_inc) integer_fromboolean exec_yank boolean_dup) (integer_mult integer_gte integer_pop exec_eq exec_while (exec_shove () boolean_not print_boolean)))) () ())))) ())))
Errors: [1 1 0 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 77
Size: 112
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 7.584
Median total errors in population: 7
Error averages by case: (0.79 0.671 0.666 0.671 0.668 0.667 0.79 0.995 0.671 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.886
Average program size in population (points): 55.757
Average percent parens in population: 0.293
Minimum age in population: 13.40625
Maximum age in population: 18.279296875
Average age in population: 16.2888095703125
Median age in population: 16.357421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.004
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7484604
--- Timings ---
Current time: 1559583104806 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.9 seconds, 63.7%
Fitness Testing:      8.9 seconds, 23.8%
Report:               4.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_364} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction 21} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4) exec_pop (integer_swap boolean_swap integer_div exec_stackdepth integer_flush integer_shove) exec_k (exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div exec_yank) exec_swap () (exec_when (integer_dup_times boolean_shove tagged_364 boolean_frominteger exec_dup_times (exec_s (integer_flush print_exec (exec_eq 21 exec_if () (exec_do*while (integer_inc boolean_yank)) exec_s_when_autoconstructing (integer_min boolean_frominteger integer_yankdup integer_add exec_k (integer_dup_items print_newline exec_do*range (integer_add print_exec () boolean_invert_second_then_and integer_lt integer_lte exec_do*range (integer_empty integer_inc) integer_fromboolean exec_yank boolean_dup) integer_mult) ()) () ())) () ())))) ()))
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 100
Percent parens: 0.330
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_k} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_364} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction 21} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 2, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4) exec_pop (integer_swap boolean_swap integer_div exec_stackdepth integer_flush integer_shove) exec_k (exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div exec_yank) exec_swap () (exec_when (integer_dup_times boolean_shove tagged_364 boolean_frominteger exec_dup_times (exec_s (integer_flush print_exec (exec_eq 21 exec_if () (exec_do*while (integer_inc boolean_yank)) exec_s_when_autoconstructing (integer_min boolean_frominteger integer_yankdup integer_add exec_k (integer_dup_items print_newline exec_do*range (integer_add print_exec () boolean_invert_second_then_and integer_lt integer_lte exec_do*range (integer_empty integer_inc) integer_fromboolean exec_yank boolean_dup) integer_mult) ()) () ())) () ())))) ()))
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 100
Percent parens: 0.330
--- Lexicase Population Statistics ---
Count of elite individuals by case: (255 252 258 151 251 184 258 151 184 258)
Population mean number of elite cases: 2.20
Count of perfect (error zero) individuals by case: (255 252 258 151 251 184 258 151 184 258)
Population mean number of perfect (error zero) cases: 2.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_364} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_flush} {:close 0, :instruction print_exec} {:close 0, :instruction exec_eq} {:close 0, :instruction 21} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_inc} {:close 3, :instruction boolean_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_do*count} {:close 1, :instruction in3} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq})
Best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times ()) boolean_empty integer_mult) boolean_or boolean_yank integer_swap in4 integer_yank exec_rot (boolean_swap exec_swap (exec_stackdepth integer_flush integer_shove) (exec_when (exec_y (integer_swap print_integer exec_pop () exec_k () (integer_sub integer_div exec_swap () (boolean_frominteger) exec_when (integer_dup_times boolean_shove tagged_364 boolean_frominteger exec_dup_times (boolean_frominteger exec_dup_times (exec_s (integer_flush print_exec (exec_eq 21 exec_if () (exec_do*while (integer_inc boolean_yank))) exec_s_when_autoconstructing (integer_min boolean_frominteger integer_yankdup) (exec_do*count () in3) (boolean_invert_first_then_and exec_when (exec_eq))) () ())))))))) () ()))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 57
Size: 91
Percent parens: 0.374
--- Population Statistics ---
Average total errors in population: 7.798
Median total errors in population: 8
Error averages by case: (0.745 0.748 0.742 0.849 0.749 0.816 0.742 0.849 0.816 0.742)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.084
Average program size in population (points): 54.525
Average percent parens in population: 0.292
Minimum age in population: 14.40625
Maximum age in population: 19.64794921875
Average age in population: 17.8554052734375
Median age in population: 17.921142578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 56
Genome diversity (% unique genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 8135600
--- Timings ---
Current time: 1559583108856 milliseconds
Total Time:          40.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.1 seconds, 63.7%
Fitness Testing:      9.5 seconds, 23.3%
Report:               5.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte exec_s_when_autoconstructing (exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot) (in2 boolean_eq boolean_empty boolean_dup) ())
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 1, :instruction boolean_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) exec_yank boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte exec_s_when_autoconstructing (exec_dup_times (integer_eq exec_dup_times (integer_min exec_noop)) boolean_rot) (in2 boolean_eq boolean_empty boolean_dup) ())
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 186 186 186 185 186 186 343 673 387)
Population mean number of elite cases: 2.72
Count of perfect (error zero) individuals by case: (201 186 186 186 185 186 186 343 673 387)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) in2 integer_div print_integer integer_dup_times boolean_frominteger integer_mult boolean_frominteger boolean_yank integer_swap in4 integer_yank integer_swap boolean_swap integer_div exec_stackdepth boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count (boolean_swap) exec_do*count (boolean_empty integer_lt boolean_invert_second_then_and))) integer_gt exec_k_when_autoconstructing (exec_dup_times (integer_yankdup exec_k (boolean_frominteger) (exec_eq))) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 41
Size: 53
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 7.281
Median total errors in population: 8
Error averages by case: (0.799 0.814 0.814 0.814 0.815 0.814 0.814 0.657 0.327 0.613)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.935
Average program size in population (points): 54.741
Average percent parens in population: 0.297
Minimum age in population: 16.09375
Maximum age in population: 20.989501953125
Average age in population: 19.32322827148438
Median age in population: 19.3994140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8818045
--- Timings ---
Current time: 1559583112104 milliseconds
Total Time:          45.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 62.8%
Fitness Testing:     10.2 seconds, 22.7%
Report:               6.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 98                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 78                 
Correct output: 6                   | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 22                 
Correct output: 27                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 15                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 84                 
Correct output: 23                  | Program output: 28                 
Correct output: 28                  | Program output: 62                 
Correct output: 1                   | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 98                 
Correct output: -66                 | Program output: -10                
Correct output: -68                 | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 95                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 97                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: 29                 
Correct output: -98                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -68                 | Program output: 80                 
Correct output: -87                 | Program output: 44                 
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: 62                 
Correct output: -100                | Program output: 99                 
Correct output: -83                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: 62                 
Correct output: -58                 | Program output: 70                 
Correct output: -80                 | Program output: 42                 
Correct output: -37                 | Program output: 62                 
Correct output: -94                 | Program output: 46                 
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -4                 
Correct output: -95                 | Program output: -62                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 9                  
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: 91                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: 24                 
Correct output: -60                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -2                 
Correct output: -94                 | Program output: 70                 
Correct output: -100                | Program output: -73                
Correct output: -69                 | Program output: 39                 
Correct output: -99                 | Program output: -55                
Correct output: -17                 | Program output: 25                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 78                 
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -59                
Correct output: -93                 | Program output: -60                
Correct output: -50                 | Program output: 44                 
Correct output: -36                 | Program output: 33                 
Correct output: -40                 | Program output: -18                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Lexicase best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) integer_yank exec_dup (integer_flush) in1 integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq))
Lexicase best errors: [0 0 0 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Zero cases best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) integer_yank exec_dup (integer_flush) in1 integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq))
Zero cases best errors: [0 0 0 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (885 225 854 34 34 666 187 34 187 666)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (885 225 854 34 34 666 187 34 187 666)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div})
Best program: (integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (boolean_and) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 integer_yank integer_swap boolean_swap exec_swap (boolean_yank integer_swap) (in4) integer_yank integer_swap boolean_swap boolean_stackdepth exec_stackdepth integer_flush integer_shove) exec_when (exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div)))
Errors: [0 0 1 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 49
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.228
Median total errors in population: 6
Error averages by case: (0.115 0.775 0.146 0.966 0.966 0.334 0.813 0.966 0.813 0.334)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.961
Average program size in population (points): 49.535
Average percent parens in population: 0.269
Minimum age in population: 17.9384765625
Maximum age in population: 22.623779296875
Average age in population: 20.77842834472656
Median age in population: 20.84222412109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 9285856
--- Timings ---
Current time: 1559583115702 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 63.7%
Fitness Testing:     10.6 seconds, 22.0%
Report:               6.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 98                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 78                 
Correct output: 6                   | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 22                 
Correct output: 27                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 15                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 84                 
Correct output: 23                  | Program output: 28                 
Correct output: 28                  | Program output: 62                 
Correct output: 1                   | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 98                 
Correct output: -66                 | Program output: -10                
Correct output: -68                 | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 95                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 97                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: 29                 
Correct output: -98                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -68                 | Program output: 80                 
Correct output: -87                 | Program output: 44                 
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: 62                 
Correct output: -100                | Program output: 99                 
Correct output: -83                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: 62                 
Correct output: -58                 | Program output: 70                 
Correct output: -80                 | Program output: 42                 
Correct output: -37                 | Program output: 62                 
Correct output: -94                 | Program output: 46                 
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -4                 
Correct output: -95                 | Program output: -62                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 9                  
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: 91                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: 24                 
Correct output: -60                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -2                 
Correct output: -94                 | Program output: 70                 
Correct output: -100                | Program output: -73                
Correct output: -69                 | Program output: 39                 
Correct output: -99                 | Program output: -55                
Correct output: -17                 | Program output: 25                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 78                 
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -59                
Correct output: -93                 | Program output: -60                
Correct output: -50                 | Program output: 44                 
Correct output: -36                 | Program output: 33                 
Correct output: -40                 | Program output: -18                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (tagged_99 exec_do*range () exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4 boolean_not boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Lexicase best errors: [0 0 0 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (tagged_99 exec_do*range () exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4 boolean_not boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Zero cases best errors: [0 0 0 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (550 290 290 235 235 15 335 15 297 15)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (550 290 290 235 235 15 335 15 297 15)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (integer_max exec_rot () (exec_yankdup integer_empty in3) (exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 integer_yank integer_swap boolean_swap exec_empty exec_stackdepth integer_flush integer_shove) exec_when (integer_shove integer_swap print_integer boolean_pop exec_dup_times (print_integer exec_k (boolean_frominteger) (exec_eq))))
Errors: [0 0 0 1 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 42
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 7.723
Median total errors in population: 7
Error averages by case: (0.45 0.71 0.71 0.765 0.765 0.985 0.665 0.985 0.703 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.427
Average program size in population (points): 48.608
Average percent parens in population: 0.286
Minimum age in population: 18.9384765625
Maximum age in population: 24.009521484375
Average age in population: 22.28038702392578
Median age in population: 22.35498046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 9777441
--- Timings ---
Current time: 1559583118292 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.8 seconds, 63.8%
Fitness Testing:     11.1 seconds, 21.6%
Report:               7.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (tagged_99 exec_do*range (exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) exec_while () boolean_shove boolean_frominteger boolean_yank tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*count (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Lexicase best errors: [0 0 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 61
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (tagged_99 exec_do*range (exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) exec_while () boolean_shove boolean_frominteger boolean_yank tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*count (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Zero cases best errors: [0 0 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 61
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (666 208 310 263 210 305 208 210 208 876)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (666 208 310 263 210 305 208 210 208 876)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_dup (integer_flush exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth exec_yank integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Errors: [0 0 0 1 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.536
Median total errors in population: 7
Error averages by case: (0.334 0.792 0.69 0.737 0.79 0.695 0.792 0.79 0.792 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.044
Average program size in population (points): 51.085
Average percent parens in population: 0.291
Minimum age in population: 21.130859375
Maximum age in population: 25.82662963867188
Average age in population: 23.42796017456055
Median age in population: 23.52091979980469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 10340708
--- Timings ---
Current time: 1559583121159 milliseconds
Total Time:          54.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 64.4%
Fitness Testing:     11.6 seconds, 21.3%
Report:               7.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 98                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 78                 
Correct output: 6                   | Program output: 94                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 22                 
Correct output: 27                  | Program output: 60                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 15                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 84                 
Correct output: 23                  | Program output: 28                 
Correct output: 28                  | Program output: 62                 
Correct output: 1                   | Program output: 54                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 39                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 98                 
Correct output: -66                 | Program output: -10                
Correct output: -68                 | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 95                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 97                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -7                 
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: 29                 
Correct output: -98                 | Program output: -4                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -48                
Correct output: -68                 | Program output: 80                 
Correct output: -87                 | Program output: 44                 
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: 62                 
Correct output: -100                | Program output: 99                 
Correct output: -83                 | Program output: 53                 
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: 62                 
Correct output: -58                 | Program output: 70                 
Correct output: -80                 | Program output: 42                 
Correct output: -37                 | Program output: 62                 
Correct output: -94                 | Program output: 46                 
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -4                 
Correct output: -95                 | Program output: -62                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: 9                  
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: 91                 
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: 24                 
Correct output: -60                 | Program output: -33                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -2                 
Correct output: -94                 | Program output: 70                 
Correct output: -100                | Program output: -73                
Correct output: -69                 | Program output: 39                 
Correct output: -99                 | Program output: -55                
Correct output: -17                 | Program output: 25                 
Correct output: -77                 | Program output: -25                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: 78                 
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -59                
Correct output: -93                 | Program output: -60                
Correct output: -50                 | Program output: 44                 
Correct output: -36                 | Program output: 33                 
Correct output: -40                 | Program output: -18                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_max exec_rot () (integer_shove integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (integer_flush) integer_pop integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_max exec_rot () (integer_shove integer_max exec_rot () (integer_shove integer_empty in3) (exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (integer_flush) integer_pop integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 505 505 637 240 119 117 858 357 1000)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (126 505 505 637 240 119 117 858 357 0)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_rot () (integer_shove integer_empty in3) (integer_swap exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap) in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_add print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth integer_pop tagged_63 integer_rot exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ()))
Errors: [0 1 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 37
Size: 54
Percent parens: 0.315
--- Population Statistics ---
Average total errors in population: 6.536
Median total errors in population: 6
Error averages by case: (0.874 0.495 0.495 0.363 0.76 0.881 0.883 0.142 0.643 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 37.149
Average program size in population (points): 52.559
Average percent parens in population: 0.292
Minimum age in population: 22.130859375
Maximum age in population: 26.76408386230469
Average age in population: 24.55575852966309
Median age in population: 24.62186431884766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 10890254
--- Timings ---
Current time: 1559583124054 milliseconds
Total Time:          57.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.0 seconds, 64.8%
Fitness Testing:     12.1 seconds, 21.1%
Report:               7.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_do*range (exec_do*count (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) integer_yank exec_dup (integer_flush) exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) boolean_not) boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_do*range (exec_do*count (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (integer_flush) integer_yank exec_dup (integer_flush) exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) boolean_not) boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (276 148 277 278 148 148 423 866 861 5)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (276 148 277 278 148 148 423 866 861 5)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while})
Best program: (integer_max exec_dup (integer_flush exec_do*times () exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth exec_yank integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_swap (boolean_flush boolean_xor exec_s (exec_s (exec_do*while ()) () ()) () ()) ())
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 47
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 6.57
Median total errors in population: 7
Error averages by case: (0.724 0.852 0.723 0.722 0.852 0.852 0.577 0.134 0.139 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.841
Average program size in population (points): 53.751
Average percent parens in population: 0.294
Minimum age in population: 23.130859375
Maximum age in population: 28.3768310546875
Average age in population: 26.18735274505615
Median age in population: 26.2139778137207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 11454705
--- Timings ---
Current time: 1559583127083 milliseconds
Total Time:          60.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.2 seconds, 65.3%
Fitness Testing:     12.5 seconds, 20.9%
Report:               8.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_max exec_rot () (integer_add integer_flush in3 in4 integer_flush in2 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc boolean_yank exec_when () exec_do*count (boolean_swap) exec_do*count (exec_y_when_autoconstructing (integer_lt) boolean_invert_second_then_and)) () integer_gt exec_y_when_autoconstructing (exec_dup_times (integer_yankdup exec_k (boolean_frominteger) (exec_eq))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_add} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 3, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_max exec_rot () (integer_add integer_flush in3 in4 integer_flush in2 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc boolean_yank exec_when () exec_do*count (boolean_swap) exec_do*count (exec_y_when_autoconstructing (integer_lt) boolean_invert_second_then_and)) () integer_gt exec_y_when_autoconstructing (exec_dup_times (integer_yankdup exec_k (boolean_frominteger) (exec_eq))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 896 425 325 326 876 109 326 104 344)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (103 896 425 325 326 876 109 326 104 344)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Best program: (integer_max exec_rot () (integer_shove exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup integer_gt integer_sub boolean_flush integer_sub exec_when (exec_do*count (boolean_swap) exec_do*count (boolean_empty integer_lt exec_s_when_autoconstructing (exec_rot (integer_eq exec_dup_times (integer_min exec_noop)) (boolean_rot in2) (boolean_eq boolean_empty boolean_dup)) () ())))))) ())
Errors: [1 0 0 0 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 52
Percent parens: 0.327
--- Population Statistics ---
Average total errors in population: 6.166
Median total errors in population: 7
Error averages by case: (0.897 0.104 0.575 0.675 0.674 0.124 0.891 0.674 0.896 0.656)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.565
Average program size in population (points): 51.409
Average percent parens in population: 0.286
Minimum age in population: 24.130859375
Maximum age in population: 29.78136825561523
Average age in population: 27.67993061828613
Median age in population: 27.76506805419922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 12004397
--- Timings ---
Current time: 1559583130119 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 65.7%
Fitness Testing:     13.0 seconds, 20.7%
Report:               8.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 624
Test mean error for best: 0.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 56                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 44                 
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 46                 
Correct output: 27                  | Program output: 38                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 63                 
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 95                 
Correct output: 23                  | Program output: 49                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 81                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 68                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -9                 
Correct output: -68                 | Program output: 97                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: 78                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: 91                 
Correct output: -73                 | Program output: 57                 
Correct output: -16                 | Program output: 96                 
Correct output: -98                 | Program output: -75                
Correct output: -52                 | Program output: 94                 
Correct output: -92                 | Program output: -12                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: 0                  
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: 52                 
Correct output: -80                 | Program output: 82                 
Correct output: -50                 | Program output: 43                 
Correct output: -58                 | Program output: 82                 
Correct output: -80                 | Program output: 55                 
Correct output: -37                 | Program output: -28                
Correct output: -94                 | Program output: -23                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: 74                 
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 76                 
Correct output: -83                 | Program output: 74                 
Correct output: -60                 | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 35                 
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -26                
Correct output: -60                 | Program output: 87                 
Correct output: -97                 | Program output: 92                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: 3                  
Correct output: -55                 | Program output: 84                 
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: 64                 
Correct output: -69                 | Program output: 85                 
Correct output: -99                 | Program output: -14                
Correct output: -17                 | Program output: 3                  
Correct output: -77                 | Program output: -54                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -35                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: 74                 
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -8                 
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_max exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) integer_dup boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_mod exec_dup_times (print_newline exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.143
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_newline} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction exec_noop} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_max exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) integer_dup boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div boolean_dup_items integer_empty in2 integer_div boolean_and exec_y_when_autoconstructing (print_integer boolean_swap integer_lte integer_gt boolean_or integer_lte integer_gte boolean_dup_times) integer_fromboolean integer_gte integer_mod exec_dup_times (print_newline exec_dup_times (integer_min exec_noop)) boolean_rot in2 boolean_eq boolean_empty boolean_dup)
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 379 126 377 130 377 365 116 368 252)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (639 379 126 377 130 377 365 116 368 252)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction tagged_531} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction -56} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_while} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*times} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_div} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div})
Best program: (tagged_531 integer_empty boolean_dup_times exec_do*range (exec_do*count (exec_k (integer_yank exec_swap (integer_min) (boolean_invert_first_then_and -56 integer_swap exec_while () integer_pop) integer_shove integer_yankdup exec_rot (exec_do*times (exec_yank boolean_swap boolean_eq integer_swap integer_min integer_inc exec_y_when_autoconstructing (integer_gt exec_rot (boolean_frominteger) (integer_empty exec_do*count (in2 print_integer integer_yankdup integer_mod exec_do*times () exec_noop) integer_empty exec_dup_times (exec_do*times (exec_yankdup exec_empty integer_div integer_lt) exec_dup_times (integer_dup integer_div boolean_yank boolean_not integer_fromboolean integer_mult exec_noop integer_max exec_noop boolean_pop integer_div))) ()))) () ()) ())))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 55
Size: 76
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 6.871
Median total errors in population: 7
Error averages by case: (0.361 0.621 0.874 0.623 0.87 0.623 0.635 0.884 0.632 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.72
Average program size in population (points): 49.642
Average percent parens in population: 0.278
Minimum age in population: 25.69424438476562
Maximum age in population: 31.55291938781738
Average age in population: 29.31936038017273
Median age in population: 29.38763618469238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 12474280
--- Timings ---
Current time: 1559583132854 milliseconds
Total Time:          65.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.4 seconds, 66.0%
Fitness Testing:     13.4 seconds, 20.4%
Report:               8.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -7                 
Correct output: -63                 | Program output: 17                 
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -82                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 78                 
Correct output: 23                  | Program output: 80                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 17                 
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 11                 
Correct output: 27                  | Program output: 77                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 65                 
Correct output: 23                  | Program output: 53                 
Correct output: 28                  | Program output: 75                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 53                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 45                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: 69                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: 36                 
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 62                 
Correct output: -87                 | Program output: -38                
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: -1                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -77                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -27                
Correct output: -94                 | Program output: -33                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -21                
Correct output: -60                 | Program output: 53                 
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 54                 
Correct output: -4                  | Program output: 96                 
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 50                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: 74                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 51                 
Correct output: -17                 | Program output: -10                
Correct output: -77                 | Program output: 18                 
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -18                 | Program output: 23                 
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -28                
Correct output: -77                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times})
Lexicase best program: (integer_max exec_rot () (in3 integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (integer_flush) in1 integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_dec boolean_not boolean_yank exec_when () boolean_invert_first_then_and exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div integer_mult) exec_swap (exec_when (integer_dup_times)) ()))
Lexicase best errors: [1 1 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_swap} {:close 1, :instruction print_integer} {:close 1, :instruction exec_pop} {:close 1, :instruction exec_k} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_div} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times})
Zero cases best program: (integer_max exec_rot () (in3 integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (integer_flush) in1 integer_div) print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_dec boolean_not boolean_yank exec_when () boolean_invert_first_then_and exec_y (integer_swap print_integer) exec_pop () exec_k () (integer_sub integer_div integer_mult) exec_swap (exec_when (integer_dup_times)) ()))
Zero cases best errors: [1 1 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (101 443 862 175 153 439 153 102 153 171)
Population mean number of elite cases: 2.75
Count of perfect (error zero) individuals by case: (101 443 862 175 153 439 153 102 153 171)
Population mean number of perfect (error zero) cases: 2.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (integer_max exec_k () (integer_shove exec_yankdup in3) tagged_99 exec_do*range (exec_do*times (exec_yankdup boolean_and boolean_frominteger boolean_yank) tagged_598 in4) boolean_not integer_mult boolean_frominteger boolean_yank integer_swap integer_dup_times integer_min integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_k () (boolean_frominteger) exec_eq)
Errors: [1 1 0 1 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 7.248
Median total errors in population: 7
Error averages by case: (0.899 0.557 0.138 0.825 0.847 0.561 0.847 0.898 0.847 0.829)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.631
Average program size in population (points): 49.491
Average percent parens in population: 0.277
Minimum age in population: 28.15385437011719
Maximum age in population: 33.25804615020752
Average age in population: 30.83773059463501
Median age in population: 30.89968061447144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 12971934
--- Timings ---
Current time: 1559583135645 milliseconds
Total Time:          68.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.6 seconds, 66.3%
Fitness Testing:     13.9 seconds, 20.2%
Report:               9.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -7                 
Correct output: -63                 | Program output: 17                 
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -82                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 78                 
Correct output: 23                  | Program output: 80                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 17                 
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 11                 
Correct output: 27                  | Program output: 77                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 65                 
Correct output: 23                  | Program output: 53                 
Correct output: 28                  | Program output: 75                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 53                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 45                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: 69                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: 36                 
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 62                 
Correct output: -87                 | Program output: -38                
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: -1                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -77                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -27                
Correct output: -94                 | Program output: -33                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -21                
Correct output: -60                 | Program output: 53                 
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 54                 
Correct output: -4                  | Program output: 96                 
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 50                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: 74                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 51                 
Correct output: -17                 | Program output: -10                
Correct output: -77                 | Program output: 18                 
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -18                 | Program output: 23                 
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -28                
Correct output: -77                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Lexicase best program: (integer_max exec_rot () (in3 integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank exec_if (in4 exec_dup (integer_flush) in1 integer_div) (print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_rot boolean_not boolean_yank exec_when () exec_do*count () exec_k () (integer_gt exec_rot (boolean_frominteger) (integer_empty) ())))))
Lexicase best errors: [0 1 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_empty})
Zero cases best program: (integer_max exec_rot () (in3 integer_empty in3) (exec_shove (exec_do*range (exec_do*times () exec_yankdup integer_mult) boolean_frominteger boolean_yank exec_if (in4 exec_dup (integer_flush) in1 integer_div) (print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_rot boolean_not boolean_yank exec_when () exec_do*count () exec_k () (integer_gt exec_rot (boolean_frominteger) (integer_empty) ())))))
Zero cases best errors: [0 1 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (294 199 344 247 910 292 199 300 906 298)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (294 199 344 247 910 292 199 300 906 298)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 2, :instruction in3} {:close 0, :instruction tagged_99} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (integer_max exec_k () (integer_shove exec_yankdup in3) tagged_99 exec_do*range (exec_do*times (exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) boolean_not integer_mult boolean_frominteger boolean_yank integer_swap integer_dup_times integer_min integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when (exec_do*count () exec_k (boolean_frominteger) (exec_eq)))
Errors: [0 1 1 1 0 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 37
Size: 46
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 6.011
Median total errors in population: 6
Error averages by case: (0.706 0.801 0.656 0.753 0.09 0.708 0.801 0.7 0.094 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.96
Average program size in population (points): 48.343
Average percent parens in population: 0.255
Minimum age in population: 29.15385437011719
Maximum age in population: 34.45129585266113
Average age in population: 32.50527452802658
Median age in population: 32.64454555511475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 13397091
--- Timings ---
Current time: 1559583138309 milliseconds
Total Time:          71.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 66.7%
Fitness Testing:     14.3 seconds, 20.0%
Report:               9.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_max exec_k (exec_k () (exec_yankdup in3) tagged_99 exec_do*range () exec_do*times (exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) (boolean_not in3 boolean_frominteger boolean_yank integer_swap integer_dup_times integer_min integer_flush in1 integer_div) print_integer integer_dup_times integer_lte boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count (exec_k () (boolean_frominteger)) exec_eq)
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 1, :instruction exec_k} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 0, :instruction tagged_99} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 0, :instruction boolean_not} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_k} {:close 2, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_max exec_k (exec_k () (exec_yankdup in3) tagged_99 exec_do*range () exec_do*times (exec_yankdup integer_mult boolean_frominteger boolean_yank) tagged_598 in4) (boolean_not in3 boolean_frominteger boolean_yank integer_swap integer_dup_times integer_min integer_flush in1 integer_div) print_integer integer_dup_times integer_lte boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count (exec_k () (boolean_frominteger)) exec_eq)
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 132 121 16 15 415 292 17 440 709)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (439 132 121 16 15 415 292 17 440 709)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank exec_dup (boolean_yankdup boolean_frominteger boolean_yank) tagged_598 in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items boolean_frominteger exec_eq)
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 31
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 7.404
Median total errors in population: 9
Error averages by case: (0.561 0.868 0.879 0.984 0.985 0.585 0.708 0.983 0.56 0.291)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.047
Average program size in population (points): 47.093
Average percent parens in population: 0.253
Minimum age in population: 30.98559188842773
Maximum age in population: 35.59474968910217
Average age in population: 33.99313858151436
Median age in population: 34.09891605377197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 13821832
--- Timings ---
Current time: 1559583140905 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.6 seconds, 67.1%
Fitness Testing:     14.6 seconds, 19.8%
Report:               9.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 37                 
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 23                 
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 45                 
Correct output: 35                  | Program output: 73                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 77                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 97                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 98                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 87                 
Correct output: 14                  | Program output: 92                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 85                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 52                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 22                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 58                 
Correct output: -42                 | Program output: 33                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: 50                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: 2                  
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: 12                 
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: 33                 
Correct output: -42                 | Program output: 76                 
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 94                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 76                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: 84                 
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 31                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -4                 
Correct output: -36                 | Program output: 8                  
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (in3) exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (boolean_yank) tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items boolean_frominteger exec_eq)
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction in3} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_max exec_rot () (integer_shove exec_yankdup in3) (in3) exec_shove (exec_do*range (exec_do*times ()) exec_yankdup integer_mult) boolean_frominteger boolean_yank integer_swap in4 exec_dup (boolean_yank) tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items boolean_frominteger exec_eq)
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (857 311 869 14 14 434 229 387 200 311)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (857 311 869 14 14 434 229 387 200 311)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (exec_k_when_autoconstructing (boolean_or integer_yank exec_dup (integer_flush) integer_yank integer_shove print_integer integer_gt boolean_frominteger boolean_flush integer_inc integer_yankdup print_boolean boolean_yank tagged_598 in4) (exec_while () boolean_shove integer_shove integer_lte tagged_598 in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth integer_yank integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 1 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 42
Size: 50
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 6.374
Median total errors in population: 7
Error averages by case: (0.143 0.689 0.131 0.986 0.986 0.566 0.771 0.613 0.8 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.887
Average program size in population (points): 44.38
Average percent parens in population: 0.232
Minimum age in population: 32.18559265136719
Maximum age in population: 37.30678427219391
Average age in population: 35.66091079735756
Median age in population: 35.7951648235321
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 14242363
--- Timings ---
Current time: 1559583143455 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 67.4%
Fitness Testing:     15.0 seconds, 19.6%
Report:               9.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -7                 
Correct output: -63                 | Program output: 17                 
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -82                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 78                 
Correct output: 23                  | Program output: 80                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 17                 
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 11                 
Correct output: 27                  | Program output: 77                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 65                 
Correct output: 23                  | Program output: 53                 
Correct output: 28                  | Program output: 75                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 53                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 45                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: 69                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: 36                 
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 62                 
Correct output: -87                 | Program output: -38                
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: -1                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -77                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -27                
Correct output: -94                 | Program output: -33                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -21                
Correct output: -60                 | Program output: 53                 
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 54                 
Correct output: -4                  | Program output: 96                 
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 50                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: 74                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 51                 
Correct output: -17                 | Program output: -10                
Correct output: -77                 | Program output: 18                 
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -18                 | Program output: 23                 
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -28                
Correct output: -77                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_do*range (exec_pop (boolean_or exec_do*range (exec_do*times ()) exec_yankdup integer_mult) exec_swap () (boolean_frominteger boolean_yank integer_swap in4 in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_flush) in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ()))
Lexicase best errors: [0 1 1 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_do*range (exec_pop (boolean_or exec_do*range (exec_do*times ()) exec_yankdup integer_mult) exec_swap () (boolean_frominteger boolean_yank integer_swap in4 in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_flush) in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ()))
Zero cases best errors: [0 1 1 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 32 110 881 445 443 876 272 279 47)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (279 32 110 881 445 443 876 272 279 47)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction exec_k} {:close 1, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 0, :instruction integer_swap} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_max exec_k (exec_do*times () exec_yankdup integer_mult) (boolean_frominteger in4 integer_swap in4) exec_while () boolean_shove integer_shove boolean_yankdup boolean_swap in4 exec_dup (integer_flush) in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when () exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ()))
Errors: [0 1 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 6.336
Median total errors in population: 6
Error averages by case: (0.721 0.968 0.89 0.119 0.555 0.557 0.124 0.728 0.721 0.953)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.901
Average program size in population (points): 44.582
Average percent parens in population: 0.235
Minimum age in population: 33.3181300163269
Maximum age in population: 39.21243834495544
Average age in population: 37.15145189315081
Median age in population: 37.2457263469696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.006
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 14596448
--- Timings ---
Current time: 1559583145900 milliseconds
Total Time:          79.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 67.7%
Fitness Testing:     15.3 seconds, 19.4%
Report:              10.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -7                 
Correct output: -63                 | Program output: 17                 
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -82                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 78                 
Correct output: 23                  | Program output: 80                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 17                 
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 11                 
Correct output: 27                  | Program output: 77                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 65                 
Correct output: 23                  | Program output: 53                 
Correct output: 28                  | Program output: 75                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 53                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 45                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: 69                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: 36                 
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 62                 
Correct output: -87                 | Program output: -38                
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: -1                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -77                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -27                
Correct output: -94                 | Program output: -33                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -21                
Correct output: -60                 | Program output: 53                 
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 54                 
Correct output: -4                  | Program output: 96                 
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 50                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: 74                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 51                 
Correct output: -17                 | Program output: -10                
Correct output: -77                 | Program output: 18                 
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -18                 | Program output: 23                 
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -28                
Correct output: -77                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_435} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) integer_dup boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div integer_yank integer_empty in2 integer_swap integer_dup_times integer_min integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger tag_boolean_435 integer_inc boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean integer_gte exec_s_when_autoconstructing (exec_dup_times (integer_swap exec_dup_times (integer_min integer_gte)) boolean_rot in2) (boolean_eq boolean_empty boolean_dup) ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.164
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_435} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) integer_dup boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div integer_yank integer_empty in2 integer_swap integer_dup_times integer_min integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger tag_boolean_435 integer_inc boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean integer_gte exec_s_when_autoconstructing (exec_dup_times (integer_swap exec_dup_times (integer_min integer_gte)) boolean_rot in2) (boolean_eq boolean_empty boolean_dup) ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (324 890 111 111 324 316 316 430 17 114)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (324 890 111 111 324 316 316 430 17 114)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 1, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () integer_dec integer_dup integer_dup boolean_not exec_do*range (exec_yankdup exec_swap () (boolean_frominteger boolean_yank integer_swap in4 in4) exec_while () boolean_shove integer_shove boolean_yankdup integer_flush) in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not integer_max exec_when () exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ()))
Errors: [0 0 1 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 36
Size: 50
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.047
Median total errors in population: 8
Error averages by case: (0.676 0.11 0.889 0.889 0.676 0.684 0.684 0.57 0.983 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.276
Average program size in population (points): 44.682
Average percent parens in population: 0.252
Minimum age in population: 34.3181300163269
Maximum age in population: 40.68283671140671
Average age in population: 38.82179418241978
Median age in population: 38.93353474140167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 14968552
--- Timings ---
Current time: 1559583148468 milliseconds
Total Time:          81.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 68.0%
Fitness Testing:     15.7 seconds, 19.2%
Report:              10.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 666
Test mean error for best: 0.66600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -7                 
Correct output: -63                 | Program output: 17                 
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -82                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 78                 
Correct output: 23                  | Program output: 80                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 17                 
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 11                 
Correct output: 27                  | Program output: 77                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 77                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 65                 
Correct output: 23                  | Program output: 53                 
Correct output: 28                  | Program output: 75                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 53                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 45                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: 69                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: 36                 
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: 61                 
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 62                 
Correct output: -87                 | Program output: -38                
Correct output: 60                  | Program output: 99                 
Correct output: -15                 | Program output: -1                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -77                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: 28                 
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -27                
Correct output: -94                 | Program output: -33                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -21                
Correct output: -60                 | Program output: 53                 
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 54                 
Correct output: -4                  | Program output: 96                 
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: 5                  
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 50                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: 74                 
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 82                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: 51                 
Correct output: -17                 | Program output: -10                
Correct output: -77                 | Program output: 18                 
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: 23                 
Correct output: -69                 | Program output: 54                 
Correct output: -18                 | Program output: 23                 
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: 71                 
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -28                
Correct output: -77                 | Program output: 49                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 2, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () integer_dec integer_dup integer_dup boolean_not exec_do*range (exec_yankdup exec_swap () (boolean_frominteger boolean_yank integer_swap in4 in4)) exec_while () boolean_shove integer_shove boolean_yankdup integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when (exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_inc} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 2, :instruction in4} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () integer_dec integer_dup integer_dup boolean_not exec_do*range (exec_yankdup exec_swap () (boolean_frominteger boolean_yank integer_swap in4 in4)) exec_while () boolean_shove integer_shove boolean_yankdup integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger boolean_flush integer_inc integer_yankdup boolean_not boolean_yank exec_when (exec_do*count () exec_s_when_autoconstructing () (boolean_frominteger) (exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 172 313 310 375 8 196 192 375 373)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (375 172 313 310 375 8 196 192 375 373)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_inc} {:close 2, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 1, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction in1} {:close 1, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_435} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 2, :instruction integer_gte} {:close 0, :instruction boolean_rot} {:close 1, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup})
Best program: (integer_inc exec_y_when_autoconstructing () exec_stackdepth exec_shove () exec_pop (integer_dup) integer_empty boolean_not boolean_invert_second_then_and integer_yankdup exec_eq boolean_frominteger exec_flush integer_min integer_div integer_yank integer_empty in2 integer_swap integer_dup_times integer_min integer_flush in1 integer_div print_integer integer_dup_times boolean_frominteger tag_boolean_435 integer_inc boolean_or integer_lte integer_gte boolean_dup_times integer_fromboolean integer_gte exec_s_when_autoconstructing (exec_dup_times (integer_swap exec_dup_times (integer_min integer_gte)) boolean_rot in2) (boolean_eq boolean_empty boolean_dup) ())
Errors: [0 1 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.311
Median total errors in population: 7
Error averages by case: (0.625 0.828 0.687 0.69 0.625 0.992 0.804 0.808 0.625 0.627)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.38
Average program size in population (points): 47.489
Average percent parens in population: 0.251
Minimum age in population: 35.3181300163269
Maximum age in population: 42.03259611129761
Average age in population: 40.22903983081877
Median age in population: 40.3030244037509
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 15376225
--- Timings ---
Current time: 1559583151149 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.4 seconds, 68.3%
Fitness Testing:     16.0 seconds, 19.1%
Report:              10.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [0 0 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [0 0 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 507 174 332 175 33 174 355 175 354)
Population mean number of elite cases: 2.62
Count of perfect (error zero) individuals by case: (341 507 174 332 175 33 174 355 175 354)
Population mean number of perfect (error zero) cases: 2.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 0 0 1 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.38
Median total errors in population: 7
Error averages by case: (0.659 0.493 0.826 0.668 0.825 0.967 0.826 0.645 0.825 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.142
Average program size in population (points): 46.388
Average percent parens in population: 0.239
Minimum age in population: 38.19820356369019
Maximum age in population: 43.47653675079346
Average age in population: 42.0427667812258
Median age in population: 41.93353474140167
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 213
Genome diversity (% unique genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 15775341
--- Timings ---
Current time: 1559583153762 milliseconds
Total Time:          86.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 68.5%
Fitness Testing:     16.4 seconds, 18.9%
Report:              10.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (684 558 193 682 108 557 193 193 295 895)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (684 558 193 682 108 557 193 193 295 895)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 5.642
Median total errors in population: 5
Error averages by case: (0.316 0.442 0.807 0.318 0.892 0.443 0.807 0.807 0.705 0.105)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.34
Average program size in population (points): 43.237
Average percent parens in population: 0.200
Minimum age in population: 39.36275768280029
Maximum age in population: 45.06364513188601
Average age in population: 43.39903858528659
Median age in population: 43.72814020141959
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 16161820
--- Timings ---
Current time: 1559583156335 milliseconds
Total Time:          89.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 68.7%
Fitness Testing:     16.7 seconds, 18.7%
Report:              11.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 36
Percent parens: 0.139
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 36
Percent parens: 0.139
--- Lexicase Population Statistics ---
Count of elite individuals by case: (345 294 344 344 297 517 899 294 296 549)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (345 294 344 344 297 517 899 294 296 549)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 5.821
Median total errors in population: 6
Error averages by case: (0.655 0.706 0.656 0.656 0.703 0.483 0.101 0.706 0.704 0.451)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.07
Average program size in population (points): 45.027
Average percent parens in population: 0.216
Minimum age in population: 40.36275768280029
Maximum age in population: 46.89866604655981
Average age in population: 44.9350664901454
Median age in population: 44.96465254202485
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 16559103
--- Timings ---
Current time: 1559583158813 milliseconds
Total Time:          91.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.3 seconds, 68.9%
Fitness Testing:     17.1 seconds, 18.6%
Report:              11.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Lexicase best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () print_boolean integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (integer_inc boolean_pop integer_shove))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove})
Zero cases best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () print_boolean integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (integer_inc boolean_pop integer_shove))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (585 585 585 291 3 586 261 617 588 585)
Population mean number of elite cases: 4.69
Count of perfect (error zero) individuals by case: (585 585 585 291 3 586 261 617 588 585)
Population mean number of perfect (error zero) cases: 4.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_add boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 5.314
Median total errors in population: 3
Error averages by case: (0.415 0.415 0.415 0.709 0.997 0.414 0.739 0.383 0.412 0.415)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.195
Average program size in population (points): 42.788
Average percent parens in population: 0.195
Minimum age in population: 43.47883585095406
Maximum age in population: 48.35489600710571
Average age in population: 46.34615794572979
Median age in population: 46.44498048257083
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 16939004
--- Timings ---
Current time: 1559583161365 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.3 seconds, 69.2%
Fitness Testing:     17.4 seconds, 18.5%
Report:              11.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_do*range (exec_yank boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt tagged_3 boolean_stackdepth boolean_pop integer_shove boolean_eq exec_dup_items integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 44
Percent parens: 0.182
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction tagged_3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_do*range (exec_yank boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt tagged_3 boolean_stackdepth boolean_pop integer_shove boolean_eq exec_dup_items integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (735 726 868 734 731 567 571 162 569 568)
Population mean number of elite cases: 6.23
Count of perfect (error zero) individuals by case: (735 726 868 734 731 567 571 162 569 568)
Population mean number of perfect (error zero) cases: 6.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 2, :instruction exec_do*while} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush in2 exec_do*range (exec_do*range (exec_do*while ()) in4) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt)) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 36
Size: 46
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 3.769
Median total errors in population: 1
Error averages by case: (0.265 0.274 0.132 0.266 0.269 0.433 0.429 0.838 0.431 0.432)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.064
Average program size in population (points): 44.451
Average percent parens in population: 0.205
Minimum age in population: 44.59865203127265
Maximum age in population: 49.86153106717393
Average age in population: 47.66848454971611
Median age in population: 47.74495463841595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 104
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.008
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 17503344
--- Timings ---
Current time: 1559583164012 milliseconds
Total Time:          97.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.2 seconds, 69.3%
Fitness Testing:     17.9 seconds, 18.4%
Report:              11.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 387
Test mean error for best: 0.38700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: -38                
Correct output: -73                 | Program output: -73                
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: -33                
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 44                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 33                 
Correct output: 35                  | Program output: 56                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 47                 
Correct output: 25                  | Program output: 25                 
Correct output: 5                   | Program output: 8                  
Correct output: 70                  | Program output: 83                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 28                 
Correct output: 1                   | Program output: 1                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 49                 
Correct output: -66                 | Program output: -45                
Correct output: -68                 | Program output: 39                 
Correct output: 1                   | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 29                 
Correct output: -42                 | Program output: -14                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 8                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -85                
Correct output: -52                 | Program output: 22                 
Correct output: -92                 | Program output: -20                
Correct output: -68                 | Program output: -68                
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -15                
Correct output: -100                | Program output: -100               
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -25                
Correct output: -50                 | Program output: -5                 
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: 21                 
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -80                
Correct output: -52                 | Program output: -46                
Correct output: -95                 | Program output: -95                
Correct output: -67                 | Program output: 35                 
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -96                
Correct output: -42                 | Program output: -41                
Correct output: -88                 | Program output: -75                
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: -96                
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: 51                 
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: -16                
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -28                
Correct output: -94                 | Program output: -94                
Correct output: -100                | Program output: -96                
Correct output: -69                 | Program output: 74                 
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -99                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -11                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -54                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -56                
Correct output: -50                 | Program output: -12                
Correct output: -36                 | Program output: -22                
Correct output: -40                 | Program output: -40                
Correct output: -77                 | Program output: -77                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_do*while} {:close 2, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ())) in4)) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*range} {:close 3, :instruction exec_do*while} {:close 2, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_do*range (exec_do*count (boolean_or integer_yank integer_yank exec_dup (integer_flush) in2 exec_do*range (exec_do*range (exec_do*while ())) in4)) exec_while () boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (699 691 743 833 738 832 4 825 832 1)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (699 691 743 833 738 832 4 825 832 1)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_add boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 31
Size: 36
Percent parens: 0.139
--- Population Statistics ---
Average total errors in population: 3.802
Median total errors in population: 2
Error averages by case: (0.301 0.309 0.257 0.167 0.262 0.168 0.996 0.175 0.168 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.778
Average program size in population (points): 43.279
Average percent parens in population: 0.193
Minimum age in population: 45.83454637974501
Maximum age in population: 50.9632549744565
Average age in population: 49.12131498758774
Median age in population: 49.1992868919624
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.673
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 18021168
--- Timings ---
Current time: 1559583166576 milliseconds
Total Time:          99.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 69.3%
Fitness Testing:     18.3 seconds, 18.4%
Report:              12.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: 60                 
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 74                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 43                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 13                 
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 51                 
Correct output: 25                  | Program output: 53                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 76                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 47                 
Correct output: 1                   | Program output: 12                 
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 35                 
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: -5                 
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: 24                 
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: 7                  
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: 9                  
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -53                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -50                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -79                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -53                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: 31                 
Correct output: -4                  | Program output: 7                  
Correct output: -96                 | Program output: 57                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: 22                 
Correct output: -16                 | Program output: 36                 
Correct output: -65                 | Program output: -43                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -58                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: 18                 
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: 28                 
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 boolean_frominteger boolean_yank integer_swap in4 exec_shove (integer_dup_times) in1 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.133
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction in2} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_598} {:close 1, :instruction in4} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup exec_dup (integer_flush) in2 integer_div) boolean_shove integer_shove boolean_yankdup tagged_598 in4 boolean_frominteger boolean_yank integer_swap in4 exec_shove (integer_dup_times) in1 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (652 681 678 195 686 15 652 846 16 686)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (652 681 678 195 686 15 652 846 16 686)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (integer_yankdup exec_do*count (exec_stackdepth integer_dup integer_mult integer_flush) boolean_frominteger boolean_yank integer_swap in4 exec_shove (integer_dup_times) in1 in4 exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 37
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 4.893
Median total errors in population: 3
Error averages by case: (0.348 0.319 0.322 0.805 0.314 0.985 0.348 0.154 0.984 0.314)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.879
Average program size in population (points): 43.772
Average percent parens in population: 0.198
Minimum age in population: 46.83454637974501
Maximum age in population: 52.6920592780225
Average age in population: 50.49472694035154
Median age in population: 50.58870605740231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.009
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 18422092
--- Timings ---
Current time: 1559583169151 milliseconds
Total Time:         102.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.0 seconds, 69.5%
Fitness Testing:     18.7 seconds, 18.3%
Report:              12.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -15                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Lexicase best program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Zero cases best program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (868 869 510 872 874 6 890 862 509 498)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (868 869 510 872 874 6 890 862 509 498)
Population mean number of perfect (error zero) cases: 6.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 1, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_mult} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 2, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_63} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_eq})
Best program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 39
Size: 51
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 3.242
Median total errors in population: 7/2
Error averages by case: (0.132 0.131 0.49 0.128 0.126 0.994 0.11 0.138 0.491 0.502)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.545
Average program size in population (points): 44.183
Average percent parens in population: 0.190
Minimum age in population: 47.83454637974501
Maximum age in population: 53.69751111976802
Average age in population: 51.96399834813765
Median age in population: 51.93873940827325
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.011
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 18814820
--- Timings ---
Current time: 1559583171750 milliseconds
Total Time:         104.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.0 seconds, 69.7%
Fitness Testing:     19.0 seconds, 18.2%
Report:              12.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 51


Auto-simplifying with starting size: 51
step: 0
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 500
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1000
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 1500
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2000
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 2500
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3000
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 3500
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4000
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 4500
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

step: 5000
program: (exec_do*range (exec_do*count (integer_max integer_max exec_rot () (in3 integer_empty integer_min) (exec_shove (exec_do*range () exec_do*times (exec_yankdup integer_mult) boolean_frominteger) boolean_yank integer_swap in4 exec_shove () integer_dup_times in1 in4) exec_while () integer_min integer_shove boolean_yankdup integer_mod print_integer integer_dup_items integer_lt) exec_do*times (boolean_stackdepth boolean_pop integer_shove boolean_eq boolean_stackdepth)) integer_pop tagged_63 integer_stackdepth exec_eq)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 51

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 223
Test mean error for best: 0.22300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 1
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 1
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 1
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 1
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 1
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 4                   | Program output: 4                  
Correct output: -54                 | Program output: -54                
Correct output: -63                 | Program output: -63                
Correct output: -92                 | Program output: -92                
Correct output: -38                 | Program output: 2                  
Correct output: -73                 | Program output: 96                 
Correct output: 8                   | Program output: 8                  
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -33                 | Program output: 25                 
Correct output: 11                  | Program output: 11                 
Correct output: 93                  | Program output: 93                 
Correct output: 43                  | Program output: 43                 
Correct output: -43                 | Program output: -43                
Correct output: 93                  | Program output: 93                 
Correct output: 44                  | Program output: 54                 
Correct output: 23                  | Program output: 23                 
Correct output: 33                  | Program output: 36                 
Correct output: 35                  | Program output: 35                 
Correct output: 6                   | Program output: 6                  
Correct output: 4                   | Program output: 4                  
Correct output: 1                   | Program output: 1                  
Correct output: 27                  | Program output: 27                 
Correct output: 37                  | Program output: 37                 
Correct output: 25                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 70                  | Program output: 70                 
Correct output: 31                  | Program output: 31                 
Correct output: 23                  | Program output: 23                 
Correct output: 28                  | Program output: 55                 
Correct output: 1                   | Program output: 53                 
Correct output: 14                  | Program output: 46                 
Correct output: 17                  | Program output: 17                 
Correct output: 4                   | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 35                  | Program output: 35                 
Correct output: -66                 | Program output: -66                
Correct output: -68                 | Program output: -68                
Correct output: 1                   | Program output: 1                  
Correct output: -36                 | Program output: 21                 
Correct output: -67                 | Program output: -67                
Correct output: 28                  | Program output: 28                 
Correct output: -42                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -73                 | Program output: -73                
Correct output: -16                 | Program output: -16                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
Correct output: 60                  | Program output: 60                 
Correct output: -15                 | Program output: -4                 
Correct output: -100                | Program output: -4                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: -80                
Correct output: -50                 | Program output: -50                
Correct output: -58                 | Program output: -58                
Correct output: -80                 | Program output: -80                
Correct output: -37                 | Program output: -37                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -58                
Correct output: -52                 | Program output: -52                
Correct output: -95                 | Program output: -71                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -60                 | Program output: -60                
Correct output: -96                 | Program output: -94                
Correct output: -42                 | Program output: -42                
Correct output: -88                 | Program output: -88                
Correct output: -4                  | Program output: -4                 
Correct output: -96                 | Program output: 32                 
Correct output: -36                 | Program output: -36                
Correct output: -60                 | Program output: -60                
Correct output: -97                 | Program output: -97                
Correct output: -16                 | Program output: 35                 
Correct output: -65                 | Program output: -65                
Correct output: -55                 | Program output: -55                
Correct output: -94                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -99                 | Program output: -99                
Correct output: -17                 | Program output: -17                
Correct output: -77                 | Program output: -77                
Correct output: -99                 | Program output: -70                
Correct output: -47                 | Program output: -47                
Correct output: -69                 | Program output: -69                
Correct output: -18                 | Program output: -18                
Correct output: -54                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -93                 | Program output: -93                
Correct output: -50                 | Program output: -50                
Correct output: -36                 | Program output: -36                
Correct output: -40                 | Program output: -31                
Correct output: -77                 | Program output: -15                
;;******************************
