Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 46 46 -97] -97] [[-29 -29 94 -29] -29] [[99 41 99 99] 41] [[-64 3 -64 -64] -64] [[99 69 99 99] 69] [[-81 -93 -93 -93] -93] [[78 -47 78 78] -47] [[-2 -35 -35 -35] -35] [[-91 -91 68 -91] -91] [[-72 98 -72 -72] -72] [(57 57 57 57) 57] [(7 7 7 7) 7] [(-24 -24 -24 -24) -24] [(-71 -71 -71 -71) -71] [(-81 -81 -81 -81) -81] [(48 51 60 35) 35] [(74 17 95 79) 17] [(51 29 3 54) 3] [(17 76 3 100) 3] [(47 43 88 24) 24] [(54 9 93 11) 9] [(82 50 63 69) 50] [(30 93 39 22) 22] [(41 11 21 22) 11] [(82 14 37 24) 14] [(10 82 59 84) 10] [(60 3 2 2) 2] [(50 6 42 27) 6] [(23 18 59 99) 18] [(80 76 52 24) 24] [(48 23 7 93) 7] [(53 92 74 11) 11] [(37 54 27 100) 27] [(91 44 73 32) 32] [(45 56 49 15) 15] [(6 11 -43 -62) -62] [(-56 71 -80 -71) -80] [(47 -41 -77 88) -77] [(-54 98 -41 -11) -54] [(10 -58 -28 81) -58] [(-68 -65 -7 -49) -68] [(-86 19 78 -56) -86] [(-3 -50 98 64) -50] [(-12 28 16 56) -12] [(50 -26 -50 -89) -89] [(39 -62 75 -24) -62] [(37 -90 -62 75) -90] [(-81 6 55 19) -81] [(-12 -64 -67 57) -67] [(4 -18 50 -13) -18] [(2 94 -71 82) -71] [(53 -65 96 22) -65] [(-41 -83 -7 -28) -83] [(-14 89 -37 -88) -88] [(-30 -7 35 -25) -30] [(42 73 47 99) 42] [(40 -58 -69 -49) -69] [(-98 85 54 -64) -98] [(-96 -94 -56 75) -96] [(-21 7 4 -7) -21] [(-34 74 -48 -44) -48] [(-72 40 -56 -26) -72] [(-88 -16 49 -78) -88] [(-5 -15 -84 1) -84] [(5 -47 59 -19) -47] [(82 -91 -9 2) -91] [(45 93 -29 82) -29] [(6 95 -8 -19) -19] [(-100 -49 -8 32) -100] [(-29 -15 -94 -77) -94] [(97 -3 -74 -38) -74] [(-38 -6 -84 -77) -84] [(66 -18 -27 87) -27] [(-87 -68 -32 17) -87] [(70 -95 3 -60) -95] [(41 -52 53 -60) -60] [(22 45 39 27) 22] [(-71 19 67 -55) -71] [(40 -84 17 -76) -84] [(20 -94 99 -62) -94] [(98 88 70 44) 44] [(-10 -75 -62 -70) -75] [(48 89 30 -22) -22] [(96 -55 72 16) -55] [(-91 3 10 -30) -91] [(18 -26 -54 -94) -94] [(97 -14 -82 -2) -82] [(-48 44 34 -76) -76] [(56 -54 -49 -80) -80] [(65 -11 -5 82) -11] [(38 -88 92 95) -88] [(47 37 55 11) 11] [(83 -43 -28 -29) -43] [(-35 -3 -42 95) -42] [(-86 46 9 -91) -91])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[46 46 46 -97] -97]
Train Case:   6 | Input/Output: [[-29 -29 94 -29] -29]
Train Case:   7 | Input/Output: [[99 41 99 99] 41]
Train Case:   8 | Input/Output: [[-64 3 -64 -64] -64]
Train Case:   9 | Input/Output: [[99 69 99 99] 69]
Train Case:  10 | Input/Output: [[-81 -93 -93 -93] -93]
Train Case:  11 | Input/Output: [[78 -47 78 78] -47]
Train Case:  12 | Input/Output: [[-2 -35 -35 -35] -35]
Train Case:  13 | Input/Output: [[-91 -91 68 -91] -91]
Train Case:  14 | Input/Output: [[-72 98 -72 -72] -72]
Train Case:  15 | Input/Output: [(57 57 57 57) 57]
Train Case:  16 | Input/Output: [(7 7 7 7) 7]
Train Case:  17 | Input/Output: [(-24 -24 -24 -24) -24]
Train Case:  18 | Input/Output: [(-71 -71 -71 -71) -71]
Train Case:  19 | Input/Output: [(-81 -81 -81 -81) -81]
Train Case:  20 | Input/Output: [(48 51 60 35) 35]
Train Case:  21 | Input/Output: [(74 17 95 79) 17]
Train Case:  22 | Input/Output: [(51 29 3 54) 3]
Train Case:  23 | Input/Output: [(17 76 3 100) 3]
Train Case:  24 | Input/Output: [(47 43 88 24) 24]
Train Case:  25 | Input/Output: [(54 9 93 11) 9]
Train Case:  26 | Input/Output: [(82 50 63 69) 50]
Train Case:  27 | Input/Output: [(30 93 39 22) 22]
Train Case:  28 | Input/Output: [(41 11 21 22) 11]
Train Case:  29 | Input/Output: [(82 14 37 24) 14]
Train Case:  30 | Input/Output: [(10 82 59 84) 10]
Train Case:  31 | Input/Output: [(60 3 2 2) 2]
Train Case:  32 | Input/Output: [(50 6 42 27) 6]
Train Case:  33 | Input/Output: [(23 18 59 99) 18]
Train Case:  34 | Input/Output: [(80 76 52 24) 24]
Train Case:  35 | Input/Output: [(48 23 7 93) 7]
Train Case:  36 | Input/Output: [(53 92 74 11) 11]
Train Case:  37 | Input/Output: [(37 54 27 100) 27]
Train Case:  38 | Input/Output: [(91 44 73 32) 32]
Train Case:  39 | Input/Output: [(45 56 49 15) 15]
Train Case:  40 | Input/Output: [(6 11 -43 -62) -62]
Train Case:  41 | Input/Output: [(-56 71 -80 -71) -80]
Train Case:  42 | Input/Output: [(47 -41 -77 88) -77]
Train Case:  43 | Input/Output: [(-54 98 -41 -11) -54]
Train Case:  44 | Input/Output: [(10 -58 -28 81) -58]
Train Case:  45 | Input/Output: [(-68 -65 -7 -49) -68]
Train Case:  46 | Input/Output: [(-86 19 78 -56) -86]
Train Case:  47 | Input/Output: [(-3 -50 98 64) -50]
Train Case:  48 | Input/Output: [(-12 28 16 56) -12]
Train Case:  49 | Input/Output: [(50 -26 -50 -89) -89]
Train Case:  50 | Input/Output: [(39 -62 75 -24) -62]
Train Case:  51 | Input/Output: [(37 -90 -62 75) -90]
Train Case:  52 | Input/Output: [(-81 6 55 19) -81]
Train Case:  53 | Input/Output: [(-12 -64 -67 57) -67]
Train Case:  54 | Input/Output: [(4 -18 50 -13) -18]
Train Case:  55 | Input/Output: [(2 94 -71 82) -71]
Train Case:  56 | Input/Output: [(53 -65 96 22) -65]
Train Case:  57 | Input/Output: [(-41 -83 -7 -28) -83]
Train Case:  58 | Input/Output: [(-14 89 -37 -88) -88]
Train Case:  59 | Input/Output: [(-30 -7 35 -25) -30]
Train Case:  60 | Input/Output: [(42 73 47 99) 42]
Train Case:  61 | Input/Output: [(40 -58 -69 -49) -69]
Train Case:  62 | Input/Output: [(-98 85 54 -64) -98]
Train Case:  63 | Input/Output: [(-96 -94 -56 75) -96]
Train Case:  64 | Input/Output: [(-21 7 4 -7) -21]
Train Case:  65 | Input/Output: [(-34 74 -48 -44) -48]
Train Case:  66 | Input/Output: [(-72 40 -56 -26) -72]
Train Case:  67 | Input/Output: [(-88 -16 49 -78) -88]
Train Case:  68 | Input/Output: [(-5 -15 -84 1) -84]
Train Case:  69 | Input/Output: [(5 -47 59 -19) -47]
Train Case:  70 | Input/Output: [(82 -91 -9 2) -91]
Train Case:  71 | Input/Output: [(45 93 -29 82) -29]
Train Case:  72 | Input/Output: [(6 95 -8 -19) -19]
Train Case:  73 | Input/Output: [(-100 -49 -8 32) -100]
Train Case:  74 | Input/Output: [(-29 -15 -94 -77) -94]
Train Case:  75 | Input/Output: [(97 -3 -74 -38) -74]
Train Case:  76 | Input/Output: [(-38 -6 -84 -77) -84]
Train Case:  77 | Input/Output: [(66 -18 -27 87) -27]
Train Case:  78 | Input/Output: [(-87 -68 -32 17) -87]
Train Case:  79 | Input/Output: [(70 -95 3 -60) -95]
Train Case:  80 | Input/Output: [(41 -52 53 -60) -60]
Train Case:  81 | Input/Output: [(22 45 39 27) 22]
Train Case:  82 | Input/Output: [(-71 19 67 -55) -71]
Train Case:  83 | Input/Output: [(40 -84 17 -76) -84]
Train Case:  84 | Input/Output: [(20 -94 99 -62) -94]
Train Case:  85 | Input/Output: [(98 88 70 44) 44]
Train Case:  86 | Input/Output: [(-10 -75 -62 -70) -75]
Train Case:  87 | Input/Output: [(48 89 30 -22) -22]
Train Case:  88 | Input/Output: [(96 -55 72 16) -55]
Train Case:  89 | Input/Output: [(-91 3 10 -30) -91]
Train Case:  90 | Input/Output: [(18 -26 -54 -94) -94]
Train Case:  91 | Input/Output: [(97 -14 -82 -2) -82]
Train Case:  92 | Input/Output: [(-48 44 34 -76) -76]
Train Case:  93 | Input/Output: [(56 -54 -49 -80) -80]
Train Case:  94 | Input/Output: [(65 -11 -5 82) -11]
Train Case:  95 | Input/Output: [(38 -88 92 95) -88]
Train Case:  96 | Input/Output: [(47 37 55 11) 11]
Train Case:  97 | Input/Output: [(83 -43 -28 -29) -43]
Train Case:  98 | Input/Output: [(-35 -3 -42 95) -42]
Train Case:  99 | Input/Output: [(-86 46 9 -91) -91]
Test Case:   0 | Input/Output: [[-66 -66 -66 59] -66]
Test Case:   1 | Input/Output: [[-15 67 -15 -15] -15]
Test Case:   2 | Input/Output: [[-75 -38 -38 -38] -75]
Test Case:   3 | Input/Output: [[-36 -36 -26 -36] -36]
Test Case:   4 | Input/Output: [[-90 -90 -18 -90] -90]
Test Case:   5 | Input/Output: [[27 27 27 32] 27]
Test Case:   6 | Input/Output: [[54 -66 54 54] -66]
Test Case:   7 | Input/Output: [[14 14 14 -71] -71]
Test Case:   8 | Input/Output: [[-66 -66 -66 68] -66]
Test Case:   9 | Input/Output: [[-29 -29 -29 -33] -33]
Test Case:  10 | Input/Output: [[57 -23 -23 -23] -23]
Test Case:  11 | Input/Output: [[-30 -30 -30 92] -30]
Test Case:  12 | Input/Output: [[-91 -91 60 -91] -91]
Test Case:  13 | Input/Output: [[-15 -34 -15 -15] -34]
Test Case:  14 | Input/Output: [[-39 -39 -39 56] -39]
Test Case:  15 | Input/Output: [[60 60 60 48] 48]
Test Case:  16 | Input/Output: [[-2 -2 -2 -64] -64]
Test Case:  17 | Input/Output: [[-61 46 46 46] -61]
Test Case:  18 | Input/Output: [[-58 -58 -58 34] -58]
Test Case:  19 | Input/Output: [[-72 79 79 79] -72]
Test Case:  20 | Input/Output: [[-52 -52 -25 -52] -52]
Test Case:  21 | Input/Output: [[-80 94 -80 -80] -80]
Test Case:  22 | Input/Output: [[-86 -85 -85 -85] -86]
Test Case:  23 | Input/Output: [[98 88 98 98] 88]
Test Case:  24 | Input/Output: [[90 27 27 27] 27]
Test Case:  25 | Input/Output: [[66 -91 66 66] -91]
Test Case:  26 | Input/Output: [[35 98 35 35] 35]
Test Case:  27 | Input/Output: [[-1 -54 -54 -54] -54]
Test Case:  28 | Input/Output: [[-1 -1 -1 80] -1]
Test Case:  29 | Input/Output: [[-84 -84 83 -84] -84]
Test Case:  30 | Input/Output: [[94 -84 -84 -84] -84]
Test Case:  31 | Input/Output: [[40 -84 -84 -84] -84]
Test Case:  32 | Input/Output: [[2 59 2 2] 2]
Test Case:  33 | Input/Output: [[69 -36 -36 -36] -36]
Test Case:  34 | Input/Output: [[18 12 18 18] 12]
Test Case:  35 | Input/Output: [[-84 -39 -39 -39] -84]
Test Case:  36 | Input/Output: [[-84 -84 -84 34] -84]
Test Case:  37 | Input/Output: [[41 41 -94 41] -94]
Test Case:  38 | Input/Output: [[-90 -44 -90 -90] -90]
Test Case:  39 | Input/Output: [[99 99 26 99] 26]
Test Case:  40 | Input/Output: [[78 78 -67 78] -67]
Test Case:  41 | Input/Output: [[-100 -100 -100 -80] -100]
Test Case:  42 | Input/Output: [[92 92 22 92] 22]
Test Case:  43 | Input/Output: [[-88 -26 -88 -88] -88]
Test Case:  44 | Input/Output: [[36 36 -61 36] -61]
Test Case:  45 | Input/Output: [[91 91 79 91] 79]
Test Case:  46 | Input/Output: [[9 9 9 -58] -58]
Test Case:  47 | Input/Output: [[81 54 54 54] 54]
Test Case:  48 | Input/Output: [[-100 -100 36 -100] -100]
Test Case:  49 | Input/Output: [[95 88 95 95] 88]
Test Case:  50 | Input/Output: [[83 83 83 17] 17]
Test Case:  51 | Input/Output: [[9 9 9 -44] -44]
Test Case:  52 | Input/Output: [[-90 -83 -83 -83] -90]
Test Case:  53 | Input/Output: [[-53 -53 72 -53] -53]
Test Case:  54 | Input/Output: [[-55 -55 -28 -55] -55]
Test Case:  55 | Input/Output: [[-17 -17 -21 -17] -21]
Test Case:  56 | Input/Output: [[51 51 4 51] 4]
Test Case:  57 | Input/Output: [[62 82 62 62] 62]
Test Case:  58 | Input/Output: [[55 55 -33 55] -33]
Test Case:  59 | Input/Output: [[10 10 31 10] 10]
Test Case:  60 | Input/Output: [[28 28 28 1] 1]
Test Case:  61 | Input/Output: [[-36 -94 -94 -94] -94]
Test Case:  62 | Input/Output: [[-25 -96 -96 -96] -96]
Test Case:  63 | Input/Output: [[-55 15 -55 -55] -55]
Test Case:  64 | Input/Output: [[-17 -21 -17 -17] -21]
Test Case:  65 | Input/Output: [[69 69 69 -96] -96]
Test Case:  66 | Input/Output: [[8 84 8 8] 8]
Test Case:  67 | Input/Output: [[-68 -68 -68 -23] -68]
Test Case:  68 | Input/Output: [[35 35 35 56] 35]
Test Case:  69 | Input/Output: [[14 13 13 13] 13]
Test Case:  70 | Input/Output: [[34 34 34 -66] -66]
Test Case:  71 | Input/Output: [[-48 -48 32 -48] -48]
Test Case:  72 | Input/Output: [[8 8 96 8] 8]
Test Case:  73 | Input/Output: [[-97 34 -97 -97] -97]
Test Case:  74 | Input/Output: [[55 19 19 19] 19]
Test Case:  75 | Input/Output: [[-50 -50 -64 -50] -64]
Test Case:  76 | Input/Output: [[-28 -28 -28 80] -28]
Test Case:  77 | Input/Output: [[-6 -77 -6 -6] -77]
Test Case:  78 | Input/Output: [[-67 -67 -67 -89] -89]
Test Case:  79 | Input/Output: [[8 8 -37 8] -37]
Test Case:  80 | Input/Output: [[-37 -37 -37 -96] -96]
Test Case:  81 | Input/Output: [[51 -3 51 51] -3]
Test Case:  82 | Input/Output: [[-33 -38 -38 -38] -38]
Test Case:  83 | Input/Output: [[-34 -34 60 -34] -34]
Test Case:  84 | Input/Output: [[85 -62 85 85] -62]
Test Case:  85 | Input/Output: [[87 87 17 87] 17]
Test Case:  86 | Input/Output: [[-85 -85 -85 24] -85]
Test Case:  87 | Input/Output: [[32 32 -63 32] -63]
Test Case:  88 | Input/Output: [[-30 -30 -9 -30] -30]
Test Case:  89 | Input/Output: [[-14 40 -14 -14] -14]
Test Case:  90 | Input/Output: [[58 -65 58 58] -65]
Test Case:  91 | Input/Output: [[70 70 70 -17] -17]
Test Case:  92 | Input/Output: [[-81 93 93 93] -81]
Test Case:  93 | Input/Output: [[86 87 87 87] 86]
Test Case:  94 | Input/Output: [[100 100 100 -38] -38]
Test Case:  95 | Input/Output: [[13 13 45 13] 13]
Test Case:  96 | Input/Output: [[6 -20 -20 -20] -20]
Test Case:  97 | Input/Output: [[45 47 45 45] 45]
Test Case:  98 | Input/Output: [[89 89 -10 89] -10]
Test Case:  99 | Input/Output: [[-75 -4 -4 -4] -75]
Test Case: 100 | Input/Output: [(83 83 83 83) 83]
Test Case: 101 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 102 | Input/Output: [(6 6 6 6) 6]
Test Case: 103 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 104 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 105 | Input/Output: [(25 25 25 25) 25]
Test Case: 106 | Input/Output: [(11 11 11 11) 11]
Test Case: 107 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 108 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 109 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 110 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 111 | Input/Output: [(39 39 39 39) 39]
Test Case: 112 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 113 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 114 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 115 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 116 | Input/Output: [(93 93 93 93) 93]
Test Case: 117 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 118 | Input/Output: [(14 14 14 14) 14]
Test Case: 119 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 120 | Input/Output: [(86 86 86 86) 86]
Test Case: 121 | Input/Output: [(45 45 45 45) 45]
Test Case: 122 | Input/Output: [(57 57 57 57) 57]
Test Case: 123 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 124 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 125 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 126 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 127 | Input/Output: [(2 2 2 2) 2]
Test Case: 128 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 129 | Input/Output: [(48 48 48 48) 48]
Test Case: 130 | Input/Output: [(56 56 56 56) 56]
Test Case: 131 | Input/Output: [(46 46 46 46) 46]
Test Case: 132 | Input/Output: [(22 22 22 22) 22]
Test Case: 133 | Input/Output: [(3 3 3 3) 3]
Test Case: 134 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 135 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 136 | Input/Output: [(55 55 55 55) 55]
Test Case: 137 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 138 | Input/Output: [(39 39 39 39) 39]
Test Case: 139 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 140 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 141 | Input/Output: [(39 39 39 39) 39]
Test Case: 142 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 143 | Input/Output: [(68 68 68 68) 68]
Test Case: 144 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 145 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 146 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 147 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 148 | Input/Output: [(59 59 59 59) 59]
Test Case: 149 | Input/Output: [(49 49 49 49) 49]
Test Case: 150 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 151 | Input/Output: [(30 30 30 30) 30]
Test Case: 152 | Input/Output: [(18 18 18 18) 18]
Test Case: 153 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 154 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 155 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 156 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 157 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 158 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 159 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 160 | Input/Output: [(73 73 73 73) 73]
Test Case: 161 | Input/Output: [(47 47 47 47) 47]
Test Case: 162 | Input/Output: [(94 94 94 94) 94]
Test Case: 163 | Input/Output: [(89 89 89 89) 89]
Test Case: 164 | Input/Output: [(32 32 32 32) 32]
Test Case: 165 | Input/Output: [(30 30 30 30) 30]
Test Case: 166 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 167 | Input/Output: [(27 27 27 27) 27]
Test Case: 168 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 169 | Input/Output: [(89 89 89 89) 89]
Test Case: 170 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 171 | Input/Output: [(50 50 50 50) 50]
Test Case: 172 | Input/Output: [(11 11 11 11) 11]
Test Case: 173 | Input/Output: [(81 81 81 81) 81]
Test Case: 174 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 175 | Input/Output: [(72 72 72 72) 72]
Test Case: 176 | Input/Output: [(27 27 27 27) 27]
Test Case: 177 | Input/Output: [(47 47 47 47) 47]
Test Case: 178 | Input/Output: [(23 23 23 23) 23]
Test Case: 179 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 180 | Input/Output: [(15 15 15 15) 15]
Test Case: 181 | Input/Output: [(18 18 18 18) 18]
Test Case: 182 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 183 | Input/Output: [(85 85 85 85) 85]
Test Case: 184 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 185 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 186 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 187 | Input/Output: [(78 78 78 78) 78]
Test Case: 188 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 189 | Input/Output: [(69 69 69 69) 69]
Test Case: 190 | Input/Output: [(48 48 48 48) 48]
Test Case: 191 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 192 | Input/Output: [(60 60 60 60) 60]
Test Case: 193 | Input/Output: [(35 35 35 35) 35]
Test Case: 194 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 195 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 196 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 197 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 198 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 199 | Input/Output: [(17 17 17 17) 17]
Test Case: 200 | Input/Output: [(92 41 97 9) 9]
Test Case: 201 | Input/Output: [(82 92 69 56) 56]
Test Case: 202 | Input/Output: [(66 0 92 12) 0]
Test Case: 203 | Input/Output: [(15 16 51 74) 15]
Test Case: 204 | Input/Output: [(84 48 64 74) 48]
Test Case: 205 | Input/Output: [(27 58 38 61) 27]
Test Case: 206 | Input/Output: [(28 15 95 96) 15]
Test Case: 207 | Input/Output: [(55 9 21 50) 9]
Test Case: 208 | Input/Output: [(64 76 47 43) 43]
Test Case: 209 | Input/Output: [(48 28 66 45) 28]
Test Case: 210 | Input/Output: [(60 97 63 99) 60]
Test Case: 211 | Input/Output: [(71 41 58 20) 20]
Test Case: 212 | Input/Output: [(99 2 10 32) 2]
Test Case: 213 | Input/Output: [(26 62 80 75) 26]
Test Case: 214 | Input/Output: [(90 67 89 100) 67]
Test Case: 215 | Input/Output: [(8 92 98 82) 8]
Test Case: 216 | Input/Output: [(90 1 58 5) 1]
Test Case: 217 | Input/Output: [(30 72 8 86) 8]
Test Case: 218 | Input/Output: [(96 0 0 94) 0]
Test Case: 219 | Input/Output: [(80 46 24 75) 24]
Test Case: 220 | Input/Output: [(56 81 12 87) 12]
Test Case: 221 | Input/Output: [(78 65 5 7) 5]
Test Case: 222 | Input/Output: [(55 59 27 69) 27]
Test Case: 223 | Input/Output: [(93 95 13 80) 13]
Test Case: 224 | Input/Output: [(59 56 45 47) 45]
Test Case: 225 | Input/Output: [(81 46 48 78) 46]
Test Case: 226 | Input/Output: [(58 3 99 49) 3]
Test Case: 227 | Input/Output: [(25 59 45 18) 18]
Test Case: 228 | Input/Output: [(25 86 6 2) 2]
Test Case: 229 | Input/Output: [(27 98 39 55) 27]
Test Case: 230 | Input/Output: [(32 88 28 23) 23]
Test Case: 231 | Input/Output: [(58 22 80 29) 22]
Test Case: 232 | Input/Output: [(54 9 48 31) 9]
Test Case: 233 | Input/Output: [(86 94 34 19) 19]
Test Case: 234 | Input/Output: [(11 65 52 68) 11]
Test Case: 235 | Input/Output: [(4 61 86 79) 4]
Test Case: 236 | Input/Output: [(73 81 86 86) 73]
Test Case: 237 | Input/Output: [(94 90 81 53) 53]
Test Case: 238 | Input/Output: [(53 95 92 69) 53]
Test Case: 239 | Input/Output: [(23 25 70 20) 20]
Test Case: 240 | Input/Output: [(77 53 44 98) 44]
Test Case: 241 | Input/Output: [(2 28 8 21) 2]
Test Case: 242 | Input/Output: [(87 85 25 64) 25]
Test Case: 243 | Input/Output: [(40 15 13 87) 13]
Test Case: 244 | Input/Output: [(36 28 20 29) 20]
Test Case: 245 | Input/Output: [(81 37 55 55) 37]
Test Case: 246 | Input/Output: [(45 61 68 36) 36]
Test Case: 247 | Input/Output: [(50 42 27 73) 27]
Test Case: 248 | Input/Output: [(63 3 31 43) 3]
Test Case: 249 | Input/Output: [(19 37 79 47) 19]
Test Case: 250 | Input/Output: [(57 8 73 35) 8]
Test Case: 251 | Input/Output: [(50 57 65 85) 50]
Test Case: 252 | Input/Output: [(62 77 34 20) 20]
Test Case: 253 | Input/Output: [(44 13 16 97) 13]
Test Case: 254 | Input/Output: [(96 5 21 25) 5]
Test Case: 255 | Input/Output: [(75 5 74 27) 5]
Test Case: 256 | Input/Output: [(99 73 88 60) 60]
Test Case: 257 | Input/Output: [(92 93 73 47) 47]
Test Case: 258 | Input/Output: [(74 15 39 91) 15]
Test Case: 259 | Input/Output: [(97 27 40 21) 21]
Test Case: 260 | Input/Output: [(31 61 85 46) 31]
Test Case: 261 | Input/Output: [(5 31 19 74) 5]
Test Case: 262 | Input/Output: [(70 88 74 18) 18]
Test Case: 263 | Input/Output: [(75 64 68 100) 64]
Test Case: 264 | Input/Output: [(21 14 63 30) 14]
Test Case: 265 | Input/Output: [(8 19 72 77) 8]
Test Case: 266 | Input/Output: [(74 44 74 11) 11]
Test Case: 267 | Input/Output: [(77 78 41 27) 27]
Test Case: 268 | Input/Output: [(43 89 80 22) 22]
Test Case: 269 | Input/Output: [(85 2 14 16) 2]
Test Case: 270 | Input/Output: [(41 76 27 19) 19]
Test Case: 271 | Input/Output: [(52 34 33 81) 33]
Test Case: 272 | Input/Output: [(86 100 51 66) 51]
Test Case: 273 | Input/Output: [(41 80 68 22) 22]
Test Case: 274 | Input/Output: [(46 55 10 1) 1]
Test Case: 275 | Input/Output: [(62 29 53 51) 29]
Test Case: 276 | Input/Output: [(68 1 78 52) 1]
Test Case: 277 | Input/Output: [(79 8 21 57) 8]
Test Case: 278 | Input/Output: [(76 29 32 33) 29]
Test Case: 279 | Input/Output: [(92 4 5 82) 4]
Test Case: 280 | Input/Output: [(31 12 55 14) 12]
Test Case: 281 | Input/Output: [(63 86 54 52) 52]
Test Case: 282 | Input/Output: [(58 68 25 46) 25]
Test Case: 283 | Input/Output: [(3 88 43 58) 3]
Test Case: 284 | Input/Output: [(86 64 13 96) 13]
Test Case: 285 | Input/Output: [(61 77 90 26) 26]
Test Case: 286 | Input/Output: [(4 2 83 59) 2]
Test Case: 287 | Input/Output: [(7 32 2 82) 2]
Test Case: 288 | Input/Output: [(34 1 5 54) 1]
Test Case: 289 | Input/Output: [(10 16 52 83) 10]
Test Case: 290 | Input/Output: [(37 67 81 51) 37]
Test Case: 291 | Input/Output: [(15 77 40 3) 3]
Test Case: 292 | Input/Output: [(67 24 47 76) 24]
Test Case: 293 | Input/Output: [(56 67 54 18) 18]
Test Case: 294 | Input/Output: [(76 72 60 88) 60]
Test Case: 295 | Input/Output: [(26 92 15 14) 14]
Test Case: 296 | Input/Output: [(26 2 91 70) 2]
Test Case: 297 | Input/Output: [(47 54 93 60) 47]
Test Case: 298 | Input/Output: [(93 54 78 19) 19]
Test Case: 299 | Input/Output: [(95 71 56 39) 39]
Test Case: 300 | Input/Output: [(10 93 56 1) 1]
Test Case: 301 | Input/Output: [(22 42 67 69) 22]
Test Case: 302 | Input/Output: [(41 64 61 32) 32]
Test Case: 303 | Input/Output: [(6 6 17 39) 6]
Test Case: 304 | Input/Output: [(18 45 1 24) 1]
Test Case: 305 | Input/Output: [(28 41 66 21) 21]
Test Case: 306 | Input/Output: [(78 23 95 39) 23]
Test Case: 307 | Input/Output: [(62 34 100 48) 34]
Test Case: 308 | Input/Output: [(15 32 17 65) 15]
Test Case: 309 | Input/Output: [(88 46 14 43) 14]
Test Case: 310 | Input/Output: [(66 39 36 23) 23]
Test Case: 311 | Input/Output: [(46 25 82 1) 1]
Test Case: 312 | Input/Output: [(96 21 80 86) 21]
Test Case: 313 | Input/Output: [(74 91 28 84) 28]
Test Case: 314 | Input/Output: [(45 48 65 99) 45]
Test Case: 315 | Input/Output: [(65 20 91 79) 20]
Test Case: 316 | Input/Output: [(61 37 100 39) 37]
Test Case: 317 | Input/Output: [(43 69 92 44) 43]
Test Case: 318 | Input/Output: [(97 20 82 35) 20]
Test Case: 319 | Input/Output: [(48 93 39 45) 39]
Test Case: 320 | Input/Output: [(77 59 90 86) 59]
Test Case: 321 | Input/Output: [(9 4 23 70) 4]
Test Case: 322 | Input/Output: [(22 0 18 46) 0]
Test Case: 323 | Input/Output: [(86 18 57 65) 18]
Test Case: 324 | Input/Output: [(65 65 79 77) 65]
Test Case: 325 | Input/Output: [(17 91 38 21) 17]
Test Case: 326 | Input/Output: [(18 35 18 58) 18]
Test Case: 327 | Input/Output: [(55 23 2 40) 2]
Test Case: 328 | Input/Output: [(60 41 59 84) 41]
Test Case: 329 | Input/Output: [(22 12 63 88) 12]
Test Case: 330 | Input/Output: [(86 70 1 22) 1]
Test Case: 331 | Input/Output: [(37 62 47 65) 37]
Test Case: 332 | Input/Output: [(91 77 70 56) 56]
Test Case: 333 | Input/Output: [(9 3 34 12) 3]
Test Case: 334 | Input/Output: [(0 64 38 43) 0]
Test Case: 335 | Input/Output: [(81 32 28 76) 28]
Test Case: 336 | Input/Output: [(63 0 29 34) 0]
Test Case: 337 | Input/Output: [(92 43 10 66) 10]
Test Case: 338 | Input/Output: [(61 44 2 46) 2]
Test Case: 339 | Input/Output: [(90 19 17 11) 11]
Test Case: 340 | Input/Output: [(17 78 62 59) 17]
Test Case: 341 | Input/Output: [(40 39 81 94) 39]
Test Case: 342 | Input/Output: [(11 33 57 60) 11]
Test Case: 343 | Input/Output: [(22 75 77 72) 22]
Test Case: 344 | Input/Output: [(80 89 54 96) 54]
Test Case: 345 | Input/Output: [(24 37 77 22) 22]
Test Case: 346 | Input/Output: [(65 80 7 25) 7]
Test Case: 347 | Input/Output: [(58 69 86 47) 47]
Test Case: 348 | Input/Output: [(5 63 81 49) 5]
Test Case: 349 | Input/Output: [(96 72 10 70) 10]
Test Case: 350 | Input/Output: [(99 96 25 31) 25]
Test Case: 351 | Input/Output: [(90 66 4 26) 4]
Test Case: 352 | Input/Output: [(92 69 97 52) 52]
Test Case: 353 | Input/Output: [(90 93 46 85) 46]
Test Case: 354 | Input/Output: [(14 63 100 85) 14]
Test Case: 355 | Input/Output: [(72 54 65 4) 4]
Test Case: 356 | Input/Output: [(78 73 46 47) 46]
Test Case: 357 | Input/Output: [(51 23 37 11) 11]
Test Case: 358 | Input/Output: [(8 62 84 19) 8]
Test Case: 359 | Input/Output: [(94 64 6 11) 6]
Test Case: 360 | Input/Output: [(6 54 15 80) 6]
Test Case: 361 | Input/Output: [(88 44 98 100) 44]
Test Case: 362 | Input/Output: [(74 3 78 49) 3]
Test Case: 363 | Input/Output: [(19 82 44 89) 19]
Test Case: 364 | Input/Output: [(75 82 33 37) 33]
Test Case: 365 | Input/Output: [(82 75 62 52) 52]
Test Case: 366 | Input/Output: [(41 81 70 53) 41]
Test Case: 367 | Input/Output: [(49 87 81 41) 41]
Test Case: 368 | Input/Output: [(49 46 5 95) 5]
Test Case: 369 | Input/Output: [(100 54 0 25) 0]
Test Case: 370 | Input/Output: [(90 18 15 90) 15]
Test Case: 371 | Input/Output: [(30 78 95 82) 30]
Test Case: 372 | Input/Output: [(22 77 6 67) 6]
Test Case: 373 | Input/Output: [(54 4 6 96) 4]
Test Case: 374 | Input/Output: [(82 60 39 24) 24]
Test Case: 375 | Input/Output: [(51 24 78 32) 24]
Test Case: 376 | Input/Output: [(46 30 73 50) 30]
Test Case: 377 | Input/Output: [(21 53 47 89) 21]
Test Case: 378 | Input/Output: [(43 87 43 24) 24]
Test Case: 379 | Input/Output: [(28 68 59 49) 28]
Test Case: 380 | Input/Output: [(0 73 19 78) 0]
Test Case: 381 | Input/Output: [(46 11 77 5) 5]
Test Case: 382 | Input/Output: [(62 37 81 97) 37]
Test Case: 383 | Input/Output: [(2 70 75 72) 2]
Test Case: 384 | Input/Output: [(45 24 73 57) 24]
Test Case: 385 | Input/Output: [(11 56 19 15) 11]
Test Case: 386 | Input/Output: [(33 92 70 43) 33]
Test Case: 387 | Input/Output: [(83 26 55 93) 26]
Test Case: 388 | Input/Output: [(4 36 32 88) 4]
Test Case: 389 | Input/Output: [(5 8 89 76) 5]
Test Case: 390 | Input/Output: [(99 92 51 55) 51]
Test Case: 391 | Input/Output: [(64 64 22 33) 22]
Test Case: 392 | Input/Output: [(40 10 43 18) 10]
Test Case: 393 | Input/Output: [(15 96 5 18) 5]
Test Case: 394 | Input/Output: [(89 39 39 17) 17]
Test Case: 395 | Input/Output: [(98 28 75 58) 28]
Test Case: 396 | Input/Output: [(79 17 32 71) 17]
Test Case: 397 | Input/Output: [(73 7 68 6) 6]
Test Case: 398 | Input/Output: [(91 1 39 76) 1]
Test Case: 399 | Input/Output: [(76 38 74 87) 38]
Test Case: 400 | Input/Output: [(100 -77 79 39) -77]
Test Case: 401 | Input/Output: [(-95 -63 50 -27) -95]
Test Case: 402 | Input/Output: [(-75 13 38 23) -75]
Test Case: 403 | Input/Output: [(-67 -18 -51 -43) -67]
Test Case: 404 | Input/Output: [(28 -35 82 -69) -69]
Test Case: 405 | Input/Output: [(18 -29 -34 -22) -34]
Test Case: 406 | Input/Output: [(-19 -61 -39 44) -61]
Test Case: 407 | Input/Output: [(47 86 -26 -21) -26]
Test Case: 408 | Input/Output: [(49 -96 -45 26) -96]
Test Case: 409 | Input/Output: [(32 18 46 17) 17]
Test Case: 410 | Input/Output: [(91 83 -31 -90) -90]
Test Case: 411 | Input/Output: [(-61 36 -14 37) -61]
Test Case: 412 | Input/Output: [(82 -85 9 22) -85]
Test Case: 413 | Input/Output: [(-82 71 2 -30) -82]
Test Case: 414 | Input/Output: [(-80 79 -61 -19) -80]
Test Case: 415 | Input/Output: [(52 -75 10 63) -75]
Test Case: 416 | Input/Output: [(69 -92 59 -64) -92]
Test Case: 417 | Input/Output: [(-44 34 -60 28) -60]
Test Case: 418 | Input/Output: [(69 -100 16 -3) -100]
Test Case: 419 | Input/Output: [(32 -40 35 44) -40]
Test Case: 420 | Input/Output: [(-64 -1 38 -83) -83]
Test Case: 421 | Input/Output: [(69 25 8 100) 8]
Test Case: 422 | Input/Output: [(14 4 68 12) 4]
Test Case: 423 | Input/Output: [(50 88 -55 -56) -56]
Test Case: 424 | Input/Output: [(83 -74 -100 -22) -100]
Test Case: 425 | Input/Output: [(30 97 38 66) 30]
Test Case: 426 | Input/Output: [(-50 -5 15 51) -50]
Test Case: 427 | Input/Output: [(-21 -88 -67 78) -88]
Test Case: 428 | Input/Output: [(49 -92 26 21) -92]
Test Case: 429 | Input/Output: [(68 23 18 -26) -26]
Test Case: 430 | Input/Output: [(47 50 -68 0) -68]
Test Case: 431 | Input/Output: [(85 89 25 -80) -80]
Test Case: 432 | Input/Output: [(-52 -81 1 -96) -96]
Test Case: 433 | Input/Output: [(-33 -72 -59 -46) -72]
Test Case: 434 | Input/Output: [(86 53 -34 -20) -34]
Test Case: 435 | Input/Output: [(-3 11 65 47) -3]
Test Case: 436 | Input/Output: [(-4 80 -74 -19) -74]
Test Case: 437 | Input/Output: [(-75 34 78 34) -75]
Test Case: 438 | Input/Output: [(57 -43 57 15) -43]
Test Case: 439 | Input/Output: [(-64 93 45 0) -64]
Test Case: 440 | Input/Output: [(-57 80 11 -59) -59]
Test Case: 441 | Input/Output: [(-99 60 55 -81) -99]
Test Case: 442 | Input/Output: [(0 -26 -89 9) -89]
Test Case: 443 | Input/Output: [(58 75 -94 -58) -94]
Test Case: 444 | Input/Output: [(-7 73 -2 42) -7]
Test Case: 445 | Input/Output: [(52 -44 100 75) -44]
Test Case: 446 | Input/Output: [(3 -66 0 1) -66]
Test Case: 447 | Input/Output: [(11 97 96 19) 11]
Test Case: 448 | Input/Output: [(24 51 25 47) 24]
Test Case: 449 | Input/Output: [(-51 47 77 -71) -71]
Test Case: 450 | Input/Output: [(80 12 97 33) 12]
Test Case: 451 | Input/Output: [(-4 -38 -20 -47) -47]
Test Case: 452 | Input/Output: [(29 67 76 -98) -98]
Test Case: 453 | Input/Output: [(-25 -50 65 -9) -50]
Test Case: 454 | Input/Output: [(-45 16 -70 -9) -70]
Test Case: 455 | Input/Output: [(-27 46 -17 8) -27]
Test Case: 456 | Input/Output: [(93 8 80 -12) -12]
Test Case: 457 | Input/Output: [(-49 64 96 54) -49]
Test Case: 458 | Input/Output: [(78 35 28 36) 28]
Test Case: 459 | Input/Output: [(39 89 -18 32) -18]
Test Case: 460 | Input/Output: [(41 -16 18 39) -16]
Test Case: 461 | Input/Output: [(63 -9 -65 -67) -67]
Test Case: 462 | Input/Output: [(-7 -96 -9 45) -96]
Test Case: 463 | Input/Output: [(-15 -57 8 -3) -57]
Test Case: 464 | Input/Output: [(38 27 17 11) 11]
Test Case: 465 | Input/Output: [(-33 -29 -71 -5) -71]
Test Case: 466 | Input/Output: [(92 1 -91 13) -91]
Test Case: 467 | Input/Output: [(-56 59 75 77) -56]
Test Case: 468 | Input/Output: [(49 54 -32 54) -32]
Test Case: 469 | Input/Output: [(82 -2 20 -53) -53]
Test Case: 470 | Input/Output: [(87 54 -78 -94) -94]
Test Case: 471 | Input/Output: [(47 40 -35 -87) -87]
Test Case: 472 | Input/Output: [(96 65 -79 48) -79]
Test Case: 473 | Input/Output: [(-93 -22 -55 94) -93]
Test Case: 474 | Input/Output: [(-85 29 8 -35) -85]
Test Case: 475 | Input/Output: [(-60 79 -22 49) -60]
Test Case: 476 | Input/Output: [(-16 81 52 -60) -60]
Test Case: 477 | Input/Output: [(10 78 -3 35) -3]
Test Case: 478 | Input/Output: [(14 -48 -62 -65) -65]
Test Case: 479 | Input/Output: [(-30 -79 -24 21) -79]
Test Case: 480 | Input/Output: [(-56 -45 -47 -26) -56]
Test Case: 481 | Input/Output: [(15 43 -19 -54) -54]
Test Case: 482 | Input/Output: [(48 -82 20 -44) -82]
Test Case: 483 | Input/Output: [(-65 14 61 -2) -65]
Test Case: 484 | Input/Output: [(-29 -10 -16 1) -29]
Test Case: 485 | Input/Output: [(-63 -65 6 -92) -92]
Test Case: 486 | Input/Output: [(-46 20 -89 38) -89]
Test Case: 487 | Input/Output: [(63 -94 74 90) -94]
Test Case: 488 | Input/Output: [(74 6 74 76) 6]
Test Case: 489 | Input/Output: [(-10 -24 17 -70) -70]
Test Case: 490 | Input/Output: [(49 -49 36 27) -49]
Test Case: 491 | Input/Output: [(85 -78 -50 -1) -78]
Test Case: 492 | Input/Output: [(-56 25 -12 72) -56]
Test Case: 493 | Input/Output: [(-68 53 -22 91) -68]
Test Case: 494 | Input/Output: [(58 -50 66 39) -50]
Test Case: 495 | Input/Output: [(30 96 69 -28) -28]
Test Case: 496 | Input/Output: [(10 0 14 20) 0]
Test Case: 497 | Input/Output: [(-98 -51 48 -38) -98]
Test Case: 498 | Input/Output: [(13 -63 12 -75) -75]
Test Case: 499 | Input/Output: [(-17 -38 0 -54) -54]
Test Case: 500 | Input/Output: [(29 -55 34 -73) -73]
Test Case: 501 | Input/Output: [(50 23 -81 39) -81]
Test Case: 502 | Input/Output: [(-66 98 -24 21) -66]
Test Case: 503 | Input/Output: [(-81 -43 59 91) -81]
Test Case: 504 | Input/Output: [(44 80 -66 -45) -66]
Test Case: 505 | Input/Output: [(-2 40 33 -5) -5]
Test Case: 506 | Input/Output: [(26 -14 98 58) -14]
Test Case: 507 | Input/Output: [(-44 4 32 -30) -44]
Test Case: 508 | Input/Output: [(31 -4 -100 -5) -100]
Test Case: 509 | Input/Output: [(-91 67 35 -92) -92]
Test Case: 510 | Input/Output: [(-91 0 -45 77) -91]
Test Case: 511 | Input/Output: [(-50 71 -52 -43) -52]
Test Case: 512 | Input/Output: [(74 39 47 88) 39]
Test Case: 513 | Input/Output: [(-91 3 -40 62) -91]
Test Case: 514 | Input/Output: [(-100 10 41 74) -100]
Test Case: 515 | Input/Output: [(-72 30 -80 -18) -80]
Test Case: 516 | Input/Output: [(21 54 91 -73) -73]
Test Case: 517 | Input/Output: [(64 1 42 -53) -53]
Test Case: 518 | Input/Output: [(-71 -91 -57 -72) -91]
Test Case: 519 | Input/Output: [(-34 -58 -37 24) -58]
Test Case: 520 | Input/Output: [(97 -68 -100 -45) -100]
Test Case: 521 | Input/Output: [(2 22 -77 53) -77]
Test Case: 522 | Input/Output: [(88 98 -49 42) -49]
Test Case: 523 | Input/Output: [(-73 -53 79 82) -73]
Test Case: 524 | Input/Output: [(9 -56 50 -59) -59]
Test Case: 525 | Input/Output: [(2 23 100 22) 2]
Test Case: 526 | Input/Output: [(-9 82 87 -24) -24]
Test Case: 527 | Input/Output: [(-43 -29 26 -4) -43]
Test Case: 528 | Input/Output: [(56 -26 -82 -63) -82]
Test Case: 529 | Input/Output: [(-42 -84 -59 -96) -96]
Test Case: 530 | Input/Output: [(53 -67 20 2) -67]
Test Case: 531 | Input/Output: [(-47 61 4 -76) -76]
Test Case: 532 | Input/Output: [(48 -83 11 -51) -83]
Test Case: 533 | Input/Output: [(84 44 39 44) 39]
Test Case: 534 | Input/Output: [(-81 42 -37 -69) -81]
Test Case: 535 | Input/Output: [(-2 68 95 -96) -96]
Test Case: 536 | Input/Output: [(67 -42 72 -52) -52]
Test Case: 537 | Input/Output: [(2 1 -4 -88) -88]
Test Case: 538 | Input/Output: [(37 26 86 26) 26]
Test Case: 539 | Input/Output: [(99 58 -85 13) -85]
Test Case: 540 | Input/Output: [(78 -58 37 -73) -73]
Test Case: 541 | Input/Output: [(-83 69 21 65) -83]
Test Case: 542 | Input/Output: [(-38 -26 28 -95) -95]
Test Case: 543 | Input/Output: [(29 5 64 -17) -17]
Test Case: 544 | Input/Output: [(19 -39 15 61) -39]
Test Case: 545 | Input/Output: [(15 -95 -85 -67) -95]
Test Case: 546 | Input/Output: [(69 95 -89 38) -89]
Test Case: 547 | Input/Output: [(67 61 -96 -53) -96]
Test Case: 548 | Input/Output: [(38 87 82 56) 38]
Test Case: 549 | Input/Output: [(-47 40 95 -57) -57]
Test Case: 550 | Input/Output: [(41 98 5 45) 5]
Test Case: 551 | Input/Output: [(27 75 33 -76) -76]
Test Case: 552 | Input/Output: [(-1 100 -5 46) -5]
Test Case: 553 | Input/Output: [(-24 -28 -23 -34) -34]
Test Case: 554 | Input/Output: [(-56 38 -10 -41) -56]
Test Case: 555 | Input/Output: [(-84 48 81 -56) -84]
Test Case: 556 | Input/Output: [(-39 11 -33 52) -39]
Test Case: 557 | Input/Output: [(-51 48 93 61) -51]
Test Case: 558 | Input/Output: [(-40 15 94 90) -40]
Test Case: 559 | Input/Output: [(77 37 95 -83) -83]
Test Case: 560 | Input/Output: [(-33 -81 5 89) -81]
Test Case: 561 | Input/Output: [(40 69 -41 70) -41]
Test Case: 562 | Input/Output: [(-82 20 -77 -19) -82]
Test Case: 563 | Input/Output: [(-27 29 -97 100) -97]
Test Case: 564 | Input/Output: [(-94 52 -22 -94) -94]
Test Case: 565 | Input/Output: [(97 -31 -27 -62) -62]
Test Case: 566 | Input/Output: [(59 -11 35 10) -11]
Test Case: 567 | Input/Output: [(23 -30 -49 12) -49]
Test Case: 568 | Input/Output: [(-1 -19 31 -88) -88]
Test Case: 569 | Input/Output: [(23 36 -15 -34) -34]
Test Case: 570 | Input/Output: [(86 52 -96 72) -96]
Test Case: 571 | Input/Output: [(-12 31 -1 44) -12]
Test Case: 572 | Input/Output: [(-29 -25 -76 -65) -76]
Test Case: 573 | Input/Output: [(-63 67 69 9) -63]
Test Case: 574 | Input/Output: [(-3 97 -87 13) -87]
Test Case: 575 | Input/Output: [(-84 39 55 -1) -84]
Test Case: 576 | Input/Output: [(-27 -84 -66 -44) -84]
Test Case: 577 | Input/Output: [(16 -25 51 16) -25]
Test Case: 578 | Input/Output: [(45 -55 -28 39) -55]
Test Case: 579 | Input/Output: [(100 30 -43 -47) -47]
Test Case: 580 | Input/Output: [(30 -48 -20 23) -48]
Test Case: 581 | Input/Output: [(0 -60 3 -57) -60]
Test Case: 582 | Input/Output: [(32 -41 10 -32) -41]
Test Case: 583 | Input/Output: [(83 -34 -44 24) -44]
Test Case: 584 | Input/Output: [(-42 -20 -60 -66) -66]
Test Case: 585 | Input/Output: [(-24 15 -3 -23) -24]
Test Case: 586 | Input/Output: [(32 -2 -44 -87) -87]
Test Case: 587 | Input/Output: [(24 -62 61 -11) -62]
Test Case: 588 | Input/Output: [(83 69 -48 -85) -85]
Test Case: 589 | Input/Output: [(-46 -56 51 -8) -56]
Test Case: 590 | Input/Output: [(70 -62 -1 22) -62]
Test Case: 591 | Input/Output: [(-95 -86 -60 -30) -95]
Test Case: 592 | Input/Output: [(-99 97 -22 -63) -99]
Test Case: 593 | Input/Output: [(-74 -41 -9 -9) -74]
Test Case: 594 | Input/Output: [(-62 -15 -39 -97) -97]
Test Case: 595 | Input/Output: [(-40 -81 -44 -100) -100]
Test Case: 596 | Input/Output: [(4 -7 24 3) -7]
Test Case: 597 | Input/Output: [(86 11 -86 14) -86]
Test Case: 598 | Input/Output: [(3 29 20 -7) -7]
Test Case: 599 | Input/Output: [(14 78 -38 95) -38]
Test Case: 600 | Input/Output: [(5 66 -26 44) -26]
Test Case: 601 | Input/Output: [(-93 -9 -3 84) -93]
Test Case: 602 | Input/Output: [(-10 -65 65 -12) -65]
Test Case: 603 | Input/Output: [(-58 -95 90 -64) -95]
Test Case: 604 | Input/Output: [(-23 -45 17 0) -45]
Test Case: 605 | Input/Output: [(90 75 63 -92) -92]
Test Case: 606 | Input/Output: [(-82 -91 27 87) -91]
Test Case: 607 | Input/Output: [(-53 -44 29 -58) -58]
Test Case: 608 | Input/Output: [(69 33 -2 64) -2]
Test Case: 609 | Input/Output: [(-21 -67 26 -27) -67]
Test Case: 610 | Input/Output: [(-21 30 -46 -96) -96]
Test Case: 611 | Input/Output: [(60 -33 -8 35) -33]
Test Case: 612 | Input/Output: [(96 39 -21 69) -21]
Test Case: 613 | Input/Output: [(-6 5 96 14) -6]
Test Case: 614 | Input/Output: [(-98 74 9 5) -98]
Test Case: 615 | Input/Output: [(-54 -11 -49 -20) -54]
Test Case: 616 | Input/Output: [(33 -60 49 44) -60]
Test Case: 617 | Input/Output: [(-5 15 100 98) -5]
Test Case: 618 | Input/Output: [(29 -6 -30 43) -30]
Test Case: 619 | Input/Output: [(18 61 17 -20) -20]
Test Case: 620 | Input/Output: [(-59 71 -35 -62) -62]
Test Case: 621 | Input/Output: [(-75 34 -32 -46) -75]
Test Case: 622 | Input/Output: [(19 -30 -27 -41) -41]
Test Case: 623 | Input/Output: [(38 -2 -20 29) -20]
Test Case: 624 | Input/Output: [(19 -71 58 71) -71]
Test Case: 625 | Input/Output: [(0 26 -84 -17) -84]
Test Case: 626 | Input/Output: [(-49 -32 33 59) -49]
Test Case: 627 | Input/Output: [(-100 -9 -13 -18) -100]
Test Case: 628 | Input/Output: [(-49 89 -95 -1) -95]
Test Case: 629 | Input/Output: [(24 2 76 -54) -54]
Test Case: 630 | Input/Output: [(31 -32 -15 71) -32]
Test Case: 631 | Input/Output: [(-58 -68 64 -3) -68]
Test Case: 632 | Input/Output: [(-87 46 -5 88) -87]
Test Case: 633 | Input/Output: [(67 100 -35 -100) -100]
Test Case: 634 | Input/Output: [(32 65 -40 86) -40]
Test Case: 635 | Input/Output: [(-83 68 1 18) -83]
Test Case: 636 | Input/Output: [(31 -38 86 56) -38]
Test Case: 637 | Input/Output: [(-5 -22 49 70) -22]
Test Case: 638 | Input/Output: [(-35 -6 -32 12) -35]
Test Case: 639 | Input/Output: [(-92 -98 -80 34) -98]
Test Case: 640 | Input/Output: [(62 -27 46 -76) -76]
Test Case: 641 | Input/Output: [(54 -68 -62 -3) -68]
Test Case: 642 | Input/Output: [(91 -42 -10 -66) -66]
Test Case: 643 | Input/Output: [(-81 27 -27 52) -81]
Test Case: 644 | Input/Output: [(33 5 42 87) 5]
Test Case: 645 | Input/Output: [(-77 88 -2 -1) -77]
Test Case: 646 | Input/Output: [(-95 -38 50 -73) -95]
Test Case: 647 | Input/Output: [(-25 60 -27 89) -27]
Test Case: 648 | Input/Output: [(-28 -42 -13 47) -42]
Test Case: 649 | Input/Output: [(-3 16 70 8) -3]
Test Case: 650 | Input/Output: [(21 -100 -65 50) -100]
Test Case: 651 | Input/Output: [(-10 7 41 22) -10]
Test Case: 652 | Input/Output: [(-2 65 53 25) -2]
Test Case: 653 | Input/Output: [(45 -49 -19 44) -49]
Test Case: 654 | Input/Output: [(-99 13 -2 -95) -99]
Test Case: 655 | Input/Output: [(-11 97 -37 19) -37]
Test Case: 656 | Input/Output: [(52 20 -92 -28) -92]
Test Case: 657 | Input/Output: [(71 -86 10 3) -86]
Test Case: 658 | Input/Output: [(-20 -19 -86 -99) -99]
Test Case: 659 | Input/Output: [(46 89 -64 39) -64]
Test Case: 660 | Input/Output: [(-63 -20 -92 37) -92]
Test Case: 661 | Input/Output: [(-70 -49 52 -95) -95]
Test Case: 662 | Input/Output: [(-32 51 97 -86) -86]
Test Case: 663 | Input/Output: [(-71 -13 -67 28) -71]
Test Case: 664 | Input/Output: [(-42 -47 17 -33) -47]
Test Case: 665 | Input/Output: [(-76 -96 -91 -72) -96]
Test Case: 666 | Input/Output: [(28 20 34 74) 20]
Test Case: 667 | Input/Output: [(-77 8 -48 -89) -89]
Test Case: 668 | Input/Output: [(-48 -9 -39 7) -48]
Test Case: 669 | Input/Output: [(26 30 31 30) 26]
Test Case: 670 | Input/Output: [(70 -59 37 97) -59]
Test Case: 671 | Input/Output: [(50 -69 -54 11) -69]
Test Case: 672 | Input/Output: [(14 -53 -53 -91) -91]
Test Case: 673 | Input/Output: [(-38 1 -43 -65) -65]
Test Case: 674 | Input/Output: [(35 -13 61 -81) -81]
Test Case: 675 | Input/Output: [(36 81 -80 62) -80]
Test Case: 676 | Input/Output: [(-21 59 32 -33) -33]
Test Case: 677 | Input/Output: [(-29 -55 21 4) -55]
Test Case: 678 | Input/Output: [(96 -30 -93 99) -93]
Test Case: 679 | Input/Output: [(-75 38 -2 -58) -75]
Test Case: 680 | Input/Output: [(41 -63 54 -98) -98]
Test Case: 681 | Input/Output: [(-15 11 -90 -30) -90]
Test Case: 682 | Input/Output: [(28 29 38 -84) -84]
Test Case: 683 | Input/Output: [(97 39 -32 -57) -57]
Test Case: 684 | Input/Output: [(-48 -37 69 -48) -48]
Test Case: 685 | Input/Output: [(-34 51 23 8) -34]
Test Case: 686 | Input/Output: [(-48 -12 -90 76) -90]
Test Case: 687 | Input/Output: [(20 -27 -42 -14) -42]
Test Case: 688 | Input/Output: [(57 43 -11 -40) -40]
Test Case: 689 | Input/Output: [(94 -8 89 94) -8]
Test Case: 690 | Input/Output: [(-3 -49 -8 44) -49]
Test Case: 691 | Input/Output: [(60 -42 -91 -77) -91]
Test Case: 692 | Input/Output: [(-61 -78 54 69) -78]
Test Case: 693 | Input/Output: [(-34 -1 88 -11) -34]
Test Case: 694 | Input/Output: [(-35 79 96 50) -35]
Test Case: 695 | Input/Output: [(76 28 -12 32) -12]
Test Case: 696 | Input/Output: [(-75 -30 -90 88) -90]
Test Case: 697 | Input/Output: [(82 54 92 -70) -70]
Test Case: 698 | Input/Output: [(-13 67 -56 14) -56]
Test Case: 699 | Input/Output: [(-89 -40 -91 50) -91]
Test Case: 700 | Input/Output: [(41 -5 34 24) -5]
Test Case: 701 | Input/Output: [(27 -34 29 55) -34]
Test Case: 702 | Input/Output: [(18 35 72 75) 18]
Test Case: 703 | Input/Output: [(-33 -63 16 62) -63]
Test Case: 704 | Input/Output: [(75 94 48 -19) -19]
Test Case: 705 | Input/Output: [(-31 39 -69 46) -69]
Test Case: 706 | Input/Output: [(-18 -82 64 36) -82]
Test Case: 707 | Input/Output: [(37 92 2 44) 2]
Test Case: 708 | Input/Output: [(78 31 10 -7) -7]
Test Case: 709 | Input/Output: [(-89 53 -11 -51) -89]
Test Case: 710 | Input/Output: [(-76 78 -24 57) -76]
Test Case: 711 | Input/Output: [(-75 2 38 46) -75]
Test Case: 712 | Input/Output: [(-34 -23 -99 -89) -99]
Test Case: 713 | Input/Output: [(-31 -53 -57 4) -57]
Test Case: 714 | Input/Output: [(-93 25 95 -50) -93]
Test Case: 715 | Input/Output: [(-56 54 4 33) -56]
Test Case: 716 | Input/Output: [(15 -10 -55 -68) -68]
Test Case: 717 | Input/Output: [(-83 74 51 80) -83]
Test Case: 718 | Input/Output: [(46 -41 -67 9) -67]
Test Case: 719 | Input/Output: [(-51 66 -28 95) -51]
Test Case: 720 | Input/Output: [(27 -46 -26 84) -46]
Test Case: 721 | Input/Output: [(-82 -39 11 46) -82]
Test Case: 722 | Input/Output: [(-43 67 -36 -75) -75]
Test Case: 723 | Input/Output: [(93 -17 19 -5) -17]
Test Case: 724 | Input/Output: [(-2 91 -96 -10) -96]
Test Case: 725 | Input/Output: [(-8 -33 -61 -53) -61]
Test Case: 726 | Input/Output: [(-12 40 -56 86) -56]
Test Case: 727 | Input/Output: [(-14 80 -78 -20) -78]
Test Case: 728 | Input/Output: [(-60 -46 77 -52) -60]
Test Case: 729 | Input/Output: [(55 -23 92 -40) -40]
Test Case: 730 | Input/Output: [(-29 10 -55 66) -55]
Test Case: 731 | Input/Output: [(17 9 -98 -25) -98]
Test Case: 732 | Input/Output: [(45 88 -4 -42) -42]
Test Case: 733 | Input/Output: [(78 61 31 53) 31]
Test Case: 734 | Input/Output: [(50 11 1 84) 1]
Test Case: 735 | Input/Output: [(68 -26 16 -77) -77]
Test Case: 736 | Input/Output: [(-71 -42 63 52) -71]
Test Case: 737 | Input/Output: [(-4 40 79 24) -4]
Test Case: 738 | Input/Output: [(42 -16 46 12) -16]
Test Case: 739 | Input/Output: [(-33 83 -53 38) -53]
Test Case: 740 | Input/Output: [(85 21 -3 49) -3]
Test Case: 741 | Input/Output: [(58 59 -48 -35) -48]
Test Case: 742 | Input/Output: [(98 41 -59 -1) -59]
Test Case: 743 | Input/Output: [(-60 -100 39 73) -100]
Test Case: 744 | Input/Output: [(-14 -4 98 62) -14]
Test Case: 745 | Input/Output: [(-19 -36 -33 84) -36]
Test Case: 746 | Input/Output: [(100 56 -52 6) -52]
Test Case: 747 | Input/Output: [(-49 -56 -54 69) -56]
Test Case: 748 | Input/Output: [(56 43 -74 -49) -74]
Test Case: 749 | Input/Output: [(-45 54 -94 83) -94]
Test Case: 750 | Input/Output: [(83 -4 76 -95) -95]
Test Case: 751 | Input/Output: [(86 16 -56 24) -56]
Test Case: 752 | Input/Output: [(-93 36 -82 50) -93]
Test Case: 753 | Input/Output: [(-66 -86 -20 -10) -86]
Test Case: 754 | Input/Output: [(-46 2 -23 71) -46]
Test Case: 755 | Input/Output: [(-55 -22 -15 -55) -55]
Test Case: 756 | Input/Output: [(7 4 -99 -44) -99]
Test Case: 757 | Input/Output: [(36 11 -50 -59) -59]
Test Case: 758 | Input/Output: [(-71 -81 -94 -57) -94]
Test Case: 759 | Input/Output: [(-11 -47 2 -15) -47]
Test Case: 760 | Input/Output: [(-74 -73 -18 96) -74]
Test Case: 761 | Input/Output: [(-64 45 47 -21) -64]
Test Case: 762 | Input/Output: [(81 -80 34 82) -80]
Test Case: 763 | Input/Output: [(43 71 -31 -26) -31]
Test Case: 764 | Input/Output: [(-15 70 -99 -85) -99]
Test Case: 765 | Input/Output: [(86 75 33 48) 33]
Test Case: 766 | Input/Output: [(-55 4 25 85) -55]
Test Case: 767 | Input/Output: [(47 83 78 11) 11]
Test Case: 768 | Input/Output: [(1 -99 58 28) -99]
Test Case: 769 | Input/Output: [(-36 28 79 6) -36]
Test Case: 770 | Input/Output: [(-74 -63 -85 56) -85]
Test Case: 771 | Input/Output: [(88 7 -44 -94) -94]
Test Case: 772 | Input/Output: [(-94 32 46 -56) -94]
Test Case: 773 | Input/Output: [(15 -47 63 -62) -62]
Test Case: 774 | Input/Output: [(77 -4 -53 48) -53]
Test Case: 775 | Input/Output: [(-55 -8 21 -19) -55]
Test Case: 776 | Input/Output: [(86 94 58 33) 33]
Test Case: 777 | Input/Output: [(-55 99 4 -25) -55]
Test Case: 778 | Input/Output: [(-14 -1 -22 100) -22]
Test Case: 779 | Input/Output: [(-51 -54 87 37) -54]
Test Case: 780 | Input/Output: [(69 -1 -52 9) -52]
Test Case: 781 | Input/Output: [(45 -76 20 -55) -76]
Test Case: 782 | Input/Output: [(81 -73 79 -24) -73]
Test Case: 783 | Input/Output: [(-19 -61 -2 46) -61]
Test Case: 784 | Input/Output: [(-10 51 -99 -50) -99]
Test Case: 785 | Input/Output: [(-66 -78 78 58) -78]
Test Case: 786 | Input/Output: [(43 62 -17 -25) -25]
Test Case: 787 | Input/Output: [(54 -57 -52 -65) -65]
Test Case: 788 | Input/Output: [(-3 -26 97 -35) -35]
Test Case: 789 | Input/Output: [(1 14 -23 51) -23]
Test Case: 790 | Input/Output: [(-99 8 32 -2) -99]
Test Case: 791 | Input/Output: [(74 -39 5 -19) -39]
Test Case: 792 | Input/Output: [(12 -7 78 -50) -50]
Test Case: 793 | Input/Output: [(31 -9 45 -87) -87]
Test Case: 794 | Input/Output: [(-77 -90 -85 -13) -90]
Test Case: 795 | Input/Output: [(48 10 91 -91) -91]
Test Case: 796 | Input/Output: [(94 -99 -7 22) -99]
Test Case: 797 | Input/Output: [(11 32 -62 74) -62]
Test Case: 798 | Input/Output: [(-83 -87 55 -93) -93]
Test Case: 799 | Input/Output: [(43 81 -4 -19) -19]
Test Case: 800 | Input/Output: [(28 -33 -22 89) -33]
Test Case: 801 | Input/Output: [(-32 44 -89 66) -89]
Test Case: 802 | Input/Output: [(44 22 -78 74) -78]
Test Case: 803 | Input/Output: [(87 -86 63 6) -86]
Test Case: 804 | Input/Output: [(59 -76 -65 -93) -93]
Test Case: 805 | Input/Output: [(37 -78 -21 -89) -89]
Test Case: 806 | Input/Output: [(30 2 49 69) 2]
Test Case: 807 | Input/Output: [(-31 88 -58 33) -58]
Test Case: 808 | Input/Output: [(-65 -61 58 29) -65]
Test Case: 809 | Input/Output: [(60 99 -26 -72) -72]
Test Case: 810 | Input/Output: [(76 -94 -22 -47) -94]
Test Case: 811 | Input/Output: [(36 -88 29 -29) -88]
Test Case: 812 | Input/Output: [(31 60 -89 -17) -89]
Test Case: 813 | Input/Output: [(-30 -64 54 39) -64]
Test Case: 814 | Input/Output: [(68 -52 -72 38) -72]
Test Case: 815 | Input/Output: [(-5 -54 35 -34) -54]
Test Case: 816 | Input/Output: [(-47 -29 -61 93) -61]
Test Case: 817 | Input/Output: [(71 21 -34 44) -34]
Test Case: 818 | Input/Output: [(-76 -91 -94 7) -94]
Test Case: 819 | Input/Output: [(69 -92 -71 26) -92]
Test Case: 820 | Input/Output: [(33 49 68 -15) -15]
Test Case: 821 | Input/Output: [(9 -16 -56 13) -56]
Test Case: 822 | Input/Output: [(-87 -84 -78 -18) -87]
Test Case: 823 | Input/Output: [(7 -89 -79 91) -89]
Test Case: 824 | Input/Output: [(58 97 74 93) 58]
Test Case: 825 | Input/Output: [(0 70 50 -40) -40]
Test Case: 826 | Input/Output: [(-25 7 60 67) -25]
Test Case: 827 | Input/Output: [(-92 40 8 80) -92]
Test Case: 828 | Input/Output: [(21 -29 -60 -75) -75]
Test Case: 829 | Input/Output: [(10 -61 -24 -93) -93]
Test Case: 830 | Input/Output: [(100 42 -52 -82) -82]
Test Case: 831 | Input/Output: [(100 -26 16 -3) -26]
Test Case: 832 | Input/Output: [(24 17 32 -51) -51]
Test Case: 833 | Input/Output: [(-39 23 63 -12) -39]
Test Case: 834 | Input/Output: [(-68 -47 61 11) -68]
Test Case: 835 | Input/Output: [(11 98 43 -79) -79]
Test Case: 836 | Input/Output: [(-65 -59 88 -15) -65]
Test Case: 837 | Input/Output: [(17 16 -98 -51) -98]
Test Case: 838 | Input/Output: [(44 -34 -4 -30) -34]
Test Case: 839 | Input/Output: [(13 -4 55 77) -4]
Test Case: 840 | Input/Output: [(79 -27 -49 -65) -65]
Test Case: 841 | Input/Output: [(-59 -25 14 56) -59]
Test Case: 842 | Input/Output: [(-14 -2 63 96) -14]
Test Case: 843 | Input/Output: [(-17 19 70 -82) -82]
Test Case: 844 | Input/Output: [(-60 -1 19 -41) -60]
Test Case: 845 | Input/Output: [(98 -85 -4 15) -85]
Test Case: 846 | Input/Output: [(-52 46 -47 -50) -52]
Test Case: 847 | Input/Output: [(30 37 87 57) 30]
Test Case: 848 | Input/Output: [(56 36 -70 -7) -70]
Test Case: 849 | Input/Output: [(-74 73 -88 -54) -88]
Test Case: 850 | Input/Output: [(69 20 -9 77) -9]
Test Case: 851 | Input/Output: [(-17 88 -93 25) -93]
Test Case: 852 | Input/Output: [(36 46 49 58) 36]
Test Case: 853 | Input/Output: [(-24 -37 -85 93) -85]
Test Case: 854 | Input/Output: [(-49 -14 80 -50) -50]
Test Case: 855 | Input/Output: [(-75 -40 2 -55) -75]
Test Case: 856 | Input/Output: [(52 91 41 -51) -51]
Test Case: 857 | Input/Output: [(-83 -39 -36 -18) -83]
Test Case: 858 | Input/Output: [(-3 -75 -98 21) -98]
Test Case: 859 | Input/Output: [(-58 65 -28 83) -58]
Test Case: 860 | Input/Output: [(46 72 90 15) 15]
Test Case: 861 | Input/Output: [(19 -7 63 -56) -56]
Test Case: 862 | Input/Output: [(-46 79 87 -13) -46]
Test Case: 863 | Input/Output: [(47 -5 27 55) -5]
Test Case: 864 | Input/Output: [(4 -1 -9 -12) -12]
Test Case: 865 | Input/Output: [(-100 -55 91 -47) -100]
Test Case: 866 | Input/Output: [(-47 -44 82 63) -47]
Test Case: 867 | Input/Output: [(97 96 -92 33) -92]
Test Case: 868 | Input/Output: [(13 84 -4 -39) -39]
Test Case: 869 | Input/Output: [(-80 12 -86 -25) -86]
Test Case: 870 | Input/Output: [(-60 -81 35 18) -81]
Test Case: 871 | Input/Output: [(-4 -3 -21 -7) -21]
Test Case: 872 | Input/Output: [(-66 -80 16 -92) -92]
Test Case: 873 | Input/Output: [(75 57 -88 69) -88]
Test Case: 874 | Input/Output: [(-38 -46 -69 -22) -69]
Test Case: 875 | Input/Output: [(-70 14 -78 -56) -78]
Test Case: 876 | Input/Output: [(93 28 94 39) 28]
Test Case: 877 | Input/Output: [(7 -65 69 -84) -84]
Test Case: 878 | Input/Output: [(-87 58 -18 -68) -87]
Test Case: 879 | Input/Output: [(-53 95 -17 -19) -53]
Test Case: 880 | Input/Output: [(6 -27 93 18) -27]
Test Case: 881 | Input/Output: [(26 -42 -15 -98) -98]
Test Case: 882 | Input/Output: [(-86 -53 16 -18) -86]
Test Case: 883 | Input/Output: [(84 77 -20 21) -20]
Test Case: 884 | Input/Output: [(-94 -30 -53 38) -94]
Test Case: 885 | Input/Output: [(41 -97 82 88) -97]
Test Case: 886 | Input/Output: [(45 10 -30 76) -30]
Test Case: 887 | Input/Output: [(-33 77 -55 21) -55]
Test Case: 888 | Input/Output: [(-51 16 66 29) -51]
Test Case: 889 | Input/Output: [(76 17 62 -33) -33]
Test Case: 890 | Input/Output: [(-40 48 -78 -83) -83]
Test Case: 891 | Input/Output: [(73 58 -24 -16) -24]
Test Case: 892 | Input/Output: [(18 -2 -47 94) -47]
Test Case: 893 | Input/Output: [(-92 78 37 62) -92]
Test Case: 894 | Input/Output: [(-94 30 -19 39) -94]
Test Case: 895 | Input/Output: [(20 97 -72 -84) -84]
Test Case: 896 | Input/Output: [(-13 -70 32 -38) -70]
Test Case: 897 | Input/Output: [(-18 20 -69 32) -69]
Test Case: 898 | Input/Output: [(3 82 94 -59) -59]
Test Case: 899 | Input/Output: [(-64 -40 -6 75) -64]
Test Case: 900 | Input/Output: [(6 -48 -100 -17) -100]
Test Case: 901 | Input/Output: [(73 -98 95 60) -98]
Test Case: 902 | Input/Output: [(-75 95 -73 47) -75]
Test Case: 903 | Input/Output: [(-45 -89 -44 -91) -91]
Test Case: 904 | Input/Output: [(92 -87 46 -23) -87]
Test Case: 905 | Input/Output: [(69 44 41 90) 41]
Test Case: 906 | Input/Output: [(65 -3 72 -38) -38]
Test Case: 907 | Input/Output: [(36 65 50 -43) -43]
Test Case: 908 | Input/Output: [(41 92 -68 -20) -68]
Test Case: 909 | Input/Output: [(80 -78 47 -59) -78]
Test Case: 910 | Input/Output: [(15 -11 52 25) -11]
Test Case: 911 | Input/Output: [(-82 94 -75 -50) -82]
Test Case: 912 | Input/Output: [(83 -61 -73 54) -73]
Test Case: 913 | Input/Output: [(75 -15 70 -100) -100]
Test Case: 914 | Input/Output: [(-96 -36 -1 87) -96]
Test Case: 915 | Input/Output: [(93 -37 9 -20) -37]
Test Case: 916 | Input/Output: [(36 58 34 48) 34]
Test Case: 917 | Input/Output: [(86 -63 -47 12) -63]
Test Case: 918 | Input/Output: [(-83 73 91 85) -83]
Test Case: 919 | Input/Output: [(-37 -99 38 -13) -99]
Test Case: 920 | Input/Output: [(-90 -90 77 90) -90]
Test Case: 921 | Input/Output: [(51 -8 -75 -53) -75]
Test Case: 922 | Input/Output: [(60 58 -88 -6) -88]
Test Case: 923 | Input/Output: [(82 98 29 -35) -35]
Test Case: 924 | Input/Output: [(-75 9 12 -69) -75]
Test Case: 925 | Input/Output: [(-24 66 10 -91) -91]
Test Case: 926 | Input/Output: [(-51 -91 -44 74) -91]
Test Case: 927 | Input/Output: [(-46 47 -72 5) -72]
Test Case: 928 | Input/Output: [(-60 71 -65 25) -65]
Test Case: 929 | Input/Output: [(-70 -60 -71 61) -71]
Test Case: 930 | Input/Output: [(51 -77 -3 35) -77]
Test Case: 931 | Input/Output: [(60 6 -69 -89) -89]
Test Case: 932 | Input/Output: [(-89 30 79 37) -89]
Test Case: 933 | Input/Output: [(36 85 -66 -22) -66]
Test Case: 934 | Input/Output: [(-50 -77 68 -18) -77]
Test Case: 935 | Input/Output: [(77 41 -9 69) -9]
Test Case: 936 | Input/Output: [(-88 22 -13 55) -88]
Test Case: 937 | Input/Output: [(79 54 -90 72) -90]
Test Case: 938 | Input/Output: [(-43 87 -71 52) -71]
Test Case: 939 | Input/Output: [(-70 64 61 83) -70]
Test Case: 940 | Input/Output: [(51 -33 86 83) -33]
Test Case: 941 | Input/Output: [(50 -17 67 -22) -22]
Test Case: 942 | Input/Output: [(-61 -61 60 -16) -61]
Test Case: 943 | Input/Output: [(-28 46 62 -94) -94]
Test Case: 944 | Input/Output: [(85 -97 50 61) -97]
Test Case: 945 | Input/Output: [(-5 -20 96 57) -20]
Test Case: 946 | Input/Output: [(-79 69 37 62) -79]
Test Case: 947 | Input/Output: [(27 -96 1 -49) -96]
Test Case: 948 | Input/Output: [(-24 64 17 -68) -68]
Test Case: 949 | Input/Output: [(-77 -94 60 -23) -94]
Test Case: 950 | Input/Output: [(18 -13 -44 -90) -90]
Test Case: 951 | Input/Output: [(-39 44 69 -76) -76]
Test Case: 952 | Input/Output: [(-16 -38 95 47) -38]
Test Case: 953 | Input/Output: [(-23 32 70 31) -23]
Test Case: 954 | Input/Output: [(-73 -6 -13 60) -73]
Test Case: 955 | Input/Output: [(-33 -78 -14 71) -78]
Test Case: 956 | Input/Output: [(34 -72 -92 -94) -94]
Test Case: 957 | Input/Output: [(66 19 1 -2) -2]
Test Case: 958 | Input/Output: [(88 -67 -49 -30) -67]
Test Case: 959 | Input/Output: [(-10 7 0 5) -10]
Test Case: 960 | Input/Output: [(-55 28 -95 8) -95]
Test Case: 961 | Input/Output: [(26 -9 63 56) -9]
Test Case: 962 | Input/Output: [(97 -90 -50 -96) -96]
Test Case: 963 | Input/Output: [(-46 37 88 -34) -46]
Test Case: 964 | Input/Output: [(-53 58 -38 85) -53]
Test Case: 965 | Input/Output: [(95 -53 -6 67) -53]
Test Case: 966 | Input/Output: [(-74 -56 -63 -69) -74]
Test Case: 967 | Input/Output: [(-72 -21 7 42) -72]
Test Case: 968 | Input/Output: [(100 91 -60 62) -60]
Test Case: 969 | Input/Output: [(-50 -2 -22 35) -50]
Test Case: 970 | Input/Output: [(-24 52 -24 0) -24]
Test Case: 971 | Input/Output: [(57 86 -27 -38) -38]
Test Case: 972 | Input/Output: [(-10 99 29 -46) -46]
Test Case: 973 | Input/Output: [(-71 56 -95 54) -95]
Test Case: 974 | Input/Output: [(1 -43 -57 -80) -80]
Test Case: 975 | Input/Output: [(38 -78 -58 -17) -78]
Test Case: 976 | Input/Output: [(87 65 -72 -55) -72]
Test Case: 977 | Input/Output: [(41 79 23 55) 23]
Test Case: 978 | Input/Output: [(-54 65 -57 35) -57]
Test Case: 979 | Input/Output: [(-87 28 1 -15) -87]
Test Case: 980 | Input/Output: [(6 67 56 48) 6]
Test Case: 981 | Input/Output: [(-67 8 -43 -81) -81]
Test Case: 982 | Input/Output: [(18 27 -9 -29) -29]
Test Case: 983 | Input/Output: [(-47 92 -92 -84) -92]
Test Case: 984 | Input/Output: [(-4 88 -66 29) -66]
Test Case: 985 | Input/Output: [(87 0 64 69) 0]
Test Case: 986 | Input/Output: [(41 18 60 -34) -34]
Test Case: 987 | Input/Output: [(98 -74 -20 25) -74]
Test Case: 988 | Input/Output: [(-56 68 -13 72) -56]
Test Case: 989 | Input/Output: [(90 92 64 -53) -53]
Test Case: 990 | Input/Output: [(27 -17 28 38) -17]
Test Case: 991 | Input/Output: [(-79 13 68 -29) -79]
Test Case: 992 | Input/Output: [(-2 38 -82 45) -82]
Test Case: 993 | Input/Output: [(-10 51 40 3) -10]
Test Case: 994 | Input/Output: [(-15 0 44 20) -15]
Test Case: 995 | Input/Output: [(-57 27 -27 -19) -57]
Test Case: 996 | Input/Output: [(16 -47 -27 -32) -47]
Test Case: 997 | Input/Output: [(90 77 58 -87) -87]
Test Case: 998 | Input/Output: [(38 98 -60 -21) -60]
Test Case: 999 | Input/Output: [(-79 7 86 -6) -79]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x30b9728f clojush.problems.software.smallest$fn__7461@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 67 -19 -114 -96 73 17 -91 -29 -27 -73 75 -117 85 98 -79 111
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[46 46 46 -97] -97] [[-29 -29 94 -29] -29] [[99 41 99 99] 41] [[-64 3 -64 -64] -64] [[99 69 99 99] 69] [[-81 -93 -93 -93] -93] [[78 -47 78 78] -47] [[-2 -35 -35 -35] -35] [[-91 -91 68 -91] -91] [[-72 98 -72 -72] -72] [(57 57 57 57) 57] [(7 7 7 7) 7] [(-24 -24 -24 -24) -24] [(-71 -71 -71 -71) -71] [(-81 -81 -81 -81) -81] [(48 51 60 35) 35] [(74 17 95 79) 17] [(51 29 3 54) 3] [(17 76 3 100) 3] [(47 43 88 24) 24] [(54 9 93 11) 9] [(82 50 63 69) 50] [(30 93 39 22) 22] [(41 11 21 22) 11] [(82 14 37 24) 14] [(10 82 59 84) 10] [(60 3 2 2) 2] [(50 6 42 27) 6] [(23 18 59 99) 18] [(80 76 52 24) 24] [(48 23 7 93) 7] [(53 92 74 11) 11] [(37 54 27 100) 27] [(91 44 73 32) 32] [(45 56 49 15) 15] [(6 11 -43 -62) -62] [(-56 71 -80 -71) -80] [(47 -41 -77 88) -77] [(-54 98 -41 -11) -54] [(10 -58 -28 81) -58] [(-68 -65 -7 -49) -68] [(-86 19 78 -56) -86] [(-3 -50 98 64) -50] [(-12 28 16 56) -12] [(50 -26 -50 -89) -89] [(39 -62 75 -24) -62] [(37 -90 -62 75) -90] [(-81 6 55 19) -81] [(-12 -64 -67 57) -67] [(4 -18 50 -13) -18] [(2 94 -71 82) -71] [(53 -65 96 22) -65] [(-41 -83 -7 -28) -83] [(-14 89 -37 -88) -88] [(-30 -7 35 -25) -30] [(42 73 47 99) 42] [(40 -58 -69 -49) -69] [(-98 85 54 -64) -98] [(-96 -94 -56 75) -96] [(-21 7 4 -7) -21] [(-34 74 -48 -44) -48] [(-72 40 -56 -26) -72] [(-88 -16 49 -78) -88] [(-5 -15 -84 1) -84] [(5 -47 59 -19) -47] [(82 -91 -9 2) -91] [(45 93 -29 82) -29] [(6 95 -8 -19) -19] [(-100 -49 -8 32) -100] [(-29 -15 -94 -77) -94] [(97 -3 -74 -38) -74] [(-38 -6 -84 -77) -84] [(66 -18 -27 87) -27] [(-87 -68 -32 17) -87] [(70 -95 3 -60) -95] [(41 -52 53 -60) -60] [(22 45 39 27) 22] [(-71 19 67 -55) -71] [(40 -84 17 -76) -84] [(20 -94 99 -62) -94] [(98 88 70 44) 44] [(-10 -75 -62 -70) -75] [(48 89 30 -22) -22] [(96 -55 72 16) -55] [(-91 3 10 -30) -91] [(18 -26 -54 -94) -94] [(97 -14 -82 -2) -82] [(-48 44 34 -76) -76] [(56 -54 -49 -80) -80] [(65 -11 -5 82) -11] [(38 -88 92 95) -88] [(47 37 55 11) 11] [(83 -43 -28 -29) -43] [(-35 -3 -42 95) -42] [(-86 46 9 -91) -91])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -81                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 48                 
Correct output: 17                  | Program output: 74                 
Correct output: 3                   | Program output: 51                 
Correct output: 3                   | Program output: 17                 
Correct output: 24                  | Program output: 47                 
Correct output: 9                   | Program output: 54                 
Correct output: 50                  | Program output: 82                 
Correct output: 22                  | Program output: 30                 
Correct output: 11                  | Program output: 41                 
Correct output: 14                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 60                 
Correct output: 6                   | Program output: 50                 
Correct output: 18                  | Program output: 23                 
Correct output: 24                  | Program output: 80                 
Correct output: 7                   | Program output: 48                 
Correct output: 11                  | Program output: 53                 
Correct output: 27                  | Program output: 37                 
Correct output: 32                  | Program output: 91                 
Correct output: 15                  | Program output: 45                 
Correct output: -62                 | Program output: 6                  
Correct output: -80                 | Program output: -56                
Correct output: -77                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -3                 
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 50                 
Correct output: -62                 | Program output: 39                 
Correct output: -90                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -12                
Correct output: -18                 | Program output: 4                  
Correct output: -71                 | Program output: 2                  
Correct output: -65                 | Program output: 53                 
Correct output: -83                 | Program output: -41                
Correct output: -88                 | Program output: -14                
Correct output: -30                 | Program output: -30                
Correct output: 42                  | Program output: 42                 
Correct output: -69                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -5                 
Correct output: -47                 | Program output: 5                  
Correct output: -91                 | Program output: 82                 
Correct output: -29                 | Program output: 45                 
Correct output: -19                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -29                
Correct output: -74                 | Program output: 97                 
Correct output: -84                 | Program output: -38                
Correct output: -27                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: 70                 
Correct output: -60                 | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: 40                 
Correct output: -94                 | Program output: 20                 
Correct output: 44                  | Program output: 98                 
Correct output: -75                 | Program output: -10                
Correct output: -22                 | Program output: 48                 
Correct output: -55                 | Program output: 96                 
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: 18                 
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: -48                
Correct output: -80                 | Program output: 56                 
Correct output: -11                 | Program output: 65                 
Correct output: -88                 | Program output: 38                 
Correct output: 11                  | Program output: 47                 
Correct output: -43                 | Program output: 83                 
Correct output: -42                 | Program output: -35                
Correct output: -91                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 4 2 2 7 7 10 2 2 7)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (7 4 2 2 7 7 10 2 2 7)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tag_boolean_562} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction -57} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yankdup})
Best program: (exec_pop () integer_eq boolean_invert_second_then_and integer_dec boolean_eq integer_add boolean_not integer_mult in1 boolean_yankdup tag_boolean_562 exec_k_when_autoconstructing (exec_noop print_integer -57 boolean_and) (integer_dec integer_gte integer_eq) exec_y_when_autoconstructing (integer_lt exec_s_when_autoconstructing (exec_flush exec_yankdup) () ()))
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.95
Median total errors in population: 10
Error averages by case: (0.993 0.996 0.998 0.998 0.993 0.993 0.99 0.998 0.998 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.323
Average program size in population (points): 69.09
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 470290
--- Timings ---
Current time: 1559583326443 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 32.4%
Fitness Testing:      1.6 seconds, 63.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 762 447 297 41 18 17 22 297 335)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (295 762 447 297 41 18 17 22 297 335)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 3, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_274} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_noop} {:close 2, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (integer_mod in2 integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_eq exec_if (boolean_pop boolean_dup_times integer_empty boolean_or in2) (boolean_frominteger integer_empty exec_while (integer_lte integer_rot boolean_or))) (integer_lte boolean_pop integer_lte) (in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (tagged_274) (exec_y () boolean_dup) (exec_if (exec_s () (exec_dup (boolean_or integer_gt boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean exec_empty integer_mod boolean_stackdepth) integer_yank) (exec_y_when_autoconstructing () in3) -13 integer_add exec_if (exec_noop exec_noop print_newline) () integer_empty boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))))) () ()) ()))) ())
Errors: [0 0 1 0 1 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 96
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 7.469
Median total errors in population: 8
Error averages by case: (0.705 0.238 0.553 0.703 0.959 0.982 0.983 0.978 0.703 0.665)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.698
Average program size in population (points): 71.251
Average percent parens in population: 0.289
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.486
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 963323
--- Timings ---
Current time: 1559583329433 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.5 seconds, 47.2%
Fitness Testing:      2.3 seconds, 44.6%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction -40} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_868} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction 35} {:close 0, :instruction exec_k} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (integer_mod in2 integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_eq exec_if (boolean_invert_second_then_and integer_max print_integer) () integer_dec exec_yank) (exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline) (exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_swap (integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (integer_fromboolean) integer_pop) -40 exec_do*while (integer_inc)) boolean_and exec_while (tag_boolean_868 exec_empty) integer_dup integer_eq) integer_dup_items print_boolean exec_pop (exec_stackdepth exec_yank exec_noop integer_lte boolean_and print_newline) boolean_eq) boolean_or integer_rot) (exec_noop integer_mult integer_yankdup integer_max exec_y_when_autoconstructing (integer_max 35 exec_k (integer_fromboolean) (exec_k_when_autoconstructing () ()))))
Lexicase best errors: [1 1 0 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 128
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction -40} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_868} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction print_newline} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction 35} {:close 0, :instruction exec_k} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (integer_mod in2 integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_eq exec_if (boolean_invert_second_then_and integer_max print_integer) () integer_dec exec_yank) (exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline) (exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_swap (integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (integer_fromboolean) integer_pop) -40 exec_do*while (integer_inc)) boolean_and exec_while (tag_boolean_868 exec_empty) integer_dup integer_eq) integer_dup_items print_boolean exec_pop (exec_stackdepth exec_yank exec_noop integer_lte boolean_and print_newline) boolean_eq) boolean_or integer_rot) (exec_noop integer_mult integer_yankdup integer_max exec_y_when_autoconstructing (integer_max 35 exec_k (integer_fromboolean) (exec_k_when_autoconstructing () ()))))
Zero cases best errors: [1 1 0 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 128
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (160 159 266 86 266 300 298 266 301 264)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (160 159 266 86 266 300 298 266 301 264)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 3, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_274} {:close 1, :instruction exec_y} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_eq})
Best program: (integer_mod in2 integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_eq exec_if (boolean_pop boolean_dup_times integer_empty) (boolean_or) in2) (boolean_frominteger integer_empty exec_while (integer_lte integer_rot boolean_or)) () integer_lte boolean_pop integer_lte) (in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (tagged_274) (exec_y () boolean_dup) (exec_if (exec_s () (exec_dup (boolean_or integer_gt boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean exec_empty integer_mod boolean_stackdepth) integer_yank) (exec_y_when_autoconstructing () in3) -13 integer_add exec_if (exec_noop exec_eq print_integer) () integer_empty boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) integer_eq))))) () ()) ())))
Errors: [1 1 0 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 61
Size: 93
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 7.634
Median total errors in population: 7
Error averages by case: (0.84 0.841 0.734 0.914 0.734 0.7 0.702 0.734 0.699 0.736)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.09
Average program size in population (points): 78.84
Average percent parens in population: 0.284
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.8925
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1671721
--- Timings ---
Current time: 1559583332809 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 52.4%
Fitness Testing:      3.0 seconds, 35.0%
Report:               1.0 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_868} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_flush integer_shove print_newline) (exec_do*count (exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (integer_fromboolean) integer_pop) integer_lt exec_do*while (integer_inc) boolean_and exec_while (tag_boolean_868 exec_empty) integer_dup integer_eq integer_dup_items print_boolean)
Lexicase best errors: [1 0 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 94
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction tag_boolean_868} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_boolean})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_flush integer_shove print_newline) (exec_do*count (exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (integer_fromboolean) integer_pop) integer_lt exec_do*while (integer_inc) boolean_and exec_while (tag_boolean_868 exec_empty) integer_dup integer_eq integer_dup_items print_boolean)
Zero cases best errors: [1 0 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 94
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 564 205 204 538 271 255 271 205 718)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (251 564 205 204 538 271 255 271 205 718)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) boolean_empty integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_mod boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items)))
Errors: [1 0 0 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 72
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.518
Median total errors in population: 7
Error averages by case: (0.749 0.436 0.795 0.796 0.462 0.729 0.745 0.729 0.795 0.282)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.577
Average program size in population (points): 77.626
Average percent parens in population: 0.280
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.38075
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2310012
--- Timings ---
Current time: 1559583335935 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.9 seconds, 56.4%
Fitness Testing:      3.6 seconds, 29.9%
Report:               1.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 446 85 888 86 86 343 447 447 85)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (534 446 85 888 86 86 343 447 447 85)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_add tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.553
Median total errors in population: 5
Error averages by case: (0.466 0.554 0.915 0.112 0.914 0.914 0.657 0.553 0.553 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.452
Average program size in population (points): 83.194
Average percent parens in population: 0.274
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.87125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 25
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2918300
--- Timings ---
Current time: 1559583338819 milliseconds
Total Time:          14.9 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.9 seconds, 59.5%
Fitness Testing:      4.2 seconds, 27.9%
Report:               1.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (exec_if (exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop) (boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add boolean_stackdepth) integer_yank) exec_y_when_autoconstructing () in3) -13 integer_add exec_if (exec_noop exec_eq print_integer) () integer_empty boolean_eq print_integer exec_when (integer_empty integer_inc exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))
Lexicase best errors: [1 1 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 76
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction exec_if} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (exec_if (exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop) (boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add boolean_stackdepth) integer_yank) exec_y_when_autoconstructing () in3) -13 integer_add exec_if (exec_noop exec_eq print_integer) () integer_empty boolean_eq print_integer exec_when (integer_empty integer_inc exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))
Zero cases best errors: [1 1 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 76
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 345 363 345 2 87 361 363 2 363)
Population mean number of elite cases: 2.23
Count of perfect (error zero) individuals by case: (2 345 363 345 2 87 361 363 2 363)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_xor integer_stackdepth boolean_dup_times integer_dec boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items print_integer)) (integer_empty boolean_eq) print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))
Errors: [1 1 0 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 65
Size: 87
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.767
Median total errors in population: 8
Error averages by case: (0.998 0.655 0.637 0.655 0.998 0.913 0.639 0.637 0.998 0.637)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.805
Average program size in population (points): 73.995
Average percent parens in population: 0.268
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.345
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3351374
--- Timings ---
Current time: 1559583341677 milliseconds
Total Time:          17.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.1 seconds, 62.1%
Fitness Testing:      4.6 seconds, 25.7%
Report:               2.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not boolean_yank print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) integer_min integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (integer_fromboolean) integer_pop) (integer_lt exec_do*while (integer_inc)))
Lexicase best errors: [1 0 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 80
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 2, :instruction integer_inc})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not boolean_yank print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) integer_min integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (integer_fromboolean) integer_pop) (integer_lt exec_do*while (integer_inc)))
Zero cases best errors: [1 0 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 80
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 418 761 420 418 237 86 86 114 104)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (85 418 761 420 418 237 86 86 114 104)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) (exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) integer_mod) boolean_shove in2 integer_eq boolean_flush boolean_invert_second_then_and boolean_dup_times integer_mod tagged_617 integer_gte integer_flush boolean_stackdepth boolean_shove in2 integer_eq boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop ())
Errors: [1 0 0 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.271
Median total errors in population: 7
Error averages by case: (0.915 0.582 0.239 0.58 0.582 0.763 0.914 0.914 0.886 0.896)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.035
Average program size in population (points): 82.074
Average percent parens in population: 0.288
Minimum age in population: 6.25
Maximum age in population: 10.53125
Average age in population: 8.96190625
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.798
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3900799
--- Timings ---
Current time: 1559583344902 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.5 seconds, 64.3%
Fitness Testing:      5.1 seconds, 24.3%
Report:               2.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 651
Test mean error for best: 0.65100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: 94                 
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: 68                 
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 60                 
Correct output: 17                  | Program output: 95                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 24                  | Program output: 88                 
Correct output: 9                   | Program output: 93                 
Correct output: 50                  | Program output: 63                 
Correct output: 22                  | Program output: 39                 
Correct output: 11                  | Program output: 21                 
Correct output: 14                  | Program output: 37                 
Correct output: 10                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 42                 
Correct output: 18                  | Program output: 59                 
Correct output: 24                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 73                 
Correct output: 15                  | Program output: 49                 
Correct output: -62                 | Program output: -43                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -41                
Correct output: -58                 | Program output: -28                
Correct output: -68                 | Program output: -7                 
Correct output: -86                 | Program output: 78                 
Correct output: -50                 | Program output: 98                 
Correct output: -12                 | Program output: 16                 
Correct output: -89                 | Program output: -50                
Correct output: -62                 | Program output: 75                 
Correct output: -90                 | Program output: -62                
Correct output: -81                 | Program output: 55                 
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: 50                 
Correct output: -71                 | Program output: -71                
Correct output: -65                 | Program output: 96                 
Correct output: -83                 | Program output: -7                 
Correct output: -88                 | Program output: -37                
Correct output: -30                 | Program output: 35                 
Correct output: 42                  | Program output: 47                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: 54                 
Correct output: -96                 | Program output: -56                
Correct output: -21                 | Program output: 4                  
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -56                
Correct output: -88                 | Program output: 49                 
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: 59                 
Correct output: -91                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -8                 
Correct output: -100                | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -87                 | Program output: -32                
Correct output: -95                 | Program output: 3                  
Correct output: -60                 | Program output: 53                 
Correct output: 22                  | Program output: 39                 
Correct output: -71                 | Program output: 67                 
Correct output: -84                 | Program output: 17                 
Correct output: -94                 | Program output: 99                 
Correct output: 44                  | Program output: 70                 
Correct output: -75                 | Program output: -62                
Correct output: -22                 | Program output: 30                 
Correct output: -55                 | Program output: 72                 
Correct output: -91                 | Program output: 10                 
Correct output: -94                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: 34                 
Correct output: -80                 | Program output: -49                
Correct output: -11                 | Program output: -5                 
Correct output: -88                 | Program output: 92                 
Correct output: 11                  | Program output: 55                 
Correct output: -43                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: 9                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction tagged_317} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_341} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 30} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (exec_empty tagged_317 integer_div integer_dec boolean_or integer_rot exec_do*while (exec_dup_times (boolean_dup exec_do*while (exec_dup_times (boolean_dup in1 boolean_stackdepth in3 print_integer integer_lte boolean_dup_items exec_s (exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_stackdepth exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq boolean_frominteger integer_inc exec_swap (exec_dup_items tag_exec_341 (exec_empty in3 integer_lt boolean_stackdepth boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () integer_lte exec_yank print_integer) exec_eq print_integer) (in3) -13 integer_add integer_lt exec_noop exec_eq print_integer)) (integer_empty boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (30 integer_shove) exec_s_when_autoconstructing () () ()))) () ()) () ())))))
Lexicase best errors: [1 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction tagged_317} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_341} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 1, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction 30} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (exec_empty tagged_317 integer_div integer_dec boolean_or integer_rot exec_do*while (exec_dup_times (boolean_dup exec_do*while (exec_dup_times (boolean_dup in1 boolean_stackdepth in3 print_integer integer_lte boolean_dup_items exec_s (exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_stackdepth exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq boolean_frominteger integer_inc exec_swap (exec_dup_items tag_exec_341 (exec_empty in3 integer_lt boolean_stackdepth boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () integer_lte exec_yank print_integer) exec_eq print_integer) (in3) -13 integer_add integer_lt exec_noop exec_eq print_integer)) (integer_empty boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (30 integer_shove) exec_s_when_autoconstructing () () ()))) () ()) () ())))))
Zero cases best errors: [1 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (328 840 171 172 251 252 659 248 171 91)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (328 840 171 172 251 252 659 248 171 91)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_empty} {:close 0, :instruction tagged_317} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (exec_empty tagged_317 integer_div integer_dec boolean_or integer_empty exec_do*while (exec_dup_times (boolean_dup in1 boolean_stackdepth in3 print_integer integer_lte boolean_dup_items exec_s (exec_s_when_autoconstructing (in4 in3 boolean_stackdepth exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq integer_shove) integer_gt boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean exec_empty integer_mod boolean_stackdepth) (integer_yank) (exec_y_when_autoconstructing () in3) -13 integer_add exec_if (exec_noop exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))) ())))
Errors: [1 0 1 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 59
Size: 80
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.817
Median total errors in population: 7
Error averages by case: (0.672 0.16 0.829 0.828 0.749 0.748 0.341 0.752 0.829 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.942
Average program size in population (points): 77.012
Average percent parens in population: 0.282
Minimum age in population: 7.25
Maximum age in population: 12.21875
Average age in population: 10.3001875
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4499691
--- Timings ---
Current time: 1559583348347 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.7 seconds, 65.3%
Fitness Testing:      5.6 seconds, 23.3%
Report:               2.6 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_stackdepth in3 print_integer integer_lte exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) exec_flush integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_div integer_stackdepth boolean_yank integer_gte) (print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub print_integer exec_when (integer_empty exec_dup_times ()))))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_stackdepth in3 print_integer integer_lte exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) exec_flush integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_div integer_stackdepth boolean_yank integer_gte) (print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer boolean_or integer_stackdepth boolean_dup_times integer_dec) (boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub print_integer exec_when (integer_empty exec_dup_times ()))))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 120 120 201 202 121 95 120 95 678)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (202 120 120 201 202 121 95 120 95 678)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_eq})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () integer_dup_times boolean_not exec_k (print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 exec_dup_times (integer_add) exec_noop in2 integer_dup boolean_flush boolean_dup_items exec_swap () (boolean_dup_times integer_shove) exec_when (exec_eq exec_if (boolean_shove exec_noop exec_stackdepth) (boolean_yank) boolean_and integer_lt integer_empty boolean_eq) exec_swap (boolean_dup_items boolean_dup_items exec_yankdup exec_do*range (exec_yank exec_k_when_autoconstructing (integer_eq) ())) ()))
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 72
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 8.046
Median total errors in population: 9
Error averages by case: (0.798 0.88 0.88 0.799 0.798 0.879 0.905 0.88 0.905 0.322)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.651
Average program size in population (points): 76.546
Average percent parens in population: 0.292
Minimum age in population: 9.0
Maximum age in population: 13.9296875
Average age in population: 11.7352265625
Median age in population: 11.796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5254842
--- Timings ---
Current time: 1559583351209 milliseconds
Total Time:          27.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.7 seconds, 64.6%
Fitness Testing:      6.3 seconds, 22.9%
Report:               3.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_341} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times print_integer integer_shove exec_dup_items integer_min integer_min) exec_dup_times (integer_lte in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) (exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq boolean_frominteger exec_k_when_autoconstructing (integer_pop exec_dup_items tag_exec_341 (exec_empty in3 integer_lt boolean_stackdepth boolean_yank boolean_swap integer_yankdup) exec_do*while ()) ())) ()) ())))) ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_341} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times print_integer integer_shove exec_dup_items integer_min integer_min) exec_dup_times (integer_lte in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) (exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq boolean_frominteger exec_k_when_autoconstructing (integer_pop exec_dup_items tag_exec_341 (exec_empty in3 integer_lt boolean_stackdepth boolean_yank boolean_swap integer_yankdup) exec_do*while ()) ())) ()) ())))) ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 257 141 151 422 420 419 1 1 419)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (399 257 141 151 422 420 419 1 1 419)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction tag_exec_341} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove})
Best program: (boolean_invert_first_then_and exec_s (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () integer_lte boolean_pop integer_lte in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (boolean_and in1 exec_dup_times (integer_add) exec_noop boolean_and integer_dup exec_flush) (exec_do*count (exec_dup_items) boolean_xor exec_pop (boolean_dup exec_y (integer_stackdepth integer_pop boolean_dup_times boolean_shove) exec_eq boolean_frominteger exec_k_when_autoconstructing (integer_pop exec_dup_items tag_exec_341 (exec_empty in3 integer_lt boolean_stackdepth boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq print_integer) exec_do*times (integer_stackdepth boolean_shove exec_swap (boolean_shove) ()))) ())) ()) ())) () ())
Errors: [1 1 1 1 0 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 67
Size: 96
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.37
Median total errors in population: 7
Error averages by case: (0.601 0.743 0.859 0.849 0.578 0.58 0.581 0.999 0.999 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.984
Average program size in population (points): 72.91
Average percent parens in population: 0.279
Minimum age in population: 10.96875
Maximum age in population: 15.65625
Average age in population: 13.2526640625
Median age in population: 13.2890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 17
Genome diversity (% unique genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5684591
--- Timings ---
Current time: 1559583354138 milliseconds
Total Time:          30.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.0 seconds, 65.9%
Fitness Testing:      6.7 seconds, 22.0%
Report:               3.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Lexicase best errors: [0 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times boolean_flush exec_flush boolean_dup_times integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Zero cases best errors: [0 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (103 358 103 232 102 839 358 232 358 108)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (103 358 103 232 102 839 358 232 358 108)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_622} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_not exec_s (integer_fromboolean) (exec_if (boolean_shove) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () boolean_xor print_integer integer_shove integer_flush integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_622 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times integer_lt integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Errors: [0 1 0 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 7
Error averages by case: (0.897 0.642 0.897 0.768 0.898 0.161 0.642 0.768 0.642 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.989
Average program size in population (points): 79.124
Average percent parens in population: 0.298
Minimum age in population: 12.23828125
Maximum age in population: 16.736328125
Average age in population: 14.415888671875
Median age in population: 14.458984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6222428
--- Timings ---
Current time: 1559583356889 milliseconds
Total Time:          33.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.9 seconds, 66.4%
Fitness Testing:      7.2 seconds, 21.8%
Report:               3.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_730} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_gte boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean tagged_730 integer_mod boolean_stackdepth integer_yank exec_y_when_autoconstructing () in3 -13 integer_add exec_if (exec_noop exec_eq print_integer) () exec_if (exec_noop exec_eq print_integer) () in1 boolean_eq print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 83
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_730} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction in3} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_gte boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean tagged_730 integer_mod boolean_stackdepth integer_yank exec_y_when_autoconstructing () in3 -13 integer_add exec_if (exec_noop exec_eq print_integer) () exec_if (exec_noop exec_eq print_integer) () in1 boolean_eq print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 83
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (311 311 170 311 311 333 333 333 1 166)
Population mean number of elite cases: 2.58
Count of perfect (error zero) individuals by case: (311 311 170 311 311 333 333 333 1 166)
Population mean number of perfect (error zero) cases: 2.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction 6} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap})
Best program: (boolean_not exec_s (print_boolean) (exec_if (integer_rot) (exec_do*range (6 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty print_integer integer_shove exec_dup_items integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_shove) boolean_flush exec_flush boolean_dup_times integer_max integer_min boolean_shove integer_sub integer_shove integer_min boolean_swap)
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 7.42
Median total errors in population: 7
Error averages by case: (0.689 0.689 0.83 0.689 0.689 0.667 0.667 0.667 0.999 0.834)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.964
Average program size in population (points): 71.377
Average percent parens in population: 0.278
Minimum age in population: 13.23828125
Maximum age in population: 18.275390625
Average age in population: 16.0377763671875
Median age in population: 16.14111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6691403
--- Timings ---
Current time: 1559583359902 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.2 seconds, 67.2%
Fitness Testing:      7.6 seconds, 21.2%
Report:               4.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 54                 
Correct output: 3                   | Program output: 100                
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 69                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 22                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 84                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 99                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 100                
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: 88                 
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: 81                 
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 56                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: 75                 
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: 57                 
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 99                 
Correct output: -69                 | Program output: -49                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: 75                 
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: 1                  
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: 2                  
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: 32                 
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: 87                 
Correct output: -87                 | Program output: 17                 
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: 82                 
Correct output: -88                 | Program output: 95                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: 95                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () exec_dup_items integer_min in1 integer_min integer_add) exec_noop boolean_and integer_dup exec_flush) (exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in2 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer exec_do*times (exec_rot (print_newline integer_lt exec_do*range (integer_yankdup) integer_swap integer_max integer_rot boolean_xor integer_dup_times integer_sub) (exec_shove () exec_swap (boolean_shove) ()) ())) ())
Lexicase best errors: [0 0 1 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 1, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction print_exec} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_shove})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () exec_dup_items integer_min in1 integer_min integer_add) exec_noop boolean_and integer_dup exec_flush) (exec_noop boolean_and integer_dup exec_flush) print_exec (integer_shove integer_lt exec_y (integer_add tag_integer_276) in2 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer exec_do*times (exec_rot (print_newline integer_lt exec_do*range (integer_yankdup) integer_swap integer_max integer_rot boolean_xor integer_dup_times integer_sub) (exec_shove () exec_swap (boolean_shove) ()) ())) ())
Zero cases best errors: [0 0 1 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 288 56 787 288 732 55 140 300 55)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (288 288 56 787 288 732 55 140 300 55)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Best program: (boolean_not exec_s (boolean_xor) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times print_integer integer_shove exec_dup_items boolean_not exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove integer_gte boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush boolean_invert_second_then_and boolean_dup_times) integer_max integer_min exec_pop (exec_do*range (integer_dup_items boolean_yankdup)))
Errors: [0 0 1 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 35
Size: 46
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 7.011
Median total errors in population: 7
Error averages by case: (0.712 0.712 0.944 0.213 0.712 0.268 0.945 0.86 0.7 0.945)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.888
Average program size in population (points): 68.135
Average percent parens in population: 0.275
Minimum age in population: 14.5078125
Maximum age in population: 19.45849609375
Average age in population: 17.5736328125
Median age in population: 17.6806640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7138890
--- Timings ---
Current time: 1559583363004 milliseconds
Total Time:          39.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.6 seconds, 67.9%
Fitness Testing:      8.0 seconds, 20.5%
Report:               4.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: 3                  
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: 98                 
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 93                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 3                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 76                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 92                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 56                 
Correct output: -62                 | Program output: 11                 
Correct output: -80                 | Program output: 71                 
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: 19                 
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -26                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 94                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: 89                 
Correct output: -30                 | Program output: -7                 
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: 85                 
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: 7                  
Correct output: -48                 | Program output: 74                 
Correct output: -72                 | Program output: 40                 
Correct output: -88                 | Program output: -16                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 93                 
Correct output: -19                 | Program output: 95                 
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -15                
Correct output: -74                 | Program output: -3                 
Correct output: -84                 | Program output: -6                 
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 45                 
Correct output: -71                 | Program output: 19                 
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 88                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 89                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: 3                  
Correct output: -94                 | Program output: -26                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: 44                 
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_617} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while})
Lexicase best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_eq)) boolean_dup_items integer_add boolean_swap) (exec_do*while () exec_empty print_integer integer_shove integer_flush integer_min exec_while (exec_dup_times (boolean_stackdepth boolean_dup tagged_617 tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times boolean_xor print_integer integer_lte exec_stackdepth integer_gt boolean_rot exec_while (boolean_dup exec_k_when_autoconstructing (exec_noop) (exec_do*while ())))
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 58
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction tagged_617} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_noop} {:close 1, :instruction exec_do*while})
Zero cases best program: (boolean_not exec_s (integer_fromboolean) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_eq)) boolean_dup_items integer_add boolean_swap) (exec_do*while () exec_empty print_integer integer_shove integer_flush integer_min exec_while (exec_dup_times (boolean_stackdepth boolean_dup tagged_617 tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_dup_times boolean_xor print_integer integer_lte exec_stackdepth integer_gt boolean_rot exec_while (boolean_dup exec_k_when_autoconstructing (exec_noop) (exec_do*while ())))
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 58
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (122 363 363 118 118 118 118 237 363 363)
Population mean number of elite cases: 2.28
Count of perfect (error zero) individuals by case: (122 363 363 118 118 118 118 237 363 363)
Population mean number of perfect (error zero) cases: 2.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yank} {:close 0, :instruction exec_y} {:close 0, :instruction in2} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 1, :instruction print_newline} {:close 0, :instruction in4} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_gte} {:close 1, :instruction print_newline} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if})
Best program: (integer_mod in2 boolean_not integer_mult exec_s_when_autoconstructing (integer_eq boolean_rot boolean_invert_second_then_and integer_max print_integer) () (integer_dec exec_yank) exec_y (in2 exec_flush) exec_do*count () exec_s_when_autoconstructing () (boolean_not integer_shove print_newline) (in4 exec_y () boolean_yankdup boolean_and in1 boolean_swap boolean_xor integer_div boolean_pop integer_lt integer_min integer_shove integer_lt exec_y (integer_add tag_integer_276) in3 integer_sub integer_stackdepth boolean_yank integer_gte) print_newline exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer integer_rot boolean_dup_items integer_stackdepth boolean_yank integer_gte) (print_newline) exec_k_when_autoconstructing (boolean_eq boolean_swap boolean_rot print_integer -13 integer_add exec_if () ()) ())
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 78
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 7.717
Median total errors in population: 9
Error averages by case: (0.878 0.637 0.637 0.882 0.882 0.882 0.882 0.763 0.637 0.637)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.851
Average program size in population (points): 61.941
Average percent parens in population: 0.267
Minimum age in population: 15.6875
Maximum age in population: 20.99853515625
Average age in population: 19.24017236328125
Median age in population: 19.29150390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 161
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.732
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7522688
--- Timings ---
Current time: 1559583366326 milliseconds
Total Time:          42.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 68.9%
Fitness Testing:      8.4 seconds, 19.8%
Report:               4.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -81                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -2                 
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 48                 
Correct output: 17                  | Program output: 74                 
Correct output: 3                   | Program output: 51                 
Correct output: 3                   | Program output: 17                 
Correct output: 24                  | Program output: 47                 
Correct output: 9                   | Program output: 54                 
Correct output: 50                  | Program output: 82                 
Correct output: 22                  | Program output: 30                 
Correct output: 11                  | Program output: 41                 
Correct output: 14                  | Program output: 82                 
Correct output: 10                  | Program output: 10                 
Correct output: 2                   | Program output: 60                 
Correct output: 6                   | Program output: 50                 
Correct output: 18                  | Program output: 23                 
Correct output: 24                  | Program output: 80                 
Correct output: 7                   | Program output: 48                 
Correct output: 11                  | Program output: 53                 
Correct output: 27                  | Program output: 37                 
Correct output: 32                  | Program output: 91                 
Correct output: 15                  | Program output: 45                 
Correct output: -62                 | Program output: 6                  
Correct output: -80                 | Program output: -56                
Correct output: -77                 | Program output: 47                 
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: 10                 
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -3                 
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: 50                 
Correct output: -62                 | Program output: 39                 
Correct output: -90                 | Program output: 37                 
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -12                
Correct output: -18                 | Program output: 4                  
Correct output: -71                 | Program output: 2                  
Correct output: -65                 | Program output: 53                 
Correct output: -83                 | Program output: -41                
Correct output: -88                 | Program output: -14                
Correct output: -30                 | Program output: -30                
Correct output: 42                  | Program output: 42                 
Correct output: -69                 | Program output: 40                 
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -5                 
Correct output: -47                 | Program output: 5                  
Correct output: -91                 | Program output: 82                 
Correct output: -29                 | Program output: 45                 
Correct output: -19                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -29                
Correct output: -74                 | Program output: 97                 
Correct output: -84                 | Program output: -38                
Correct output: -27                 | Program output: 66                 
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: 70                 
Correct output: -60                 | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: 40                 
Correct output: -94                 | Program output: 20                 
Correct output: 44                  | Program output: 98                 
Correct output: -75                 | Program output: -10                
Correct output: -22                 | Program output: 48                 
Correct output: -55                 | Program output: 96                 
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: 18                 
Correct output: -82                 | Program output: 97                 
Correct output: -76                 | Program output: -48                
Correct output: -80                 | Program output: 56                 
Correct output: -11                 | Program output: 65                 
Correct output: -88                 | Program output: 38                 
Correct output: 11                  | Program output: 47                 
Correct output: -43                 | Program output: 83                 
Correct output: -42                 | Program output: -35                
Correct output: -91                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (boolean_not exec_s (boolean_dup) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty boolean_or in2 boolean_frominteger integer_empty exec_while (boolean_stackdepth exec_empty print_integer integer_shove exec_dup_items integer_min boolean_frominteger integer_empty exec_while (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (exec_while () boolean_xor) (boolean_dup) (integer_empty exec_s () (exec_dup (boolean_or boolean_dup) exec_if (exec_s () (exec_noop exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))) ())) () ()) ()))
Lexicase best errors: [0 0 1 0 0 1 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 102
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (boolean_not exec_s (boolean_dup) (exec_if (integer_rot) (exec_do*range (in4 boolean_dup_times boolean_swap) boolean_dup_items integer_add boolean_swap) exec_do*while () exec_empty boolean_or in2 boolean_frominteger integer_empty exec_while (boolean_stackdepth exec_empty print_integer integer_shove exec_dup_items integer_min boolean_frominteger integer_empty exec_while (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (exec_while () boolean_xor) (boolean_dup) (integer_empty exec_s () (exec_dup (boolean_or boolean_dup) exec_if (exec_s () (exec_noop exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))) ())) () ()) ()))
Zero cases best errors: [0 0 1 0 0 1 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 102
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (828 7 395 7 7 395 365 8 395 63)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (828 7 395 7 7 395 365 8 395 63)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 1, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_rot} {:close 3, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction tagged_274} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction -13} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Best program: (boolean_not boolean_dup_times integer_empty boolean_or in2 boolean_frominteger integer_empty exec_while (integer_lte integer_rot boolean_or) integer_lte boolean_pop integer_lte in1 boolean_shove exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (tagged_274) (boolean_xor) (boolean_dup) integer_empty exec_s () (exec_dup (boolean_or integer_gt) boolean_swap boolean_xor integer_div boolean_pop integer_fromboolean integer_min integer_add boolean_stackdepth) (integer_sub) exec_y_when_autoconstructing () integer_yankdup) (-13 integer_add exec_if (exec_noop exec_eq print_integer) () exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (integer_empty exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ())))))
Errors: [0 0 1 0 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 56
Size: 80
Percent parens: 0.300
--- Population Statistics ---
Average total errors in population: 7.53
Median total errors in population: 8
Error averages by case: (0.172 0.993 0.605 0.993 0.993 0.605 0.635 0.992 0.605 0.937)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.118
Average program size in population (points): 63.351
Average percent parens in population: 0.267
Minimum age in population: 18.0625
Maximum age in population: 22.4249267578125
Average age in population: 20.66513635253906
Median age in population: 20.72247314453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7883796
--- Timings ---
Current time: 1559583369445 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.7 seconds, 69.7%
Fitness Testing:      8.8 seconds, 19.3%
Report:               4.9 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
Lexicase best errors: [0 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 96
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
Zero cases best errors: [0 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 96
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (483 74 790 291 373 377 293 376 74 376)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (483 74 790 291 373 377 293 376 74 376)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop)) ())
Errors: [0 1 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 82
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.493
Median total errors in population: 7
Error averages by case: (0.517 0.926 0.21 0.709 0.627 0.623 0.707 0.624 0.926 0.624)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.666
Average program size in population (points): 85.987
Average percent parens in population: 0.272
Minimum age in population: 20.0283203125
Maximum age in population: 23.8736572265625
Average age in population: 22.57115368652344
Median age in population: 22.5240478515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 8363021
--- Timings ---
Current time: 1559583372308 milliseconds
Total Time:          48.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.8 seconds, 69.8%
Fitness Testing:      9.2 seconds, 19.0%
Report:               5.3 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (exec_while () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () exec_dup_items)) () ()) () ()) ()))) ())
Lexicase best errors: [1 0 0 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 99
Percent parens: 0.293
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 1, :instruction exec_while} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_items})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_do*range (exec_swap (exec_s_when_autoconstructing (exec_s (exec_while () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () exec_dup_items)) () ()) () ()) ()))) ())
Zero cases best errors: [1 0 0 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 99
Percent parens: 0.293
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 437 425 122 437 428 437 164 124 423)
Population mean number of elite cases: 3.20
Count of perfect (error zero) individuals by case: (205 437 425 122 437 428 437 164 124 423)
Population mean number of perfect (error zero) cases: 3.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
Errors: [1 0 0 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 69
Size: 90
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.798
Median total errors in population: 7
Error averages by case: (0.795 0.563 0.575 0.878 0.563 0.572 0.563 0.836 0.876 0.577)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.766
Average program size in population (points): 82.616
Average percent parens in population: 0.251
Minimum age in population: 21.0283203125
Maximum age in population: 25.58535766601562
Average age in population: 24.1408603515625
Median age in population: 24.24713134765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 62
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8783799
--- Timings ---
Current time: 1559583374920 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.8 seconds, 70.0%
Fitness Testing:      9.6 seconds, 18.9%
Report:               5.6 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_xor) (boolean_dup) (integer_empty exec_s () (exec_dup (boolean_or integer_gt boolean_swap boolean_xor boolean_yankdup boolean_pop integer_fromboolean exec_s_when_autoconstructing (exec_s (boolean_yankdup boolean_pop integer_add exec_if (exec_noop exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (boolean_not exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))) ()) () ())) ())) ()) ())
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 95
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_xor} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_eq} {:close 2, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush boolean_xor) (boolean_dup) (integer_empty exec_s () (exec_dup (boolean_or integer_gt boolean_swap boolean_xor boolean_yankdup boolean_pop integer_fromboolean exec_s_when_autoconstructing (exec_s (boolean_yankdup boolean_pop integer_add exec_if (exec_noop exec_eq print_integer) () in1 boolean_eq) (print_integer exec_when (boolean_not exec_dup_times (exec_dup (integer_shove) exec_s_when_autoconstructing () () ()))) ()) () ())) ())) ()) ())
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 95
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (526 18 518 515 505 270 200 18 197 505)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (526 18 518 515 505 270 200 18 197 505)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) integer_max integer_max exec_pop (exec_s (boolean_swap integer_yankdup) (exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq integer_dup_items integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop))) ())) ())
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 75
Size: 100
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.728
Median total errors in population: 7
Error averages by case: (0.474 0.982 0.482 0.485 0.495 0.73 0.8 0.982 0.803 0.495)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.081
Average program size in population (points): 87.195
Average percent parens in population: 0.254
Minimum age in population: 22.0283203125
Maximum age in population: 27.25547790527344
Average age in population: 25.63949949645996
Median age in population: 25.70333099365234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 9224482
--- Timings ---
Current time: 1559583377489 milliseconds
Total Time:          53.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.6 seconds, 70.1%
Fitness Testing:     10.1 seconds, 18.8%
Report:               5.9 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 29                 
Correct output: 3                   | Program output: 76                 
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 82                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 23                 
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 54                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -71                
Correct output: -77                 | Program output: -41                
Correct output: -54                 | Program output: -11                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -65                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: 6                  
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: 82                 
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 73                 
Correct output: -69                 | Program output: -58                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -94                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -44                
Correct output: -72                 | Program output: -26                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: 82                 
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -49                
Correct output: -94                 | Program output: -77                
Correct output: -74                 | Program output: -38                
Correct output: -84                 | Program output: -77                
Correct output: -27                 | Program output: -18                
Correct output: -87                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_add tag_integer_276) (in3 integer_sub integer_stackdepth integer_dup_items boolean_yankdup)) () ()) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 38
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction tag_integer_276} {:close 0, :instruction in3} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_add tag_integer_276) (in3 integer_sub integer_stackdepth integer_dup_items boolean_yankdup)) () ()) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 38
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 317 842 842 842 521 314 316 308 316)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (481 317 842 842 842 521 314 316 308 316)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction integer_mod} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_rot} {:close 0, :instruction tagged_614} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max integer_mod in2) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth exec_rot (tagged_614 integer_gte integer_flush) (boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) (integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_div exec_dup_times (exec_dup_times () integer_pop)))) ()) ())
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 75
Size: 100
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.901
Median total errors in population: 5
Error averages by case: (0.519 0.683 0.158 0.158 0.158 0.479 0.686 0.684 0.692 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.358
Average program size in population (points): 85.039
Average percent parens in population: 0.274
Minimum age in population: 25.41217041015625
Maximum age in population: 28.79798889160156
Average age in population: 27.08453846740723
Median age in population: 27.16568756103516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 9690966
--- Timings ---
Current time: 1559583380133 milliseconds
Total Time:          56.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 70.2%
Fitness Testing:     10.5 seconds, 18.7%
Report:               6.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 327
Test mean error for best: 0.32700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: 46                 
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 41                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: -47                
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 51                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 24                  | Program output: 43                 
Correct output: 9                   | Program output: 9                  
Correct output: 50                  | Program output: 50                 
Correct output: 22                  | Program output: 39                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 10                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 6                  
Correct output: 18                  | Program output: 18                 
Correct output: 24                  | Program output: 52                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 74                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 44                 
Correct output: 15                  | Program output: 49                 
Correct output: -62                 | Program output: -43                
Correct output: -80                 | Program output: -56                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -54                
Correct output: -58                 | Program output: -58                
Correct output: -68                 | Program output: -68                
Correct output: -86                 | Program output: -86                
Correct output: -50                 | Program output: -50                
Correct output: -12                 | Program output: -12                
Correct output: -89                 | Program output: -50                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -81                 | Program output: -81                
Correct output: -67                 | Program output: -64                
Correct output: -18                 | Program output: -18                
Correct output: -71                 | Program output: -71                
Correct output: -65                 | Program output: -65                
Correct output: -83                 | Program output: -83                
Correct output: -88                 | Program output: -14                
Correct output: -30                 | Program output: -30                
Correct output: 42                  | Program output: 47                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -98                
Correct output: -96                 | Program output: -96                
Correct output: -21                 | Program output: -21                
Correct output: -48                 | Program output: -34                
Correct output: -72                 | Program output: -72                
Correct output: -88                 | Program output: -88                
Correct output: -84                 | Program output: -15                
Correct output: -47                 | Program output: -47                
Correct output: -91                 | Program output: -91                
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -8                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -29                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -38                
Correct output: -27                 | Program output: -27                
Correct output: -87                 | Program output: -87                
Correct output: -95                 | Program output: -95                
Correct output: -60                 | Program output: -52                
Correct output: 22                  | Program output: 39                 
Correct output: -71                 | Program output: -71                
Correct output: -84                 | Program output: -84                
Correct output: -94                 | Program output: -94                
Correct output: 44                  | Program output: 70                 
Correct output: -75                 | Program output: -75                
Correct output: -22                 | Program output: 30                 
Correct output: -55                 | Program output: -55                
Correct output: -91                 | Program output: -91                
Correct output: -94                 | Program output: -54                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -48                
Correct output: -80                 | Program output: -54                
Correct output: -11                 | Program output: -11                
Correct output: -88                 | Program output: -88                
Correct output: 11                  | Program output: 37                 
Correct output: -43                 | Program output: -43                
Correct output: -42                 | Program output: -35                
Correct output: -91                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 in2) (in1 exec_s_when_autoconstructing () (exec_do*times (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) boolean_dup_items integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt)))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.214
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 in2) (in1 exec_s_when_autoconstructing () (exec_do*times (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) boolean_dup_items integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt)))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.214
--- Lexicase Population Statistics ---
Count of elite individuals by case: (497 707 116 116 515 869 495 325 854 115)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (497 707 116 116 515 869 495 325 854 115)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction in1} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 in2) (in1 exec_s_when_autoconstructing () (exec_do*times (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush boolean_dup_times) boolean_dup_items integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt)))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 66
Size: 84
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 5.391
Median total errors in population: 5
Error averages by case: (0.503 0.293 0.884 0.884 0.485 0.131 0.505 0.675 0.146 0.885)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.541
Average program size in population (points): 91.611
Average percent parens in population: 0.246
Minimum age in population: 26.41217041015625
Maximum age in population: 30.27082061767578
Average age in population: 28.7311575050354
Median age in population: 28.77249145507812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.804
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.804
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 10081143
--- Timings ---
Current time: 1559583382717 milliseconds
Total Time:          58.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.4 seconds, 70.4%
Fitness Testing:     10.9 seconds, 18.5%
Report:               6.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 424
Test mean error for best: 0.42400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 21                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -41                
Correct output: -58                 | Program output: -28                
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: -62                
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 47                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -56                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -56                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -87                 | Program output: -32                
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -5                 
Correct output: -88                 | Program output: 92                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Lexicase best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 in2) (integer_fromboolean integer_pop) (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or) integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop)) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 101
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction in2} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Zero cases best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 in2) (integer_fromboolean integer_pop) (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_shove boolean_stackdepth integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_gte integer_flush) boolean_stackdepth) boolean_shove in2 integer_eq) (boolean_flush exec_flush integer_lte) in1 integer_mod tagged_617 integer_gte integer_flush integer_max integer_min exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yank exec_do*range () exec_eq boolean_or) integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop)) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 101
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 200 846 851 851 906 214 944 173 941)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (179 200 846 851 851 906 214 944 173 941)
Population mean number of perfect (error zero) cases: 6.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction integer_mod} {:close 0, :instruction tagged_617} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_when} {:close 0, :instruction print_exec} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_752} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_pop})
Best program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 76
Size: 98
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 3.895
Median total errors in population: 4
Error averages by case: (0.821 0.8 0.154 0.149 0.149 0.094 0.786 0.056 0.827 0.059)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.399
Average program size in population (points): 87.347
Average percent parens in population: 0.217
Minimum age in population: 27.5240478515625
Maximum age in population: 31.55451393127441
Average age in population: 30.4721225566864
Median age in population: 30.54294776916504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 283
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 285
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.011
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 10437941
--- Timings ---
Current time: 1559583385272 milliseconds
Total Time:          61.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 70.6%
Fitness Testing:     11.2 seconds, 18.3%
Report:               6.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 20
Successful program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 98


Auto-simplifying with starting size: 98
step: 0
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 500
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 1000
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 1500
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 2000
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 2500
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 3000
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 3500
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 4000
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 4500
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

step: 5000
program: (print_boolean integer_eq exec_s_when_autoconstructing (in4 integer_lte boolean_invert_second_then_and integer_max in3 boolean_not) (integer_fromboolean exec_s_when_autoconstructing () (exec_s_when_autoconstructing (integer_min exec_if (boolean_pop boolean_dup_times print_integer integer_shove boolean_stackdepth integer_min integer_min exec_while () exec_dup_times (boolean_stackdepth integer_mod tagged_617 integer_pop integer_flush) boolean_stackdepth) (boolean_shove in2 integer_eq) boolean_flush exec_flush integer_lte) (in1 integer_mod tagged_617 integer_gte integer_flush) (boolean_stackdepth) boolean_shove in2 exec_pop (boolean_yank boolean_swap integer_yankdup) exec_do*while (exec_when () print_exec (exec_yankdup exec_do*range () exec_eq boolean_or integer_stackdepth boolean_dup_times integer_dec) boolean_dup_items) exec_while (tagged_752 integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) integer_lt exec_dup_items integer_sub integer_dup_items boolean_invert_second_then_and integer_pop) (integer_div exec_dup_times (exec_dup_times () integer_pop))) ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 98

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 424
Test mean error for best: 0.42400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 1
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 1
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 1
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 1
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 1
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 1
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 1
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 1
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 1
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 1
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 1
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 1
Test Case  965 | Error: 1
Test Case  966 | Error: 1
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -29                 | Program output: -29                
Correct output: 41                  | Program output: 99                 
Correct output: -64                 | Program output: -64                
Correct output: 69                  | Program output: 99                 
Correct output: -93                 | Program output: -93                
Correct output: -47                 | Program output: 78                 
Correct output: -35                 | Program output: -35                
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -72                
Correct output: 57                  | Program output: 57                 
Correct output: 7                   | Program output: 7                  
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -81                 | Program output: -81                
Correct output: 35                  | Program output: 35                 
Correct output: 17                  | Program output: 79                 
Correct output: 3                   | Program output: 3                  
Correct output: 3                   | Program output: 3                  
Correct output: 24                  | Program output: 24                 
Correct output: 9                   | Program output: 11                 
Correct output: 50                  | Program output: 63                 
Correct output: 22                  | Program output: 22                 
Correct output: 11                  | Program output: 21                 
Correct output: 14                  | Program output: 24                 
Correct output: 10                  | Program output: 59                 
Correct output: 2                   | Program output: 2                  
Correct output: 6                   | Program output: 27                 
Correct output: 18                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 7                   | Program output: 7                  
Correct output: 11                  | Program output: 11                 
Correct output: 27                  | Program output: 27                 
Correct output: 32                  | Program output: 32                 
Correct output: 15                  | Program output: 15                 
Correct output: -62                 | Program output: -62                
Correct output: -80                 | Program output: -80                
Correct output: -77                 | Program output: -77                
Correct output: -54                 | Program output: -41                
Correct output: -58                 | Program output: -28                
Correct output: -68                 | Program output: -49                
Correct output: -86                 | Program output: -56                
Correct output: -50                 | Program output: 64                 
Correct output: -12                 | Program output: 16                 
Correct output: -89                 | Program output: -89                
Correct output: -62                 | Program output: -24                
Correct output: -90                 | Program output: -62                
Correct output: -81                 | Program output: 19                 
Correct output: -67                 | Program output: -67                
Correct output: -18                 | Program output: -13                
Correct output: -71                 | Program output: -71                
Correct output: -65                 | Program output: 22                 
Correct output: -83                 | Program output: -28                
Correct output: -88                 | Program output: -88                
Correct output: -30                 | Program output: -25                
Correct output: 42                  | Program output: 47                 
Correct output: -69                 | Program output: -69                
Correct output: -98                 | Program output: -64                
Correct output: -96                 | Program output: -56                
Correct output: -21                 | Program output: -7                 
Correct output: -48                 | Program output: -48                
Correct output: -72                 | Program output: -56                
Correct output: -88                 | Program output: -78                
Correct output: -84                 | Program output: -84                
Correct output: -47                 | Program output: -19                
Correct output: -91                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -19                 | Program output: -19                
Correct output: -100                | Program output: -8                 
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -84                 | Program output: -84                
Correct output: -27                 | Program output: -27                
Correct output: -87                 | Program output: -32                
Correct output: -95                 | Program output: -60                
Correct output: -60                 | Program output: -60                
Correct output: 22                  | Program output: 27                 
Correct output: -71                 | Program output: -55                
Correct output: -84                 | Program output: -76                
Correct output: -94                 | Program output: -62                
Correct output: 44                  | Program output: 44                 
Correct output: -75                 | Program output: -70                
Correct output: -22                 | Program output: -22                
Correct output: -55                 | Program output: 16                 
Correct output: -91                 | Program output: -30                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -76                 | Program output: -76                
Correct output: -80                 | Program output: -80                
Correct output: -11                 | Program output: -5                 
Correct output: -88                 | Program output: 92                 
Correct output: 11                  | Program output: 11                 
Correct output: -43                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -91                 | Program output: -91                
;;******************************
