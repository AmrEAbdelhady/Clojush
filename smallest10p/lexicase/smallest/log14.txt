Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-89 -75 -75 -75] -89] [[-6 -10 -6 -6] -10] [[-93 -93 -93 -43] -93] [[-2 -2 -2 -99] -99] [[-37 -68 -68 -68] -68] [[6 -57 -57 -57] -57] [[74 50 74 74] 50] [[-70 68 -70 -70] -70] [[-85 57 -85 -85] -85] [[-55 -43 -43 -43] -55] [(72 72 72 72) 72] [(-36 -36 -36 -36) -36] [(32 32 32 32) 32] [(-7 -7 -7 -7) -7] [(-95 -95 -95 -95) -95] [(26 100 78 78) 26] [(6 11 82 55) 6] [(54 66 14 61) 14] [(2 0 54 26) 0] [(99 91 17 57) 17] [(36 61 27 63) 27] [(25 70 90 41) 25] [(35 2 93 51) 2] [(43 23 79 47) 23] [(11 77 81 58) 11] [(90 86 33 34) 33] [(53 20 69 79) 20] [(15 7 90 10) 7] [(83 55 84 85) 55] [(36 100 41 77) 36] [(0 1 44 23) 0] [(24 62 63 19) 19] [(49 50 87 87) 49] [(34 56 90 63) 34] [(84 28 26 84) 26] [(17 91 66 91) 17] [(61 -30 20 62) -30] [(-30 78 -20 -23) -30] [(75 -32 -21 64) -32] [(97 -65 57 99) -65] [(-23 73 -79 -75) -79] [(-71 -27 48 -98) -98] [(-86 60 -19 2) -86] [(-14 98 60 -74) -74] [(34 -34 71 -51) -51] [(-1 -19 19 -40) -40] [(80 -52 15 -20) -52] [(84 -78 -18 -80) -80] [(40 -64 99 21) -64] [(60 55 23 -16) -16] [(-91 99 -19 -60) -91] [(-31 -9 -72 9) -72] [(-63 61 -81 -68) -81] [(90 -27 -58 17) -58] [(-9 -50 -35 62) -50] [(-51 -1 73 -3) -51] [(-10 36 -84 -90) -90] [(-70 55 87 63) -70] [(-48 63 -56 -9) -56] [(-57 -71 15 -14) -71] [(-2 6 -30 4) -30] [(-31 49 -16 -10) -31] [(19 -17 -8 12) -17] [(-65 7 -82 -16) -82] [(-29 -77 -35 39) -77] [(5 10 92 -45) -45] [(90 -84 -5 -89) -89] [(-66 -87 46 17) -87] [(-56 71 42 -83) -83] [(-17 12 93 19) -17] [(-59 -90 -28 -21) -90] [(77 54 -33 -17) -33] [(40 96 -2 -69) -69] [(-18 -58 18 -51) -58] [(19 -67 -1 -70) -70] [(68 -92 81 -20) -92] [(1 40 25 10) 1] [(69 -83 35 99) -83] [(85 -94 -22 99) -94] [(77 -86 -5 73) -86] [(-49 69 73 89) -49] [(33 16 -41 87) -41] [(-52 -23 58 75) -52] [(9 42 -67 -35) -67] [(-50 -1 -9 85) -50] [(38 -43 -94 89) -94] [(-3 -84 -95 -92) -95] [(42 -14 54 -86) -86] [(19 -73 19 10) -73] [(-26 48 -73 -5) -73] [(-42 -17 1 -77) -77] [(23 65 86 18) 18] [(20 28 48 20) 20] [(-79 52 6 -30) -79] [(86 -28 60 46) -28])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-89 -75 -75 -75] -89]
Train Case:   6 | Input/Output: [[-6 -10 -6 -6] -10]
Train Case:   7 | Input/Output: [[-93 -93 -93 -43] -93]
Train Case:   8 | Input/Output: [[-2 -2 -2 -99] -99]
Train Case:   9 | Input/Output: [[-37 -68 -68 -68] -68]
Train Case:  10 | Input/Output: [[6 -57 -57 -57] -57]
Train Case:  11 | Input/Output: [[74 50 74 74] 50]
Train Case:  12 | Input/Output: [[-70 68 -70 -70] -70]
Train Case:  13 | Input/Output: [[-85 57 -85 -85] -85]
Train Case:  14 | Input/Output: [[-55 -43 -43 -43] -55]
Train Case:  15 | Input/Output: [(72 72 72 72) 72]
Train Case:  16 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  17 | Input/Output: [(32 32 32 32) 32]
Train Case:  18 | Input/Output: [(-7 -7 -7 -7) -7]
Train Case:  19 | Input/Output: [(-95 -95 -95 -95) -95]
Train Case:  20 | Input/Output: [(26 100 78 78) 26]
Train Case:  21 | Input/Output: [(6 11 82 55) 6]
Train Case:  22 | Input/Output: [(54 66 14 61) 14]
Train Case:  23 | Input/Output: [(2 0 54 26) 0]
Train Case:  24 | Input/Output: [(99 91 17 57) 17]
Train Case:  25 | Input/Output: [(36 61 27 63) 27]
Train Case:  26 | Input/Output: [(25 70 90 41) 25]
Train Case:  27 | Input/Output: [(35 2 93 51) 2]
Train Case:  28 | Input/Output: [(43 23 79 47) 23]
Train Case:  29 | Input/Output: [(11 77 81 58) 11]
Train Case:  30 | Input/Output: [(90 86 33 34) 33]
Train Case:  31 | Input/Output: [(53 20 69 79) 20]
Train Case:  32 | Input/Output: [(15 7 90 10) 7]
Train Case:  33 | Input/Output: [(83 55 84 85) 55]
Train Case:  34 | Input/Output: [(36 100 41 77) 36]
Train Case:  35 | Input/Output: [(0 1 44 23) 0]
Train Case:  36 | Input/Output: [(24 62 63 19) 19]
Train Case:  37 | Input/Output: [(49 50 87 87) 49]
Train Case:  38 | Input/Output: [(34 56 90 63) 34]
Train Case:  39 | Input/Output: [(84 28 26 84) 26]
Train Case:  40 | Input/Output: [(17 91 66 91) 17]
Train Case:  41 | Input/Output: [(61 -30 20 62) -30]
Train Case:  42 | Input/Output: [(-30 78 -20 -23) -30]
Train Case:  43 | Input/Output: [(75 -32 -21 64) -32]
Train Case:  44 | Input/Output: [(97 -65 57 99) -65]
Train Case:  45 | Input/Output: [(-23 73 -79 -75) -79]
Train Case:  46 | Input/Output: [(-71 -27 48 -98) -98]
Train Case:  47 | Input/Output: [(-86 60 -19 2) -86]
Train Case:  48 | Input/Output: [(-14 98 60 -74) -74]
Train Case:  49 | Input/Output: [(34 -34 71 -51) -51]
Train Case:  50 | Input/Output: [(-1 -19 19 -40) -40]
Train Case:  51 | Input/Output: [(80 -52 15 -20) -52]
Train Case:  52 | Input/Output: [(84 -78 -18 -80) -80]
Train Case:  53 | Input/Output: [(40 -64 99 21) -64]
Train Case:  54 | Input/Output: [(60 55 23 -16) -16]
Train Case:  55 | Input/Output: [(-91 99 -19 -60) -91]
Train Case:  56 | Input/Output: [(-31 -9 -72 9) -72]
Train Case:  57 | Input/Output: [(-63 61 -81 -68) -81]
Train Case:  58 | Input/Output: [(90 -27 -58 17) -58]
Train Case:  59 | Input/Output: [(-9 -50 -35 62) -50]
Train Case:  60 | Input/Output: [(-51 -1 73 -3) -51]
Train Case:  61 | Input/Output: [(-10 36 -84 -90) -90]
Train Case:  62 | Input/Output: [(-70 55 87 63) -70]
Train Case:  63 | Input/Output: [(-48 63 -56 -9) -56]
Train Case:  64 | Input/Output: [(-57 -71 15 -14) -71]
Train Case:  65 | Input/Output: [(-2 6 -30 4) -30]
Train Case:  66 | Input/Output: [(-31 49 -16 -10) -31]
Train Case:  67 | Input/Output: [(19 -17 -8 12) -17]
Train Case:  68 | Input/Output: [(-65 7 -82 -16) -82]
Train Case:  69 | Input/Output: [(-29 -77 -35 39) -77]
Train Case:  70 | Input/Output: [(5 10 92 -45) -45]
Train Case:  71 | Input/Output: [(90 -84 -5 -89) -89]
Train Case:  72 | Input/Output: [(-66 -87 46 17) -87]
Train Case:  73 | Input/Output: [(-56 71 42 -83) -83]
Train Case:  74 | Input/Output: [(-17 12 93 19) -17]
Train Case:  75 | Input/Output: [(-59 -90 -28 -21) -90]
Train Case:  76 | Input/Output: [(77 54 -33 -17) -33]
Train Case:  77 | Input/Output: [(40 96 -2 -69) -69]
Train Case:  78 | Input/Output: [(-18 -58 18 -51) -58]
Train Case:  79 | Input/Output: [(19 -67 -1 -70) -70]
Train Case:  80 | Input/Output: [(68 -92 81 -20) -92]
Train Case:  81 | Input/Output: [(1 40 25 10) 1]
Train Case:  82 | Input/Output: [(69 -83 35 99) -83]
Train Case:  83 | Input/Output: [(85 -94 -22 99) -94]
Train Case:  84 | Input/Output: [(77 -86 -5 73) -86]
Train Case:  85 | Input/Output: [(-49 69 73 89) -49]
Train Case:  86 | Input/Output: [(33 16 -41 87) -41]
Train Case:  87 | Input/Output: [(-52 -23 58 75) -52]
Train Case:  88 | Input/Output: [(9 42 -67 -35) -67]
Train Case:  89 | Input/Output: [(-50 -1 -9 85) -50]
Train Case:  90 | Input/Output: [(38 -43 -94 89) -94]
Train Case:  91 | Input/Output: [(-3 -84 -95 -92) -95]
Train Case:  92 | Input/Output: [(42 -14 54 -86) -86]
Train Case:  93 | Input/Output: [(19 -73 19 10) -73]
Train Case:  94 | Input/Output: [(-26 48 -73 -5) -73]
Train Case:  95 | Input/Output: [(-42 -17 1 -77) -77]
Train Case:  96 | Input/Output: [(23 65 86 18) 18]
Train Case:  97 | Input/Output: [(20 28 48 20) 20]
Train Case:  98 | Input/Output: [(-79 52 6 -30) -79]
Train Case:  99 | Input/Output: [(86 -28 60 46) -28]
Test Case:   0 | Input/Output: [[99 22 99 99] 22]
Test Case:   1 | Input/Output: [[-57 -57 -57 17] -57]
Test Case:   2 | Input/Output: [[6 82 82 82] 6]
Test Case:   3 | Input/Output: [[-76 -76 -73 -76] -76]
Test Case:   4 | Input/Output: [[36 36 -84 36] -84]
Test Case:   5 | Input/Output: [[21 -91 21 21] -91]
Test Case:   6 | Input/Output: [[-24 -48 -48 -48] -48]
Test Case:   7 | Input/Output: [[18 61 61 61] 18]
Test Case:   8 | Input/Output: [[43 83 43 43] 43]
Test Case:   9 | Input/Output: [[89 89 89 -9] -9]
Test Case:  10 | Input/Output: [[3 63 3 3] 3]
Test Case:  11 | Input/Output: [[23 23 23 -29] -29]
Test Case:  12 | Input/Output: [[96 96 86 96] 86]
Test Case:  13 | Input/Output: [[14 14 14 -55] -55]
Test Case:  14 | Input/Output: [[35 35 -52 35] -52]
Test Case:  15 | Input/Output: [[-13 -13 -13 -2] -13]
Test Case:  16 | Input/Output: [[-8 -8 -8 76] -8]
Test Case:  17 | Input/Output: [[-15 -76 -15 -15] -76]
Test Case:  18 | Input/Output: [[-61 -61 -61 77] -61]
Test Case:  19 | Input/Output: [[74 73 74 74] 73]
Test Case:  20 | Input/Output: [[-97 -97 -97 63] -97]
Test Case:  21 | Input/Output: [[67 -25 -25 -25] -25]
Test Case:  22 | Input/Output: [[-88 -88 -66 -88] -88]
Test Case:  23 | Input/Output: [[35 35 100 35] 35]
Test Case:  24 | Input/Output: [[87 -70 -70 -70] -70]
Test Case:  25 | Input/Output: [[-77 -77 -51 -77] -77]
Test Case:  26 | Input/Output: [[-37 -37 -8 -37] -37]
Test Case:  27 | Input/Output: [[87 87 -62 87] -62]
Test Case:  28 | Input/Output: [[22 22 18 22] 18]
Test Case:  29 | Input/Output: [[-47 -47 -47 -25] -47]
Test Case:  30 | Input/Output: [[-77 -77 -77 -73] -77]
Test Case:  31 | Input/Output: [[-6 33 33 33] -6]
Test Case:  32 | Input/Output: [[-87 -87 -87 -17] -87]
Test Case:  33 | Input/Output: [[54 85 54 54] 54]
Test Case:  34 | Input/Output: [[99 6 99 99] 6]
Test Case:  35 | Input/Output: [[28 2 28 28] 2]
Test Case:  36 | Input/Output: [[-39 -39 -39 -23] -39]
Test Case:  37 | Input/Output: [[9 9 38 9] 9]
Test Case:  38 | Input/Output: [[-58 -10 -10 -10] -58]
Test Case:  39 | Input/Output: [[9 9 -24 9] -24]
Test Case:  40 | Input/Output: [[-57 -57 -50 -57] -57]
Test Case:  41 | Input/Output: [[77 72 77 77] 72]
Test Case:  42 | Input/Output: [[67 67 34 67] 34]
Test Case:  43 | Input/Output: [[89 89 -82 89] -82]
Test Case:  44 | Input/Output: [[57 57 10 57] 10]
Test Case:  45 | Input/Output: [[-69 -16 -69 -69] -69]
Test Case:  46 | Input/Output: [[-70 -17 -70 -70] -70]
Test Case:  47 | Input/Output: [[61 61 61 -19] -19]
Test Case:  48 | Input/Output: [[-87 -18 -18 -18] -87]
Test Case:  49 | Input/Output: [[19 14 19 19] 14]
Test Case:  50 | Input/Output: [[-11 -4 -11 -11] -11]
Test Case:  51 | Input/Output: [[77 77 -70 77] -70]
Test Case:  52 | Input/Output: [[-21 -21 -83 -21] -83]
Test Case:  53 | Input/Output: [[-73 31 -73 -73] -73]
Test Case:  54 | Input/Output: [[23 23 32 23] 23]
Test Case:  55 | Input/Output: [[-65 -65 -7 -65] -65]
Test Case:  56 | Input/Output: [[58 58 58 18] 18]
Test Case:  57 | Input/Output: [[-58 -58 -13 -58] -58]
Test Case:  58 | Input/Output: [[-19 -19 -19 -22] -22]
Test Case:  59 | Input/Output: [[63 63 -41 63] -41]
Test Case:  60 | Input/Output: [[-53 -53 14 -53] -53]
Test Case:  61 | Input/Output: [[74 74 54 74] 54]
Test Case:  62 | Input/Output: [[-73 -73 -73 41] -73]
Test Case:  63 | Input/Output: [[-78 18 18 18] -78]
Test Case:  64 | Input/Output: [[-27 -23 -27 -27] -27]
Test Case:  65 | Input/Output: [[-41 -41 76 -41] -41]
Test Case:  66 | Input/Output: [[86 86 4 86] 4]
Test Case:  67 | Input/Output: [[-10 18 18 18] -10]
Test Case:  68 | Input/Output: [[22 22 71 22] 22]
Test Case:  69 | Input/Output: [[91 91 74 91] 74]
Test Case:  70 | Input/Output: [[-48 -48 82 -48] -48]
Test Case:  71 | Input/Output: [[-77 1 -77 -77] -77]
Test Case:  72 | Input/Output: [[47 47 -4 47] -4]
Test Case:  73 | Input/Output: [[52 52 52 90] 52]
Test Case:  74 | Input/Output: [[66 66 -29 66] -29]
Test Case:  75 | Input/Output: [[80 80 80 -99] -99]
Test Case:  76 | Input/Output: [[40 -32 -32 -32] -32]
Test Case:  77 | Input/Output: [[-51 44 -51 -51] -51]
Test Case:  78 | Input/Output: [[41 70 70 70] 41]
Test Case:  79 | Input/Output: [[57 57 78 57] 57]
Test Case:  80 | Input/Output: [[92 92 92 23] 23]
Test Case:  81 | Input/Output: [[11 -8 -8 -8] -8]
Test Case:  82 | Input/Output: [[80 -52 80 80] -52]
Test Case:  83 | Input/Output: [[76 37 37 37] 37]
Test Case:  84 | Input/Output: [[-46 81 -46 -46] -46]
Test Case:  85 | Input/Output: [[22 22 22 82] 22]
Test Case:  86 | Input/Output: [[7 18 7 7] 7]
Test Case:  87 | Input/Output: [[65 -93 65 65] -93]
Test Case:  88 | Input/Output: [[-62 -94 -62 -62] -94]
Test Case:  89 | Input/Output: [[9 -52 -52 -52] -52]
Test Case:  90 | Input/Output: [[98 98 -70 98] -70]
Test Case:  91 | Input/Output: [[52 -82 52 52] -82]
Test Case:  92 | Input/Output: [[-56 96 96 96] -56]
Test Case:  93 | Input/Output: [[34 96 34 34] 34]
Test Case:  94 | Input/Output: [[-67 -81 -81 -81] -81]
Test Case:  95 | Input/Output: [[-3 -3 -3 12] -3]
Test Case:  96 | Input/Output: [[5 47 47 47] 5]
Test Case:  97 | Input/Output: [[-52 -52 -52 30] -52]
Test Case:  98 | Input/Output: [[77 77 93 77] 77]
Test Case:  99 | Input/Output: [[21 21 -95 21] -95]
Test Case: 100 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 101 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 102 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 103 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 104 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 105 | Input/Output: [(93 93 93 93) 93]
Test Case: 106 | Input/Output: [(61 61 61 61) 61]
Test Case: 107 | Input/Output: [(20 20 20 20) 20]
Test Case: 108 | Input/Output: [(90 90 90 90) 90]
Test Case: 109 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 110 | Input/Output: [(48 48 48 48) 48]
Test Case: 111 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 112 | Input/Output: [(35 35 35 35) 35]
Test Case: 113 | Input/Output: [(52 52 52 52) 52]
Test Case: 114 | Input/Output: [(34 34 34 34) 34]
Test Case: 115 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 116 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 117 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 118 | Input/Output: [(18 18 18 18) 18]
Test Case: 119 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 120 | Input/Output: [(12 12 12 12) 12]
Test Case: 121 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 122 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 123 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 124 | Input/Output: [(75 75 75 75) 75]
Test Case: 125 | Input/Output: [(0 0 0 0) 0]
Test Case: 126 | Input/Output: [(85 85 85 85) 85]
Test Case: 127 | Input/Output: [(92 92 92 92) 92]
Test Case: 128 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 129 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 130 | Input/Output: [(85 85 85 85) 85]
Test Case: 131 | Input/Output: [(59 59 59 59) 59]
Test Case: 132 | Input/Output: [(18 18 18 18) 18]
Test Case: 133 | Input/Output: [(88 88 88 88) 88]
Test Case: 134 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 135 | Input/Output: [(38 38 38 38) 38]
Test Case: 136 | Input/Output: [(10 10 10 10) 10]
Test Case: 137 | Input/Output: [(12 12 12 12) 12]
Test Case: 138 | Input/Output: [(69 69 69 69) 69]
Test Case: 139 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 140 | Input/Output: [(49 49 49 49) 49]
Test Case: 141 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 142 | Input/Output: [(13 13 13 13) 13]
Test Case: 143 | Input/Output: [(89 89 89 89) 89]
Test Case: 144 | Input/Output: [(66 66 66 66) 66]
Test Case: 145 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 146 | Input/Output: [(82 82 82 82) 82]
Test Case: 147 | Input/Output: [(56 56 56 56) 56]
Test Case: 148 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 149 | Input/Output: [(29 29 29 29) 29]
Test Case: 150 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 151 | Input/Output: [(100 100 100 100) 100]
Test Case: 152 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 153 | Input/Output: [(47 47 47 47) 47]
Test Case: 154 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 155 | Input/Output: [(8 8 8 8) 8]
Test Case: 156 | Input/Output: [(96 96 96 96) 96]
Test Case: 157 | Input/Output: [(33 33 33 33) 33]
Test Case: 158 | Input/Output: [(90 90 90 90) 90]
Test Case: 159 | Input/Output: [(93 93 93 93) 93]
Test Case: 160 | Input/Output: [(59 59 59 59) 59]
Test Case: 161 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 162 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 163 | Input/Output: [(77 77 77 77) 77]
Test Case: 164 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 165 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 166 | Input/Output: [(75 75 75 75) 75]
Test Case: 167 | Input/Output: [(51 51 51 51) 51]
Test Case: 168 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 169 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 170 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 171 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 172 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 173 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 174 | Input/Output: [(90 90 90 90) 90]
Test Case: 175 | Input/Output: [(60 60 60 60) 60]
Test Case: 176 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 177 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 178 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 179 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 180 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 181 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 182 | Input/Output: [(52 52 52 52) 52]
Test Case: 183 | Input/Output: [(21 21 21 21) 21]
Test Case: 184 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 185 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 186 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 187 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 188 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 189 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 190 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 191 | Input/Output: [(54 54 54 54) 54]
Test Case: 192 | Input/Output: [(77 77 77 77) 77]
Test Case: 193 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 194 | Input/Output: [(9 9 9 9) 9]
Test Case: 195 | Input/Output: [(36 36 36 36) 36]
Test Case: 196 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 197 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 198 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 199 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 200 | Input/Output: [(75 49 80 7) 7]
Test Case: 201 | Input/Output: [(38 70 58 79) 38]
Test Case: 202 | Input/Output: [(6 88 9 57) 6]
Test Case: 203 | Input/Output: [(95 48 77 73) 48]
Test Case: 204 | Input/Output: [(67 21 75 75) 21]
Test Case: 205 | Input/Output: [(3 83 1 26) 1]
Test Case: 206 | Input/Output: [(45 83 72 35) 35]
Test Case: 207 | Input/Output: [(8 5 92 37) 5]
Test Case: 208 | Input/Output: [(100 87 81 42) 42]
Test Case: 209 | Input/Output: [(24 23 66 63) 23]
Test Case: 210 | Input/Output: [(73 33 1 30) 1]
Test Case: 211 | Input/Output: [(86 57 39 31) 31]
Test Case: 212 | Input/Output: [(14 32 85 76) 14]
Test Case: 213 | Input/Output: [(39 93 88 95) 39]
Test Case: 214 | Input/Output: [(92 67 2 70) 2]
Test Case: 215 | Input/Output: [(6 74 51 14) 6]
Test Case: 216 | Input/Output: [(40 2 98 40) 2]
Test Case: 217 | Input/Output: [(71 69 74 14) 14]
Test Case: 218 | Input/Output: [(37 15 89 80) 15]
Test Case: 219 | Input/Output: [(23 23 78 21) 21]
Test Case: 220 | Input/Output: [(47 49 27 46) 27]
Test Case: 221 | Input/Output: [(88 23 16 65) 16]
Test Case: 222 | Input/Output: [(4 69 8 15) 4]
Test Case: 223 | Input/Output: [(76 49 52 65) 49]
Test Case: 224 | Input/Output: [(41 44 17 57) 17]
Test Case: 225 | Input/Output: [(34 73 98 15) 15]
Test Case: 226 | Input/Output: [(16 82 8 40) 8]
Test Case: 227 | Input/Output: [(17 29 64 14) 14]
Test Case: 228 | Input/Output: [(27 29 77 15) 15]
Test Case: 229 | Input/Output: [(55 1 21 78) 1]
Test Case: 230 | Input/Output: [(15 90 25 98) 15]
Test Case: 231 | Input/Output: [(69 37 23 1) 1]
Test Case: 232 | Input/Output: [(40 3 94 64) 3]
Test Case: 233 | Input/Output: [(60 31 54 38) 31]
Test Case: 234 | Input/Output: [(16 15 33 2) 2]
Test Case: 235 | Input/Output: [(33 10 45 37) 10]
Test Case: 236 | Input/Output: [(9 1 69 56) 1]
Test Case: 237 | Input/Output: [(62 6 91 88) 6]
Test Case: 238 | Input/Output: [(2 43 81 82) 2]
Test Case: 239 | Input/Output: [(25 53 9 35) 9]
Test Case: 240 | Input/Output: [(48 50 36 51) 36]
Test Case: 241 | Input/Output: [(30 46 13 34) 13]
Test Case: 242 | Input/Output: [(46 53 95 96) 46]
Test Case: 243 | Input/Output: [(23 6 14 2) 2]
Test Case: 244 | Input/Output: [(23 98 89 53) 23]
Test Case: 245 | Input/Output: [(89 41 11 43) 11]
Test Case: 246 | Input/Output: [(12 16 25 32) 12]
Test Case: 247 | Input/Output: [(39 79 99 78) 39]
Test Case: 248 | Input/Output: [(55 74 1 50) 1]
Test Case: 249 | Input/Output: [(77 4 17 21) 4]
Test Case: 250 | Input/Output: [(1 35 25 63) 1]
Test Case: 251 | Input/Output: [(16 67 5 6) 5]
Test Case: 252 | Input/Output: [(94 29 0 24) 0]
Test Case: 253 | Input/Output: [(54 47 29 96) 29]
Test Case: 254 | Input/Output: [(92 35 17 8) 8]
Test Case: 255 | Input/Output: [(54 83 44 75) 44]
Test Case: 256 | Input/Output: [(68 35 59 21) 21]
Test Case: 257 | Input/Output: [(61 22 37 30) 22]
Test Case: 258 | Input/Output: [(45 83 60 87) 45]
Test Case: 259 | Input/Output: [(33 42 88 97) 33]
Test Case: 260 | Input/Output: [(75 59 68 40) 40]
Test Case: 261 | Input/Output: [(28 94 60 98) 28]
Test Case: 262 | Input/Output: [(23 23 98 52) 23]
Test Case: 263 | Input/Output: [(25 54 66 10) 10]
Test Case: 264 | Input/Output: [(65 89 59 48) 48]
Test Case: 265 | Input/Output: [(47 35 51 48) 35]
Test Case: 266 | Input/Output: [(4 35 50 59) 4]
Test Case: 267 | Input/Output: [(19 23 45 29) 19]
Test Case: 268 | Input/Output: [(80 26 27 5) 5]
Test Case: 269 | Input/Output: [(65 40 4 59) 4]
Test Case: 270 | Input/Output: [(24 62 62 50) 24]
Test Case: 271 | Input/Output: [(89 100 35 55) 35]
Test Case: 272 | Input/Output: [(50 89 30 6) 6]
Test Case: 273 | Input/Output: [(55 61 27 100) 27]
Test Case: 274 | Input/Output: [(87 15 47 31) 15]
Test Case: 275 | Input/Output: [(37 75 76 0) 0]
Test Case: 276 | Input/Output: [(87 51 13 30) 13]
Test Case: 277 | Input/Output: [(61 49 64 54) 49]
Test Case: 278 | Input/Output: [(57 32 3 88) 3]
Test Case: 279 | Input/Output: [(39 3 54 68) 3]
Test Case: 280 | Input/Output: [(76 19 89 49) 19]
Test Case: 281 | Input/Output: [(58 71 83 5) 5]
Test Case: 282 | Input/Output: [(50 51 57 77) 50]
Test Case: 283 | Input/Output: [(64 64 34 90) 34]
Test Case: 284 | Input/Output: [(80 67 24 50) 24]
Test Case: 285 | Input/Output: [(44 1 79 38) 1]
Test Case: 286 | Input/Output: [(51 51 100 92) 51]
Test Case: 287 | Input/Output: [(91 62 10 61) 10]
Test Case: 288 | Input/Output: [(58 86 65 64) 58]
Test Case: 289 | Input/Output: [(21 75 6 98) 6]
Test Case: 290 | Input/Output: [(65 14 19 89) 14]
Test Case: 291 | Input/Output: [(76 32 88 2) 2]
Test Case: 292 | Input/Output: [(21 8 100 57) 8]
Test Case: 293 | Input/Output: [(1 52 13 67) 1]
Test Case: 294 | Input/Output: [(15 22 35 96) 15]
Test Case: 295 | Input/Output: [(77 29 10 89) 10]
Test Case: 296 | Input/Output: [(19 70 72 63) 19]
Test Case: 297 | Input/Output: [(65 47 54 26) 26]
Test Case: 298 | Input/Output: [(86 65 45 30) 30]
Test Case: 299 | Input/Output: [(6 23 27 27) 6]
Test Case: 300 | Input/Output: [(1 47 32 91) 1]
Test Case: 301 | Input/Output: [(67 13 95 62) 13]
Test Case: 302 | Input/Output: [(20 14 76 58) 14]
Test Case: 303 | Input/Output: [(56 59 46 80) 46]
Test Case: 304 | Input/Output: [(62 19 49 54) 19]
Test Case: 305 | Input/Output: [(38 37 48 29) 29]
Test Case: 306 | Input/Output: [(36 87 88 83) 36]
Test Case: 307 | Input/Output: [(31 68 75 5) 5]
Test Case: 308 | Input/Output: [(88 55 19 13) 13]
Test Case: 309 | Input/Output: [(10 54 68 51) 10]
Test Case: 310 | Input/Output: [(46 79 50 46) 46]
Test Case: 311 | Input/Output: [(16 82 42 87) 16]
Test Case: 312 | Input/Output: [(35 48 82 13) 13]
Test Case: 313 | Input/Output: [(79 51 98 65) 51]
Test Case: 314 | Input/Output: [(5 76 26 13) 5]
Test Case: 315 | Input/Output: [(19 28 89 56) 19]
Test Case: 316 | Input/Output: [(100 34 2 60) 2]
Test Case: 317 | Input/Output: [(17 62 80 23) 17]
Test Case: 318 | Input/Output: [(83 18 51 33) 18]
Test Case: 319 | Input/Output: [(42 41 75 28) 28]
Test Case: 320 | Input/Output: [(86 74 76 66) 66]
Test Case: 321 | Input/Output: [(0 36 20 96) 0]
Test Case: 322 | Input/Output: [(2 67 62 86) 2]
Test Case: 323 | Input/Output: [(45 76 4 60) 4]
Test Case: 324 | Input/Output: [(9 26 80 31) 9]
Test Case: 325 | Input/Output: [(66 55 7 23) 7]
Test Case: 326 | Input/Output: [(99 5 92 6) 5]
Test Case: 327 | Input/Output: [(46 49 5 88) 5]
Test Case: 328 | Input/Output: [(92 77 92 88) 77]
Test Case: 329 | Input/Output: [(32 97 46 100) 32]
Test Case: 330 | Input/Output: [(2 45 1 31) 1]
Test Case: 331 | Input/Output: [(61 55 6 50) 6]
Test Case: 332 | Input/Output: [(69 18 18 77) 18]
Test Case: 333 | Input/Output: [(83 80 95 37) 37]
Test Case: 334 | Input/Output: [(53 9 10 75) 9]
Test Case: 335 | Input/Output: [(20 62 44 78) 20]
Test Case: 336 | Input/Output: [(17 52 25 76) 17]
Test Case: 337 | Input/Output: [(65 20 43 85) 20]
Test Case: 338 | Input/Output: [(67 2 19 12) 2]
Test Case: 339 | Input/Output: [(5 36 48 23) 5]
Test Case: 340 | Input/Output: [(71 57 49 94) 49]
Test Case: 341 | Input/Output: [(1 19 28 10) 1]
Test Case: 342 | Input/Output: [(91 49 45 30) 30]
Test Case: 343 | Input/Output: [(33 49 52 39) 33]
Test Case: 344 | Input/Output: [(62 15 57 95) 15]
Test Case: 345 | Input/Output: [(71 89 75 74) 71]
Test Case: 346 | Input/Output: [(3 82 74 4) 3]
Test Case: 347 | Input/Output: [(74 37 27 95) 27]
Test Case: 348 | Input/Output: [(79 73 21 99) 21]
Test Case: 349 | Input/Output: [(70 61 46 34) 34]
Test Case: 350 | Input/Output: [(4 94 68 25) 4]
Test Case: 351 | Input/Output: [(100 26 74 84) 26]
Test Case: 352 | Input/Output: [(99 38 54 78) 38]
Test Case: 353 | Input/Output: [(62 88 40 52) 40]
Test Case: 354 | Input/Output: [(30 5 70 81) 5]
Test Case: 355 | Input/Output: [(100 51 36 47) 36]
Test Case: 356 | Input/Output: [(31 71 31 59) 31]
Test Case: 357 | Input/Output: [(70 43 82 74) 43]
Test Case: 358 | Input/Output: [(3 9 73 86) 3]
Test Case: 359 | Input/Output: [(45 62 91 64) 45]
Test Case: 360 | Input/Output: [(44 20 99 63) 20]
Test Case: 361 | Input/Output: [(70 52 78 29) 29]
Test Case: 362 | Input/Output: [(61 71 76 48) 48]
Test Case: 363 | Input/Output: [(92 91 13 21) 13]
Test Case: 364 | Input/Output: [(82 85 66 33) 33]
Test Case: 365 | Input/Output: [(50 20 68 85) 20]
Test Case: 366 | Input/Output: [(80 52 73 84) 52]
Test Case: 367 | Input/Output: [(73 39 25 82) 25]
Test Case: 368 | Input/Output: [(67 73 71 40) 40]
Test Case: 369 | Input/Output: [(91 36 16 42) 16]
Test Case: 370 | Input/Output: [(4 41 93 77) 4]
Test Case: 371 | Input/Output: [(87 94 30 27) 27]
Test Case: 372 | Input/Output: [(92 51 79 88) 51]
Test Case: 373 | Input/Output: [(37 75 100 85) 37]
Test Case: 374 | Input/Output: [(55 30 31 38) 30]
Test Case: 375 | Input/Output: [(69 67 34 47) 34]
Test Case: 376 | Input/Output: [(14 55 90 92) 14]
Test Case: 377 | Input/Output: [(3 73 81 52) 3]
Test Case: 378 | Input/Output: [(95 79 49 23) 23]
Test Case: 379 | Input/Output: [(45 15 58 100) 15]
Test Case: 380 | Input/Output: [(7 84 58 53) 7]
Test Case: 381 | Input/Output: [(88 62 49 38) 38]
Test Case: 382 | Input/Output: [(34 85 92 58) 34]
Test Case: 383 | Input/Output: [(11 94 91 0) 0]
Test Case: 384 | Input/Output: [(78 43 43 91) 43]
Test Case: 385 | Input/Output: [(50 86 89 68) 50]
Test Case: 386 | Input/Output: [(23 24 82 52) 23]
Test Case: 387 | Input/Output: [(46 95 6 87) 6]
Test Case: 388 | Input/Output: [(91 96 86 56) 56]
Test Case: 389 | Input/Output: [(100 77 20 30) 20]
Test Case: 390 | Input/Output: [(27 88 32 91) 27]
Test Case: 391 | Input/Output: [(78 67 57 35) 35]
Test Case: 392 | Input/Output: [(6 0 62 42) 0]
Test Case: 393 | Input/Output: [(83 65 32 4) 4]
Test Case: 394 | Input/Output: [(60 5 23 30) 5]
Test Case: 395 | Input/Output: [(40 38 94 18) 18]
Test Case: 396 | Input/Output: [(47 33 72 44) 33]
Test Case: 397 | Input/Output: [(57 30 93 46) 30]
Test Case: 398 | Input/Output: [(94 39 94 53) 39]
Test Case: 399 | Input/Output: [(65 40 37 65) 37]
Test Case: 400 | Input/Output: [(2 60 84 -48) -48]
Test Case: 401 | Input/Output: [(-26 -47 -65 17) -65]
Test Case: 402 | Input/Output: [(-61 31 53 -88) -88]
Test Case: 403 | Input/Output: [(-91 -85 -85 34) -91]
Test Case: 404 | Input/Output: [(50 -68 -77 -42) -77]
Test Case: 405 | Input/Output: [(97 -59 -4 70) -59]
Test Case: 406 | Input/Output: [(-9 23 -43 -27) -43]
Test Case: 407 | Input/Output: [(-52 -85 -55 5) -85]
Test Case: 408 | Input/Output: [(48 -33 60 46) -33]
Test Case: 409 | Input/Output: [(16 45 7 64) 7]
Test Case: 410 | Input/Output: [(-94 -93 27 39) -94]
Test Case: 411 | Input/Output: [(-45 9 13 -35) -45]
Test Case: 412 | Input/Output: [(-53 96 100 -94) -94]
Test Case: 413 | Input/Output: [(8 51 93 -22) -22]
Test Case: 414 | Input/Output: [(-46 34 92 -76) -76]
Test Case: 415 | Input/Output: [(85 12 0 84) 0]
Test Case: 416 | Input/Output: [(-47 11 4 -57) -57]
Test Case: 417 | Input/Output: [(-46 -65 -45 -11) -65]
Test Case: 418 | Input/Output: [(-84 48 -50 -31) -84]
Test Case: 419 | Input/Output: [(57 66 -99 15) -99]
Test Case: 420 | Input/Output: [(88 -40 -76 57) -76]
Test Case: 421 | Input/Output: [(22 -69 -6 17) -69]
Test Case: 422 | Input/Output: [(-77 72 51 14) -77]
Test Case: 423 | Input/Output: [(87 94 89 -71) -71]
Test Case: 424 | Input/Output: [(-73 -45 51 -72) -73]
Test Case: 425 | Input/Output: [(-10 -27 89 27) -27]
Test Case: 426 | Input/Output: [(-36 94 -52 8) -52]
Test Case: 427 | Input/Output: [(-28 -54 70 19) -54]
Test Case: 428 | Input/Output: [(-8 20 -58 -65) -65]
Test Case: 429 | Input/Output: [(-94 -44 10 9) -94]
Test Case: 430 | Input/Output: [(16 3 27 -100) -100]
Test Case: 431 | Input/Output: [(-48 -96 -50 -77) -96]
Test Case: 432 | Input/Output: [(-13 -20 84 -57) -57]
Test Case: 433 | Input/Output: [(20 -21 90 65) -21]
Test Case: 434 | Input/Output: [(97 -25 -66 18) -66]
Test Case: 435 | Input/Output: [(38 9 73 -99) -99]
Test Case: 436 | Input/Output: [(49 48 44 80) 44]
Test Case: 437 | Input/Output: [(68 -33 -80 -39) -80]
Test Case: 438 | Input/Output: [(14 -17 94 -86) -86]
Test Case: 439 | Input/Output: [(-56 -43 -88 -32) -88]
Test Case: 440 | Input/Output: [(36 -42 4 2) -42]
Test Case: 441 | Input/Output: [(67 -32 69 -85) -85]
Test Case: 442 | Input/Output: [(-93 -54 -34 19) -93]
Test Case: 443 | Input/Output: [(-22 60 24 -11) -22]
Test Case: 444 | Input/Output: [(86 100 98 -41) -41]
Test Case: 445 | Input/Output: [(48 83 80 18) 18]
Test Case: 446 | Input/Output: [(6 38 28 -8) -8]
Test Case: 447 | Input/Output: [(-100 -10 -28 -85) -100]
Test Case: 448 | Input/Output: [(-51 14 -3 -41) -51]
Test Case: 449 | Input/Output: [(-35 5 -80 43) -80]
Test Case: 450 | Input/Output: [(-82 77 22 -82) -82]
Test Case: 451 | Input/Output: [(90 -59 -18 -75) -75]
Test Case: 452 | Input/Output: [(-84 -70 -96 85) -96]
Test Case: 453 | Input/Output: [(42 73 85 74) 42]
Test Case: 454 | Input/Output: [(75 -78 -9 -88) -88]
Test Case: 455 | Input/Output: [(-43 10 -95 -71) -95]
Test Case: 456 | Input/Output: [(37 -98 16 -7) -98]
Test Case: 457 | Input/Output: [(76 5 -100 -56) -100]
Test Case: 458 | Input/Output: [(73 -79 -3 69) -79]
Test Case: 459 | Input/Output: [(62 -24 -91 -49) -91]
Test Case: 460 | Input/Output: [(86 52 8 -26) -26]
Test Case: 461 | Input/Output: [(-24 90 -9 76) -24]
Test Case: 462 | Input/Output: [(19 13 -92 -43) -92]
Test Case: 463 | Input/Output: [(35 99 -16 -95) -95]
Test Case: 464 | Input/Output: [(42 16 3 69) 3]
Test Case: 465 | Input/Output: [(34 -15 -75 -44) -75]
Test Case: 466 | Input/Output: [(15 -62 18 52) -62]
Test Case: 467 | Input/Output: [(92 5 -26 -16) -26]
Test Case: 468 | Input/Output: [(-28 29 -55 39) -55]
Test Case: 469 | Input/Output: [(5 -25 50 -7) -25]
Test Case: 470 | Input/Output: [(88 -14 97 -12) -14]
Test Case: 471 | Input/Output: [(-6 -3 70 13) -6]
Test Case: 472 | Input/Output: [(-6 58 -74 -98) -98]
Test Case: 473 | Input/Output: [(97 -86 -39 -82) -86]
Test Case: 474 | Input/Output: [(81 -44 -49 -75) -75]
Test Case: 475 | Input/Output: [(94 -66 -49 -47) -66]
Test Case: 476 | Input/Output: [(-32 13 36 78) -32]
Test Case: 477 | Input/Output: [(69 -55 -100 -12) -100]
Test Case: 478 | Input/Output: [(-11 -51 -88 100) -88]
Test Case: 479 | Input/Output: [(-64 -69 -97 14) -97]
Test Case: 480 | Input/Output: [(26 85 -34 68) -34]
Test Case: 481 | Input/Output: [(11 78 -39 -48) -48]
Test Case: 482 | Input/Output: [(54 93 70 -63) -63]
Test Case: 483 | Input/Output: [(93 -68 7 82) -68]
Test Case: 484 | Input/Output: [(-24 -66 93 13) -66]
Test Case: 485 | Input/Output: [(86 80 -79 1) -79]
Test Case: 486 | Input/Output: [(21 -11 -50 -42) -50]
Test Case: 487 | Input/Output: [(83 -97 62 27) -97]
Test Case: 488 | Input/Output: [(-18 13 -57 52) -57]
Test Case: 489 | Input/Output: [(75 24 65 -6) -6]
Test Case: 490 | Input/Output: [(90 -59 92 41) -59]
Test Case: 491 | Input/Output: [(75 -52 73 -20) -52]
Test Case: 492 | Input/Output: [(36 38 21 -5) -5]
Test Case: 493 | Input/Output: [(75 8 -97 79) -97]
Test Case: 494 | Input/Output: [(29 -42 42 -91) -91]
Test Case: 495 | Input/Output: [(66 26 63 -100) -100]
Test Case: 496 | Input/Output: [(95 8 -17 -28) -28]
Test Case: 497 | Input/Output: [(76 60 79 -27) -27]
Test Case: 498 | Input/Output: [(-54 72 45 -54) -54]
Test Case: 499 | Input/Output: [(-4 89 -5 -89) -89]
Test Case: 500 | Input/Output: [(-51 86 10 42) -51]
Test Case: 501 | Input/Output: [(64 34 58 8) 8]
Test Case: 502 | Input/Output: [(-6 -24 17 -31) -31]
Test Case: 503 | Input/Output: [(-9 -28 -95 -99) -99]
Test Case: 504 | Input/Output: [(-65 59 -25 97) -65]
Test Case: 505 | Input/Output: [(60 92 16 99) 16]
Test Case: 506 | Input/Output: [(40 -38 -96 57) -96]
Test Case: 507 | Input/Output: [(-5 -18 -50 -37) -50]
Test Case: 508 | Input/Output: [(29 95 -48 84) -48]
Test Case: 509 | Input/Output: [(-87 99 -74 -96) -96]
Test Case: 510 | Input/Output: [(23 -42 53 -24) -42]
Test Case: 511 | Input/Output: [(-55 35 -48 99) -55]
Test Case: 512 | Input/Output: [(68 90 67 -35) -35]
Test Case: 513 | Input/Output: [(93 -53 23 -93) -93]
Test Case: 514 | Input/Output: [(-64 -67 62 -56) -67]
Test Case: 515 | Input/Output: [(36 71 -34 -18) -34]
Test Case: 516 | Input/Output: [(-3 -65 -71 88) -71]
Test Case: 517 | Input/Output: [(-96 34 28 59) -96]
Test Case: 518 | Input/Output: [(-5 57 -83 89) -83]
Test Case: 519 | Input/Output: [(53 -96 -32 59) -96]
Test Case: 520 | Input/Output: [(-3 -37 -84 90) -84]
Test Case: 521 | Input/Output: [(60 -63 -29 20) -63]
Test Case: 522 | Input/Output: [(-50 32 43 -2) -50]
Test Case: 523 | Input/Output: [(-49 2 -97 100) -97]
Test Case: 524 | Input/Output: [(94 -16 81 -73) -73]
Test Case: 525 | Input/Output: [(-83 72 16 -100) -100]
Test Case: 526 | Input/Output: [(60 50 50 -26) -26]
Test Case: 527 | Input/Output: [(-69 44 -39 12) -69]
Test Case: 528 | Input/Output: [(-44 -24 3 -52) -52]
Test Case: 529 | Input/Output: [(51 -92 51 0) -92]
Test Case: 530 | Input/Output: [(40 -28 -55 -40) -55]
Test Case: 531 | Input/Output: [(30 10 89 69) 10]
Test Case: 532 | Input/Output: [(4 -98 37 -13) -98]
Test Case: 533 | Input/Output: [(-48 -19 33 6) -48]
Test Case: 534 | Input/Output: [(8 26 -32 30) -32]
Test Case: 535 | Input/Output: [(66 -75 -31 87) -75]
Test Case: 536 | Input/Output: [(88 80 -1 -27) -27]
Test Case: 537 | Input/Output: [(55 34 67 -11) -11]
Test Case: 538 | Input/Output: [(49 41 -92 -13) -92]
Test Case: 539 | Input/Output: [(36 22 -66 -35) -66]
Test Case: 540 | Input/Output: [(6 -30 -76 68) -76]
Test Case: 541 | Input/Output: [(75 36 23 13) 13]
Test Case: 542 | Input/Output: [(88 -1 13 55) -1]
Test Case: 543 | Input/Output: [(-30 -100 -16 -65) -100]
Test Case: 544 | Input/Output: [(-74 12 -72 83) -74]
Test Case: 545 | Input/Output: [(61 33 56 -97) -97]
Test Case: 546 | Input/Output: [(-20 28 -81 -76) -81]
Test Case: 547 | Input/Output: [(1 -30 -23 -3) -30]
Test Case: 548 | Input/Output: [(-74 -3 -32 20) -74]
Test Case: 549 | Input/Output: [(-28 24 99 96) -28]
Test Case: 550 | Input/Output: [(-75 11 60 -67) -75]
Test Case: 551 | Input/Output: [(-39 -17 -42 -60) -60]
Test Case: 552 | Input/Output: [(-43 -34 28 92) -43]
Test Case: 553 | Input/Output: [(-78 63 25 30) -78]
Test Case: 554 | Input/Output: [(57 52 -3 63) -3]
Test Case: 555 | Input/Output: [(82 -31 28 -6) -31]
Test Case: 556 | Input/Output: [(55 97 70 62) 55]
Test Case: 557 | Input/Output: [(-93 8 29 85) -93]
Test Case: 558 | Input/Output: [(26 -28 -11 27) -28]
Test Case: 559 | Input/Output: [(38 -81 -10 31) -81]
Test Case: 560 | Input/Output: [(7 45 77 -71) -71]
Test Case: 561 | Input/Output: [(33 -4 10 17) -4]
Test Case: 562 | Input/Output: [(20 -1 59 -65) -65]
Test Case: 563 | Input/Output: [(100 -12 89 -34) -34]
Test Case: 564 | Input/Output: [(27 96 -90 31) -90]
Test Case: 565 | Input/Output: [(-12 95 -56 73) -56]
Test Case: 566 | Input/Output: [(92 94 -96 -39) -96]
Test Case: 567 | Input/Output: [(25 83 -5 81) -5]
Test Case: 568 | Input/Output: [(-51 41 -8 70) -51]
Test Case: 569 | Input/Output: [(49 97 24 -12) -12]
Test Case: 570 | Input/Output: [(-61 55 58 -42) -61]
Test Case: 571 | Input/Output: [(47 -33 -12 -96) -96]
Test Case: 572 | Input/Output: [(82 -62 -96 96) -96]
Test Case: 573 | Input/Output: [(89 -47 -48 91) -48]
Test Case: 574 | Input/Output: [(4 27 -35 -4) -35]
Test Case: 575 | Input/Output: [(25 -89 -11 26) -89]
Test Case: 576 | Input/Output: [(-84 -13 94 0) -84]
Test Case: 577 | Input/Output: [(-12 94 -57 27) -57]
Test Case: 578 | Input/Output: [(-99 9 -87 56) -99]
Test Case: 579 | Input/Output: [(-91 97 -36 -36) -91]
Test Case: 580 | Input/Output: [(36 45 69 75) 36]
Test Case: 581 | Input/Output: [(-40 99 19 -6) -40]
Test Case: 582 | Input/Output: [(2 64 -83 33) -83]
Test Case: 583 | Input/Output: [(67 -33 -49 81) -49]
Test Case: 584 | Input/Output: [(73 -52 -17 -47) -52]
Test Case: 585 | Input/Output: [(-62 23 59 -23) -62]
Test Case: 586 | Input/Output: [(-97 37 -60 60) -97]
Test Case: 587 | Input/Output: [(23 -85 32 27) -85]
Test Case: 588 | Input/Output: [(-8 65 -68 -44) -68]
Test Case: 589 | Input/Output: [(37 -19 -11 -36) -36]
Test Case: 590 | Input/Output: [(41 2 48 -75) -75]
Test Case: 591 | Input/Output: [(-79 -57 62 67) -79]
Test Case: 592 | Input/Output: [(74 -29 -12 67) -29]
Test Case: 593 | Input/Output: [(-30 8 26 -94) -94]
Test Case: 594 | Input/Output: [(35 -84 -92 81) -92]
Test Case: 595 | Input/Output: [(-87 -59 -40 7) -87]
Test Case: 596 | Input/Output: [(58 -31 74 31) -31]
Test Case: 597 | Input/Output: [(3 69 -14 8) -14]
Test Case: 598 | Input/Output: [(91 -34 -54 -64) -64]
Test Case: 599 | Input/Output: [(52 3 -94 85) -94]
Test Case: 600 | Input/Output: [(69 -38 73 44) -38]
Test Case: 601 | Input/Output: [(-31 31 -49 88) -49]
Test Case: 602 | Input/Output: [(-27 -88 -19 80) -88]
Test Case: 603 | Input/Output: [(17 28 -39 -69) -69]
Test Case: 604 | Input/Output: [(-53 29 15 68) -53]
Test Case: 605 | Input/Output: [(82 -26 47 97) -26]
Test Case: 606 | Input/Output: [(11 59 79 62) 11]
Test Case: 607 | Input/Output: [(91 58 24 55) 24]
Test Case: 608 | Input/Output: [(42 66 -64 32) -64]
Test Case: 609 | Input/Output: [(17 72 -99 -84) -99]
Test Case: 610 | Input/Output: [(74 60 -25 98) -25]
Test Case: 611 | Input/Output: [(5 -23 60 -30) -30]
Test Case: 612 | Input/Output: [(12 98 23 42) 12]
Test Case: 613 | Input/Output: [(-4 -74 -42 -69) -74]
Test Case: 614 | Input/Output: [(-91 48 75 75) -91]
Test Case: 615 | Input/Output: [(65 26 54 75) 26]
Test Case: 616 | Input/Output: [(-62 -84 78 -86) -86]
Test Case: 617 | Input/Output: [(-90 38 2 -33) -90]
Test Case: 618 | Input/Output: [(-83 79 -55 -44) -83]
Test Case: 619 | Input/Output: [(74 61 74 86) 61]
Test Case: 620 | Input/Output: [(-71 -94 -13 59) -94]
Test Case: 621 | Input/Output: [(-85 58 -30 31) -85]
Test Case: 622 | Input/Output: [(94 54 99 -5) -5]
Test Case: 623 | Input/Output: [(-93 -4 -26 35) -93]
Test Case: 624 | Input/Output: [(63 -92 -23 -54) -92]
Test Case: 625 | Input/Output: [(7 60 1 -23) -23]
Test Case: 626 | Input/Output: [(16 -23 -7 -23) -23]
Test Case: 627 | Input/Output: [(-16 52 -45 -16) -45]
Test Case: 628 | Input/Output: [(-48 80 47 50) -48]
Test Case: 629 | Input/Output: [(34 67 83 78) 34]
Test Case: 630 | Input/Output: [(100 -67 26 -66) -67]
Test Case: 631 | Input/Output: [(-68 41 -60 -94) -94]
Test Case: 632 | Input/Output: [(-37 -38 -51 82) -51]
Test Case: 633 | Input/Output: [(9 -85 -66 75) -85]
Test Case: 634 | Input/Output: [(38 -63 -57 -90) -90]
Test Case: 635 | Input/Output: [(52 -47 -1 67) -47]
Test Case: 636 | Input/Output: [(56 33 -96 -18) -96]
Test Case: 637 | Input/Output: [(30 -26 9 -96) -96]
Test Case: 638 | Input/Output: [(-73 -16 40 -6) -73]
Test Case: 639 | Input/Output: [(-21 -96 -20 49) -96]
Test Case: 640 | Input/Output: [(77 78 71 65) 65]
Test Case: 641 | Input/Output: [(-49 -61 69 -60) -61]
Test Case: 642 | Input/Output: [(-43 90 -57 84) -57]
Test Case: 643 | Input/Output: [(-24 85 75 -61) -61]
Test Case: 644 | Input/Output: [(61 -20 25 94) -20]
Test Case: 645 | Input/Output: [(-29 60 -86 8) -86]
Test Case: 646 | Input/Output: [(-28 -25 -93 65) -93]
Test Case: 647 | Input/Output: [(-26 -37 29 -78) -78]
Test Case: 648 | Input/Output: [(-30 -69 30 -43) -69]
Test Case: 649 | Input/Output: [(-78 70 -26 -52) -78]
Test Case: 650 | Input/Output: [(-78 71 -9 -18) -78]
Test Case: 651 | Input/Output: [(-63 63 -50 -84) -84]
Test Case: 652 | Input/Output: [(8 -31 2 -48) -48]
Test Case: 653 | Input/Output: [(93 44 58 -27) -27]
Test Case: 654 | Input/Output: [(-1 41 -9 34) -9]
Test Case: 655 | Input/Output: [(97 18 -55 81) -55]
Test Case: 656 | Input/Output: [(22 45 75 87) 22]
Test Case: 657 | Input/Output: [(-9 -70 89 9) -70]
Test Case: 658 | Input/Output: [(-67 73 -70 -88) -88]
Test Case: 659 | Input/Output: [(31 92 17 -53) -53]
Test Case: 660 | Input/Output: [(19 -11 20 -37) -37]
Test Case: 661 | Input/Output: [(-35 -60 50 -47) -60]
Test Case: 662 | Input/Output: [(9 -69 27 33) -69]
Test Case: 663 | Input/Output: [(-62 -65 74 64) -65]
Test Case: 664 | Input/Output: [(73 16 32 97) 16]
Test Case: 665 | Input/Output: [(-41 -69 -77 -42) -77]
Test Case: 666 | Input/Output: [(-32 -78 54 -49) -78]
Test Case: 667 | Input/Output: [(-17 3 -7 40) -17]
Test Case: 668 | Input/Output: [(72 -100 -100 32) -100]
Test Case: 669 | Input/Output: [(-7 -2 -96 96) -96]
Test Case: 670 | Input/Output: [(62 74 79 71) 62]
Test Case: 671 | Input/Output: [(60 15 91 100) 15]
Test Case: 672 | Input/Output: [(-100 -12 -23 55) -100]
Test Case: 673 | Input/Output: [(5 -57 -99 -92) -99]
Test Case: 674 | Input/Output: [(-10 31 -39 42) -39]
Test Case: 675 | Input/Output: [(-56 31 21 69) -56]
Test Case: 676 | Input/Output: [(73 -8 -73 41) -73]
Test Case: 677 | Input/Output: [(84 94 -63 81) -63]
Test Case: 678 | Input/Output: [(-53 36 -75 93) -75]
Test Case: 679 | Input/Output: [(8 -20 58 -11) -20]
Test Case: 680 | Input/Output: [(-10 55 75 45) -10]
Test Case: 681 | Input/Output: [(54 -29 61 9) -29]
Test Case: 682 | Input/Output: [(86 95 73 -12) -12]
Test Case: 683 | Input/Output: [(57 -79 28 68) -79]
Test Case: 684 | Input/Output: [(32 -76 0 -41) -76]
Test Case: 685 | Input/Output: [(86 -63 30 57) -63]
Test Case: 686 | Input/Output: [(-18 4 -13 -39) -39]
Test Case: 687 | Input/Output: [(39 68 -52 44) -52]
Test Case: 688 | Input/Output: [(65 -33 -22 -50) -50]
Test Case: 689 | Input/Output: [(-81 -41 -64 -61) -81]
Test Case: 690 | Input/Output: [(-53 -76 74 82) -76]
Test Case: 691 | Input/Output: [(53 -14 31 -92) -92]
Test Case: 692 | Input/Output: [(-82 68 2 -16) -82]
Test Case: 693 | Input/Output: [(53 19 43 42) 19]
Test Case: 694 | Input/Output: [(-94 -52 -89 -40) -94]
Test Case: 695 | Input/Output: [(26 95 56 45) 26]
Test Case: 696 | Input/Output: [(-51 33 52 80) -51]
Test Case: 697 | Input/Output: [(39 35 46 50) 35]
Test Case: 698 | Input/Output: [(-22 38 -87 67) -87]
Test Case: 699 | Input/Output: [(3 96 3 -74) -74]
Test Case: 700 | Input/Output: [(98 70 21 34) 21]
Test Case: 701 | Input/Output: [(-34 61 -2 -6) -34]
Test Case: 702 | Input/Output: [(-47 85 -13 48) -47]
Test Case: 703 | Input/Output: [(-53 -44 -6 83) -53]
Test Case: 704 | Input/Output: [(68 -76 6 -40) -76]
Test Case: 705 | Input/Output: [(-20 -65 16 38) -65]
Test Case: 706 | Input/Output: [(-82 63 -97 -37) -97]
Test Case: 707 | Input/Output: [(-73 86 90 65) -73]
Test Case: 708 | Input/Output: [(-19 5 25 -89) -89]
Test Case: 709 | Input/Output: [(-90 -42 1 -46) -90]
Test Case: 710 | Input/Output: [(11 34 -11 42) -11]
Test Case: 711 | Input/Output: [(-27 54 20 -85) -85]
Test Case: 712 | Input/Output: [(-86 -37 27 -84) -86]
Test Case: 713 | Input/Output: [(65 -72 42 54) -72]
Test Case: 714 | Input/Output: [(26 46 -20 -56) -56]
Test Case: 715 | Input/Output: [(52 -49 -58 -74) -74]
Test Case: 716 | Input/Output: [(-34 -28 -2 69) -34]
Test Case: 717 | Input/Output: [(-61 87 -49 24) -61]
Test Case: 718 | Input/Output: [(59 71 -12 -64) -64]
Test Case: 719 | Input/Output: [(82 30 65 -93) -93]
Test Case: 720 | Input/Output: [(-52 41 -51 -12) -52]
Test Case: 721 | Input/Output: [(-82 13 5 -44) -82]
Test Case: 722 | Input/Output: [(69 -94 40 -85) -94]
Test Case: 723 | Input/Output: [(88 72 19 -27) -27]
Test Case: 724 | Input/Output: [(35 -22 -1 -86) -86]
Test Case: 725 | Input/Output: [(55 -82 -54 40) -82]
Test Case: 726 | Input/Output: [(-90 -44 -93 -71) -93]
Test Case: 727 | Input/Output: [(-31 94 -68 24) -68]
Test Case: 728 | Input/Output: [(-68 -97 -85 -48) -97]
Test Case: 729 | Input/Output: [(61 -91 -13 26) -91]
Test Case: 730 | Input/Output: [(66 -74 7 -23) -74]
Test Case: 731 | Input/Output: [(84 44 38 82) 38]
Test Case: 732 | Input/Output: [(38 -60 -31 42) -60]
Test Case: 733 | Input/Output: [(85 -71 42 -59) -71]
Test Case: 734 | Input/Output: [(80 -92 81 99) -92]
Test Case: 735 | Input/Output: [(-76 -79 16 -74) -79]
Test Case: 736 | Input/Output: [(-46 -66 34 34) -66]
Test Case: 737 | Input/Output: [(-53 -68 -60 -82) -82]
Test Case: 738 | Input/Output: [(10 -19 -56 51) -56]
Test Case: 739 | Input/Output: [(17 25 44 94) 17]
Test Case: 740 | Input/Output: [(-52 79 83 -36) -52]
Test Case: 741 | Input/Output: [(59 -15 54 -19) -19]
Test Case: 742 | Input/Output: [(85 99 -3 -98) -98]
Test Case: 743 | Input/Output: [(88 -87 50 -42) -87]
Test Case: 744 | Input/Output: [(-46 -43 27 56) -46]
Test Case: 745 | Input/Output: [(-38 64 -25 34) -38]
Test Case: 746 | Input/Output: [(-5 -1 -77 69) -77]
Test Case: 747 | Input/Output: [(81 -66 -98 -83) -98]
Test Case: 748 | Input/Output: [(-56 -20 -90 -30) -90]
Test Case: 749 | Input/Output: [(35 -50 73 75) -50]
Test Case: 750 | Input/Output: [(-45 53 -29 -37) -45]
Test Case: 751 | Input/Output: [(74 -80 -89 -34) -89]
Test Case: 752 | Input/Output: [(-57 -65 60 57) -65]
Test Case: 753 | Input/Output: [(47 -14 8 -55) -55]
Test Case: 754 | Input/Output: [(-82 -14 91 -9) -82]
Test Case: 755 | Input/Output: [(70 61 6 -8) -8]
Test Case: 756 | Input/Output: [(8 -14 25 -80) -80]
Test Case: 757 | Input/Output: [(43 64 -64 0) -64]
Test Case: 758 | Input/Output: [(-48 84 58 -80) -80]
Test Case: 759 | Input/Output: [(-15 24 83 36) -15]
Test Case: 760 | Input/Output: [(-19 32 100 80) -19]
Test Case: 761 | Input/Output: [(-44 -62 -55 -40) -62]
Test Case: 762 | Input/Output: [(-13 52 -12 70) -13]
Test Case: 763 | Input/Output: [(-11 12 53 17) -11]
Test Case: 764 | Input/Output: [(-10 -56 -11 -82) -82]
Test Case: 765 | Input/Output: [(-63 -70 66 62) -70]
Test Case: 766 | Input/Output: [(44 10 90 38) 10]
Test Case: 767 | Input/Output: [(-87 69 -67 -49) -87]
Test Case: 768 | Input/Output: [(90 41 -43 -72) -72]
Test Case: 769 | Input/Output: [(-43 95 -95 -78) -95]
Test Case: 770 | Input/Output: [(42 29 -68 8) -68]
Test Case: 771 | Input/Output: [(94 78 79 90) 78]
Test Case: 772 | Input/Output: [(-57 22 -12 30) -57]
Test Case: 773 | Input/Output: [(-51 93 -88 48) -88]
Test Case: 774 | Input/Output: [(99 52 -27 -25) -27]
Test Case: 775 | Input/Output: [(-21 51 20 18) -21]
Test Case: 776 | Input/Output: [(43 46 52 -86) -86]
Test Case: 777 | Input/Output: [(66 -30 -92 6) -92]
Test Case: 778 | Input/Output: [(1 65 30 35) 1]
Test Case: 779 | Input/Output: [(-31 -88 37 -58) -88]
Test Case: 780 | Input/Output: [(-9 -18 -58 42) -58]
Test Case: 781 | Input/Output: [(37 -34 7 72) -34]
Test Case: 782 | Input/Output: [(-64 -64 -2 19) -64]
Test Case: 783 | Input/Output: [(37 38 58 91) 37]
Test Case: 784 | Input/Output: [(-83 -100 27 -70) -100]
Test Case: 785 | Input/Output: [(32 -37 28 20) -37]
Test Case: 786 | Input/Output: [(-2 -11 23 6) -11]
Test Case: 787 | Input/Output: [(20 -14 97 -92) -92]
Test Case: 788 | Input/Output: [(67 2 40 -90) -90]
Test Case: 789 | Input/Output: [(-55 2 13 -48) -55]
Test Case: 790 | Input/Output: [(5 77 -16 9) -16]
Test Case: 791 | Input/Output: [(79 43 -1 79) -1]
Test Case: 792 | Input/Output: [(25 -24 -100 70) -100]
Test Case: 793 | Input/Output: [(11 83 -70 69) -70]
Test Case: 794 | Input/Output: [(100 5 64 70) 5]
Test Case: 795 | Input/Output: [(73 -48 -91 75) -91]
Test Case: 796 | Input/Output: [(68 98 99 60) 60]
Test Case: 797 | Input/Output: [(-88 60 -12 -30) -88]
Test Case: 798 | Input/Output: [(1 -80 24 28) -80]
Test Case: 799 | Input/Output: [(-37 88 79 -38) -38]
Test Case: 800 | Input/Output: [(-9 59 -15 -33) -33]
Test Case: 801 | Input/Output: [(-70 77 15 -30) -70]
Test Case: 802 | Input/Output: [(-47 -32 76 6) -47]
Test Case: 803 | Input/Output: [(60 -10 10 -8) -10]
Test Case: 804 | Input/Output: [(-35 98 -45 -76) -76]
Test Case: 805 | Input/Output: [(-11 -48 100 88) -48]
Test Case: 806 | Input/Output: [(-55 72 -24 14) -55]
Test Case: 807 | Input/Output: [(22 -81 30 51) -81]
Test Case: 808 | Input/Output: [(43 -72 32 -41) -72]
Test Case: 809 | Input/Output: [(49 84 39 -45) -45]
Test Case: 810 | Input/Output: [(-32 37 -64 33) -64]
Test Case: 811 | Input/Output: [(96 -76 65 -18) -76]
Test Case: 812 | Input/Output: [(-53 -11 87 -21) -53]
Test Case: 813 | Input/Output: [(-61 -11 48 8) -61]
Test Case: 814 | Input/Output: [(-18 -96 -50 -90) -96]
Test Case: 815 | Input/Output: [(-90 -43 23 -82) -90]
Test Case: 816 | Input/Output: [(5 33 70 79) 5]
Test Case: 817 | Input/Output: [(30 -59 27 70) -59]
Test Case: 818 | Input/Output: [(83 80 47 75) 47]
Test Case: 819 | Input/Output: [(-67 3 -47 58) -67]
Test Case: 820 | Input/Output: [(-38 -4 -93 38) -93]
Test Case: 821 | Input/Output: [(76 94 89 -33) -33]
Test Case: 822 | Input/Output: [(73 -52 46 4) -52]
Test Case: 823 | Input/Output: [(69 -17 21 -95) -95]
Test Case: 824 | Input/Output: [(45 39 10 91) 10]
Test Case: 825 | Input/Output: [(74 74 28 -50) -50]
Test Case: 826 | Input/Output: [(-58 -67 -96 -99) -99]
Test Case: 827 | Input/Output: [(55 53 -48 -45) -48]
Test Case: 828 | Input/Output: [(76 36 22 -19) -19]
Test Case: 829 | Input/Output: [(19 60 19 -65) -65]
Test Case: 830 | Input/Output: [(82 56 -40 -21) -40]
Test Case: 831 | Input/Output: [(-49 -32 -51 40) -51]
Test Case: 832 | Input/Output: [(29 49 -73 -38) -73]
Test Case: 833 | Input/Output: [(50 25 -75 -22) -75]
Test Case: 834 | Input/Output: [(-90 -90 34 -57) -90]
Test Case: 835 | Input/Output: [(62 3 -35 16) -35]
Test Case: 836 | Input/Output: [(83 -20 -82 -60) -82]
Test Case: 837 | Input/Output: [(-92 68 -40 -15) -92]
Test Case: 838 | Input/Output: [(100 21 -77 -51) -77]
Test Case: 839 | Input/Output: [(7 5 65 67) 5]
Test Case: 840 | Input/Output: [(-60 40 -90 48) -90]
Test Case: 841 | Input/Output: [(76 50 74 -76) -76]
Test Case: 842 | Input/Output: [(-95 -88 25 -99) -99]
Test Case: 843 | Input/Output: [(-1 8 31 -18) -18]
Test Case: 844 | Input/Output: [(-80 -9 -13 77) -80]
Test Case: 845 | Input/Output: [(-46 4 -12 15) -46]
Test Case: 846 | Input/Output: [(7 77 -25 45) -25]
Test Case: 847 | Input/Output: [(-52 47 -19 2) -52]
Test Case: 848 | Input/Output: [(68 -70 -57 -9) -70]
Test Case: 849 | Input/Output: [(93 -54 64 19) -54]
Test Case: 850 | Input/Output: [(-70 -73 66 81) -73]
Test Case: 851 | Input/Output: [(97 69 -23 91) -23]
Test Case: 852 | Input/Output: [(-13 -3 -22 -65) -65]
Test Case: 853 | Input/Output: [(31 -93 -52 -50) -93]
Test Case: 854 | Input/Output: [(-4 55 54 9) -4]
Test Case: 855 | Input/Output: [(22 59 -78 9) -78]
Test Case: 856 | Input/Output: [(44 47 93 21) 21]
Test Case: 857 | Input/Output: [(72 -67 75 30) -67]
Test Case: 858 | Input/Output: [(-21 -94 3 65) -94]
Test Case: 859 | Input/Output: [(74 -68 67 -34) -68]
Test Case: 860 | Input/Output: [(46 -41 -9 -21) -41]
Test Case: 861 | Input/Output: [(-21 -62 5 -100) -100]
Test Case: 862 | Input/Output: [(83 78 10 -90) -90]
Test Case: 863 | Input/Output: [(-77 48 -56 73) -77]
Test Case: 864 | Input/Output: [(48 -40 44 -1) -40]
Test Case: 865 | Input/Output: [(-30 -34 94 -86) -86]
Test Case: 866 | Input/Output: [(-91 5 -64 53) -91]
Test Case: 867 | Input/Output: [(-6 -4 18 16) -6]
Test Case: 868 | Input/Output: [(39 -4 18 70) -4]
Test Case: 869 | Input/Output: [(-31 100 27 -50) -50]
Test Case: 870 | Input/Output: [(92 -70 -40 55) -70]
Test Case: 871 | Input/Output: [(-91 -34 -43 -70) -91]
Test Case: 872 | Input/Output: [(13 -5 -79 -45) -79]
Test Case: 873 | Input/Output: [(29 38 32 56) 29]
Test Case: 874 | Input/Output: [(38 -81 -88 -75) -88]
Test Case: 875 | Input/Output: [(-86 -68 -81 -85) -86]
Test Case: 876 | Input/Output: [(62 -10 -69 47) -69]
Test Case: 877 | Input/Output: [(-89 -47 -4 -79) -89]
Test Case: 878 | Input/Output: [(-87 -23 20 91) -87]
Test Case: 879 | Input/Output: [(-77 -28 -44 81) -77]
Test Case: 880 | Input/Output: [(37 88 -86 100) -86]
Test Case: 881 | Input/Output: [(-47 -91 -57 37) -91]
Test Case: 882 | Input/Output: [(-89 -14 -22 -46) -89]
Test Case: 883 | Input/Output: [(-37 17 10 20) -37]
Test Case: 884 | Input/Output: [(-52 86 -12 21) -52]
Test Case: 885 | Input/Output: [(-19 -69 -44 22) -69]
Test Case: 886 | Input/Output: [(-48 -35 6 69) -48]
Test Case: 887 | Input/Output: [(-51 73 -4 -85) -85]
Test Case: 888 | Input/Output: [(55 -8 -56 -76) -76]
Test Case: 889 | Input/Output: [(-37 16 59 100) -37]
Test Case: 890 | Input/Output: [(56 44 -69 -35) -69]
Test Case: 891 | Input/Output: [(-89 27 -5 -50) -89]
Test Case: 892 | Input/Output: [(-22 -58 81 32) -58]
Test Case: 893 | Input/Output: [(-22 4 4 44) -22]
Test Case: 894 | Input/Output: [(8 28 33 5) 5]
Test Case: 895 | Input/Output: [(26 57 37 68) 26]
Test Case: 896 | Input/Output: [(97 27 -43 -54) -54]
Test Case: 897 | Input/Output: [(-29 -2 -19 65) -29]
Test Case: 898 | Input/Output: [(84 -87 10 88) -87]
Test Case: 899 | Input/Output: [(9 -33 -83 -50) -83]
Test Case: 900 | Input/Output: [(-65 43 -14 -51) -65]
Test Case: 901 | Input/Output: [(52 87 -67 -77) -77]
Test Case: 902 | Input/Output: [(-22 42 -54 45) -54]
Test Case: 903 | Input/Output: [(97 -27 11 55) -27]
Test Case: 904 | Input/Output: [(-68 73 -61 12) -68]
Test Case: 905 | Input/Output: [(41 14 -48 2) -48]
Test Case: 906 | Input/Output: [(22 23 37 -2) -2]
Test Case: 907 | Input/Output: [(-26 -47 76 34) -47]
Test Case: 908 | Input/Output: [(70 64 3 -4) -4]
Test Case: 909 | Input/Output: [(-38 -92 -18 65) -92]
Test Case: 910 | Input/Output: [(-67 -39 -48 3) -67]
Test Case: 911 | Input/Output: [(-88 -99 76 -80) -99]
Test Case: 912 | Input/Output: [(45 79 -15 -23) -23]
Test Case: 913 | Input/Output: [(38 -4 -91 -21) -91]
Test Case: 914 | Input/Output: [(-57 9 100 73) -57]
Test Case: 915 | Input/Output: [(-37 65 1 93) -37]
Test Case: 916 | Input/Output: [(-13 -96 -28 -64) -96]
Test Case: 917 | Input/Output: [(-100 -2 32 65) -100]
Test Case: 918 | Input/Output: [(-7 54 -76 38) -76]
Test Case: 919 | Input/Output: [(-57 38 23 66) -57]
Test Case: 920 | Input/Output: [(13 -30 89 57) -30]
Test Case: 921 | Input/Output: [(93 -64 -32 69) -64]
Test Case: 922 | Input/Output: [(-64 -88 38 -34) -88]
Test Case: 923 | Input/Output: [(-86 -67 57 -84) -86]
Test Case: 924 | Input/Output: [(80 67 -51 74) -51]
Test Case: 925 | Input/Output: [(-22 -73 -44 -53) -73]
Test Case: 926 | Input/Output: [(-88 -33 4 85) -88]
Test Case: 927 | Input/Output: [(-83 83 63 -37) -83]
Test Case: 928 | Input/Output: [(89 100 63 -55) -55]
Test Case: 929 | Input/Output: [(-45 -1 -47 -23) -47]
Test Case: 930 | Input/Output: [(40 6 50 31) 6]
Test Case: 931 | Input/Output: [(-23 45 -26 -61) -61]
Test Case: 932 | Input/Output: [(-75 92 -37 81) -75]
Test Case: 933 | Input/Output: [(37 21 -17 -46) -46]
Test Case: 934 | Input/Output: [(-46 -66 -67 17) -67]
Test Case: 935 | Input/Output: [(56 -36 -76 -84) -84]
Test Case: 936 | Input/Output: [(-89 -56 95 -88) -89]
Test Case: 937 | Input/Output: [(-69 -72 44 -47) -72]
Test Case: 938 | Input/Output: [(-74 73 66 82) -74]
Test Case: 939 | Input/Output: [(-59 -41 -48 -10) -59]
Test Case: 940 | Input/Output: [(87 -28 33 -13) -28]
Test Case: 941 | Input/Output: [(-63 -11 47 32) -63]
Test Case: 942 | Input/Output: [(-81 19 -88 58) -88]
Test Case: 943 | Input/Output: [(92 41 3 95) 3]
Test Case: 944 | Input/Output: [(83 90 -10 63) -10]
Test Case: 945 | Input/Output: [(-54 -21 19 -54) -54]
Test Case: 946 | Input/Output: [(13 62 -15 80) -15]
Test Case: 947 | Input/Output: [(-20 5 62 -21) -21]
Test Case: 948 | Input/Output: [(6 92 -84 89) -84]
Test Case: 949 | Input/Output: [(78 -54 -68 -95) -95]
Test Case: 950 | Input/Output: [(74 13 60 45) 13]
Test Case: 951 | Input/Output: [(-16 31 -23 2) -23]
Test Case: 952 | Input/Output: [(-82 72 -64 3) -82]
Test Case: 953 | Input/Output: [(-46 -28 -36 60) -46]
Test Case: 954 | Input/Output: [(27 30 39 -8) -8]
Test Case: 955 | Input/Output: [(-79 -60 -47 87) -79]
Test Case: 956 | Input/Output: [(-57 49 52 -55) -57]
Test Case: 957 | Input/Output: [(-46 -67 -51 -89) -89]
Test Case: 958 | Input/Output: [(2 0 89 65) 0]
Test Case: 959 | Input/Output: [(68 -8 -9 87) -9]
Test Case: 960 | Input/Output: [(-56 41 95 -67) -67]
Test Case: 961 | Input/Output: [(-76 -7 1 1) -76]
Test Case: 962 | Input/Output: [(-50 -100 65 -17) -100]
Test Case: 963 | Input/Output: [(-60 79 15 2) -60]
Test Case: 964 | Input/Output: [(37 37 -74 88) -74]
Test Case: 965 | Input/Output: [(-60 -35 -81 68) -81]
Test Case: 966 | Input/Output: [(-48 -29 51 -74) -74]
Test Case: 967 | Input/Output: [(-59 77 -97 85) -97]
Test Case: 968 | Input/Output: [(94 -97 -65 -53) -97]
Test Case: 969 | Input/Output: [(-79 -40 25 -72) -79]
Test Case: 970 | Input/Output: [(93 84 25 83) 25]
Test Case: 971 | Input/Output: [(83 -61 77 89) -61]
Test Case: 972 | Input/Output: [(-20 -43 4 -95) -95]
Test Case: 973 | Input/Output: [(32 -34 47 -73) -73]
Test Case: 974 | Input/Output: [(-67 56 -32 34) -67]
Test Case: 975 | Input/Output: [(-4 -72 26 -43) -72]
Test Case: 976 | Input/Output: [(-100 41 -48 93) -100]
Test Case: 977 | Input/Output: [(-41 73 22 85) -41]
Test Case: 978 | Input/Output: [(90 90 -14 -52) -52]
Test Case: 979 | Input/Output: [(43 5 -6 62) -6]
Test Case: 980 | Input/Output: [(-73 -52 -72 -67) -73]
Test Case: 981 | Input/Output: [(-92 80 -60 -76) -92]
Test Case: 982 | Input/Output: [(88 -33 -100 -17) -100]
Test Case: 983 | Input/Output: [(-46 -32 -100 71) -100]
Test Case: 984 | Input/Output: [(-30 -21 -28 -3) -30]
Test Case: 985 | Input/Output: [(-40 3 -77 83) -77]
Test Case: 986 | Input/Output: [(-99 -52 40 66) -99]
Test Case: 987 | Input/Output: [(-68 97 -32 49) -68]
Test Case: 988 | Input/Output: [(-8 -47 3 74) -47]
Test Case: 989 | Input/Output: [(73 33 68 -96) -96]
Test Case: 990 | Input/Output: [(67 77 13 -98) -98]
Test Case: 991 | Input/Output: [(-7 36 -9 20) -9]
Test Case: 992 | Input/Output: [(-14 45 65 66) -14]
Test Case: 993 | Input/Output: [(91 89 -30 44) -30]
Test Case: 994 | Input/Output: [(54 -5 82 81) -5]
Test Case: 995 | Input/Output: [(-1 -16 16 53) -16]
Test Case: 996 | Input/Output: [(-27 -38 41 -54) -54]
Test Case: 997 | Input/Output: [(12 26 -65 -85) -85]
Test Case: 998 | Input/Output: [(-90 93 37 -54) -90]
Test Case: 999 | Input/Output: [(57 -18 -51 33) -51]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = -12 -55 46 -7 -58 97 107 37 -119 9 16 -12 -65 88 -100 7
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-89 -75 -75 -75] -89] [[-6 -10 -6 -6] -10] [[-93 -93 -93 -43] -93] [[-2 -2 -2 -99] -99] [[-37 -68 -68 -68] -68] [[6 -57 -57 -57] -57] [[74 50 74 74] 50] [[-70 68 -70 -70] -70] [[-85 57 -85 -85] -85] [[-55 -43 -43 -43] -55] [(72 72 72 72) 72] [(-36 -36 -36 -36) -36] [(32 32 32 32) 32] [(-7 -7 -7 -7) -7] [(-95 -95 -95 -95) -95] [(26 100 78 78) 26] [(6 11 82 55) 6] [(54 66 14 61) 14] [(2 0 54 26) 0] [(99 91 17 57) 17] [(36 61 27 63) 27] [(25 70 90 41) 25] [(35 2 93 51) 2] [(43 23 79 47) 23] [(11 77 81 58) 11] [(90 86 33 34) 33] [(53 20 69 79) 20] [(15 7 90 10) 7] [(83 55 84 85) 55] [(36 100 41 77) 36] [(0 1 44 23) 0] [(24 62 63 19) 19] [(49 50 87 87) 49] [(34 56 90 63) 34] [(84 28 26 84) 26] [(17 91 66 91) 17] [(61 -30 20 62) -30] [(-30 78 -20 -23) -30] [(75 -32 -21 64) -32] [(97 -65 57 99) -65] [(-23 73 -79 -75) -79] [(-71 -27 48 -98) -98] [(-86 60 -19 2) -86] [(-14 98 60 -74) -74] [(34 -34 71 -51) -51] [(-1 -19 19 -40) -40] [(80 -52 15 -20) -52] [(84 -78 -18 -80) -80] [(40 -64 99 21) -64] [(60 55 23 -16) -16] [(-91 99 -19 -60) -91] [(-31 -9 -72 9) -72] [(-63 61 -81 -68) -81] [(90 -27 -58 17) -58] [(-9 -50 -35 62) -50] [(-51 -1 73 -3) -51] [(-10 36 -84 -90) -90] [(-70 55 87 63) -70] [(-48 63 -56 -9) -56] [(-57 -71 15 -14) -71] [(-2 6 -30 4) -30] [(-31 49 -16 -10) -31] [(19 -17 -8 12) -17] [(-65 7 -82 -16) -82] [(-29 -77 -35 39) -77] [(5 10 92 -45) -45] [(90 -84 -5 -89) -89] [(-66 -87 46 17) -87] [(-56 71 42 -83) -83] [(-17 12 93 19) -17] [(-59 -90 -28 -21) -90] [(77 54 -33 -17) -33] [(40 96 -2 -69) -69] [(-18 -58 18 -51) -58] [(19 -67 -1 -70) -70] [(68 -92 81 -20) -92] [(1 40 25 10) 1] [(69 -83 35 99) -83] [(85 -94 -22 99) -94] [(77 -86 -5 73) -86] [(-49 69 73 89) -49] [(33 16 -41 87) -41] [(-52 -23 58 75) -52] [(9 42 -67 -35) -67] [(-50 -1 -9 85) -50] [(38 -43 -94 89) -94] [(-3 -84 -95 -92) -95] [(42 -14 54 -86) -86] [(19 -73 19 10) -73] [(-26 48 -73 -5) -73] [(-42 -17 1 -77) -77] [(23 65 86 18) 18] [(20 28 48 20) 20] [(-79 52 6 -30) -79] [(86 -28 60 46) -28])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 82                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 54                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 90                 
Correct output: 2                   | Program output: 93                 
Correct output: 23                  | Program output: 79                 
Correct output: 11                  | Program output: 81                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 69                 
Correct output: 7                   | Program output: 90                 
Correct output: 55                  | Program output: 84                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 44                 
Correct output: 19                  | Program output: 63                 
Correct output: 49                  | Program output: 87                 
Correct output: 34                  | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: 20                 
Correct output: -30                 | Program output: -20                
Correct output: -32                 | Program output: -21                
Correct output: -65                 | Program output: 57                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: 48                 
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: 60                 
Correct output: -51                 | Program output: 71                 
Correct output: -40                 | Program output: 19                 
Correct output: -52                 | Program output: 15                 
Correct output: -80                 | Program output: -18                
Correct output: -64                 | Program output: 99                 
Correct output: -16                 | Program output: 23                 
Correct output: -91                 | Program output: -19                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -35                
Correct output: -51                 | Program output: 73                 
Correct output: -90                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: 15                 
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -35                
Correct output: -45                 | Program output: 92                 
Correct output: -89                 | Program output: -5                 
Correct output: -87                 | Program output: 46                 
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 93                 
Correct output: -90                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -2                 
Correct output: -58                 | Program output: 18                 
Correct output: -70                 | Program output: -1                 
Correct output: -92                 | Program output: 81                 
Correct output: 1                   | Program output: 25                 
Correct output: -83                 | Program output: 35                 
Correct output: -94                 | Program output: -22                
Correct output: -86                 | Program output: -5                 
Correct output: -49                 | Program output: 73                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: 54                 
Correct output: -73                 | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: 1                  
Correct output: 18                  | Program output: 86                 
Correct output: 20                  | Program output: 48                 
Correct output: -79                 | Program output: 6                  
Correct output: -28                 | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_935} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Lexicase best program: (integer_pop integer_mod in2 exec_rot (integer_max tagged_935 integer_yankdup exec_while (exec_noop boolean_not boolean_xor exec_while ()) boolean_swap boolean_dup_times print_integer exec_y_when_autoconstructing () exec_dup (integer_fromboolean integer_yankdup)) () ())
Lexicase best errors: [0 1 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_935} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Zero cases best program: (integer_pop integer_mod in2 exec_rot (integer_max tagged_935 integer_yankdup exec_while (exec_noop boolean_not boolean_xor exec_while ()) boolean_swap boolean_dup_times print_integer exec_y_when_autoconstructing () exec_dup (integer_fromboolean integer_yankdup)) () ())
Zero cases best errors: [0 1 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 3 7 3 13 6 3 6 13 5)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (4 3 7 3 13 6 3 6 13 5)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction -100} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_mult} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*times})
Best program: (exec_dup_times (exec_do*range (integer_add) boolean_frominteger boolean_swap) exec_swap (exec_do*while (exec_s () (exec_yankdup integer_rot boolean_and integer_sub boolean_eq) (in3) print_integer in2 integer_sub boolean_dup exec_when () boolean_swap integer_swap exec_y (boolean_stackdepth boolean_eq integer_shove boolean_flush exec_stackdepth in3 integer_lt integer_dec exec_do*while (boolean_yankdup) exec_k_when_autoconstructing (exec_dup_items boolean_eq -100 boolean_shove integer_gte) (integer_flush exec_dup (integer_shove exec_empty boolean_empty) exec_empty boolean_rot boolean_xor integer_mult) in2 in4) boolean_dup_times) integer_flush exec_k_when_autoconstructing (integer_lte integer_stackdepth exec_do*range (integer_yank boolean_xor exec_empty exec_do*times ())) ()) ())
Errors: [1 1 1 0 0 1 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 59
Size: 78
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 9.937
Median total errors in population: 10
Error averages by case: (0.996 0.997 0.993 0.997 0.987 0.994 0.997 0.994 0.987 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.502
Average program size in population (points): 69.559
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 462307
--- Timings ---
Current time: 1559582772166 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 31.9%
Fitness Testing:      1.5 seconds, 64.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 82                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 54                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 90                 
Correct output: 2                   | Program output: 93                 
Correct output: 23                  | Program output: 79                 
Correct output: 11                  | Program output: 81                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 69                 
Correct output: 7                   | Program output: 90                 
Correct output: 55                  | Program output: 84                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 44                 
Correct output: 19                  | Program output: 63                 
Correct output: 49                  | Program output: 87                 
Correct output: 34                  | Program output: 90                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: 20                 
Correct output: -30                 | Program output: -20                
Correct output: -32                 | Program output: 64                 
Correct output: -65                 | Program output: 57                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 2                  
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -20                
Correct output: -80                 | Program output: -18                
Correct output: -64                 | Program output: 99                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -19                
Correct output: -72                 | Program output: 9                  
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: 17                 
Correct output: -50                 | Program output: 62                 
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -84                
Correct output: -70                 | Program output: 87                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -14                
Correct output: -30                 | Program output: 4                  
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: 12                 
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: 39                 
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -5                 
Correct output: -87                 | Program output: 46                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 93                 
Correct output: -90                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -2                 
Correct output: -58                 | Program output: -51                
Correct output: -70                 | Program output: -1                 
Correct output: -92                 | Program output: -20                
Correct output: 1                   | Program output: 25                 
Correct output: -83                 | Program output: 35                 
Correct output: -94                 | Program output: 99                 
Correct output: -86                 | Program output: 73                 
Correct output: -49                 | Program output: 73                 
Correct output: -41                 | Program output: 87                 
Correct output: -52                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 89                 
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 19                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 86                 
Correct output: 20                  | Program output: 48                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: 60                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (in4 tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 in3 exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_min exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Lexicase best errors: [0 0 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 119
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (in4 tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 in3 exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_min exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Zero cases best errors: [0 0 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 119
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 269 367 757 270 119 270 366 271 770)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (133 269 367 757 270 119 270 366 271 770)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (in4 tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 in3 exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_min exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Errors: [0 0 1 0 0 1 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.408
Median total errors in population: 6
Error averages by case: (0.867 0.731 0.633 0.243 0.73 0.881 0.73 0.634 0.729 0.23)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.942
Average program size in population (points): 74.567
Average percent parens in population: 0.265
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.488
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.555
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1006184
--- Timings ---
Current time: 1559582775423 milliseconds
Total Time:           6.0 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.6 seconds, 43.7%
Fitness Testing:      2.3 seconds, 37.9%
Report:               1.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -37                
Correct output: -57                 | Program output: 6                  
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -55                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 54                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 99                 
Correct output: 27                  | Program output: 36                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 35                 
Correct output: 23                  | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 90                 
Correct output: 20                  | Program output: 53                 
Correct output: 7                   | Program output: 15                 
Correct output: 55                  | Program output: 83                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 24                 
Correct output: 49                  | Program output: 49                 
Correct output: 34                  | Program output: 34                 
Correct output: 26                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: -30                 | Program output: 61                 
Correct output: -30                 | Program output: -30                
Correct output: -32                 | Program output: 75                 
Correct output: -65                 | Program output: 97                 
Correct output: -79                 | Program output: -23                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -74                 | Program output: -14                
Correct output: -51                 | Program output: 34                 
Correct output: -40                 | Program output: -1                 
Correct output: -52                 | Program output: 80                 
Correct output: -80                 | Program output: 84                 
Correct output: -64                 | Program output: 40                 
Correct output: -16                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -31                
Correct output: -81                 | Program output: -63                
Correct output: -58                 | Program output: 90                 
Correct output: -50                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -48                
Correct output: -71                 | Program output: -57                
Correct output: -30                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -17                 | Program output: 19                 
Correct output: -82                 | Program output: -65                
Correct output: -77                 | Program output: -29                
Correct output: -45                 | Program output: 5                  
Correct output: -89                 | Program output: 90                 
Correct output: -87                 | Program output: -66                
Correct output: -83                 | Program output: -56                
Correct output: -17                 | Program output: -17                
Correct output: -90                 | Program output: -59                
Correct output: -33                 | Program output: 77                 
Correct output: -69                 | Program output: 40                 
Correct output: -58                 | Program output: -18                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: 69                 
Correct output: -94                 | Program output: 85                 
Correct output: -86                 | Program output: 77                 
Correct output: -49                 | Program output: -49                
Correct output: -41                 | Program output: 33                 
Correct output: -52                 | Program output: -52                
Correct output: -67                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 38                 
Correct output: -95                 | Program output: -3                 
Correct output: -86                 | Program output: 42                 
Correct output: -73                 | Program output: 19                 
Correct output: -73                 | Program output: -26                
Correct output: -77                 | Program output: -42                
Correct output: 18                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_92} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq})
Lexicase best program: (in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_mod integer_dec exec_s (integer_lt integer_yank boolean_flush exec_rot (exec_shove () exec_dup_items in1 integer_gte exec_if (print_integer) (boolean_or integer_lte exec_eq boolean_pop integer_yankdup integer_empty integer_dup_times integer_pop) exec_s (integer_empty exec_s (integer_shove) (exec_if (integer_pop integer_swap) (boolean_invert_second_then_and exec_do*times (integer_max integer_min boolean_dup_times) integer_sub exec_shove ()) exec_do*times (integer_sub boolean_invert_first_then_and boolean_yankdup exec_swap (boolean_swap) (exec_s (boolean_not exec_dup (in3 tagged_92) integer_gte) (boolean_shove integer_eq) ()))) ()) () ()) () ()) () ()))
Lexicase best errors: [1 1 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_92} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq})
Zero cases best program: (in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_mod integer_dec exec_s (integer_lt integer_yank boolean_flush exec_rot (exec_shove () exec_dup_items in1 integer_gte exec_if (print_integer) (boolean_or integer_lte exec_eq boolean_pop integer_yankdup integer_empty integer_dup_times integer_pop) exec_s (integer_empty exec_s (integer_shove) (exec_if (integer_pop integer_swap) (boolean_invert_second_then_and exec_do*times (integer_max integer_min boolean_dup_times) integer_sub exec_shove ()) exec_do*times (integer_sub boolean_invert_first_then_and boolean_yankdup exec_swap (boolean_swap) (exec_s (boolean_not exec_dup (in3 tagged_92) integer_gte) (boolean_shove integer_eq) ()))) ()) () ()) () ()) () ()))
Zero cases best errors: [1 1 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (555 41 91 42 89 319 228 41 94 91)
Population mean number of elite cases: 1.59
Count of perfect (error zero) individuals by case: (555 41 91 42 89 319 228 41 94 91)
Population mean number of perfect (error zero) cases: 1.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_920} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_while} {:close 2, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction in2} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction tagged_668})
Best program: (in1 integer_flush boolean_shove exec_eq boolean_xor integer_lte integer_gt integer_pop exec_pop (boolean_eq exec_shove (tagged_920 exec_do*range (exec_shove () print_integer exec_eq exec_while (boolean_pop)) exec_do*times (integer_add) boolean_dup_times print_boolean integer_div integer_stackdepth boolean_dup_times) in2) exec_dup_times (integer_eq exec_yankdup) exec_do*while () in1 exec_eq boolean_shove exec_rot () (integer_eq print_integer exec_do*count (exec_k (integer_stackdepth integer_empty exec_s (boolean_xor exec_yankdup) (exec_do*count (boolean_and exec_s_when_autoconstructing (boolean_yankdup tagged_668) () ())) ()) ())) ())
Errors: [1 1 0 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 48
Size: 70
Percent parens: 0.314
--- Population Statistics ---
Average total errors in population: 8.409
Median total errors in population: 9
Error averages by case: (0.445 0.959 0.909 0.958 0.911 0.681 0.772 0.959 0.906 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 75.302
Average program size in population (points): 100.007
Average percent parens in population: 0.253
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.3055
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1856752
--- Timings ---
Current time: 1559582779080 milliseconds
Total Time:          10.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.9 seconds, 49.0%
Fitness Testing:      3.3 seconds, 32.9%
Report:               1.7 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 628
Test mean error for best: 0.62800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -89                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -37                
Correct output: -57                 | Program output: 6                  
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -55                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 54                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 99                 
Correct output: 27                  | Program output: 36                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 35                 
Correct output: 23                  | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 90                 
Correct output: 20                  | Program output: 53                 
Correct output: 7                   | Program output: 15                 
Correct output: 55                  | Program output: 83                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 0                  
Correct output: 19                  | Program output: 24                 
Correct output: 49                  | Program output: 49                 
Correct output: 34                  | Program output: 34                 
Correct output: 26                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: -30                 | Program output: 61                 
Correct output: -30                 | Program output: -30                
Correct output: -32                 | Program output: 75                 
Correct output: -65                 | Program output: 97                 
Correct output: -79                 | Program output: -23                
Correct output: -98                 | Program output: -71                
Correct output: -86                 | Program output: -86                
Correct output: -74                 | Program output: -14                
Correct output: -51                 | Program output: 34                 
Correct output: -40                 | Program output: -1                 
Correct output: -52                 | Program output: 80                 
Correct output: -80                 | Program output: 84                 
Correct output: -64                 | Program output: 40                 
Correct output: -16                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -31                
Correct output: -81                 | Program output: -63                
Correct output: -58                 | Program output: 90                 
Correct output: -50                 | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -90                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -48                
Correct output: -71                 | Program output: -57                
Correct output: -30                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -17                 | Program output: 19                 
Correct output: -82                 | Program output: -65                
Correct output: -77                 | Program output: -29                
Correct output: -45                 | Program output: 5                  
Correct output: -89                 | Program output: 90                 
Correct output: -87                 | Program output: -66                
Correct output: -83                 | Program output: -56                
Correct output: -17                 | Program output: -17                
Correct output: -90                 | Program output: -59                
Correct output: -33                 | Program output: 77                 
Correct output: -69                 | Program output: 40                 
Correct output: -58                 | Program output: -18                
Correct output: -70                 | Program output: 19                 
Correct output: -92                 | Program output: 68                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: 69                 
Correct output: -94                 | Program output: 85                 
Correct output: -86                 | Program output: 77                 
Correct output: -49                 | Program output: -49                
Correct output: -41                 | Program output: 33                 
Correct output: -52                 | Program output: -52                
Correct output: -67                 | Program output: 9                  
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 38                 
Correct output: -95                 | Program output: -3                 
Correct output: -86                 | Program output: 42                 
Correct output: -73                 | Program output: 19                 
Correct output: -73                 | Program output: -26                
Correct output: -77                 | Program output: -42                
Correct output: 18                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: 86                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_92} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq})
Lexicase best program: (in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_gt integer_dec exec_s (integer_lt integer_yank boolean_flush integer_swap exec_shove () exec_dup_items in1 integer_gte exec_if (print_integer) (boolean_or integer_lte exec_eq boolean_pop boolean_invert_second_then_and integer_empty integer_dup_times integer_pop) exec_s (integer_empty exec_s (integer_shove) (exec_if (integer_pop integer_swap) (boolean_invert_second_then_and exec_do*times (integer_max integer_min boolean_dup_times) integer_sub exec_shove ()) exec_do*times (integer_sub boolean_invert_first_then_and boolean_yankdup exec_swap (boolean_swap) (exec_s (boolean_not exec_dup (in3 tagged_92) integer_gte) (boolean_shove integer_eq) ()))) ()) () ()) () ()))
Lexicase best errors: [1 0 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_s} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_sub} {:close 2, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction in3} {:close 1, :instruction tagged_92} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq})
Zero cases best program: (in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_gt integer_dec exec_s (integer_lt integer_yank boolean_flush integer_swap exec_shove () exec_dup_items in1 integer_gte exec_if (print_integer) (boolean_or integer_lte exec_eq boolean_pop boolean_invert_second_then_and integer_empty integer_dup_times integer_pop) exec_s (integer_empty exec_s (integer_shove) (exec_if (integer_pop integer_swap) (boolean_invert_second_then_and exec_do*times (integer_max integer_min boolean_dup_times) integer_sub exec_shove ()) exec_do*times (integer_sub boolean_invert_first_then_and boolean_yankdup exec_swap (boolean_swap) (exec_s (boolean_not exec_dup (in3 tagged_92) integer_gte) (boolean_shove integer_eq) ()))) ()) () ()) () ()))
Zero cases best errors: [1 0 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (98 821 10 403 402 99 319 401 402 317)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (98 821 10 403 402 99 319 401 402 317)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction tag_boolean_467} {:close 0, :instruction integer_max} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_325} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_eq} {:close 0, :instruction in3} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction 33} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (integer_min integer_dup_items exec_s (in1 integer_yank exec_do*while (tag_boolean_467 integer_max integer_div exec_rot (integer_eq integer_yankdup print_integer integer_max) (boolean_and exec_if (exec_do*range (integer_shove in3 exec_y_when_autoconstructing (integer_yankdup) integer_swap integer_sub exec_eq) integer_dup_items tag_integer_325 boolean_flush boolean_stackdepth) (exec_s (integer_lte) (exec_eq exec_eq) (in3 integer_mult) exec_eq) boolean_pop exec_yank exec_flush exec_dup_times (integer_add in1 integer_empty boolean_dup boolean_dup in3 integer_empty exec_s_when_autoconstructing (exec_dup_items boolean_empty 33 exec_when (integer_dup_items)) () ())) ())) () ()) ())
Errors: [1 0 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 56
Size: 79
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 6.728
Median total errors in population: 7
Error averages by case: (0.902 0.179 0.99 0.597 0.598 0.901 0.681 0.599 0.598 0.683)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.935
Average program size in population (points): 90.262
Average percent parens in population: 0.276
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.837
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 26
Genome diversity (% unique genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.006
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2576770
--- Timings ---
Current time: 1559582782496 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 53.4%
Fitness Testing:      4.1 seconds, 30.6%
Report:               2.0 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 55                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 26                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 2                   | Program output: 51                 
Correct output: 23                  | Program output: 47                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 69                 
Correct output: 7                   | Program output: 10                 
Correct output: 55                  | Program output: 84                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 49                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: 20                 
Correct output: -30                 | Program output: -23                
Correct output: -32                 | Program output: -21                
Correct output: -65                 | Program output: 57                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -64                 | Program output: 21                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -35                
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -14                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 17                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -90                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -58                 | Program output: -51                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -20                
Correct output: 1                   | Program output: 10                 
Correct output: -83                 | Program output: 35                 
Correct output: -94                 | Program output: -22                
Correct output: -86                 | Program output: -5                 
Correct output: -49                 | Program output: 73                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth integer_stackdepth) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 119
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth integer_stackdepth) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 119
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 293 295 395 296 177 295 688 392 295)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (177 293 295 395 296 177 295 688 392 295)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Errors: [1 0 0 1 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.697
Median total errors in population: 7
Error averages by case: (0.823 0.707 0.705 0.605 0.704 0.823 0.705 0.312 0.608 0.705)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.576
Average program size in population (points): 89.442
Average percent parens in population: 0.274
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.226
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3273946
--- Timings ---
Current time: 1559582785893 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.2 seconds, 55.6%
Fitness Testing:      4.8 seconds, 29.3%
Report:               2.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: 68                 
Correct output: -85                 | Program output: 57                 
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 100                
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 66                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 91                 
Correct output: 27                  | Program output: 61                 
Correct output: 25                  | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 77                 
Correct output: 33                  | Program output: 86                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 100                
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 62                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 28                 
Correct output: 17                  | Program output: 91                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: 78                 
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: 73                 
Correct output: -98                 | Program output: -27                
Correct output: -86                 | Program output: 60                 
Correct output: -74                 | Program output: 98                 
Correct output: -51                 | Program output: -34                
Correct output: -40                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: 55                 
Correct output: -91                 | Program output: 99                 
Correct output: -72                 | Program output: -9                 
Correct output: -81                 | Program output: 61                 
Correct output: -58                 | Program output: -27                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -1                 
Correct output: -90                 | Program output: 36                 
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: 63                 
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: 6                  
Correct output: -31                 | Program output: 49                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 7                  
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: 10                 
Correct output: -89                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 71                 
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: 54                 
Correct output: -69                 | Program output: 96                 
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 40                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: 16                 
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: 42                 
Correct output: -50                 | Program output: -1                 
Correct output: -94                 | Program output: -43                
Correct output: -95                 | Program output: -84                
Correct output: -86                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 48                 
Correct output: -77                 | Program output: -17                
Correct output: 18                  | Program output: 65                 
Correct output: 20                  | Program output: 28                 
Correct output: -79                 | Program output: 52                 
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_935} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction 15} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 3, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction 56} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_549} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not})
Lexicase best program: (integer_pop integer_mod in2 exec_rot (integer_max tagged_935 integer_yankdup exec_while (exec_noop in3 print_boolean) print_boolean boolean_pop in4 in3 exec_eq integer_shove integer_sub integer_sub integer_dup_items integer_shove) (print_integer) () boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush) integer_pop integer_mult) (print_integer) integer_min exec_y (integer_mod) exec_if () () exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank exec_do*times (boolean_pop in2 print_integer 15) boolean_dup_times integer_max boolean_shove)) (exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank))) integer_max exec_do*count (boolean_yank exec_dup (integer_sub exec_shove (56 exec_if () (boolean_swap integer_empty in3 exec_yankdup) integer_dup_items) exec_swap (integer_eq boolean_dup_items integer_add integer_div boolean_invert_first_then_and integer_eq tag_integer_549 exec_eq) (integer_mult in2 boolean_yankdup boolean_invert_second_then_and boolean_pop integer_fromboolean)) exec_stackdepth integer_div boolean_dup boolean_and exec_stackdepth) boolean_empty) boolean_pop boolean_rot boolean_not)
Lexicase best errors: [0 1 0 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 125
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_935} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction exec_if} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction 15} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 3, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_shove} {:close 0, :instruction 56} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction tag_integer_549} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_pop} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_and} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_not})
Zero cases best program: (integer_pop integer_mod in2 exec_rot (integer_max tagged_935 integer_yankdup exec_while (exec_noop in3 print_boolean) print_boolean boolean_pop in4 in3 exec_eq integer_shove integer_sub integer_sub integer_dup_items integer_shove) (print_integer) () boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush) integer_pop integer_mult) (print_integer) integer_min exec_y (integer_mod) exec_if () () exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank exec_do*times (boolean_pop in2 print_integer 15) boolean_dup_times integer_max boolean_shove)) (exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank))) integer_max exec_do*count (boolean_yank exec_dup (integer_sub exec_shove (56 exec_if () (boolean_swap integer_empty in3 exec_yankdup) integer_dup_items) exec_swap (integer_eq boolean_dup_items integer_add integer_div boolean_invert_first_then_and integer_eq tag_integer_549 exec_eq) (integer_mult in2 boolean_yankdup boolean_invert_second_then_and boolean_pop integer_fromboolean)) exec_stackdepth integer_div boolean_dup boolean_and exec_stackdepth) boolean_empty) boolean_pop boolean_rot boolean_not)
Zero cases best errors: [0 1 0 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 125
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 486 144 486 206 487 203 500 143 144)
Population mean number of elite cases: 2.94
Count of perfect (error zero) individuals by case: (144 486 144 486 206 487 203 500 143 144)
Population mean number of perfect (error zero) cases: 2.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction tagged_935} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_yankdup})
Best program: (integer_pop integer_mod in2 exec_rot (integer_max tagged_935 integer_yankdup exec_while (exec_noop boolean_not boolean_xor exec_while ()) boolean_swap boolean_dup_times print_integer exec_y_when_autoconstructing () exec_dup (integer_fromboolean integer_yankdup)) () ())
Errors: [0 1 0 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.057
Median total errors in population: 6
Error averages by case: (0.856 0.514 0.856 0.514 0.794 0.513 0.797 0.5 0.857 0.856)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 71.556
Average program size in population (points): 95.76
Average percent parens in population: 0.259
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.7219375
Median age in population: 7.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 4095027
--- Timings ---
Current time: 1559582789019 milliseconds
Total Time:          20.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        11.2 seconds, 55.9%
Fitness Testing:      5.7 seconds, 28.2%
Report:               3.1 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 429
Test mean error for best: 0.42900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -6                 
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 55                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 26                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 2                   | Program output: 51                 
Correct output: 23                  | Program output: 47                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 69                 
Correct output: 7                   | Program output: 10                 
Correct output: 55                  | Program output: 84                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 23                 
Correct output: 19                  | Program output: 19                 
Correct output: 49                  | Program output: 87                 
Correct output: 34                  | Program output: 63                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: 20                 
Correct output: -30                 | Program output: -23                
Correct output: -32                 | Program output: -21                
Correct output: -65                 | Program output: 57                 
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -20                
Correct output: -80                 | Program output: -80                
Correct output: -64                 | Program output: 21                 
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -35                
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 63                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -14                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -35                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: 17                 
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 19                 
Correct output: -90                 | Program output: -28                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -58                 | Program output: -51                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -20                
Correct output: 1                   | Program output: 10                 
Correct output: -83                 | Program output: 35                 
Correct output: -94                 | Program output: -22                
Correct output: -86                 | Program output: -5                 
Correct output: -49                 | Program output: 73                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: 58                 
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: 10                 
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: 46                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_gt) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_invert_first_then_and integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 119
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_gt} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_gt) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_invert_first_then_and integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 119
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (327 353 357 358 180 353 353 533 351 866)
Population mean number of elite cases: 4.03
Count of perfect (error zero) individuals by case: (327 353 357 358 180 353 353 533 351 866)
Population mean number of perfect (error zero) cases: 4.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (boolean_shove boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_and boolean_dup_items boolean_invert_first_then_and integer_lt exec_swap (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) (integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 boolean_dup) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 91
Size: 119
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 5.969
Median total errors in population: 7
Error averages by case: (0.673 0.647 0.643 0.642 0.82 0.647 0.647 0.467 0.649 0.134)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.032
Average program size in population (points): 88.754
Average percent parens in population: 0.262
Minimum age in population: 6.0
Maximum age in population: 10.96875
Average age in population: 9.2535
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.852
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4849605
--- Timings ---
Current time: 1559582792783 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.5 seconds, 57.9%
Fitness Testing:      6.4 seconds, 27.5%
Report:               3.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 04                 
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 74                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 26                 
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 54                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 99                 
Correct output: 27                  | Program output: 36                 
Correct output: 25                  | Program output: 25                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 43                 
Correct output: 11                  | Program output: 11                 
Correct output: 33                  | Program output: 90                 
Correct output: 20                  | Program output: 53                 
Correct output: 7                   | Program output: 15                 
Correct output: 55                  | Program output: 83                 
Correct output: 36                  | Program output: 36                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 24                 
Correct output: 49                  | Program output: 49                 
Correct output: 34                  | Program output: 34                 
Correct output: 26                  | Program output: 84                 
Correct output: 17                  | Program output: 17                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -30                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -23                
Correct output: -98                 | Program output: -27                
Correct output: -86                 | Program output: -86                
Correct output: -74                 | Program output: -14                
Correct output: -51                 | Program output: -34                
Correct output: -40                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: 60                 
Correct output: -91                 | Program output: -91                
Correct output: -72                 | Program output: -9                 
Correct output: -81                 | Program output: -63                
Correct output: -58                 | Program output: -27                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -1                 
Correct output: -90                 | Program output: -10                
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -48                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -26                
Correct output: -31                 | Program output: -31                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -657               
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: 5                  
Correct output: -89                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -56                
Correct output: -17                 | Program output: -17                
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: 77                 
Correct output: -69                 | Program output: 40                 
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: -49                
Correct output: -41                 | Program output: 33                 
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: 9                  
Correct output: -50                 | Program output: -1                 
Correct output: -94                 | Program output: -43                
Correct output: -95                 | Program output: -84                
Correct output: -86                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -26                
Correct output: -77                 | Program output: -17                
Correct output: 18                  | Program output: 23                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -79                
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction 15} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (integer_dup in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_mod integer_dec exec_s (integer_lt integer_yank boolean_flush exec_rot (exec_shove () print_boolean in1 in1 exec_if (print_integer) (boolean_rot) integer_dup_items) () (boolean_yankdup integer_shove exec_do*range (exec_dup_times (boolean_dup) integer_dup_times exec_swap (exec_k (boolean_pop exec_shove (exec_do*times (exec_empty integer_add integer_gt integer_div integer_yankdup in4 boolean_flush integer_dup_times boolean_frominteger integer_dup_times boolean_pop in2 print_integer 15) boolean_dup_times) integer_max boolean_shove) () exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())))) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 124
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction 15} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (integer_dup in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_mod integer_dec exec_s (integer_lt integer_yank boolean_flush exec_rot (exec_shove () print_boolean in1 in1 exec_if (print_integer) (boolean_rot) integer_dup_items) () (boolean_yankdup integer_shove exec_do*range (exec_dup_times (boolean_dup) integer_dup_times exec_swap (exec_k (boolean_pop exec_shove (exec_do*times (exec_empty integer_add integer_gt integer_div integer_yankdup in4 boolean_flush integer_dup_times boolean_frominteger integer_dup_times boolean_pop in2 print_integer 15) boolean_dup_times) integer_max boolean_shove) () exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())))) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 124
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (144 146 167 653 804 147 647 644 163 147)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (144 146 167 653 804 147 647 644 163 147)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction 15} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (integer_dup in1 boolean_frominteger integer_empty integer_lte boolean_yankdup exec_when (integer_dup_items integer_mod integer_dec exec_s (integer_lt integer_yank boolean_flush exec_rot (exec_shove () print_boolean in1 in1 exec_if (print_integer) (boolean_rot) integer_dup_items) () (boolean_yankdup integer_shove exec_do*range (exec_dup_times (boolean_dup) integer_dup_times exec_swap (exec_k (integer_lt exec_shove (exec_do*times (exec_empty integer_add integer_gt integer_div integer_yankdup in4 boolean_flush integer_dup_times boolean_frominteger integer_dup_times boolean_pop in2 print_integer 15) boolean_dup_times) integer_max boolean_shove) () exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())))) () ()))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 89
Size: 124
Percent parens: 0.282
--- Population Statistics ---
Average total errors in population: 6.338
Median total errors in population: 6
Error averages by case: (0.856 0.854 0.833 0.347 0.196 0.853 0.353 0.356 0.837 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 80.501
Average program size in population (points): 107.042
Average percent parens in population: 0.246
Minimum age in population: 8.1875
Maximum age in population: 12.546875
Average age in population: 10.90475
Median age in population: 10.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.877
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.008
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5941447
--- Timings ---
Current time: 1559582796815 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.5 seconds, 57.2%
Fitness Testing:      7.5 seconds, 27.7%
Report:               4.0 seconds, 14.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 77                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 62                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -20                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -27                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: 60                 
Correct output: -51                 | Program output: -34                
Correct output: -40                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: 23                 
Correct output: -91                 | Program output: -19                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -1                 
Correct output: -90                 | Program output: -84                
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: 10                 
Correct output: -89                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -2                 
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -17                
Correct output: 18                  | Program output: 65                 
Correct output: 20                  | Program output: 28                 
Correct output: -79                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 124
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 124
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (270 346 323 576 324 345 146 144 267 324)
Population mean number of elite cases: 3.07
Count of perfect (error zero) individuals by case: (270 346 323 576 324 345 146 144 267 324)
Population mean number of perfect (error zero) cases: 3.07
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_s} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop exec_s () (print_integer) (integer_dec exec_y (integer_mod) integer_dup_times)) exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove boolean_eq integer_stackdepth boolean_yank in4) in2) (exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()))))
Errors: [0 0 1 0 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 78
Size: 108
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.935
Median total errors in population: 6
Error averages by case: (0.73 0.654 0.677 0.424 0.676 0.655 0.854 0.856 0.733 0.676)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 87.967
Average program size in population (points): 120.299
Average percent parens in population: 0.267
Minimum age in population: 10.0
Maximum age in population: 14.0078125
Average age in population: 12.5561484375
Median age in population: 12.6640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.006
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 7144496
--- Timings ---
Current time: 1559582800391 milliseconds
Total Time:          31.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.5 seconds, 56.1%
Fitness Testing:      8.7 seconds, 28.0%
Report:               4.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -2                 
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 70                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 77                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 62                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -20                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -27                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: 60                 
Correct output: -51                 | Program output: -34                
Correct output: -40                 | Program output: -19                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -78                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: 23                 
Correct output: -91                 | Program output: -19                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -1                 
Correct output: -90                 | Program output: -84                
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: 10                 
Correct output: -89                 | Program output: -84                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: 42                 
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -2                 
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -67                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 25                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -14                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -17                
Correct output: 18                  | Program output: 65                 
Correct output: 20                  | Program output: 28                 
Correct output: -79                 | Program output: 6                  
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank})
Lexicase best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult print_integer) integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834) exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) () boolean_swap) (exec_while (boolean_swap exec_yankdup integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2 integer_dup_times) exec_do*count (exec_yank)) ()) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 123
Percent parens: 0.260
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_yank})
Zero cases best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult print_integer) integer_dec exec_y (integer_mod) integer_dup_times) exec_y_when_autoconstructing (tag_boolean_834) exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) () boolean_swap) (exec_while (boolean_swap exec_yankdup integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2 integer_dup_times) exec_do*count (exec_yank)) ()) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 123
Percent parens: 0.260
--- Lexicase Population Statistics ---
Count of elite individuals by case: (535 549 13 528 563 558 534 237 560 530)
Population mean number of elite cases: 4.61
Count of perfect (error zero) individuals by case: (535 549 13 528 563 558 534 237 560 530)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 2, :instruction boolean_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_do*count} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (integer_dup in1 boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank) exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte exec_dup_times (exec_do*count (exec_shove () exec_noop boolean_yank)) integer_max exec_do*count (boolean_yank) boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_flush) boolean_eq integer_stackdepth boolean_yank in4) (in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ()) ()) ()))
Errors: [0 0 1 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 91
Size: 125
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 5.393
Median total errors in population: 5
Error averages by case: (0.465 0.451 0.987 0.472 0.437 0.442 0.466 0.763 0.44 0.47)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.945
Average program size in population (points): 117.489
Average percent parens in population: 0.258
Minimum age in population: 11.15625
Maximum age in population: 15.49609375
Average age in population: 14.03716796875
Median age in population: 14.09765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 8281051
--- Timings ---
Current time: 1559582804281 milliseconds
Total Time:          34.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.6 seconds, 56.3%
Fitness Testing:      9.9 seconds, 28.3%
Report:               5.3 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 220
Test mean error for best: 0.22000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -23                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 114
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 114
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 130 640 776 91 131 891 771 639 96)
Population mean number of elite cases: 4.26
Count of perfect (error zero) individuals by case: (93 130 640 776 91 131 891 771 639 96)
Population mean number of perfect (error zero) cases: 4.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
Errors: [1 0 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 90
Size: 114
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 5.742
Median total errors in population: 5
Error averages by case: (0.907 0.87 0.36 0.224 0.909 0.869 0.109 0.229 0.361 0.904)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.829
Average program size in population (points): 116.541
Average percent parens in population: 0.254
Minimum age in population: 13.3515625
Maximum age in population: 17.267578125
Average age in population: 15.512560546875
Median age in population: 15.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 9351301
--- Timings ---
Current time: 1559582808112 milliseconds
Total Time:          38.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.6 seconds, 56.0%
Fitness Testing:     10.9 seconds, 28.3%
Report:               6.0 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -23                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: -28                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Lexicase best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and exec_swap (exec_k (exec_dup_times (boolean_dup) integer_dup_items) () boolean_yankdup integer_shove exec_do*range (exec_dup_times (boolean_dup) integer_dup_times exec_swap (exec_k (integer_lt exec_shove (exec_do*times (exec_empty integer_add integer_gt integer_div integer_yankdup in4 boolean_flush integer_dup_times boolean_frominteger integer_dup_times boolean_pop boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())) ()) ())) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 121
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 2, :instruction integer_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_yank} {:close 1, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction in2} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Zero cases best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq exec_flush exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and exec_swap (exec_k (exec_dup_times (boolean_dup) integer_dup_items) () boolean_yankdup integer_shove exec_do*range (exec_dup_times (boolean_dup) integer_dup_times exec_swap (exec_k (integer_lt exec_shove (exec_do*times (exec_empty integer_add integer_gt integer_div integer_yankdup in4 boolean_flush integer_dup_times boolean_frominteger integer_dup_times boolean_pop boolean_yankdup integer_sub exec_eq exec_if (boolean_dup_times) (boolean_swap) exec_while (boolean_swap integer_min integer_min integer_shove integer_inc integer_empty) exec_rot (boolean_swap boolean_dup_times) (integer_flush) (boolean_eq integer_stackdepth boolean_yank in4) in2) exec_k_when_autoconstructing (exec_k_when_autoconstructing (integer_swap exec_dup (in2) integer_dup_times) (exec_do*count (exec_yank))) ())) ()) ())) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 121
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (569 559 569 559 562 570 814 591 567 837)
Population mean number of elite cases: 6.20
Count of perfect (error zero) individuals by case: (569 559 569 559 562 570 814 591 567 837)
Population mean number of perfect (error zero) cases: 6.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_boolean_721} {:close 0, :instruction in3} {:close 1, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_add} {:close 0, :instruction print_newline} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_mult} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction tag_boolean_834} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction tag_boolean_335} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_yank})
Best program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 90
Size: 114
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 3.803
Median total errors in population: 0
Error averages by case: (0.431 0.441 0.431 0.441 0.438 0.43 0.186 0.409 0.433 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 88.257
Average program size in population (points): 115.322
Average percent parens in population: 0.234
Minimum age in population: 14.453125
Maximum age in population: 18.826171875
Average age in population: 16.3060458984375
Median age in population: 16.42578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 184
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.01
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 10421127
--- Timings ---
Current time: 1559582811997 milliseconds
Total Time:          42.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.7 seconds, 55.7%
Fitness Testing:     12.0 seconds, 28.3%
Report:               6.7 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 11
Successful program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 114


Auto-simplifying with starting size: 114
step: 0
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 500
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 1000
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 1500
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 2000
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 2500
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 3000
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 3500
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 4000
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 4500
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

step: 5000
program: (boolean_invert_second_then_and exec_shove () integer_dup_times exec_k_when_autoconstructing (boolean_frominteger tag_boolean_721 in3 print_boolean) (print_boolean boolean_pop in4 integer_min exec_eq integer_add print_newline integer_yank) boolean_pop in2 integer_min exec_eq integer_add print_newline integer_yank exec_s_when_autoconstructing () (exec_eq boolean_dup_times exec_eq integer_shove) (print_integer) boolean_swap boolean_dup_items boolean_invert_first_then_and integer_lt exec_while (boolean_not boolean_swap boolean_swap boolean_flush integer_dup exec_y_when_autoconstructing (boolean_flush integer_pop integer_mult) print_integer) integer_dec exec_y (integer_mod) integer_dup_times exec_y_when_autoconstructing (tag_boolean_834 exec_s_when_autoconstructing () (exec_do*count (boolean_dup_items integer_dec exec_stackdepth boolean_yank) exec_do*times (tag_boolean_335 integer_mod) integer_lte integer_fromboolean exec_dup_items boolean_empty integer_empty exec_empty integer_dup integer_rot integer_stackdepth print_exec (print_integer boolean_flush exec_eq integer_dup_items boolean_dup_times) boolean_swap) (exec_while (boolean_swap integer_min integer_min integer_shove exec_swap (integer_empty) (exec_rot (boolean_swap boolean_dup) (integer_flush) (boolean_eq integer_stackdepth exec_do*count (exec_yank)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 114

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 220
Test mean error for best: 0.22000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 1
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 1
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 1
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 1
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 0
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 1
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -89                 | Program output: -75                
Correct output: -10                 | Program output: -10                
Correct output: -93                 | Program output: -93                
Correct output: -99                 | Program output: -99                
Correct output: -68                 | Program output: -68                
Correct output: -57                 | Program output: -57                
Correct output: 50                  | Program output: 50                 
Correct output: -70                 | Program output: -70                
Correct output: -85                 | Program output: -85                
Correct output: -55                 | Program output: -43                
Correct output: 72                  | Program output: 72                 
Correct output: -36                 | Program output: -36                
Correct output: 32                  | Program output: 32                 
Correct output: -7                  | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: 26                  | Program output: 78                 
Correct output: 6                   | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 25                  | Program output: 41                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 11                  | Program output: 58                 
Correct output: 33                  | Program output: 33                 
Correct output: 20                  | Program output: 20                 
Correct output: 7                   | Program output: 7                  
Correct output: 55                  | Program output: 55                 
Correct output: 36                  | Program output: 41                 
Correct output: 0                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 49                  | Program output: 50                 
Correct output: 34                  | Program output: 56                 
Correct output: 26                  | Program output: 26                 
Correct output: 17                  | Program output: 66                 
Correct output: -30                 | Program output: -30                
Correct output: -30                 | Program output: -23                
Correct output: -32                 | Program output: -32                
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -19                
Correct output: -74                 | Program output: -74                
Correct output: -51                 | Program output: -51                
Correct output: -40                 | Program output: -40                
Correct output: -52                 | Program output: -52                
Correct output: -80                 | Program output: -80                
Correct output: -64                 | Program output: -64                
Correct output: -16                 | Program output: -16                
Correct output: -91                 | Program output: -60                
Correct output: -72                 | Program output: -72                
Correct output: -81                 | Program output: -81                
Correct output: -58                 | Program output: -58                
Correct output: -50                 | Program output: -50                
Correct output: -51                 | Program output: -3                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 55                 
Correct output: -56                 | Program output: -56                
Correct output: -71                 | Program output: -71                
Correct output: -30                 | Program output: -30                
Correct output: -31                 | Program output: -16                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -77                 | Program output: -77                
Correct output: -45                 | Program output: -45                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -83                 | Program output: -83                
Correct output: -17                 | Program output: 12                 
Correct output: -90                 | Program output: -90                
Correct output: -33                 | Program output: -33                
Correct output: -69                 | Program output: -69                
Correct output: -58                 | Program output: -58                
Correct output: -70                 | Program output: -70                
Correct output: -92                 | Program output: -92                
Correct output: 1                   | Program output: 10                 
Correct output: -83                 | Program output: -83                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -49                 | Program output: 69                 
Correct output: -41                 | Program output: -41                
Correct output: -52                 | Program output: -23                
Correct output: -67                 | Program output: -67                
Correct output: -50                 | Program output: -9                 
Correct output: -94                 | Program output: -94                
Correct output: -95                 | Program output: -95                
Correct output: -86                 | Program output: -86                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: 18                  | Program output: 18                 
Correct output: 20                  | Program output: 20                 
Correct output: -79                 | Program output: -30                
Correct output: -28                 | Program output: -28                
;;******************************
