Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-35 -33 -33 -33] -35] [[47 -25 -25 -25] -25] [[-16 -16 -16 84] -16] [[-48 -1 -1 -1] -48] [[-64 -64 -49 -64] -64] [[-75 -88 -75 -75] -88] [[12 -9 -9 -9] -9] [[-22 24 24 24] -22] [[-89 -29 -89 -89] -89] [[48 -3 -3 -3] -3] [(92 92 92 92) 92] [(90 90 90 90) 90] [(-63 -63 -63 -63) -63] [(83 83 83 83) 83] [(-93 -93 -93 -93) -93] [(31 9 57 51) 9] [(20 46 93 8) 8] [(61 23 6 36) 6] [(69 0 4 57) 0] [(66 90 78 9) 9] [(33 50 89 43) 33] [(74 11 24 56) 11] [(11 96 94 81) 11] [(50 97 43 29) 29] [(27 2 1 53) 1] [(45 71 56 86) 45] [(67 40 89 79) 40] [(71 87 60 32) 32] [(10 41 60 32) 10] [(31 6 38 32) 6] [(38 93 59 55) 38] [(4 63 92 43) 4] [(86 17 3 88) 3] [(12 20 50 25) 12] [(19 0 55 94) 0] [(67 -23 57 76) -23] [(-20 -68 86 89) -68] [(-98 80 16 -35) -98] [(7 -40 -32 -63) -63] [(-43 -42 17 -90) -90] [(13 60 90 75) 13] [(71 47 -54 -63) -63] [(34 72 35 -66) -66] [(15 -44 -80 -33) -80] [(10 -98 69 -63) -98] [(-41 -50 -45 -66) -66] [(3 -29 -91 -57) -91] [(39 -89 39 18) -89] [(-3 -64 -99 -43) -99] [(21 21 16 15) 15] [(-48 -62 -59 -90) -90] [(-11 -54 -82 88) -82] [(18 55 13 -29) -29] [(-93 -97 -71 -29) -97] [(81 -9 82 14) -9] [(-45 -51 15 -19) -51] [(-21 -59 -3 65) -59] [(32 -49 21 56) -49] [(-5 -40 -26 77) -40] [(-1 -86 -17 -59) -86] [(8 43 -5 -69) -69] [(85 -9 -14 47) -14] [(-62 50 19 96) -62] [(-74 61 -55 -72) -74] [(-20 26 -43 46) -43] [(-89 -48 16 43) -89] [(36 27 74 22) 22] [(-44 -16 -27 -34) -44] [(-98 -19 -82 -75) -98] [(-23 43 -86 26) -86] [(21 59 -42 65) -42] [(-24 27 92 -66) -66] [(23 -17 -94 8) -94] [(-84 -48 78 -75) -84] [(98 -85 73 99) -85] [(19 -53 -89 79) -89] [(15 55 97 54) 15] [(94 -76 -93 7) -93] [(-73 89 42 -70) -73] [(23 -50 23 -73) -73] [(60 100 -16 -99) -99] [(-29 -89 -55 -2) -89] [(-84 -45 -70 -49) -84] [(37 -17 -4 82) -17] [(78 50 80 37) 37] [(74 85 6 -53) -53] [(-68 66 -20 -33) -68] [(66 -58 -36 73) -58] [(14 47 25 16) 14] [(-77 77 -61 -44) -77] [(81 -28 -33 43) -33] [(32 -96 -59 -51) -96] [(7 -12 43 -33) -33] [(8 -90 -77 -50) -90] [(-46 86 -24 8) -46])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-35 -33 -33 -33] -35]
Train Case:   6 | Input/Output: [[47 -25 -25 -25] -25]
Train Case:   7 | Input/Output: [[-16 -16 -16 84] -16]
Train Case:   8 | Input/Output: [[-48 -1 -1 -1] -48]
Train Case:   9 | Input/Output: [[-64 -64 -49 -64] -64]
Train Case:  10 | Input/Output: [[-75 -88 -75 -75] -88]
Train Case:  11 | Input/Output: [[12 -9 -9 -9] -9]
Train Case:  12 | Input/Output: [[-22 24 24 24] -22]
Train Case:  13 | Input/Output: [[-89 -29 -89 -89] -89]
Train Case:  14 | Input/Output: [[48 -3 -3 -3] -3]
Train Case:  15 | Input/Output: [(92 92 92 92) 92]
Train Case:  16 | Input/Output: [(90 90 90 90) 90]
Train Case:  17 | Input/Output: [(-63 -63 -63 -63) -63]
Train Case:  18 | Input/Output: [(83 83 83 83) 83]
Train Case:  19 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  20 | Input/Output: [(31 9 57 51) 9]
Train Case:  21 | Input/Output: [(20 46 93 8) 8]
Train Case:  22 | Input/Output: [(61 23 6 36) 6]
Train Case:  23 | Input/Output: [(69 0 4 57) 0]
Train Case:  24 | Input/Output: [(66 90 78 9) 9]
Train Case:  25 | Input/Output: [(33 50 89 43) 33]
Train Case:  26 | Input/Output: [(74 11 24 56) 11]
Train Case:  27 | Input/Output: [(11 96 94 81) 11]
Train Case:  28 | Input/Output: [(50 97 43 29) 29]
Train Case:  29 | Input/Output: [(27 2 1 53) 1]
Train Case:  30 | Input/Output: [(45 71 56 86) 45]
Train Case:  31 | Input/Output: [(67 40 89 79) 40]
Train Case:  32 | Input/Output: [(71 87 60 32) 32]
Train Case:  33 | Input/Output: [(10 41 60 32) 10]
Train Case:  34 | Input/Output: [(31 6 38 32) 6]
Train Case:  35 | Input/Output: [(38 93 59 55) 38]
Train Case:  36 | Input/Output: [(4 63 92 43) 4]
Train Case:  37 | Input/Output: [(86 17 3 88) 3]
Train Case:  38 | Input/Output: [(12 20 50 25) 12]
Train Case:  39 | Input/Output: [(19 0 55 94) 0]
Train Case:  40 | Input/Output: [(67 -23 57 76) -23]
Train Case:  41 | Input/Output: [(-20 -68 86 89) -68]
Train Case:  42 | Input/Output: [(-98 80 16 -35) -98]
Train Case:  43 | Input/Output: [(7 -40 -32 -63) -63]
Train Case:  44 | Input/Output: [(-43 -42 17 -90) -90]
Train Case:  45 | Input/Output: [(13 60 90 75) 13]
Train Case:  46 | Input/Output: [(71 47 -54 -63) -63]
Train Case:  47 | Input/Output: [(34 72 35 -66) -66]
Train Case:  48 | Input/Output: [(15 -44 -80 -33) -80]
Train Case:  49 | Input/Output: [(10 -98 69 -63) -98]
Train Case:  50 | Input/Output: [(-41 -50 -45 -66) -66]
Train Case:  51 | Input/Output: [(3 -29 -91 -57) -91]
Train Case:  52 | Input/Output: [(39 -89 39 18) -89]
Train Case:  53 | Input/Output: [(-3 -64 -99 -43) -99]
Train Case:  54 | Input/Output: [(21 21 16 15) 15]
Train Case:  55 | Input/Output: [(-48 -62 -59 -90) -90]
Train Case:  56 | Input/Output: [(-11 -54 -82 88) -82]
Train Case:  57 | Input/Output: [(18 55 13 -29) -29]
Train Case:  58 | Input/Output: [(-93 -97 -71 -29) -97]
Train Case:  59 | Input/Output: [(81 -9 82 14) -9]
Train Case:  60 | Input/Output: [(-45 -51 15 -19) -51]
Train Case:  61 | Input/Output: [(-21 -59 -3 65) -59]
Train Case:  62 | Input/Output: [(32 -49 21 56) -49]
Train Case:  63 | Input/Output: [(-5 -40 -26 77) -40]
Train Case:  64 | Input/Output: [(-1 -86 -17 -59) -86]
Train Case:  65 | Input/Output: [(8 43 -5 -69) -69]
Train Case:  66 | Input/Output: [(85 -9 -14 47) -14]
Train Case:  67 | Input/Output: [(-62 50 19 96) -62]
Train Case:  68 | Input/Output: [(-74 61 -55 -72) -74]
Train Case:  69 | Input/Output: [(-20 26 -43 46) -43]
Train Case:  70 | Input/Output: [(-89 -48 16 43) -89]
Train Case:  71 | Input/Output: [(36 27 74 22) 22]
Train Case:  72 | Input/Output: [(-44 -16 -27 -34) -44]
Train Case:  73 | Input/Output: [(-98 -19 -82 -75) -98]
Train Case:  74 | Input/Output: [(-23 43 -86 26) -86]
Train Case:  75 | Input/Output: [(21 59 -42 65) -42]
Train Case:  76 | Input/Output: [(-24 27 92 -66) -66]
Train Case:  77 | Input/Output: [(23 -17 -94 8) -94]
Train Case:  78 | Input/Output: [(-84 -48 78 -75) -84]
Train Case:  79 | Input/Output: [(98 -85 73 99) -85]
Train Case:  80 | Input/Output: [(19 -53 -89 79) -89]
Train Case:  81 | Input/Output: [(15 55 97 54) 15]
Train Case:  82 | Input/Output: [(94 -76 -93 7) -93]
Train Case:  83 | Input/Output: [(-73 89 42 -70) -73]
Train Case:  84 | Input/Output: [(23 -50 23 -73) -73]
Train Case:  85 | Input/Output: [(60 100 -16 -99) -99]
Train Case:  86 | Input/Output: [(-29 -89 -55 -2) -89]
Train Case:  87 | Input/Output: [(-84 -45 -70 -49) -84]
Train Case:  88 | Input/Output: [(37 -17 -4 82) -17]
Train Case:  89 | Input/Output: [(78 50 80 37) 37]
Train Case:  90 | Input/Output: [(74 85 6 -53) -53]
Train Case:  91 | Input/Output: [(-68 66 -20 -33) -68]
Train Case:  92 | Input/Output: [(66 -58 -36 73) -58]
Train Case:  93 | Input/Output: [(14 47 25 16) 14]
Train Case:  94 | Input/Output: [(-77 77 -61 -44) -77]
Train Case:  95 | Input/Output: [(81 -28 -33 43) -33]
Train Case:  96 | Input/Output: [(32 -96 -59 -51) -96]
Train Case:  97 | Input/Output: [(7 -12 43 -33) -33]
Train Case:  98 | Input/Output: [(8 -90 -77 -50) -90]
Train Case:  99 | Input/Output: [(-46 86 -24 8) -46]
Test Case:   0 | Input/Output: [[-92 -10 -10 -10] -92]
Test Case:   1 | Input/Output: [[94 94 -1 94] -1]
Test Case:   2 | Input/Output: [[-7 -7 -7 -97] -97]
Test Case:   3 | Input/Output: [[-29 53 -29 -29] -29]
Test Case:   4 | Input/Output: [[63 -56 -56 -56] -56]
Test Case:   5 | Input/Output: [[-100 -100 -100 98] -100]
Test Case:   6 | Input/Output: [[-88 77 -88 -88] -88]
Test Case:   7 | Input/Output: [[33 33 66 33] 33]
Test Case:   8 | Input/Output: [[-22 -37 -37 -37] -37]
Test Case:   9 | Input/Output: [[43 -47 -47 -47] -47]
Test Case:  10 | Input/Output: [[-63 -63 41 -63] -63]
Test Case:  11 | Input/Output: [[7 48 7 7] 7]
Test Case:  12 | Input/Output: [[-7 -54 -7 -7] -54]
Test Case:  13 | Input/Output: [[-65 -65 -91 -65] -91]
Test Case:  14 | Input/Output: [[-5 -5 -43 -5] -43]
Test Case:  15 | Input/Output: [[-75 -75 82 -75] -75]
Test Case:  16 | Input/Output: [[26 -92 -92 -92] -92]
Test Case:  17 | Input/Output: [[-8 79 79 79] -8]
Test Case:  18 | Input/Output: [[42 42 -35 42] -35]
Test Case:  19 | Input/Output: [[-11 96 -11 -11] -11]
Test Case:  20 | Input/Output: [[93 78 78 78] 78]
Test Case:  21 | Input/Output: [[-2 -2 -50 -2] -50]
Test Case:  22 | Input/Output: [[83 83 -92 83] -92]
Test Case:  23 | Input/Output: [[-28 41 41 41] -28]
Test Case:  24 | Input/Output: [[33 99 33 33] 33]
Test Case:  25 | Input/Output: [[-90 -90 -56 -90] -90]
Test Case:  26 | Input/Output: [[53 53 53 -34] -34]
Test Case:  27 | Input/Output: [[-83 -69 -69 -69] -83]
Test Case:  28 | Input/Output: [[-50 -50 -79 -50] -79]
Test Case:  29 | Input/Output: [[-20 -79 -20 -20] -79]
Test Case:  30 | Input/Output: [[87 87 48 87] 48]
Test Case:  31 | Input/Output: [[-88 -88 -39 -88] -88]
Test Case:  32 | Input/Output: [[-89 -29 -29 -29] -89]
Test Case:  33 | Input/Output: [[-81 -5 -81 -81] -81]
Test Case:  34 | Input/Output: [[-82 -82 -82 -10] -82]
Test Case:  35 | Input/Output: [[25 4 4 4] 4]
Test Case:  36 | Input/Output: [[59 59 59 37] 37]
Test Case:  37 | Input/Output: [[-56 -88 -88 -88] -88]
Test Case:  38 | Input/Output: [[89 89 89 -67] -67]
Test Case:  39 | Input/Output: [[-39 31 -39 -39] -39]
Test Case:  40 | Input/Output: [[-61 -61 -61 -40] -61]
Test Case:  41 | Input/Output: [[41 41 12 41] 12]
Test Case:  42 | Input/Output: [[-41 18 -41 -41] -41]
Test Case:  43 | Input/Output: [[9 -2 -2 -2] -2]
Test Case:  44 | Input/Output: [[-16 -16 -16 58] -16]
Test Case:  45 | Input/Output: [[90 90 90 -98] -98]
Test Case:  46 | Input/Output: [[-10 37 37 37] -10]
Test Case:  47 | Input/Output: [[-28 65 65 65] -28]
Test Case:  48 | Input/Output: [[-39 24 24 24] -39]
Test Case:  49 | Input/Output: [[-39 -39 45 -39] -39]
Test Case:  50 | Input/Output: [[42 93 42 42] 42]
Test Case:  51 | Input/Output: [[-73 -81 -81 -81] -81]
Test Case:  52 | Input/Output: [[36 91 36 36] 36]
Test Case:  53 | Input/Output: [[48 68 48 48] 48]
Test Case:  54 | Input/Output: [[64 64 64 -13] -13]
Test Case:  55 | Input/Output: [[54 68 54 54] 54]
Test Case:  56 | Input/Output: [[64 67 64 64] 64]
Test Case:  57 | Input/Output: [[-13 -13 -13 -72] -72]
Test Case:  58 | Input/Output: [[40 40 34 40] 34]
Test Case:  59 | Input/Output: [[-28 -80 -80 -80] -80]
Test Case:  60 | Input/Output: [[33 -52 33 33] -52]
Test Case:  61 | Input/Output: [[-77 -27 -77 -77] -77]
Test Case:  62 | Input/Output: [[-6 -6 -6 -47] -47]
Test Case:  63 | Input/Output: [[-78 -78 47 -78] -78]
Test Case:  64 | Input/Output: [[4 0 4 4] 0]
Test Case:  65 | Input/Output: [[-14 -14 71 -14] -14]
Test Case:  66 | Input/Output: [[69 45 69 69] 45]
Test Case:  67 | Input/Output: [[-97 34 34 34] -97]
Test Case:  68 | Input/Output: [[61 40 61 61] 40]
Test Case:  69 | Input/Output: [[14 34 14 14] 14]
Test Case:  70 | Input/Output: [[-97 96 -97 -97] -97]
Test Case:  71 | Input/Output: [[36 36 -64 36] -64]
Test Case:  72 | Input/Output: [[-73 -73 1 -73] -73]
Test Case:  73 | Input/Output: [[44 44 44 61] 44]
Test Case:  74 | Input/Output: [[-86 -86 -86 -46] -86]
Test Case:  75 | Input/Output: [[-21 -93 -21 -21] -93]
Test Case:  76 | Input/Output: [[88 88 66 88] 66]
Test Case:  77 | Input/Output: [[69 69 98 69] 69]
Test Case:  78 | Input/Output: [[89 89 89 -8] -8]
Test Case:  79 | Input/Output: [[-64 -64 90 -64] -64]
Test Case:  80 | Input/Output: [[95 95 77 95] 77]
Test Case:  81 | Input/Output: [[77 -95 -95 -95] -95]
Test Case:  82 | Input/Output: [[-30 -30 -30 -23] -30]
Test Case:  83 | Input/Output: [[-78 -78 -78 33] -78]
Test Case:  84 | Input/Output: [[42 53 42 42] 42]
Test Case:  85 | Input/Output: [[29 -61 -61 -61] -61]
Test Case:  86 | Input/Output: [[-19 -19 -83 -19] -83]
Test Case:  87 | Input/Output: [[68 68 70 68] 68]
Test Case:  88 | Input/Output: [[-40 -77 -40 -40] -77]
Test Case:  89 | Input/Output: [[2 2 -66 2] -66]
Test Case:  90 | Input/Output: [[100 -22 100 100] -22]
Test Case:  91 | Input/Output: [[-6 7 -6 -6] -6]
Test Case:  92 | Input/Output: [[1 1 1 -15] -15]
Test Case:  93 | Input/Output: [[40 40 40 -79] -79]
Test Case:  94 | Input/Output: [[-37 -37 55 -37] -37]
Test Case:  95 | Input/Output: [[-51 -96 -96 -96] -96]
Test Case:  96 | Input/Output: [[44 -60 44 44] -60]
Test Case:  97 | Input/Output: [[25 -37 25 25] -37]
Test Case:  98 | Input/Output: [[42 42 42 71] 42]
Test Case:  99 | Input/Output: [[82 -39 -39 -39] -39]
Test Case: 100 | Input/Output: [(46 46 46 46) 46]
Test Case: 101 | Input/Output: [(38 38 38 38) 38]
Test Case: 102 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 103 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 104 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 105 | Input/Output: [(40 40 40 40) 40]
Test Case: 106 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 107 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 108 | Input/Output: [(95 95 95 95) 95]
Test Case: 109 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 110 | Input/Output: [(79 79 79 79) 79]
Test Case: 111 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 112 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 113 | Input/Output: [(39 39 39 39) 39]
Test Case: 114 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 115 | Input/Output: [(100 100 100 100) 100]
Test Case: 116 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 117 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 118 | Input/Output: [(47 47 47 47) 47]
Test Case: 119 | Input/Output: [(0 0 0 0) 0]
Test Case: 120 | Input/Output: [(82 82 82 82) 82]
Test Case: 121 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 122 | Input/Output: [(58 58 58 58) 58]
Test Case: 123 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 124 | Input/Output: [(93 93 93 93) 93]
Test Case: 125 | Input/Output: [(89 89 89 89) 89]
Test Case: 126 | Input/Output: [(55 55 55 55) 55]
Test Case: 127 | Input/Output: [(25 25 25 25) 25]
Test Case: 128 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 129 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 130 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 131 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 132 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 133 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 134 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 135 | Input/Output: [(3 3 3 3) 3]
Test Case: 136 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 137 | Input/Output: [(92 92 92 92) 92]
Test Case: 138 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 139 | Input/Output: [(20 20 20 20) 20]
Test Case: 140 | Input/Output: [(69 69 69 69) 69]
Test Case: 141 | Input/Output: [(53 53 53 53) 53]
Test Case: 142 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 143 | Input/Output: [(3 3 3 3) 3]
Test Case: 144 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 145 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 146 | Input/Output: [(24 24 24 24) 24]
Test Case: 147 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 148 | Input/Output: [(68 68 68 68) 68]
Test Case: 149 | Input/Output: [(93 93 93 93) 93]
Test Case: 150 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 151 | Input/Output: [(9 9 9 9) 9]
Test Case: 152 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 153 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 154 | Input/Output: [(71 71 71 71) 71]
Test Case: 155 | Input/Output: [(1 1 1 1) 1]
Test Case: 156 | Input/Output: [(65 65 65 65) 65]
Test Case: 157 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 158 | Input/Output: [(6 6 6 6) 6]
Test Case: 159 | Input/Output: [(74 74 74 74) 74]
Test Case: 160 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 161 | Input/Output: [(84 84 84 84) 84]
Test Case: 162 | Input/Output: [(61 61 61 61) 61]
Test Case: 163 | Input/Output: [(55 55 55 55) 55]
Test Case: 164 | Input/Output: [(33 33 33 33) 33]
Test Case: 165 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 166 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 167 | Input/Output: [(74 74 74 74) 74]
Test Case: 168 | Input/Output: [(78 78 78 78) 78]
Test Case: 169 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 170 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 171 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 172 | Input/Output: [(99 99 99 99) 99]
Test Case: 173 | Input/Output: [(32 32 32 32) 32]
Test Case: 174 | Input/Output: [(75 75 75 75) 75]
Test Case: 175 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 176 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 177 | Input/Output: [(43 43 43 43) 43]
Test Case: 178 | Input/Output: [(78 78 78 78) 78]
Test Case: 179 | Input/Output: [(74 74 74 74) 74]
Test Case: 180 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 181 | Input/Output: [(79 79 79 79) 79]
Test Case: 182 | Input/Output: [(34 34 34 34) 34]
Test Case: 183 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 184 | Input/Output: [(55 55 55 55) 55]
Test Case: 185 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 186 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 187 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 188 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 189 | Input/Output: [(94 94 94 94) 94]
Test Case: 190 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 191 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 192 | Input/Output: [(73 73 73 73) 73]
Test Case: 193 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 194 | Input/Output: [(18 18 18 18) 18]
Test Case: 195 | Input/Output: [(88 88 88 88) 88]
Test Case: 196 | Input/Output: [(94 94 94 94) 94]
Test Case: 197 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 198 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 199 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 200 | Input/Output: [(63 50 51 76) 50]
Test Case: 201 | Input/Output: [(44 96 7 73) 7]
Test Case: 202 | Input/Output: [(36 53 71 4) 4]
Test Case: 203 | Input/Output: [(13 80 84 60) 13]
Test Case: 204 | Input/Output: [(73 69 80 17) 17]
Test Case: 205 | Input/Output: [(82 3 39 96) 3]
Test Case: 206 | Input/Output: [(25 90 1 32) 1]
Test Case: 207 | Input/Output: [(41 3 79 19) 3]
Test Case: 208 | Input/Output: [(78 57 15 31) 15]
Test Case: 209 | Input/Output: [(89 93 52 29) 29]
Test Case: 210 | Input/Output: [(89 1 54 95) 1]
Test Case: 211 | Input/Output: [(81 54 97 14) 14]
Test Case: 212 | Input/Output: [(95 28 20 43) 20]
Test Case: 213 | Input/Output: [(26 17 38 48) 17]
Test Case: 214 | Input/Output: [(2 100 1 48) 1]
Test Case: 215 | Input/Output: [(64 85 15 86) 15]
Test Case: 216 | Input/Output: [(19 77 35 15) 15]
Test Case: 217 | Input/Output: [(55 55 95 63) 55]
Test Case: 218 | Input/Output: [(81 87 9 7) 7]
Test Case: 219 | Input/Output: [(91 54 29 87) 29]
Test Case: 220 | Input/Output: [(65 24 45 45) 24]
Test Case: 221 | Input/Output: [(29 35 74 31) 29]
Test Case: 222 | Input/Output: [(9 53 5 53) 5]
Test Case: 223 | Input/Output: [(86 73 38 60) 38]
Test Case: 224 | Input/Output: [(90 48 23 93) 23]
Test Case: 225 | Input/Output: [(22 23 78 21) 21]
Test Case: 226 | Input/Output: [(66 67 84 66) 66]
Test Case: 227 | Input/Output: [(77 38 33 98) 33]
Test Case: 228 | Input/Output: [(91 16 81 49) 16]
Test Case: 229 | Input/Output: [(66 28 70 12) 12]
Test Case: 230 | Input/Output: [(31 65 4 15) 4]
Test Case: 231 | Input/Output: [(12 14 61 76) 12]
Test Case: 232 | Input/Output: [(34 80 36 18) 18]
Test Case: 233 | Input/Output: [(27 38 50 58) 27]
Test Case: 234 | Input/Output: [(41 47 85 58) 41]
Test Case: 235 | Input/Output: [(62 79 44 81) 44]
Test Case: 236 | Input/Output: [(74 9 21 10) 9]
Test Case: 237 | Input/Output: [(12 65 49 57) 12]
Test Case: 238 | Input/Output: [(41 100 36 48) 36]
Test Case: 239 | Input/Output: [(93 50 28 63) 28]
Test Case: 240 | Input/Output: [(13 81 36 5) 5]
Test Case: 241 | Input/Output: [(60 82 92 44) 44]
Test Case: 242 | Input/Output: [(51 98 21 28) 21]
Test Case: 243 | Input/Output: [(31 14 93 80) 14]
Test Case: 244 | Input/Output: [(75 38 58 91) 38]
Test Case: 245 | Input/Output: [(30 96 87 70) 30]
Test Case: 246 | Input/Output: [(83 5 78 66) 5]
Test Case: 247 | Input/Output: [(87 24 14 29) 14]
Test Case: 248 | Input/Output: [(11 2 50 79) 2]
Test Case: 249 | Input/Output: [(21 46 24 72) 21]
Test Case: 250 | Input/Output: [(26 65 67 73) 26]
Test Case: 251 | Input/Output: [(53 24 54 62) 24]
Test Case: 252 | Input/Output: [(78 96 14 79) 14]
Test Case: 253 | Input/Output: [(51 81 53 11) 11]
Test Case: 254 | Input/Output: [(36 23 75 9) 9]
Test Case: 255 | Input/Output: [(71 78 96 86) 71]
Test Case: 256 | Input/Output: [(76 2 35 66) 2]
Test Case: 257 | Input/Output: [(1 80 3 24) 1]
Test Case: 258 | Input/Output: [(73 26 57 13) 13]
Test Case: 259 | Input/Output: [(92 82 99 77) 77]
Test Case: 260 | Input/Output: [(75 62 1 59) 1]
Test Case: 261 | Input/Output: [(3 77 75 8) 3]
Test Case: 262 | Input/Output: [(96 16 25 93) 16]
Test Case: 263 | Input/Output: [(71 76 1 48) 1]
Test Case: 264 | Input/Output: [(51 90 44 11) 11]
Test Case: 265 | Input/Output: [(90 74 65 16) 16]
Test Case: 266 | Input/Output: [(94 10 74 27) 10]
Test Case: 267 | Input/Output: [(32 62 8 63) 8]
Test Case: 268 | Input/Output: [(87 40 43 63) 40]
Test Case: 269 | Input/Output: [(10 71 18 0) 0]
Test Case: 270 | Input/Output: [(40 50 73 73) 40]
Test Case: 271 | Input/Output: [(91 13 0 57) 0]
Test Case: 272 | Input/Output: [(26 13 87 37) 13]
Test Case: 273 | Input/Output: [(35 34 7 63) 7]
Test Case: 274 | Input/Output: [(56 46 68 22) 22]
Test Case: 275 | Input/Output: [(78 53 88 33) 33]
Test Case: 276 | Input/Output: [(9 94 67 87) 9]
Test Case: 277 | Input/Output: [(50 36 11 100) 11]
Test Case: 278 | Input/Output: [(0 73 38 0) 0]
Test Case: 279 | Input/Output: [(34 82 18 77) 18]
Test Case: 280 | Input/Output: [(47 72 2 71) 2]
Test Case: 281 | Input/Output: [(58 59 24 42) 24]
Test Case: 282 | Input/Output: [(98 44 87 70) 44]
Test Case: 283 | Input/Output: [(7 85 0 5) 0]
Test Case: 284 | Input/Output: [(62 32 4 91) 4]
Test Case: 285 | Input/Output: [(56 81 42 51) 42]
Test Case: 286 | Input/Output: [(80 65 93 72) 65]
Test Case: 287 | Input/Output: [(60 79 65 1) 1]
Test Case: 288 | Input/Output: [(75 82 66 53) 53]
Test Case: 289 | Input/Output: [(77 7 77 36) 7]
Test Case: 290 | Input/Output: [(32 25 1 80) 1]
Test Case: 291 | Input/Output: [(41 46 28 44) 28]
Test Case: 292 | Input/Output: [(70 94 79 35) 35]
Test Case: 293 | Input/Output: [(93 16 58 44) 16]
Test Case: 294 | Input/Output: [(89 99 83 73) 73]
Test Case: 295 | Input/Output: [(63 52 93 16) 16]
Test Case: 296 | Input/Output: [(67 56 90 60) 56]
Test Case: 297 | Input/Output: [(39 62 30 9) 9]
Test Case: 298 | Input/Output: [(62 75 83 84) 62]
Test Case: 299 | Input/Output: [(75 84 3 94) 3]
Test Case: 300 | Input/Output: [(46 8 71 33) 8]
Test Case: 301 | Input/Output: [(70 42 61 38) 38]
Test Case: 302 | Input/Output: [(89 95 25 81) 25]
Test Case: 303 | Input/Output: [(18 76 53 94) 18]
Test Case: 304 | Input/Output: [(70 74 42 72) 42]
Test Case: 305 | Input/Output: [(49 30 73 78) 30]
Test Case: 306 | Input/Output: [(24 8 39 34) 8]
Test Case: 307 | Input/Output: [(86 35 88 2) 2]
Test Case: 308 | Input/Output: [(12 17 48 58) 12]
Test Case: 309 | Input/Output: [(0 11 46 44) 0]
Test Case: 310 | Input/Output: [(71 84 15 94) 15]
Test Case: 311 | Input/Output: [(43 42 44 33) 33]
Test Case: 312 | Input/Output: [(30 60 28 31) 28]
Test Case: 313 | Input/Output: [(42 80 74 33) 33]
Test Case: 314 | Input/Output: [(91 80 83 43) 43]
Test Case: 315 | Input/Output: [(78 70 89 63) 63]
Test Case: 316 | Input/Output: [(74 62 73 92) 62]
Test Case: 317 | Input/Output: [(14 41 26 17) 14]
Test Case: 318 | Input/Output: [(89 16 41 76) 16]
Test Case: 319 | Input/Output: [(48 14 82 41) 14]
Test Case: 320 | Input/Output: [(53 83 54 29) 29]
Test Case: 321 | Input/Output: [(65 27 49 74) 27]
Test Case: 322 | Input/Output: [(60 33 62 81) 33]
Test Case: 323 | Input/Output: [(94 70 76 8) 8]
Test Case: 324 | Input/Output: [(94 81 14 4) 4]
Test Case: 325 | Input/Output: [(57 58 69 70) 57]
Test Case: 326 | Input/Output: [(51 20 6 23) 6]
Test Case: 327 | Input/Output: [(40 40 95 6) 6]
Test Case: 328 | Input/Output: [(30 17 48 27) 17]
Test Case: 329 | Input/Output: [(59 26 23 27) 23]
Test Case: 330 | Input/Output: [(17 10 38 84) 10]
Test Case: 331 | Input/Output: [(73 96 9 53) 9]
Test Case: 332 | Input/Output: [(75 83 66 60) 60]
Test Case: 333 | Input/Output: [(5 70 72 28) 5]
Test Case: 334 | Input/Output: [(1 89 83 4) 1]
Test Case: 335 | Input/Output: [(6 25 4 5) 4]
Test Case: 336 | Input/Output: [(94 98 0 73) 0]
Test Case: 337 | Input/Output: [(99 80 84 11) 11]
Test Case: 338 | Input/Output: [(30 51 93 81) 30]
Test Case: 339 | Input/Output: [(85 90 86 96) 85]
Test Case: 340 | Input/Output: [(66 13 35 3) 3]
Test Case: 341 | Input/Output: [(24 96 6 81) 6]
Test Case: 342 | Input/Output: [(2 32 43 20) 2]
Test Case: 343 | Input/Output: [(93 44 71 95) 44]
Test Case: 344 | Input/Output: [(5 79 66 85) 5]
Test Case: 345 | Input/Output: [(34 94 54 41) 34]
Test Case: 346 | Input/Output: [(53 52 54 58) 52]
Test Case: 347 | Input/Output: [(53 21 87 71) 21]
Test Case: 348 | Input/Output: [(9 31 10 3) 3]
Test Case: 349 | Input/Output: [(83 74 29 72) 29]
Test Case: 350 | Input/Output: [(11 39 18 98) 11]
Test Case: 351 | Input/Output: [(65 61 26 68) 26]
Test Case: 352 | Input/Output: [(13 33 95 79) 13]
Test Case: 353 | Input/Output: [(39 95 71 13) 13]
Test Case: 354 | Input/Output: [(34 35 17 55) 17]
Test Case: 355 | Input/Output: [(14 85 61 54) 14]
Test Case: 356 | Input/Output: [(10 91 36 19) 10]
Test Case: 357 | Input/Output: [(6 45 53 3) 3]
Test Case: 358 | Input/Output: [(6 32 38 61) 6]
Test Case: 359 | Input/Output: [(21 7 16 96) 7]
Test Case: 360 | Input/Output: [(50 21 86 34) 21]
Test Case: 361 | Input/Output: [(37 83 61 30) 30]
Test Case: 362 | Input/Output: [(83 84 50 79) 50]
Test Case: 363 | Input/Output: [(55 90 95 53) 53]
Test Case: 364 | Input/Output: [(76 47 13 32) 13]
Test Case: 365 | Input/Output: [(77 8 5 36) 5]
Test Case: 366 | Input/Output: [(34 30 0 6) 0]
Test Case: 367 | Input/Output: [(98 91 11 81) 11]
Test Case: 368 | Input/Output: [(20 89 91 38) 20]
Test Case: 369 | Input/Output: [(39 15 25 40) 15]
Test Case: 370 | Input/Output: [(17 6 51 79) 6]
Test Case: 371 | Input/Output: [(47 57 37 84) 37]
Test Case: 372 | Input/Output: [(85 54 77 95) 54]
Test Case: 373 | Input/Output: [(17 88 56 30) 17]
Test Case: 374 | Input/Output: [(91 42 85 62) 42]
Test Case: 375 | Input/Output: [(5 73 67 36) 5]
Test Case: 376 | Input/Output: [(54 64 26 94) 26]
Test Case: 377 | Input/Output: [(42 65 77 93) 42]
Test Case: 378 | Input/Output: [(87 58 92 54) 54]
Test Case: 379 | Input/Output: [(84 56 49 92) 49]
Test Case: 380 | Input/Output: [(94 17 14 10) 10]
Test Case: 381 | Input/Output: [(4 73 58 26) 4]
Test Case: 382 | Input/Output: [(4 14 22 3) 3]
Test Case: 383 | Input/Output: [(76 21 15 67) 15]
Test Case: 384 | Input/Output: [(27 24 81 15) 15]
Test Case: 385 | Input/Output: [(15 71 64 92) 15]
Test Case: 386 | Input/Output: [(50 24 93 80) 24]
Test Case: 387 | Input/Output: [(91 52 64 48) 48]
Test Case: 388 | Input/Output: [(73 23 40 84) 23]
Test Case: 389 | Input/Output: [(53 34 44 39) 34]
Test Case: 390 | Input/Output: [(83 0 35 84) 0]
Test Case: 391 | Input/Output: [(44 70 32 32) 32]
Test Case: 392 | Input/Output: [(10 75 71 55) 10]
Test Case: 393 | Input/Output: [(55 15 10 18) 10]
Test Case: 394 | Input/Output: [(2 2 49 7) 2]
Test Case: 395 | Input/Output: [(19 53 47 73) 19]
Test Case: 396 | Input/Output: [(14 9 31 37) 9]
Test Case: 397 | Input/Output: [(43 82 8 49) 8]
Test Case: 398 | Input/Output: [(100 27 44 4) 4]
Test Case: 399 | Input/Output: [(86 37 32 78) 32]
Test Case: 400 | Input/Output: [(14 60 97 -4) -4]
Test Case: 401 | Input/Output: [(-33 22 -78 -41) -78]
Test Case: 402 | Input/Output: [(-85 6 -57 37) -85]
Test Case: 403 | Input/Output: [(91 77 47 -86) -86]
Test Case: 404 | Input/Output: [(32 -63 79 33) -63]
Test Case: 405 | Input/Output: [(-20 -60 44 31) -60]
Test Case: 406 | Input/Output: [(-99 -39 15 -2) -99]
Test Case: 407 | Input/Output: [(-38 67 70 73) -38]
Test Case: 408 | Input/Output: [(-18 1 22 -87) -87]
Test Case: 409 | Input/Output: [(33 -81 -49 -60) -81]
Test Case: 410 | Input/Output: [(-92 -67 78 -30) -92]
Test Case: 411 | Input/Output: [(-10 32 77 -33) -33]
Test Case: 412 | Input/Output: [(-12 -100 -84 67) -100]
Test Case: 413 | Input/Output: [(20 -44 -98 -75) -98]
Test Case: 414 | Input/Output: [(99 -74 96 68) -74]
Test Case: 415 | Input/Output: [(63 -15 69 -90) -90]
Test Case: 416 | Input/Output: [(12 67 -9 83) -9]
Test Case: 417 | Input/Output: [(100 8 28 87) 8]
Test Case: 418 | Input/Output: [(-44 7 40 -74) -74]
Test Case: 419 | Input/Output: [(70 -7 45 -33) -33]
Test Case: 420 | Input/Output: [(-51 -80 3 73) -80]
Test Case: 421 | Input/Output: [(-30 -81 -35 7) -81]
Test Case: 422 | Input/Output: [(-52 -23 82 74) -52]
Test Case: 423 | Input/Output: [(1 65 -86 27) -86]
Test Case: 424 | Input/Output: [(72 15 33 37) 15]
Test Case: 425 | Input/Output: [(-50 91 -91 -90) -91]
Test Case: 426 | Input/Output: [(13 2 98 63) 2]
Test Case: 427 | Input/Output: [(8 -14 -59 36) -59]
Test Case: 428 | Input/Output: [(63 88 -41 -62) -62]
Test Case: 429 | Input/Output: [(95 -100 -56 -63) -100]
Test Case: 430 | Input/Output: [(99 64 50 60) 50]
Test Case: 431 | Input/Output: [(77 35 50 -95) -95]
Test Case: 432 | Input/Output: [(-83 60 1 -1) -83]
Test Case: 433 | Input/Output: [(-49 12 -84 64) -84]
Test Case: 434 | Input/Output: [(-11 69 -86 88) -86]
Test Case: 435 | Input/Output: [(-82 -36 57 -50) -82]
Test Case: 436 | Input/Output: [(61 -25 83 56) -25]
Test Case: 437 | Input/Output: [(98 -86 -63 28) -86]
Test Case: 438 | Input/Output: [(-36 -39 -47 33) -47]
Test Case: 439 | Input/Output: [(63 77 66 16) 16]
Test Case: 440 | Input/Output: [(63 94 64 -72) -72]
Test Case: 441 | Input/Output: [(44 32 -29 -44) -44]
Test Case: 442 | Input/Output: [(1 -78 64 -61) -78]
Test Case: 443 | Input/Output: [(97 -69 -25 57) -69]
Test Case: 444 | Input/Output: [(78 -72 4 69) -72]
Test Case: 445 | Input/Output: [(28 -86 11 -57) -86]
Test Case: 446 | Input/Output: [(-29 -55 97 49) -55]
Test Case: 447 | Input/Output: [(-18 7 60 -11) -18]
Test Case: 448 | Input/Output: [(12 -28 40 -43) -43]
Test Case: 449 | Input/Output: [(-63 -89 21 11) -89]
Test Case: 450 | Input/Output: [(73 -99 -43 -12) -99]
Test Case: 451 | Input/Output: [(-89 0 44 64) -89]
Test Case: 452 | Input/Output: [(3 4 -46 33) -46]
Test Case: 453 | Input/Output: [(73 22 23 39) 22]
Test Case: 454 | Input/Output: [(-87 20 -3 90) -87]
Test Case: 455 | Input/Output: [(-43 -71 -52 94) -71]
Test Case: 456 | Input/Output: [(56 -10 -78 38) -78]
Test Case: 457 | Input/Output: [(67 -31 43 77) -31]
Test Case: 458 | Input/Output: [(14 93 38 -91) -91]
Test Case: 459 | Input/Output: [(-86 51 31 -46) -86]
Test Case: 460 | Input/Output: [(-56 -15 -56 -43) -56]
Test Case: 461 | Input/Output: [(16 -59 -13 65) -59]
Test Case: 462 | Input/Output: [(-16 38 -33 35) -33]
Test Case: 463 | Input/Output: [(-55 2 -79 -86) -86]
Test Case: 464 | Input/Output: [(41 76 -3 -38) -38]
Test Case: 465 | Input/Output: [(-83 41 -25 -67) -83]
Test Case: 466 | Input/Output: [(-29 -32 4 -31) -32]
Test Case: 467 | Input/Output: [(-96 33 64 49) -96]
Test Case: 468 | Input/Output: [(-58 66 61 5) -58]
Test Case: 469 | Input/Output: [(41 30 -13 -98) -98]
Test Case: 470 | Input/Output: [(-22 -27 -29 -55) -55]
Test Case: 471 | Input/Output: [(50 18 -84 69) -84]
Test Case: 472 | Input/Output: [(44 -73 99 80) -73]
Test Case: 473 | Input/Output: [(18 -87 91 -34) -87]
Test Case: 474 | Input/Output: [(-21 -34 -56 -22) -56]
Test Case: 475 | Input/Output: [(90 91 50 -61) -61]
Test Case: 476 | Input/Output: [(-72 -58 81 -31) -72]
Test Case: 477 | Input/Output: [(-76 -59 64 -6) -76]
Test Case: 478 | Input/Output: [(-34 -82 -79 -20) -82]
Test Case: 479 | Input/Output: [(-94 32 69 35) -94]
Test Case: 480 | Input/Output: [(-73 -85 65 94) -85]
Test Case: 481 | Input/Output: [(-39 78 52 -87) -87]
Test Case: 482 | Input/Output: [(-36 99 -2 66) -36]
Test Case: 483 | Input/Output: [(0 -42 -85 -54) -85]
Test Case: 484 | Input/Output: [(65 -74 12 13) -74]
Test Case: 485 | Input/Output: [(-80 58 -17 87) -80]
Test Case: 486 | Input/Output: [(-22 93 61 -76) -76]
Test Case: 487 | Input/Output: [(88 -73 -90 50) -90]
Test Case: 488 | Input/Output: [(37 -28 5 74) -28]
Test Case: 489 | Input/Output: [(-12 67 -19 99) -19]
Test Case: 490 | Input/Output: [(58 -93 -22 -4) -93]
Test Case: 491 | Input/Output: [(96 -35 -8 48) -35]
Test Case: 492 | Input/Output: [(-77 -13 -40 -99) -99]
Test Case: 493 | Input/Output: [(66 -55 -72 27) -72]
Test Case: 494 | Input/Output: [(-69 3 54 -54) -69]
Test Case: 495 | Input/Output: [(-76 -58 -1 -50) -76]
Test Case: 496 | Input/Output: [(-29 -67 -77 -78) -78]
Test Case: 497 | Input/Output: [(18 48 -45 7) -45]
Test Case: 498 | Input/Output: [(33 -18 15 19) -18]
Test Case: 499 | Input/Output: [(6 -1 81 -34) -34]
Test Case: 500 | Input/Output: [(-77 91 2 98) -77]
Test Case: 501 | Input/Output: [(-7 20 37 80) -7]
Test Case: 502 | Input/Output: [(-17 28 -31 -17) -31]
Test Case: 503 | Input/Output: [(65 71 63 -47) -47]
Test Case: 504 | Input/Output: [(26 17 -71 92) -71]
Test Case: 505 | Input/Output: [(24 -72 -71 -30) -72]
Test Case: 506 | Input/Output: [(-80 92 9 -5) -80]
Test Case: 507 | Input/Output: [(70 -1 32 34) -1]
Test Case: 508 | Input/Output: [(-45 12 -7 -61) -61]
Test Case: 509 | Input/Output: [(15 -58 91 -10) -58]
Test Case: 510 | Input/Output: [(-59 -77 -93 -12) -93]
Test Case: 511 | Input/Output: [(-37 79 -22 22) -37]
Test Case: 512 | Input/Output: [(-77 32 90 -48) -77]
Test Case: 513 | Input/Output: [(52 31 -39 62) -39]
Test Case: 514 | Input/Output: [(22 -22 54 89) -22]
Test Case: 515 | Input/Output: [(-39 -16 88 65) -39]
Test Case: 516 | Input/Output: [(-66 38 89 7) -66]
Test Case: 517 | Input/Output: [(-83 26 -26 98) -83]
Test Case: 518 | Input/Output: [(78 88 -2 37) -2]
Test Case: 519 | Input/Output: [(36 -90 -73 34) -90]
Test Case: 520 | Input/Output: [(-40 -65 34 -31) -65]
Test Case: 521 | Input/Output: [(-61 52 -19 -82) -82]
Test Case: 522 | Input/Output: [(-97 -84 90 61) -97]
Test Case: 523 | Input/Output: [(39 25 -83 -65) -83]
Test Case: 524 | Input/Output: [(-92 -4 -23 22) -92]
Test Case: 525 | Input/Output: [(-96 -19 -21 -62) -96]
Test Case: 526 | Input/Output: [(83 48 0 -85) -85]
Test Case: 527 | Input/Output: [(-48 -22 99 -66) -66]
Test Case: 528 | Input/Output: [(-68 -8 -38 -12) -68]
Test Case: 529 | Input/Output: [(-79 86 83 61) -79]
Test Case: 530 | Input/Output: [(-51 -69 -57 74) -69]
Test Case: 531 | Input/Output: [(-11 13 9 69) -11]
Test Case: 532 | Input/Output: [(97 -29 -90 30) -90]
Test Case: 533 | Input/Output: [(64 -56 -52 33) -56]
Test Case: 534 | Input/Output: [(-26 53 41 -89) -89]
Test Case: 535 | Input/Output: [(76 -100 71 -98) -100]
Test Case: 536 | Input/Output: [(68 10 0 53) 0]
Test Case: 537 | Input/Output: [(18 84 10 -96) -96]
Test Case: 538 | Input/Output: [(64 -26 4 31) -26]
Test Case: 539 | Input/Output: [(-46 -69 9 -70) -70]
Test Case: 540 | Input/Output: [(-1 100 42 -71) -71]
Test Case: 541 | Input/Output: [(86 3 -93 -63) -93]
Test Case: 542 | Input/Output: [(-91 -41 95 -30) -91]
Test Case: 543 | Input/Output: [(22 -21 -89 -59) -89]
Test Case: 544 | Input/Output: [(75 -8 36 -36) -36]
Test Case: 545 | Input/Output: [(48 -3 -63 70) -63]
Test Case: 546 | Input/Output: [(63 7 24 -38) -38]
Test Case: 547 | Input/Output: [(-4 15 -57 -63) -63]
Test Case: 548 | Input/Output: [(75 -100 68 -37) -100]
Test Case: 549 | Input/Output: [(98 62 -79 19) -79]
Test Case: 550 | Input/Output: [(2 -91 -42 92) -91]
Test Case: 551 | Input/Output: [(78 90 -93 -84) -93]
Test Case: 552 | Input/Output: [(54 -58 -61 -84) -84]
Test Case: 553 | Input/Output: [(-15 -84 -82 -14) -84]
Test Case: 554 | Input/Output: [(-53 -74 -97 -89) -97]
Test Case: 555 | Input/Output: [(31 -12 58 -77) -77]
Test Case: 556 | Input/Output: [(83 -28 -53 -40) -53]
Test Case: 557 | Input/Output: [(-19 -100 22 50) -100]
Test Case: 558 | Input/Output: [(-70 -100 -17 34) -100]
Test Case: 559 | Input/Output: [(78 95 5 -49) -49]
Test Case: 560 | Input/Output: [(83 39 -71 23) -71]
Test Case: 561 | Input/Output: [(95 -59 22 54) -59]
Test Case: 562 | Input/Output: [(89 36 93 53) 36]
Test Case: 563 | Input/Output: [(14 -52 98 78) -52]
Test Case: 564 | Input/Output: [(-32 94 -32 -40) -40]
Test Case: 565 | Input/Output: [(93 -75 -32 12) -75]
Test Case: 566 | Input/Output: [(-8 -13 89 -33) -33]
Test Case: 567 | Input/Output: [(82 79 -21 -45) -45]
Test Case: 568 | Input/Output: [(-88 75 -79 -52) -88]
Test Case: 569 | Input/Output: [(-71 -99 -14 -90) -99]
Test Case: 570 | Input/Output: [(-50 45 93 -34) -50]
Test Case: 571 | Input/Output: [(25 78 -73 -100) -100]
Test Case: 572 | Input/Output: [(26 -61 -69 -88) -88]
Test Case: 573 | Input/Output: [(-58 -34 -67 91) -67]
Test Case: 574 | Input/Output: [(15 67 -68 44) -68]
Test Case: 575 | Input/Output: [(-20 12 20 41) -20]
Test Case: 576 | Input/Output: [(33 -64 19 -38) -64]
Test Case: 577 | Input/Output: [(-56 34 66 21) -56]
Test Case: 578 | Input/Output: [(-67 86 71 28) -67]
Test Case: 579 | Input/Output: [(66 67 86 48) 48]
Test Case: 580 | Input/Output: [(11 62 -77 73) -77]
Test Case: 581 | Input/Output: [(-96 -96 25 -32) -96]
Test Case: 582 | Input/Output: [(28 -49 -90 30) -90]
Test Case: 583 | Input/Output: [(93 74 -57 -10) -57]
Test Case: 584 | Input/Output: [(54 29 -53 34) -53]
Test Case: 585 | Input/Output: [(67 83 -38 62) -38]
Test Case: 586 | Input/Output: [(84 10 15 21) 10]
Test Case: 587 | Input/Output: [(83 -24 65 -71) -71]
Test Case: 588 | Input/Output: [(65 67 5 -6) -6]
Test Case: 589 | Input/Output: [(29 51 76 84) 29]
Test Case: 590 | Input/Output: [(67 40 -62 28) -62]
Test Case: 591 | Input/Output: [(96 10 -43 -17) -43]
Test Case: 592 | Input/Output: [(-17 82 88 -52) -52]
Test Case: 593 | Input/Output: [(46 95 -3 -63) -63]
Test Case: 594 | Input/Output: [(-24 6 50 62) -24]
Test Case: 595 | Input/Output: [(-29 -60 93 95) -60]
Test Case: 596 | Input/Output: [(98 42 -69 -75) -75]
Test Case: 597 | Input/Output: [(19 -68 -43 -58) -68]
Test Case: 598 | Input/Output: [(23 56 -65 31) -65]
Test Case: 599 | Input/Output: [(-1 67 35 -39) -39]
Test Case: 600 | Input/Output: [(36 -57 -96 -79) -96]
Test Case: 601 | Input/Output: [(2 56 45 -29) -29]
Test Case: 602 | Input/Output: [(-50 -26 -95 -61) -95]
Test Case: 603 | Input/Output: [(-77 -42 37 -28) -77]
Test Case: 604 | Input/Output: [(-24 -4 34 -84) -84]
Test Case: 605 | Input/Output: [(-59 49 -33 84) -59]
Test Case: 606 | Input/Output: [(17 62 -47 55) -47]
Test Case: 607 | Input/Output: [(-77 9 1 79) -77]
Test Case: 608 | Input/Output: [(41 52 61 -19) -19]
Test Case: 609 | Input/Output: [(-2 7 -32 -19) -32]
Test Case: 610 | Input/Output: [(-41 -35 -47 34) -47]
Test Case: 611 | Input/Output: [(-77 -77 -7 -52) -77]
Test Case: 612 | Input/Output: [(52 89 35 -77) -77]
Test Case: 613 | Input/Output: [(17 18 -45 -76) -76]
Test Case: 614 | Input/Output: [(74 7 67 -7) -7]
Test Case: 615 | Input/Output: [(-67 -70 -10 -9) -70]
Test Case: 616 | Input/Output: [(89 88 -99 47) -99]
Test Case: 617 | Input/Output: [(75 49 -65 72) -65]
Test Case: 618 | Input/Output: [(58 -40 0 83) -40]
Test Case: 619 | Input/Output: [(-53 3 92 -27) -53]
Test Case: 620 | Input/Output: [(89 53 82 47) 47]
Test Case: 621 | Input/Output: [(25 13 -11 -89) -89]
Test Case: 622 | Input/Output: [(-50 -90 53 -91) -91]
Test Case: 623 | Input/Output: [(-34 -82 13 98) -82]
Test Case: 624 | Input/Output: [(-56 -83 19 29) -83]
Test Case: 625 | Input/Output: [(-85 -78 -45 34) -85]
Test Case: 626 | Input/Output: [(56 -6 66 -61) -61]
Test Case: 627 | Input/Output: [(-98 71 -46 -11) -98]
Test Case: 628 | Input/Output: [(-98 9 42 -28) -98]
Test Case: 629 | Input/Output: [(-75 -51 -21 59) -75]
Test Case: 630 | Input/Output: [(-85 -73 43 -33) -85]
Test Case: 631 | Input/Output: [(-11 -84 -33 -71) -84]
Test Case: 632 | Input/Output: [(-72 0 -63 -15) -72]
Test Case: 633 | Input/Output: [(51 62 -95 -34) -95]
Test Case: 634 | Input/Output: [(53 -23 45 91) -23]
Test Case: 635 | Input/Output: [(-27 93 -31 93) -31]
Test Case: 636 | Input/Output: [(57 -70 -2 -7) -70]
Test Case: 637 | Input/Output: [(-100 -71 -34 -58) -100]
Test Case: 638 | Input/Output: [(-25 -93 9 99) -93]
Test Case: 639 | Input/Output: [(8 -81 -100 78) -100]
Test Case: 640 | Input/Output: [(-24 -70 -24 -53) -70]
Test Case: 641 | Input/Output: [(-13 -52 -8 -38) -52]
Test Case: 642 | Input/Output: [(-70 -53 72 55) -70]
Test Case: 643 | Input/Output: [(9 -77 94 -43) -77]
Test Case: 644 | Input/Output: [(-69 -24 38 24) -69]
Test Case: 645 | Input/Output: [(-86 -43 -79 47) -86]
Test Case: 646 | Input/Output: [(25 4 -51 46) -51]
Test Case: 647 | Input/Output: [(67 -18 -17 87) -18]
Test Case: 648 | Input/Output: [(-57 -41 -36 38) -57]
Test Case: 649 | Input/Output: [(-2 -58 -78 93) -78]
Test Case: 650 | Input/Output: [(48 -37 85 62) -37]
Test Case: 651 | Input/Output: [(21 75 85 -59) -59]
Test Case: 652 | Input/Output: [(-28 -29 20 40) -29]
Test Case: 653 | Input/Output: [(-95 70 -28 -15) -95]
Test Case: 654 | Input/Output: [(-30 -25 -51 -27) -51]
Test Case: 655 | Input/Output: [(32 -28 32 -75) -75]
Test Case: 656 | Input/Output: [(53 -86 -52 39) -86]
Test Case: 657 | Input/Output: [(5 53 -75 27) -75]
Test Case: 658 | Input/Output: [(97 89 -60 -74) -74]
Test Case: 659 | Input/Output: [(65 -15 36 23) -15]
Test Case: 660 | Input/Output: [(63 48 -41 72) -41]
Test Case: 661 | Input/Output: [(97 3 -41 95) -41]
Test Case: 662 | Input/Output: [(-93 -18 93 52) -93]
Test Case: 663 | Input/Output: [(-69 45 16 38) -69]
Test Case: 664 | Input/Output: [(-86 98 37 -14) -86]
Test Case: 665 | Input/Output: [(31 93 -91 37) -91]
Test Case: 666 | Input/Output: [(22 -65 49 -52) -65]
Test Case: 667 | Input/Output: [(21 34 -16 -60) -60]
Test Case: 668 | Input/Output: [(-12 -99 -74 73) -99]
Test Case: 669 | Input/Output: [(73 -60 97 32) -60]
Test Case: 670 | Input/Output: [(10 60 100 -44) -44]
Test Case: 671 | Input/Output: [(-79 18 -79 67) -79]
Test Case: 672 | Input/Output: [(65 47 -64 -46) -64]
Test Case: 673 | Input/Output: [(43 85 5 -3) -3]
Test Case: 674 | Input/Output: [(-18 100 75 -79) -79]
Test Case: 675 | Input/Output: [(98 39 79 30) 30]
Test Case: 676 | Input/Output: [(93 -91 35 -56) -91]
Test Case: 677 | Input/Output: [(-89 -22 -57 -95) -95]
Test Case: 678 | Input/Output: [(68 81 71 -18) -18]
Test Case: 679 | Input/Output: [(-31 -71 68 15) -71]
Test Case: 680 | Input/Output: [(-75 -14 -18 -100) -100]
Test Case: 681 | Input/Output: [(-47 -19 100 68) -47]
Test Case: 682 | Input/Output: [(-6 58 -48 33) -48]
Test Case: 683 | Input/Output: [(-55 -25 -31 -63) -63]
Test Case: 684 | Input/Output: [(-57 95 -93 -35) -93]
Test Case: 685 | Input/Output: [(-20 -2 -53 -27) -53]
Test Case: 686 | Input/Output: [(17 18 71 -46) -46]
Test Case: 687 | Input/Output: [(93 22 55 -78) -78]
Test Case: 688 | Input/Output: [(48 37 92 -10) -10]
Test Case: 689 | Input/Output: [(49 14 -8 -62) -62]
Test Case: 690 | Input/Output: [(-7 -6 28 -66) -66]
Test Case: 691 | Input/Output: [(-34 -88 15 -41) -88]
Test Case: 692 | Input/Output: [(67 52 53 66) 52]
Test Case: 693 | Input/Output: [(-40 55 47 -64) -64]
Test Case: 694 | Input/Output: [(95 -68 -56 30) -68]
Test Case: 695 | Input/Output: [(-42 -63 -87 87) -87]
Test Case: 696 | Input/Output: [(24 26 -38 -39) -39]
Test Case: 697 | Input/Output: [(54 2 -73 84) -73]
Test Case: 698 | Input/Output: [(55 -32 38 26) -32]
Test Case: 699 | Input/Output: [(81 -42 -2 78) -42]
Test Case: 700 | Input/Output: [(65 -77 -64 -16) -77]
Test Case: 701 | Input/Output: [(-63 -49 86 -79) -79]
Test Case: 702 | Input/Output: [(-97 11 -29 100) -97]
Test Case: 703 | Input/Output: [(-99 1 -18 5) -99]
Test Case: 704 | Input/Output: [(92 71 -25 57) -25]
Test Case: 705 | Input/Output: [(-78 -70 38 -69) -78]
Test Case: 706 | Input/Output: [(60 55 -15 -54) -54]
Test Case: 707 | Input/Output: [(-77 -20 84 78) -77]
Test Case: 708 | Input/Output: [(-7 54 50 -4) -7]
Test Case: 709 | Input/Output: [(-57 98 -48 -38) -57]
Test Case: 710 | Input/Output: [(-41 77 -18 10) -41]
Test Case: 711 | Input/Output: [(-94 45 92 -32) -94]
Test Case: 712 | Input/Output: [(-26 -92 -84 56) -92]
Test Case: 713 | Input/Output: [(6 2 -72 -87) -87]
Test Case: 714 | Input/Output: [(75 40 -59 94) -59]
Test Case: 715 | Input/Output: [(-77 -89 50 59) -89]
Test Case: 716 | Input/Output: [(-63 78 -6 -47) -63]
Test Case: 717 | Input/Output: [(85 -42 -92 58) -92]
Test Case: 718 | Input/Output: [(-72 -88 -29 49) -88]
Test Case: 719 | Input/Output: [(-52 -23 -49 -12) -52]
Test Case: 720 | Input/Output: [(-75 44 65 53) -75]
Test Case: 721 | Input/Output: [(-61 34 22 -18) -61]
Test Case: 722 | Input/Output: [(-83 45 65 -33) -83]
Test Case: 723 | Input/Output: [(61 -63 -17 99) -63]
Test Case: 724 | Input/Output: [(-32 -56 39 78) -56]
Test Case: 725 | Input/Output: [(-40 -37 -19 -74) -74]
Test Case: 726 | Input/Output: [(7 -21 -30 -30) -30]
Test Case: 727 | Input/Output: [(-19 52 98 39) -19]
Test Case: 728 | Input/Output: [(-33 -39 44 27) -39]
Test Case: 729 | Input/Output: [(-82 -97 61 77) -97]
Test Case: 730 | Input/Output: [(64 22 16 2) 2]
Test Case: 731 | Input/Output: [(-15 4 56 -53) -53]
Test Case: 732 | Input/Output: [(-75 -89 57 12) -89]
Test Case: 733 | Input/Output: [(57 -62 71 50) -62]
Test Case: 734 | Input/Output: [(-63 54 -20 44) -63]
Test Case: 735 | Input/Output: [(91 -86 -11 -50) -86]
Test Case: 736 | Input/Output: [(31 -2 45 88) -2]
Test Case: 737 | Input/Output: [(-12 4 29 56) -12]
Test Case: 738 | Input/Output: [(40 17 -63 -74) -74]
Test Case: 739 | Input/Output: [(17 -39 -67 54) -67]
Test Case: 740 | Input/Output: [(65 -5 14 -69) -69]
Test Case: 741 | Input/Output: [(53 2 -68 -59) -68]
Test Case: 742 | Input/Output: [(19 75 -14 73) -14]
Test Case: 743 | Input/Output: [(-22 -97 11 27) -97]
Test Case: 744 | Input/Output: [(33 -90 -49 -79) -90]
Test Case: 745 | Input/Output: [(42 -13 -58 16) -58]
Test Case: 746 | Input/Output: [(53 84 42 73) 42]
Test Case: 747 | Input/Output: [(-46 51 31 15) -46]
Test Case: 748 | Input/Output: [(-89 -65 -36 73) -89]
Test Case: 749 | Input/Output: [(-78 -52 -90 -77) -90]
Test Case: 750 | Input/Output: [(1 -17 -56 39) -56]
Test Case: 751 | Input/Output: [(-59 86 -27 66) -59]
Test Case: 752 | Input/Output: [(66 -21 39 -15) -21]
Test Case: 753 | Input/Output: [(47 39 -15 18) -15]
Test Case: 754 | Input/Output: [(84 29 92 -45) -45]
Test Case: 755 | Input/Output: [(81 -87 -55 20) -87]
Test Case: 756 | Input/Output: [(99 -83 -96 -24) -96]
Test Case: 757 | Input/Output: [(-84 89 92 -37) -84]
Test Case: 758 | Input/Output: [(68 -23 -29 -74) -74]
Test Case: 759 | Input/Output: [(16 -58 -91 -95) -95]
Test Case: 760 | Input/Output: [(14 90 15 -27) -27]
Test Case: 761 | Input/Output: [(83 76 84 -10) -10]
Test Case: 762 | Input/Output: [(-30 25 66 87) -30]
Test Case: 763 | Input/Output: [(49 -43 -21 -48) -48]
Test Case: 764 | Input/Output: [(84 -59 75 -93) -93]
Test Case: 765 | Input/Output: [(-73 31 76 -94) -94]
Test Case: 766 | Input/Output: [(81 -72 -14 -6) -72]
Test Case: 767 | Input/Output: [(-81 -6 23 -18) -81]
Test Case: 768 | Input/Output: [(45 -28 -66 -57) -66]
Test Case: 769 | Input/Output: [(1 95 1 46) 1]
Test Case: 770 | Input/Output: [(25 -96 -76 -26) -96]
Test Case: 771 | Input/Output: [(-28 2 100 5) -28]
Test Case: 772 | Input/Output: [(99 -37 -32 -28) -37]
Test Case: 773 | Input/Output: [(8 -13 81 -58) -58]
Test Case: 774 | Input/Output: [(84 76 13 68) 13]
Test Case: 775 | Input/Output: [(36 -84 85 9) -84]
Test Case: 776 | Input/Output: [(-40 -80 77 34) -80]
Test Case: 777 | Input/Output: [(-38 35 -17 10) -38]
Test Case: 778 | Input/Output: [(-53 13 -79 -55) -79]
Test Case: 779 | Input/Output: [(81 -34 -69 -61) -69]
Test Case: 780 | Input/Output: [(-85 -72 1 -4) -85]
Test Case: 781 | Input/Output: [(54 -92 -30 65) -92]
Test Case: 782 | Input/Output: [(94 27 -95 89) -95]
Test Case: 783 | Input/Output: [(-82 -8 39 -90) -90]
Test Case: 784 | Input/Output: [(-12 -50 -91 -89) -91]
Test Case: 785 | Input/Output: [(48 -32 -20 -28) -32]
Test Case: 786 | Input/Output: [(-34 -1 -16 25) -34]
Test Case: 787 | Input/Output: [(49 -17 1 37) -17]
Test Case: 788 | Input/Output: [(99 99 7 -100) -100]
Test Case: 789 | Input/Output: [(58 -39 -82 -1) -82]
Test Case: 790 | Input/Output: [(-29 -82 -98 -9) -98]
Test Case: 791 | Input/Output: [(28 -75 26 -24) -75]
Test Case: 792 | Input/Output: [(42 84 60 18) 18]
Test Case: 793 | Input/Output: [(34 -36 -45 -87) -87]
Test Case: 794 | Input/Output: [(22 -29 -80 -2) -80]
Test Case: 795 | Input/Output: [(-35 -27 36 78) -35]
Test Case: 796 | Input/Output: [(45 52 -57 -40) -57]
Test Case: 797 | Input/Output: [(94 -37 83 -85) -85]
Test Case: 798 | Input/Output: [(51 -86 -44 -58) -86]
Test Case: 799 | Input/Output: [(87 -5 40 80) -5]
Test Case: 800 | Input/Output: [(-38 70 82 22) -38]
Test Case: 801 | Input/Output: [(-12 -79 8 55) -79]
Test Case: 802 | Input/Output: [(31 15 -97 -98) -98]
Test Case: 803 | Input/Output: [(-55 53 -25 91) -55]
Test Case: 804 | Input/Output: [(9 17 -44 -98) -98]
Test Case: 805 | Input/Output: [(7 81 -52 42) -52]
Test Case: 806 | Input/Output: [(-3 75 49 -62) -62]
Test Case: 807 | Input/Output: [(-78 18 -5 60) -78]
Test Case: 808 | Input/Output: [(-75 -10 -9 -50) -75]
Test Case: 809 | Input/Output: [(21 13 51 44) 13]
Test Case: 810 | Input/Output: [(81 51 48 9) 9]
Test Case: 811 | Input/Output: [(98 96 40 -99) -99]
Test Case: 812 | Input/Output: [(-55 -71 2 -15) -71]
Test Case: 813 | Input/Output: [(-7 -89 -46 63) -89]
Test Case: 814 | Input/Output: [(51 70 -66 -16) -66]
Test Case: 815 | Input/Output: [(-18 9 13 6) -18]
Test Case: 816 | Input/Output: [(-83 -88 -85 31) -88]
Test Case: 817 | Input/Output: [(9 19 -92 54) -92]
Test Case: 818 | Input/Output: [(-40 -39 44 29) -40]
Test Case: 819 | Input/Output: [(23 -97 -20 -3) -97]
Test Case: 820 | Input/Output: [(97 60 -61 78) -61]
Test Case: 821 | Input/Output: [(20 -29 53 -74) -74]
Test Case: 822 | Input/Output: [(1 -22 75 1) -22]
Test Case: 823 | Input/Output: [(16 81 -21 94) -21]
Test Case: 824 | Input/Output: [(-12 -13 -1 36) -13]
Test Case: 825 | Input/Output: [(-29 88 -78 -1) -78]
Test Case: 826 | Input/Output: [(38 -1 -62 -73) -73]
Test Case: 827 | Input/Output: [(59 28 -57 92) -57]
Test Case: 828 | Input/Output: [(-90 55 21 16) -90]
Test Case: 829 | Input/Output: [(19 16 -8 28) -8]
Test Case: 830 | Input/Output: [(16 78 -65 -84) -84]
Test Case: 831 | Input/Output: [(-48 19 -58 -1) -58]
Test Case: 832 | Input/Output: [(91 -89 65 -52) -89]
Test Case: 833 | Input/Output: [(31 29 -81 -87) -87]
Test Case: 834 | Input/Output: [(33 -56 -6 -17) -56]
Test Case: 835 | Input/Output: [(37 -59 -53 53) -59]
Test Case: 836 | Input/Output: [(47 67 -31 66) -31]
Test Case: 837 | Input/Output: [(97 -73 62 -46) -73]
Test Case: 838 | Input/Output: [(48 -53 -63 -85) -85]
Test Case: 839 | Input/Output: [(-72 66 -27 -94) -94]
Test Case: 840 | Input/Output: [(-42 67 -77 -54) -77]
Test Case: 841 | Input/Output: [(17 -93 63 -76) -93]
Test Case: 842 | Input/Output: [(-10 -27 -13 -27) -27]
Test Case: 843 | Input/Output: [(-45 -95 91 97) -95]
Test Case: 844 | Input/Output: [(-29 -41 33 79) -41]
Test Case: 845 | Input/Output: [(-55 -56 100 -11) -56]
Test Case: 846 | Input/Output: [(54 98 76 53) 53]
Test Case: 847 | Input/Output: [(76 34 -48 -60) -60]
Test Case: 848 | Input/Output: [(-46 -26 -79 68) -79]
Test Case: 849 | Input/Output: [(-27 -15 -1 6) -27]
Test Case: 850 | Input/Output: [(-54 0 -11 -17) -54]
Test Case: 851 | Input/Output: [(80 -16 -80 66) -80]
Test Case: 852 | Input/Output: [(-70 -73 -57 -46) -73]
Test Case: 853 | Input/Output: [(29 -49 58 14) -49]
Test Case: 854 | Input/Output: [(-5 14 -37 -67) -67]
Test Case: 855 | Input/Output: [(79 -9 62 81) -9]
Test Case: 856 | Input/Output: [(100 -33 5 -23) -33]
Test Case: 857 | Input/Output: [(-69 2 45 -8) -69]
Test Case: 858 | Input/Output: [(92 5 -16 -52) -52]
Test Case: 859 | Input/Output: [(-78 27 -31 70) -78]
Test Case: 860 | Input/Output: [(70 57 6 33) 6]
Test Case: 861 | Input/Output: [(93 -82 -2 -40) -82]
Test Case: 862 | Input/Output: [(56 86 -29 15) -29]
Test Case: 863 | Input/Output: [(37 39 40 16) 16]
Test Case: 864 | Input/Output: [(-19 -71 66 51) -71]
Test Case: 865 | Input/Output: [(60 77 -99 -70) -99]
Test Case: 866 | Input/Output: [(19 19 55 -56) -56]
Test Case: 867 | Input/Output: [(70 -70 -93 -55) -93]
Test Case: 868 | Input/Output: [(18 -11 44 27) -11]
Test Case: 869 | Input/Output: [(82 39 70 65) 39]
Test Case: 870 | Input/Output: [(-9 -63 -13 -39) -63]
Test Case: 871 | Input/Output: [(-50 63 -69 -42) -69]
Test Case: 872 | Input/Output: [(71 54 -8 -19) -19]
Test Case: 873 | Input/Output: [(7 -67 3 -3) -67]
Test Case: 874 | Input/Output: [(-25 74 -16 97) -25]
Test Case: 875 | Input/Output: [(-26 -65 25 -69) -69]
Test Case: 876 | Input/Output: [(82 25 0 -76) -76]
Test Case: 877 | Input/Output: [(-71 37 -56 73) -71]
Test Case: 878 | Input/Output: [(-86 -15 -39 -65) -86]
Test Case: 879 | Input/Output: [(86 24 66 57) 24]
Test Case: 880 | Input/Output: [(-29 48 82 -96) -96]
Test Case: 881 | Input/Output: [(-65 27 26 12) -65]
Test Case: 882 | Input/Output: [(93 -13 -53 -100) -100]
Test Case: 883 | Input/Output: [(-41 74 -65 35) -65]
Test Case: 884 | Input/Output: [(84 27 -16 90) -16]
Test Case: 885 | Input/Output: [(-32 -25 -82 26) -82]
Test Case: 886 | Input/Output: [(-15 -91 48 -73) -91]
Test Case: 887 | Input/Output: [(49 -40 30 -14) -40]
Test Case: 888 | Input/Output: [(40 2 55 10) 2]
Test Case: 889 | Input/Output: [(58 55 -100 -65) -100]
Test Case: 890 | Input/Output: [(79 89 -85 53) -85]
Test Case: 891 | Input/Output: [(89 66 -19 -46) -46]
Test Case: 892 | Input/Output: [(-27 29 -53 30) -53]
Test Case: 893 | Input/Output: [(-91 -53 34 -18) -91]
Test Case: 894 | Input/Output: [(74 61 -41 4) -41]
Test Case: 895 | Input/Output: [(-54 -1 -96 95) -96]
Test Case: 896 | Input/Output: [(-7 11 -63 71) -63]
Test Case: 897 | Input/Output: [(7 -52 -34 70) -52]
Test Case: 898 | Input/Output: [(-58 -80 47 -94) -94]
Test Case: 899 | Input/Output: [(-64 63 2 -76) -76]
Test Case: 900 | Input/Output: [(-16 84 71 6) -16]
Test Case: 901 | Input/Output: [(-92 84 -58 47) -92]
Test Case: 902 | Input/Output: [(-80 35 89 -21) -80]
Test Case: 903 | Input/Output: [(-4 -14 99 -20) -20]
Test Case: 904 | Input/Output: [(34 20 -34 -35) -35]
Test Case: 905 | Input/Output: [(-46 67 -57 59) -57]
Test Case: 906 | Input/Output: [(-34 45 -46 -45) -46]
Test Case: 907 | Input/Output: [(48 -49 25 35) -49]
Test Case: 908 | Input/Output: [(64 88 79 -60) -60]
Test Case: 909 | Input/Output: [(15 43 -55 47) -55]
Test Case: 910 | Input/Output: [(-47 94 -62 69) -62]
Test Case: 911 | Input/Output: [(24 -60 -4 -95) -95]
Test Case: 912 | Input/Output: [(-17 -56 93 -87) -87]
Test Case: 913 | Input/Output: [(14 -20 -18 -55) -55]
Test Case: 914 | Input/Output: [(-29 -87 61 27) -87]
Test Case: 915 | Input/Output: [(-26 -37 -48 27) -48]
Test Case: 916 | Input/Output: [(-20 94 -78 -19) -78]
Test Case: 917 | Input/Output: [(21 -63 -37 -22) -63]
Test Case: 918 | Input/Output: [(-35 94 -60 -13) -60]
Test Case: 919 | Input/Output: [(29 -12 -27 -68) -68]
Test Case: 920 | Input/Output: [(67 38 -81 -84) -84]
Test Case: 921 | Input/Output: [(-31 100 -39 87) -39]
Test Case: 922 | Input/Output: [(-42 100 -59 57) -59]
Test Case: 923 | Input/Output: [(2 -4 -50 45) -50]
Test Case: 924 | Input/Output: [(-75 78 78 55) -75]
Test Case: 925 | Input/Output: [(-38 96 -57 -11) -57]
Test Case: 926 | Input/Output: [(2 78 -37 55) -37]
Test Case: 927 | Input/Output: [(27 -59 -79 26) -79]
Test Case: 928 | Input/Output: [(41 87 -57 -80) -80]
Test Case: 929 | Input/Output: [(17 35 87 -43) -43]
Test Case: 930 | Input/Output: [(54 0 3 15) 0]
Test Case: 931 | Input/Output: [(-68 12 -45 87) -68]
Test Case: 932 | Input/Output: [(-56 -83 -81 81) -83]
Test Case: 933 | Input/Output: [(61 81 13 50) 13]
Test Case: 934 | Input/Output: [(23 -87 63 18) -87]
Test Case: 935 | Input/Output: [(41 68 -96 -54) -96]
Test Case: 936 | Input/Output: [(-77 -12 100 -49) -77]
Test Case: 937 | Input/Output: [(-16 100 23 -9) -16]
Test Case: 938 | Input/Output: [(33 33 31 17) 17]
Test Case: 939 | Input/Output: [(-91 95 31 72) -91]
Test Case: 940 | Input/Output: [(-76 48 -6 -29) -76]
Test Case: 941 | Input/Output: [(-100 11 49 -75) -100]
Test Case: 942 | Input/Output: [(-23 92 13 6) -23]
Test Case: 943 | Input/Output: [(48 -63 11 1) -63]
Test Case: 944 | Input/Output: [(-63 50 -82 92) -82]
Test Case: 945 | Input/Output: [(15 -42 -85 25) -85]
Test Case: 946 | Input/Output: [(0 98 90 26) 0]
Test Case: 947 | Input/Output: [(-36 56 79 34) -36]
Test Case: 948 | Input/Output: [(-97 17 25 -24) -97]
Test Case: 949 | Input/Output: [(-49 -14 55 75) -49]
Test Case: 950 | Input/Output: [(-83 -76 95 35) -83]
Test Case: 951 | Input/Output: [(76 -92 34 -5) -92]
Test Case: 952 | Input/Output: [(-6 -93 35 7) -93]
Test Case: 953 | Input/Output: [(-83 48 -24 -19) -83]
Test Case: 954 | Input/Output: [(36 -29 -13 78) -29]
Test Case: 955 | Input/Output: [(50 -74 -30 8) -74]
Test Case: 956 | Input/Output: [(74 95 63 24) 24]
Test Case: 957 | Input/Output: [(-12 47 72 -12) -12]
Test Case: 958 | Input/Output: [(71 -25 -51 12) -51]
Test Case: 959 | Input/Output: [(100 -98 -78 27) -98]
Test Case: 960 | Input/Output: [(25 67 -98 -1) -98]
Test Case: 961 | Input/Output: [(4 -47 34 -96) -96]
Test Case: 962 | Input/Output: [(-63 -69 81 88) -69]
Test Case: 963 | Input/Output: [(-27 -65 -94 -52) -94]
Test Case: 964 | Input/Output: [(40 84 -67 50) -67]
Test Case: 965 | Input/Output: [(-28 -14 98 8) -28]
Test Case: 966 | Input/Output: [(56 2 -51 53) -51]
Test Case: 967 | Input/Output: [(88 -71 -51 -86) -86]
Test Case: 968 | Input/Output: [(-80 -43 -45 -87) -87]
Test Case: 969 | Input/Output: [(95 -70 81 15) -70]
Test Case: 970 | Input/Output: [(-55 18 -77 -49) -77]
Test Case: 971 | Input/Output: [(-70 42 -50 -63) -70]
Test Case: 972 | Input/Output: [(-33 -64 -55 53) -64]
Test Case: 973 | Input/Output: [(28 68 -28 15) -28]
Test Case: 974 | Input/Output: [(37 41 92 -14) -14]
Test Case: 975 | Input/Output: [(88 32 92 99) 32]
Test Case: 976 | Input/Output: [(61 -91 3 89) -91]
Test Case: 977 | Input/Output: [(-21 -64 -75 -6) -75]
Test Case: 978 | Input/Output: [(-11 -59 60 -32) -59]
Test Case: 979 | Input/Output: [(-1 45 9 96) -1]
Test Case: 980 | Input/Output: [(-20 94 10 -48) -48]
Test Case: 981 | Input/Output: [(-61 47 -87 38) -87]
Test Case: 982 | Input/Output: [(-22 69 -47 -24) -47]
Test Case: 983 | Input/Output: [(-62 -78 -11 20) -78]
Test Case: 984 | Input/Output: [(-20 63 23 67) -20]
Test Case: 985 | Input/Output: [(94 64 -22 -93) -93]
Test Case: 986 | Input/Output: [(-98 60 -24 77) -98]
Test Case: 987 | Input/Output: [(-96 -85 -76 -52) -96]
Test Case: 988 | Input/Output: [(18 95 -2 -40) -40]
Test Case: 989 | Input/Output: [(51 11 -95 25) -95]
Test Case: 990 | Input/Output: [(-89 -29 9 -71) -89]
Test Case: 991 | Input/Output: [(-78 -6 22 66) -78]
Test Case: 992 | Input/Output: [(46 -34 -85 -31) -85]
Test Case: 993 | Input/Output: [(-42 -84 6 63) -84]
Test Case: 994 | Input/Output: [(8 -43 -30 -29) -43]
Test Case: 995 | Input/Output: [(-47 -4 96 30) -47]
Test Case: 996 | Input/Output: [(-6 -76 9 39) -76]
Test Case: 997 | Input/Output: [(63 30 -66 -99) -99]
Test Case: 998 | Input/Output: [(34 -22 -91 -57) -91]
Test Case: 999 | Input/Output: [(27 -41 2 96) -41]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x6b899971 clojush.problems.software.smallest$fn__7461@6b899971] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x7cec3975 clojush.instructions.tag$tag_instruction_erc$fn__2160@7cec3975] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x205f52ea clojush.instructions.tag$tagged_instruction_erc$fn__2166@205f52ea] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x20155dae clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@20155dae]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_initial_report@2a4cb8ae]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x17e6b7e4 clojush.problems.software.smallest$smallest_report@17e6b7e4]
random-screen = false
random-seed = 22 -108 -28 56 -16 -82 125 103 121 49 -62 -42 -5 123 -66 29
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-35 -33 -33 -33] -35] [[47 -25 -25 -25] -25] [[-16 -16 -16 84] -16] [[-48 -1 -1 -1] -48] [[-64 -64 -49 -64] -64] [[-75 -88 -75 -75] -88] [[12 -9 -9 -9] -9] [[-22 24 24 24] -22] [[-89 -29 -89 -89] -89] [[48 -3 -3 -3] -3] [(92 92 92 92) 92] [(90 90 90 90) 90] [(-63 -63 -63 -63) -63] [(83 83 83 83) 83] [(-93 -93 -93 -93) -93] [(31 9 57 51) 9] [(20 46 93 8) 8] [(61 23 6 36) 6] [(69 0 4 57) 0] [(66 90 78 9) 9] [(33 50 89 43) 33] [(74 11 24 56) 11] [(11 96 94 81) 11] [(50 97 43 29) 29] [(27 2 1 53) 1] [(45 71 56 86) 45] [(67 40 89 79) 40] [(71 87 60 32) 32] [(10 41 60 32) 10] [(31 6 38 32) 6] [(38 93 59 55) 38] [(4 63 92 43) 4] [(86 17 3 88) 3] [(12 20 50 25) 12] [(19 0 55 94) 0] [(67 -23 57 76) -23] [(-20 -68 86 89) -68] [(-98 80 16 -35) -98] [(7 -40 -32 -63) -63] [(-43 -42 17 -90) -90] [(13 60 90 75) 13] [(71 47 -54 -63) -63] [(34 72 35 -66) -66] [(15 -44 -80 -33) -80] [(10 -98 69 -63) -98] [(-41 -50 -45 -66) -66] [(3 -29 -91 -57) -91] [(39 -89 39 18) -89] [(-3 -64 -99 -43) -99] [(21 21 16 15) 15] [(-48 -62 -59 -90) -90] [(-11 -54 -82 88) -82] [(18 55 13 -29) -29] [(-93 -97 -71 -29) -97] [(81 -9 82 14) -9] [(-45 -51 15 -19) -51] [(-21 -59 -3 65) -59] [(32 -49 21 56) -49] [(-5 -40 -26 77) -40] [(-1 -86 -17 -59) -86] [(8 43 -5 -69) -69] [(85 -9 -14 47) -14] [(-62 50 19 96) -62] [(-74 61 -55 -72) -74] [(-20 26 -43 46) -43] [(-89 -48 16 43) -89] [(36 27 74 22) 22] [(-44 -16 -27 -34) -44] [(-98 -19 -82 -75) -98] [(-23 43 -86 26) -86] [(21 59 -42 65) -42] [(-24 27 92 -66) -66] [(23 -17 -94 8) -94] [(-84 -48 78 -75) -84] [(98 -85 73 99) -85] [(19 -53 -89 79) -89] [(15 55 97 54) 15] [(94 -76 -93 7) -93] [(-73 89 42 -70) -73] [(23 -50 23 -73) -73] [(60 100 -16 -99) -99] [(-29 -89 -55 -2) -89] [(-84 -45 -70 -49) -84] [(37 -17 -4 82) -17] [(78 50 80 37) 37] [(74 85 6 -53) -53] [(-68 66 -20 -33) -68] [(66 -58 -36 73) -58] [(14 47 25 16) 14] [(-77 77 -61 -44) -77] [(81 -28 -33 43) -33] [(32 -96 -59 -51) -96] [(7 -12 43 -33) -33] [(8 -90 -77 -50) -90] [(-46 86 -24 8) -46])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: 47                 
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -75                
Correct output: -9                  | Program output: 12                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: 48                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 31                 
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 61                 
Correct output: 0                   | Program output: 69                 
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 74                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 50                 
Correct output: 1                   | Program output: 27                 
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 67                 
Correct output: 32                  | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 86                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 19                 
Correct output: -23                 | Program output: 67                 
Correct output: -68                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 7                  
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: 71                 
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -66                 | Program output: -41                
Correct output: -91                 | Program output: 3                  
Correct output: -89                 | Program output: 39                 
Correct output: -99                 | Program output: -3                 
Correct output: 15                  | Program output: 21                 
Correct output: -90                 | Program output: -48                
Correct output: -82                 | Program output: -11                
Correct output: -29                 | Program output: 18                 
Correct output: -97                 | Program output: -93                
Correct output: -9                  | Program output: 81                 
Correct output: -51                 | Program output: -45                
Correct output: -59                 | Program output: -21                
Correct output: -49                 | Program output: 32                 
Correct output: -40                 | Program output: -5                 
Correct output: -86                 | Program output: -1                 
Correct output: -69                 | Program output: 8                  
Correct output: -14                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: 23                 
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: 98                 
Correct output: -89                 | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: 94                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 23                 
Correct output: -99                 | Program output: 60                 
Correct output: -89                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 37                 
Correct output: 37                  | Program output: 78                 
Correct output: -53                 | Program output: 74                 
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: 66                 
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 81                 
Correct output: -96                 | Program output: 32                 
Correct output: -33                 | Program output: 7                  
Correct output: -90                 | Program output: 8                  
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 3, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_538} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_eq integer_flush integer_fromboolean integer_swap boolean_rot exec_do*while (boolean_not in1 boolean_or boolean_xor boolean_swap print_integer boolean_invert_first_then_and exec_s () (integer_min) (in4 integer_fromboolean integer_gt) boolean_and integer_div exec_when (exec_rot (exec_do*times (integer_dup_items exec_flush) integer_yankdup integer_dec integer_rot) () () integer_sub boolean_xor boolean_invert_first_then_and) exec_k_when_autoconstructing (in4 integer_lte) (integer_stackdepth boolean_shove integer_inc) boolean_xor integer_sub integer_yank integer_add integer_dup_items integer_dec) in1 in2 exec_k (tag_boolean_538) (integer_eq exec_dup_items boolean_stackdepth) boolean_flush integer_min integer_dup exec_yank exec_k_when_autoconstructing (integer_gt) ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_eq} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 3, :instruction integer_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 1, :instruction tag_boolean_538} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_eq integer_flush integer_fromboolean integer_swap boolean_rot exec_do*while (boolean_not in1 boolean_or boolean_xor boolean_swap print_integer boolean_invert_first_then_and exec_s () (integer_min) (in4 integer_fromboolean integer_gt) boolean_and integer_div exec_when (exec_rot (exec_do*times (integer_dup_items exec_flush) integer_yankdup integer_dec integer_rot) () () integer_sub boolean_xor boolean_invert_first_then_and) exec_k_when_autoconstructing (in4 integer_lte) (integer_stackdepth boolean_shove integer_inc) boolean_xor integer_sub integer_yank integer_add integer_dup_items integer_dec) in1 in2 exec_k (tag_boolean_538) (integer_eq exec_dup_items boolean_stackdepth) boolean_flush integer_min integer_dup exec_yank exec_k_when_autoconstructing (integer_gt) ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 5 3 4 4 12 5 4 3 7)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (18 5 3 4 4 12 5 4 3 7)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_rot} {:close 0, :instruction 0} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 2, :instruction integer_pop} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction tag_exec_25} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_780} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_empty} {:close 1, :instruction exec_k} {:close 0, :instruction print_exec} {:close 1, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_k} {:close 1, :instruction in3} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k})
Best program: (integer_shove in1 exec_stackdepth integer_empty boolean_empty boolean_or integer_dup_times exec_eq boolean_eq integer_min integer_lte integer_yank boolean_empty boolean_dup_items boolean_rot 0 exec_empty exec_when (integer_flush exec_dup_items) integer_fromboolean integer_dup_items integer_pop integer_lte exec_empty boolean_invert_second_then_and print_integer exec_pop (tag_exec_25 (exec_pop (integer_swap integer_lte) integer_dup exec_empty boolean_stackdepth exec_flush exec_eq exec_k (tag_boolean_780 exec_s (boolean_flush integer_min) (integer_gt exec_do*range () boolean_dup_items boolean_eq integer_gt exec_noop boolean_invert_second_then_and exec_when (exec_dup (integer_inc exec_do*count (integer_dup_items) integer_mult boolean_empty exec_stackdepth integer_sub integer_stackdepth boolean_shove integer_empty) exec_dup (exec_rot (exec_dup_times () exec_do*times (integer_empty) exec_k () (print_exec (in2) exec_shove (integer_fromboolean integer_stackdepth) print_integer exec_y_when_autoconstructing () boolean_swap boolean_eq exec_k (in3) (integer_gt exec_s_when_autoconstructing (boolean_eq boolean_not integer_max exec_if (boolean_invert_second_then_and integer_dup integer_sub) (exec_yank) exec_when () exec_rot (exec_k () ()) () ()) () ()))) () ()))) ()) ())))
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 91
Size: 129
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 9.935
Median total errors in population: 10
Error averages by case: (0.982 0.995 0.997 0.996 0.996 0.988 0.995 0.996 0.997 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.001
Average program size in population (points): 67.512
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 480685
--- Timings ---
Current time: 1559583549425 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.8 seconds, 30.1%
Fitness Testing:      1.7 seconds, 65.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 669
Test mean error for best: 0.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: 47                 
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -75                
Correct output: -9                  | Program output: 12                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: 48                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 31                 
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 61                 
Correct output: 0                   | Program output: 69                 
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 74                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 50                 
Correct output: 1                   | Program output: 27                 
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 67                 
Correct output: 32                  | Program output: 71                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 31                 
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 86                 
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 19                 
Correct output: -23                 | Program output: 67                 
Correct output: -68                 | Program output: -20                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 7                  
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: 71                 
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: 15                 
Correct output: -98                 | Program output: 10                 
Correct output: -66                 | Program output: -41                
Correct output: -91                 | Program output: 3                  
Correct output: -89                 | Program output: 39                 
Correct output: -99                 | Program output: -3                 
Correct output: 15                  | Program output: 21                 
Correct output: -90                 | Program output: -48                
Correct output: -82                 | Program output: -11                
Correct output: -29                 | Program output: 18                 
Correct output: -97                 | Program output: -93                
Correct output: -9                  | Program output: 81                 
Correct output: -51                 | Program output: -45                
Correct output: -59                 | Program output: -21                
Correct output: -49                 | Program output: 32                 
Correct output: -40                 | Program output: -5                 
Correct output: -86                 | Program output: -1                 
Correct output: -69                 | Program output: 8                  
Correct output: -14                 | Program output: 85                 
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -20                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 36                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -23                
Correct output: -42                 | Program output: 21                 
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: 23                 
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: 98                 
Correct output: -89                 | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: 94                 
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: 23                 
Correct output: -99                 | Program output: 60                 
Correct output: -89                 | Program output: -29                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: 37                 
Correct output: 37                  | Program output: 78                 
Correct output: -53                 | Program output: 74                 
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: 66                 
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: 81                 
Correct output: -96                 | Program output: 32                 
Correct output: -33                 | Program output: 7                  
Correct output: -90                 | Program output: 8                  
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_exec_912} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_458} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt})
Lexicase best program: (exec_noop print_integer in1 print_integer exec_dup_items exec_empty exec_dup_times (exec_stackdepth exec_flush integer_swap boolean_eq) integer_rot integer_flush boolean_rot boolean_rot integer_shove exec_yankdup exec_rot () (exec_noop) (in4 exec_yankdup tag_exec_912 (integer_mult integer_lte integer_yank exec_k_when_autoconstructing (exec_yankdup integer_dup integer_mod boolean_pop exec_yankdup in4 integer_pop boolean_rot) (integer_dup boolean_shove) exec_y () boolean_and integer_stackdepth exec_s (boolean_invert_first_then_and) (exec_k_when_autoconstructing (boolean_dup_items exec_y (exec_yankdup) boolean_invert_first_then_and) (tagged_458 print_newline boolean_empty) integer_mult boolean_invert_first_then_and) (boolean_shove)) exec_yank exec_k_when_autoconstructing (integer_gt) ()))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_exec_912} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_y} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_458} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_invert_first_then_and} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt})
Zero cases best program: (exec_noop print_integer in1 print_integer exec_dup_items exec_empty exec_dup_times (exec_stackdepth exec_flush integer_swap boolean_eq) integer_rot integer_flush boolean_rot boolean_rot integer_shove exec_yankdup exec_rot () (exec_noop) (in4 exec_yankdup tag_exec_912 (integer_mult integer_lte integer_yank exec_k_when_autoconstructing (exec_yankdup integer_dup integer_mod boolean_pop exec_yankdup in4 integer_pop boolean_rot) (integer_dup boolean_shove) exec_y () boolean_and integer_stackdepth exec_s (boolean_invert_first_then_and) (exec_k_when_autoconstructing (boolean_dup_items exec_y (exec_yankdup) boolean_invert_first_then_and) (tagged_458 print_newline boolean_empty) integer_mult boolean_invert_first_then_and) (boolean_shove)) exec_yank exec_k_when_autoconstructing (integer_gt) ()))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (881 779 409 369 879 102 410 102 410 1000)
Population mean number of elite cases: 5.34
Count of perfect (error zero) individuals by case: (881 779 409 369 879 102 410 102 410 0)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 1, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_eq} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_min})
Best program: (exec_noop print_integer in1 print_integer exec_dup_items exec_empty exec_dup_times (exec_stackdepth exec_flush integer_swap boolean_eq) integer_rot integer_flush boolean_rot exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not exec_when () in2 integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (boolean_and integer_min integer_sub in1) () exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) integer_dup_times) in1 exec_do*range (exec_do*while (integer_min)))))
Errors: [0 0 0 1 0 1 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 72
Size: 92
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 5.659
Median total errors in population: 6
Error averages by case: (0.119 0.221 0.591 0.631 0.121 0.898 0.59 0.898 0.59 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 55.588
Average program size in population (points): 74.946
Average percent parens in population: 0.253
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.506
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 946952
--- Timings ---
Current time: 1559583551786 milliseconds
Total Time:           5.1 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.4 seconds, 46.6%
Fitness Testing:      2.2 seconds, 42.7%
Report:               0.4 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Lexicase best errors: [0 0 0 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Zero cases best errors: [0 0 0 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 441 374 360 1000 358 1000 1000 1000 1000)
Population mean number of elite cases: 6.90
Count of perfect (error zero) individuals by case: (370 441 374 360 0 358 0 0 0 0)
Population mean number of perfect (error zero) cases: 1.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Errors: [0 0 0 0 1 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 8.097
Median total errors in population: 9
Error averages by case: (0.63 0.559 0.626 0.64 1.0 0.642 1.0 1.0 1.0 1.0)
Error minima by case: (0 0 0 0 1 0 1 1 1 1)
Average genome size in population (length): 66.754
Average program size in population (points): 89.011
Average percent parens in population: 0.245
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.7205
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1297606
--- Timings ---
Current time: 1559583554597 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         4.4 seconds, 56.4%
Fitness Testing:      2.6 seconds, 33.3%
Report:               0.7 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 46} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq integer_rot boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_mult in2 in4 integer_mod) exec_while (46 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 46} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq integer_rot boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_mult in2 in4 integer_mod) exec_while (46 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (790 752 748 1000 753 829 814 812 752 830)
Population mean number of elite cases: 8.08
Count of perfect (error zero) individuals by case: (790 752 748 0 753 829 814 812 752 830)
Population mean number of perfect (error zero) cases: 7.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing () print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and) integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 2.92
Median total errors in population: 1
Error averages by case: (0.21 0.248 0.252 1.0 0.247 0.171 0.186 0.188 0.248 0.17)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 65.001
Average program size in population (points): 84.0
Average percent parens in population: 0.226
Minimum age in population: 4.0
Maximum age in population: 5.0
Average age in population: 4.503
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 376
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 383
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.009
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1708974
--- Timings ---
Current time: 1559583557330 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.4 seconds, 60.3%
Fitness Testing:      3.0 seconds, 28.2%
Report:               1.1 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))
Lexicase best errors: [0 1 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 84
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))
Zero cases best errors: [0 1 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 84
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (821 1 810 739 1 790 1 1 739 744)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (821 1 810 739 1 790 1 1 739 744)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Errors: [0 1 0 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.353
Median total errors in population: 4
Error averages by case: (0.179 0.999 0.19 0.261 0.999 0.21 0.999 0.999 0.261 0.256)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.175
Average program size in population (points): 84.157
Average percent parens in population: 0.225
Minimum age in population: 5.0
Maximum age in population: 7.0
Average age in population: 5.98
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 190
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2138634
--- Timings ---
Current time: 1559583559982 milliseconds
Total Time:          13.2 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.3 seconds, 62.5%
Fitness Testing:      3.3 seconds, 25.3%
Report:               1.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items in4 integer_flush exec_if () (exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (boolean_eq boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items) boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times (boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 78
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items in4 integer_flush exec_if () (exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (boolean_eq boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items) boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times (boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 78
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (409 403 1 439 407 714 406 442 714 442)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (409 403 1 439 407 714 406 442 714 442)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (boolean_empty integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 84
Percent parens: 0.226
--- Population Statistics ---
Average total errors in population: 5.623
Median total errors in population: 8
Error averages by case: (0.591 0.597 0.999 0.561 0.593 0.286 0.594 0.558 0.286 0.558)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.267
Average program size in population (points): 83.951
Average percent parens in population: 0.222
Minimum age in population: 6.0
Maximum age in population: 8.75
Average age in population: 7.12175
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2781055
--- Timings ---
Current time: 1559583562781 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:        10.1 seconds, 63.3%
Fitness Testing:      3.9 seconds, 24.2%
Report:               1.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 216
Test mean error for best: 0.21600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (in4 integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 integer_empty boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 82
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction in4} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (integer_mult exec_if () (exec_do*count (in4 integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 integer_empty boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 82
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (779 821 134 819 134 608 785 820 831 607)
Population mean number of elite cases: 6.34
Count of perfect (error zero) individuals by case: (779 821 134 819 134 608 785 820 831 607)
Population mean number of perfect (error zero) cases: 6.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_do*count (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 in2 boolean_or boolean_invert_first_then_and integer_lt) exec_pop (boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and) boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth))))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 68
Size: 88
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 3.662
Median total errors in population: 2
Error averages by case: (0.221 0.179 0.866 0.181 0.866 0.392 0.215 0.18 0.169 0.393)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.132
Average program size in population (points): 82.615
Average percent parens in population: 0.224
Minimum age in population: 7.0
Maximum age in population: 10.625
Average age in population: 8.846125
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.809
Total error diversity:				 0.009
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3237861
--- Timings ---
Current time: 1559583565458 milliseconds
Total Time:          18.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        12.0 seconds, 64.3%
Fitness Testing:      4.3 seconds, 22.8%
Report:               2.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 1
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod})
Lexicase best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_do*count (exec_if () (exec_do*count (integer_swap integer_swap) exec_dup_items) exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items exec_yank integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 75
Percent parens: 0.253
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod})
Zero cases best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_do*count (exec_if () (exec_do*count (integer_swap integer_swap) exec_dup_items) exec_shove (integer_mult exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1)) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items exec_yank integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 75
Percent parens: 0.253
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 833 531 533 813 530 831 791 788 535)
Population mean number of elite cases: 6.72
Count of perfect (error zero) individuals by case: (534 833 531 533 813 530 831 791 788 535)
Population mean number of perfect (error zero) cases: 6.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_238} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 2, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_sub} {:close 1, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_shove} {:close 2, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_while} {:close 0, :instruction 44} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_stackdepth})
Best program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 60
Size: 79
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 3.281
Median total errors in population: 5/2
Error averages by case: (0.466 0.167 0.469 0.467 0.187 0.47 0.169 0.209 0.212 0.465)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.413
Average program size in population (points): 82.831
Average percent parens in population: 0.222
Minimum age in population: 8.0
Maximum age in population: 11.875
Average age in population: 10.0680625
Median age in population: 10.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.011
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3703523
--- Timings ---
Current time: 1559583568123 milliseconds
Total Time:          21.3 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.9 seconds, 65.0%
Fitness Testing:      4.7 seconds, 21.9%
Report:               2.7 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 7
Successful program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 79


Auto-simplifying with starting size: 79
step: 0
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 500
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1000
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1500
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2000
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2500
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3000
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3500
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4000
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4500
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 5000
program: (boolean_shove exec_noop integer_div exec_dup_items exec_shove (exec_dup_times (exec_if () (exec_do*count (integer_swap integer_swap) exec_rot (in2 boolean_not integer_yank boolean_stackdepth tagged_238 boolean_not integer_pop) (in3 integer_min integer_sub in1) () integer_min integer_sub in1) exec_when (exec_do*while (boolean_pop integer_fromboolean integer_inc boolean_swap exec_shove (exec_pop ()) boolean_yank exec_while (integer_eq boolean_dup_items boolean_or integer_min boolean_swap) exec_y_when_autoconstructing (print_integer integer_div exec_flush boolean_eq integer_div in2 in4 integer_mod) exec_while (44 boolean_shove boolean_rot exec_do*times () boolean_invert_second_then_and boolean_eq) in1 exec_do*range (exec_do*while (integer_stackdepth)))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 216
Test mean error for best: 0.21600
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 1
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 1
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 1
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 1
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 1
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 1
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 1
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 1
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 1
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -35                 | Program output: -35                
Correct output: -25                 | Program output: -25                
Correct output: -16                 | Program output: -16                
Correct output: -48                 | Program output: -48                
Correct output: -64                 | Program output: -64                
Correct output: -88                 | Program output: -88                
Correct output: -9                  | Program output: -9                 
Correct output: -22                 | Program output: -22                
Correct output: -89                 | Program output: -89                
Correct output: -3                  | Program output: -3                 
Correct output: 92                  | Program output: 92                 
Correct output: 90                  | Program output: 90                 
Correct output: -63                 | Program output: -63                
Correct output: 83                  | Program output: 83                 
Correct output: -93                 | Program output: -93                
Correct output: 9                   | Program output: 9                  
Correct output: 8                   | Program output: 20                 
Correct output: 6                   | Program output: 6                  
Correct output: 0                   | Program output: 0                  
Correct output: 9                   | Program output: 66                 
Correct output: 33                  | Program output: 33                 
Correct output: 11                  | Program output: 11                 
Correct output: 11                  | Program output: 11                 
Correct output: 29                  | Program output: 43                 
Correct output: 1                   | Program output: 1                  
Correct output: 45                  | Program output: 45                 
Correct output: 40                  | Program output: 40                 
Correct output: 32                  | Program output: 60                 
Correct output: 10                  | Program output: 10                 
Correct output: 6                   | Program output: 6                  
Correct output: 38                  | Program output: 38                 
Correct output: 4                   | Program output: 4                  
Correct output: 3                   | Program output: 3                  
Correct output: 12                  | Program output: 12                 
Correct output: 0                   | Program output: 0                  
Correct output: -23                 | Program output: -23                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -40                
Correct output: -90                 | Program output: -43                
Correct output: 13                  | Program output: 13                 
Correct output: -63                 | Program output: -54                
Correct output: -66                 | Program output: 34                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -66                 | Program output: -50                
Correct output: -91                 | Program output: -91                
Correct output: -89                 | Program output: -89                
Correct output: -99                 | Program output: -99                
Correct output: 15                  | Program output: 16                 
Correct output: -90                 | Program output: -62                
Correct output: -82                 | Program output: -82                
Correct output: -29                 | Program output: 13                 
Correct output: -97                 | Program output: -97                
Correct output: -9                  | Program output: -9                 
Correct output: -51                 | Program output: -51                
Correct output: -59                 | Program output: -59                
Correct output: -49                 | Program output: -49                
Correct output: -40                 | Program output: -40                
Correct output: -86                 | Program output: -86                
Correct output: -69                 | Program output: -5                 
Correct output: -14                 | Program output: -14                
Correct output: -62                 | Program output: -62                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -89                 | Program output: -89                
Correct output: 22                  | Program output: 27                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -42                 | Program output: -42                
Correct output: -66                 | Program output: -24                
Correct output: -94                 | Program output: -94                
Correct output: -84                 | Program output: -84                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -89                
Correct output: 15                  | Program output: 15                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -73                 | Program output: -50                
Correct output: -99                 | Program output: -16                
Correct output: -89                 | Program output: -89                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 37                  | Program output: 50                 
Correct output: -53                 | Program output: 6                  
Correct output: -68                 | Program output: -68                
Correct output: -58                 | Program output: -58                
Correct output: 14                  | Program output: 14                 
Correct output: -77                 | Program output: -77                
Correct output: -33                 | Program output: -33                
Correct output: -96                 | Program output: -96                
Correct output: -33                 | Program output: -12                
Correct output: -90                 | Program output: -90                
Correct output: -46                 | Program output: -46                
;;******************************
