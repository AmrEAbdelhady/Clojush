Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true :down-sample-factor 0.1 :max-generations 2000
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
down-sample-factor = 0.1
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-67 -67 -77 -67] -77] [[-30 -60 -60 -60] -60] [[-51 -51 -14 -51] -51] [[62 85 62 62] 62] [[93 93 93 -78] -78] [[24 -67 -67 -67] -67] [[88 88 88 -100] -100] [[66 66 66 35] 35] [[12 12 12 59] 12] [[96 -49 96 96] -49] [(-90 -90 -90 -90) -90] [(-11 -11 -11 -11) -11] [(-80 -80 -80 -80) -80] [(58 58 58 58) 58] [(-71 -71 -71 -71) -71] [(5 36 62 76) 5] [(3 72 52 96) 3] [(2 98 82 44) 2] [(60 27 25 48) 25] [(53 64 12 67) 12] [(75 77 64 19) 19] [(9 20 29 6) 6] [(15 56 47 48) 15] [(1 82 3 75) 1] [(0 18 99 66) 0] [(70 75 28 51) 28] [(23 89 56 95) 23] [(30 25 62 82) 25] [(39 53 6 18) 6] [(69 12 100 95) 12] [(90 46 90 98) 46] [(73 82 29 18) 18] [(35 39 74 54) 35] [(20 76 57 78) 20] [(10 83 64 10) 10] [(85 -31 36 71) -31] [(37 4 60 0) 0] [(37 -55 1 89) -55] [(-37 35 80 -54) -54] [(51 60 57 12) 12] [(-89 79 1 4) -89] [(-46 84 -70 63) -70] [(16 89 8 52) 8] [(12 -25 -38 11) -38] [(60 78 46 53) 46] [(-28 -73 83 55) -73] [(22 -68 35 -10) -68] [(-39 71 2 8) -39] [(60 48 34 75) 34] [(18 -20 82 -56) -56] [(-78 -1 56 86) -78] [(94 99 -45 -31) -45] [(25 -95 -80 -60) -95] [(-40 85 50 -54) -54] [(-70 55 22 39) -70] [(-87 -97 66 22) -97] [(10 -69 42 12) -69] [(-47 25 17 -93) -93] [(100 42 -54 -82) -82] [(-65 90 36 -44) -65] [(-48 -71 -99 -22) -99] [(65 37 -56 -33) -56] [(54 -64 32 27) -64] [(79 -96 -86 58) -96] [(-40 -34 42 37) -40] [(-65 81 26 79) -65] [(-90 41 -61 -94) -94] [(0 66 -80 -8) -80] [(10 3 88 -93) -93] [(35 9 0 24) 0] [(-46 96 61 -79) -79] [(32 -93 54 -13) -93] [(53 -44 11 -76) -76] [(-67 10 -93 30) -93] [(82 24 66 98) 24] [(76 -13 -74 -92) -92] [(61 84 69 -18) -18] [(77 -83 40 -73) -83] [(-71 46 -32 60) -71] [(12 -43 35 44) -43] [(-72 -46 59 97) -72] [(69 75 -97 79) -97] [(-58 97 77 6) -58] [(-34 -72 -28 -44) -72] [(55 -83 51 15) -83] [(-82 -61 -37 -49) -82] [(25 45 34 34) 25] [(-31 83 35 29) -31] [(29 -41 11 41) -41] [(-21 -51 -33 91) -51] [(-60 87 -82 -16) -82] [(21 -88 2 -94) -94] [(28 93 20 75) 20] [(-89 71 -66 -63) -89] [(42 -70 -23 94) -70])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-67 -67 -77 -67] -77]
Train Case:   6 | Input/Output: [[-30 -60 -60 -60] -60]
Train Case:   7 | Input/Output: [[-51 -51 -14 -51] -51]
Train Case:   8 | Input/Output: [[62 85 62 62] 62]
Train Case:   9 | Input/Output: [[93 93 93 -78] -78]
Train Case:  10 | Input/Output: [[24 -67 -67 -67] -67]
Train Case:  11 | Input/Output: [[88 88 88 -100] -100]
Train Case:  12 | Input/Output: [[66 66 66 35] 35]
Train Case:  13 | Input/Output: [[12 12 12 59] 12]
Train Case:  14 | Input/Output: [[96 -49 96 96] -49]
Train Case:  15 | Input/Output: [(-90 -90 -90 -90) -90]
Train Case:  16 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  17 | Input/Output: [(-80 -80 -80 -80) -80]
Train Case:  18 | Input/Output: [(58 58 58 58) 58]
Train Case:  19 | Input/Output: [(-71 -71 -71 -71) -71]
Train Case:  20 | Input/Output: [(5 36 62 76) 5]
Train Case:  21 | Input/Output: [(3 72 52 96) 3]
Train Case:  22 | Input/Output: [(2 98 82 44) 2]
Train Case:  23 | Input/Output: [(60 27 25 48) 25]
Train Case:  24 | Input/Output: [(53 64 12 67) 12]
Train Case:  25 | Input/Output: [(75 77 64 19) 19]
Train Case:  26 | Input/Output: [(9 20 29 6) 6]
Train Case:  27 | Input/Output: [(15 56 47 48) 15]
Train Case:  28 | Input/Output: [(1 82 3 75) 1]
Train Case:  29 | Input/Output: [(0 18 99 66) 0]
Train Case:  30 | Input/Output: [(70 75 28 51) 28]
Train Case:  31 | Input/Output: [(23 89 56 95) 23]
Train Case:  32 | Input/Output: [(30 25 62 82) 25]
Train Case:  33 | Input/Output: [(39 53 6 18) 6]
Train Case:  34 | Input/Output: [(69 12 100 95) 12]
Train Case:  35 | Input/Output: [(90 46 90 98) 46]
Train Case:  36 | Input/Output: [(73 82 29 18) 18]
Train Case:  37 | Input/Output: [(35 39 74 54) 35]
Train Case:  38 | Input/Output: [(20 76 57 78) 20]
Train Case:  39 | Input/Output: [(10 83 64 10) 10]
Train Case:  40 | Input/Output: [(85 -31 36 71) -31]
Train Case:  41 | Input/Output: [(37 4 60 0) 0]
Train Case:  42 | Input/Output: [(37 -55 1 89) -55]
Train Case:  43 | Input/Output: [(-37 35 80 -54) -54]
Train Case:  44 | Input/Output: [(51 60 57 12) 12]
Train Case:  45 | Input/Output: [(-89 79 1 4) -89]
Train Case:  46 | Input/Output: [(-46 84 -70 63) -70]
Train Case:  47 | Input/Output: [(16 89 8 52) 8]
Train Case:  48 | Input/Output: [(12 -25 -38 11) -38]
Train Case:  49 | Input/Output: [(60 78 46 53) 46]
Train Case:  50 | Input/Output: [(-28 -73 83 55) -73]
Train Case:  51 | Input/Output: [(22 -68 35 -10) -68]
Train Case:  52 | Input/Output: [(-39 71 2 8) -39]
Train Case:  53 | Input/Output: [(60 48 34 75) 34]
Train Case:  54 | Input/Output: [(18 -20 82 -56) -56]
Train Case:  55 | Input/Output: [(-78 -1 56 86) -78]
Train Case:  56 | Input/Output: [(94 99 -45 -31) -45]
Train Case:  57 | Input/Output: [(25 -95 -80 -60) -95]
Train Case:  58 | Input/Output: [(-40 85 50 -54) -54]
Train Case:  59 | Input/Output: [(-70 55 22 39) -70]
Train Case:  60 | Input/Output: [(-87 -97 66 22) -97]
Train Case:  61 | Input/Output: [(10 -69 42 12) -69]
Train Case:  62 | Input/Output: [(-47 25 17 -93) -93]
Train Case:  63 | Input/Output: [(100 42 -54 -82) -82]
Train Case:  64 | Input/Output: [(-65 90 36 -44) -65]
Train Case:  65 | Input/Output: [(-48 -71 -99 -22) -99]
Train Case:  66 | Input/Output: [(65 37 -56 -33) -56]
Train Case:  67 | Input/Output: [(54 -64 32 27) -64]
Train Case:  68 | Input/Output: [(79 -96 -86 58) -96]
Train Case:  69 | Input/Output: [(-40 -34 42 37) -40]
Train Case:  70 | Input/Output: [(-65 81 26 79) -65]
Train Case:  71 | Input/Output: [(-90 41 -61 -94) -94]
Train Case:  72 | Input/Output: [(0 66 -80 -8) -80]
Train Case:  73 | Input/Output: [(10 3 88 -93) -93]
Train Case:  74 | Input/Output: [(35 9 0 24) 0]
Train Case:  75 | Input/Output: [(-46 96 61 -79) -79]
Train Case:  76 | Input/Output: [(32 -93 54 -13) -93]
Train Case:  77 | Input/Output: [(53 -44 11 -76) -76]
Train Case:  78 | Input/Output: [(-67 10 -93 30) -93]
Train Case:  79 | Input/Output: [(82 24 66 98) 24]
Train Case:  80 | Input/Output: [(76 -13 -74 -92) -92]
Train Case:  81 | Input/Output: [(61 84 69 -18) -18]
Train Case:  82 | Input/Output: [(77 -83 40 -73) -83]
Train Case:  83 | Input/Output: [(-71 46 -32 60) -71]
Train Case:  84 | Input/Output: [(12 -43 35 44) -43]
Train Case:  85 | Input/Output: [(-72 -46 59 97) -72]
Train Case:  86 | Input/Output: [(69 75 -97 79) -97]
Train Case:  87 | Input/Output: [(-58 97 77 6) -58]
Train Case:  88 | Input/Output: [(-34 -72 -28 -44) -72]
Train Case:  89 | Input/Output: [(55 -83 51 15) -83]
Train Case:  90 | Input/Output: [(-82 -61 -37 -49) -82]
Train Case:  91 | Input/Output: [(25 45 34 34) 25]
Train Case:  92 | Input/Output: [(-31 83 35 29) -31]
Train Case:  93 | Input/Output: [(29 -41 11 41) -41]
Train Case:  94 | Input/Output: [(-21 -51 -33 91) -51]
Train Case:  95 | Input/Output: [(-60 87 -82 -16) -82]
Train Case:  96 | Input/Output: [(21 -88 2 -94) -94]
Train Case:  97 | Input/Output: [(28 93 20 75) 20]
Train Case:  98 | Input/Output: [(-89 71 -66 -63) -89]
Train Case:  99 | Input/Output: [(42 -70 -23 94) -70]
Test Case:   0 | Input/Output: [[37 -20 -20 -20] -20]
Test Case:   1 | Input/Output: [[-7 12 -7 -7] -7]
Test Case:   2 | Input/Output: [[3 3 -66 3] -66]
Test Case:   3 | Input/Output: [[-82 -82 -82 -6] -82]
Test Case:   4 | Input/Output: [[-54 -54 20 -54] -54]
Test Case:   5 | Input/Output: [[-94 -24 -24 -24] -94]
Test Case:   6 | Input/Output: [[6 6 6 -83] -83]
Test Case:   7 | Input/Output: [[78 78 78 51] 51]
Test Case:   8 | Input/Output: [[-58 -58 5 -58] -58]
Test Case:   9 | Input/Output: [[39 39 39 26] 26]
Test Case:  10 | Input/Output: [[-2 64 -2 -2] -2]
Test Case:  11 | Input/Output: [[-33 -33 68 -33] -33]
Test Case:  12 | Input/Output: [[21 21 75 21] 21]
Test Case:  13 | Input/Output: [[-72 34 34 34] -72]
Test Case:  14 | Input/Output: [[-27 -27 -51 -27] -51]
Test Case:  15 | Input/Output: [[43 43 43 93] 43]
Test Case:  16 | Input/Output: [[-60 -60 -60 52] -60]
Test Case:  17 | Input/Output: [[55 -92 -92 -92] -92]
Test Case:  18 | Input/Output: [[-64 -64 59 -64] -64]
Test Case:  19 | Input/Output: [[36 10 10 10] 10]
Test Case:  20 | Input/Output: [[-79 31 -79 -79] -79]
Test Case:  21 | Input/Output: [[9 -67 9 9] -67]
Test Case:  22 | Input/Output: [[-46 -46 -83 -46] -83]
Test Case:  23 | Input/Output: [[-93 -93 74 -93] -93]
Test Case:  24 | Input/Output: [[-68 -68 83 -68] -68]
Test Case:  25 | Input/Output: [[-99 -99 98 -99] -99]
Test Case:  26 | Input/Output: [[-90 -90 65 -90] -90]
Test Case:  27 | Input/Output: [[-62 -62 57 -62] -62]
Test Case:  28 | Input/Output: [[-9 -9 -9 -86] -86]
Test Case:  29 | Input/Output: [[32 32 32 -98] -98]
Test Case:  30 | Input/Output: [[-84 -84 -84 35] -84]
Test Case:  31 | Input/Output: [[29 29 29 71] 29]
Test Case:  32 | Input/Output: [[97 97 97 58] 58]
Test Case:  33 | Input/Output: [[49 91 91 91] 49]
Test Case:  34 | Input/Output: [[-16 15 15 15] -16]
Test Case:  35 | Input/Output: [[-21 29 -21 -21] -21]
Test Case:  36 | Input/Output: [[16 16 16 -81] -81]
Test Case:  37 | Input/Output: [[11 11 5 11] 5]
Test Case:  38 | Input/Output: [[77 -10 -10 -10] -10]
Test Case:  39 | Input/Output: [[-98 -98 -98 44] -98]
Test Case:  40 | Input/Output: [[94 94 94 59] 59]
Test Case:  41 | Input/Output: [[-4 -4 -33 -4] -33]
Test Case:  42 | Input/Output: [[-7 -7 2 -7] -7]
Test Case:  43 | Input/Output: [[-15 18 -15 -15] -15]
Test Case:  44 | Input/Output: [[-54 -54 -100 -54] -100]
Test Case:  45 | Input/Output: [[11 22 11 11] 11]
Test Case:  46 | Input/Output: [[-17 -57 -17 -17] -57]
Test Case:  47 | Input/Output: [[-87 -42 -42 -42] -87]
Test Case:  48 | Input/Output: [[5 5 -3 5] -3]
Test Case:  49 | Input/Output: [[-1 -1 -1 -36] -36]
Test Case:  50 | Input/Output: [[-47 -47 -47 -68] -68]
Test Case:  51 | Input/Output: [[28 28 50 28] 28]
Test Case:  52 | Input/Output: [[-82 -11 -82 -82] -82]
Test Case:  53 | Input/Output: [[-7 -7 -7 -25] -25]
Test Case:  54 | Input/Output: [[-62 -62 -62 42] -62]
Test Case:  55 | Input/Output: [[-3 -12 -3 -3] -12]
Test Case:  56 | Input/Output: [[-42 -77 -42 -42] -77]
Test Case:  57 | Input/Output: [[-16 -16 -16 86] -16]
Test Case:  58 | Input/Output: [[-91 -91 -91 -97] -97]
Test Case:  59 | Input/Output: [[46 46 46 75] 46]
Test Case:  60 | Input/Output: [[-96 -96 -60 -96] -96]
Test Case:  61 | Input/Output: [[21 21 70 21] 21]
Test Case:  62 | Input/Output: [[45 65 45 45] 45]
Test Case:  63 | Input/Output: [[38 38 38 38] 38]
Test Case:  64 | Input/Output: [[37 32 32 32] 32]
Test Case:  65 | Input/Output: [[-87 -87 33 -87] -87]
Test Case:  66 | Input/Output: [[50 50 50 40] 40]
Test Case:  67 | Input/Output: [[14 97 97 97] 14]
Test Case:  68 | Input/Output: [[-75 29 29 29] -75]
Test Case:  69 | Input/Output: [[93 93 93 -14] -14]
Test Case:  70 | Input/Output: [[35 35 35 -30] -30]
Test Case:  71 | Input/Output: [[43 43 -67 43] -67]
Test Case:  72 | Input/Output: [[76 -55 -55 -55] -55]
Test Case:  73 | Input/Output: [[-52 5 5 5] -52]
Test Case:  74 | Input/Output: [[-60 87 -60 -60] -60]
Test Case:  75 | Input/Output: [[-31 -35 -35 -35] -35]
Test Case:  76 | Input/Output: [[-42 -42 -42 100] -42]
Test Case:  77 | Input/Output: [[-92 -13 -13 -13] -92]
Test Case:  78 | Input/Output: [[-55 -55 80 -55] -55]
Test Case:  79 | Input/Output: [[98 98 98 -72] -72]
Test Case:  80 | Input/Output: [[-78 -78 -94 -78] -94]
Test Case:  81 | Input/Output: [[31 31 31 8] 8]
Test Case:  82 | Input/Output: [[19 -8 19 19] -8]
Test Case:  83 | Input/Output: [[3 3 3 38] 3]
Test Case:  84 | Input/Output: [[-20 -11 -20 -20] -20]
Test Case:  85 | Input/Output: [[-34 -34 -34 6] -34]
Test Case:  86 | Input/Output: [[72 -33 -33 -33] -33]
Test Case:  87 | Input/Output: [[7 57 57 57] 7]
Test Case:  88 | Input/Output: [[72 72 72 -89] -89]
Test Case:  89 | Input/Output: [[92 92 92 61] 61]
Test Case:  90 | Input/Output: [[36 36 36 26] 26]
Test Case:  91 | Input/Output: [[8 61 61 61] 8]
Test Case:  92 | Input/Output: [[74 74 -94 74] -94]
Test Case:  93 | Input/Output: [[66 66 66 45] 45]
Test Case:  94 | Input/Output: [[34 34 34 -92] -92]
Test Case:  95 | Input/Output: [[-4 -4 -25 -4] -25]
Test Case:  96 | Input/Output: [[-18 54 54 54] -18]
Test Case:  97 | Input/Output: [[-29 -34 -34 -34] -34]
Test Case:  98 | Input/Output: [[85 85 -99 85] -99]
Test Case:  99 | Input/Output: [[-47 -47 -86 -47] -86]
Test Case: 100 | Input/Output: [(53 53 53 53) 53]
Test Case: 101 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 102 | Input/Output: [(50 50 50 50) 50]
Test Case: 103 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 104 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 105 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 106 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 107 | Input/Output: [(45 45 45 45) 45]
Test Case: 108 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 109 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 110 | Input/Output: [(62 62 62 62) 62]
Test Case: 111 | Input/Output: [(33 33 33 33) 33]
Test Case: 112 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 113 | Input/Output: [(22 22 22 22) 22]
Test Case: 114 | Input/Output: [(31 31 31 31) 31]
Test Case: 115 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 116 | Input/Output: [(31 31 31 31) 31]
Test Case: 117 | Input/Output: [(13 13 13 13) 13]
Test Case: 118 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 119 | Input/Output: [(33 33 33 33) 33]
Test Case: 120 | Input/Output: [(16 16 16 16) 16]
Test Case: 121 | Input/Output: [(60 60 60 60) 60]
Test Case: 122 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 123 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 124 | Input/Output: [(64 64 64 64) 64]
Test Case: 125 | Input/Output: [(3 3 3 3) 3]
Test Case: 126 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 127 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 128 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 129 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 130 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 131 | Input/Output: [(47 47 47 47) 47]
Test Case: 132 | Input/Output: [(89 89 89 89) 89]
Test Case: 133 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 134 | Input/Output: [(47 47 47 47) 47]
Test Case: 135 | Input/Output: [(83 83 83 83) 83]
Test Case: 136 | Input/Output: [(11 11 11 11) 11]
Test Case: 137 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 138 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 139 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 140 | Input/Output: [(31 31 31 31) 31]
Test Case: 141 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 142 | Input/Output: [(17 17 17 17) 17]
Test Case: 143 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 144 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 145 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 146 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 147 | Input/Output: [(59 59 59 59) 59]
Test Case: 148 | Input/Output: [(0 0 0 0) 0]
Test Case: 149 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 150 | Input/Output: [(96 96 96 96) 96]
Test Case: 151 | Input/Output: [(94 94 94 94) 94]
Test Case: 152 | Input/Output: [(70 70 70 70) 70]
Test Case: 153 | Input/Output: [(97 97 97 97) 97]
Test Case: 154 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 155 | Input/Output: [(6 6 6 6) 6]
Test Case: 156 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 157 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 158 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 159 | Input/Output: [(16 16 16 16) 16]
Test Case: 160 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 161 | Input/Output: [(57 57 57 57) 57]
Test Case: 162 | Input/Output: [(93 93 93 93) 93]
Test Case: 163 | Input/Output: [(1 1 1 1) 1]
Test Case: 164 | Input/Output: [(23 23 23 23) 23]
Test Case: 165 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 166 | Input/Output: [(88 88 88 88) 88]
Test Case: 167 | Input/Output: [(81 81 81 81) 81]
Test Case: 168 | Input/Output: [(65 65 65 65) 65]
Test Case: 169 | Input/Output: [(5 5 5 5) 5]
Test Case: 170 | Input/Output: [(93 93 93 93) 93]
Test Case: 171 | Input/Output: [(21 21 21 21) 21]
Test Case: 172 | Input/Output: [(82 82 82 82) 82]
Test Case: 173 | Input/Output: [(15 15 15 15) 15]
Test Case: 174 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 175 | Input/Output: [(84 84 84 84) 84]
Test Case: 176 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 177 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 178 | Input/Output: [(41 41 41 41) 41]
Test Case: 179 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 180 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 181 | Input/Output: [(8 8 8 8) 8]
Test Case: 182 | Input/Output: [(40 40 40 40) 40]
Test Case: 183 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 184 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 185 | Input/Output: [(94 94 94 94) 94]
Test Case: 186 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 187 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 188 | Input/Output: [(65 65 65 65) 65]
Test Case: 189 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 190 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 191 | Input/Output: [(37 37 37 37) 37]
Test Case: 192 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 193 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 194 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 195 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 196 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 197 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 198 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 199 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 200 | Input/Output: [(37 83 29 28) 28]
Test Case: 201 | Input/Output: [(86 50 50 61) 50]
Test Case: 202 | Input/Output: [(41 42 97 39) 39]
Test Case: 203 | Input/Output: [(67 93 43 36) 36]
Test Case: 204 | Input/Output: [(12 89 52 94) 12]
Test Case: 205 | Input/Output: [(23 79 59 39) 23]
Test Case: 206 | Input/Output: [(22 80 99 94) 22]
Test Case: 207 | Input/Output: [(98 0 14 48) 0]
Test Case: 208 | Input/Output: [(37 59 34 38) 34]
Test Case: 209 | Input/Output: [(33 63 26 23) 23]
Test Case: 210 | Input/Output: [(83 44 54 92) 44]
Test Case: 211 | Input/Output: [(94 24 4 70) 4]
Test Case: 212 | Input/Output: [(16 45 3 45) 3]
Test Case: 213 | Input/Output: [(37 29 69 82) 29]
Test Case: 214 | Input/Output: [(6 17 44 8) 6]
Test Case: 215 | Input/Output: [(42 45 42 11) 11]
Test Case: 216 | Input/Output: [(94 91 22 39) 22]
Test Case: 217 | Input/Output: [(73 99 72 40) 40]
Test Case: 218 | Input/Output: [(83 26 44 33) 26]
Test Case: 219 | Input/Output: [(98 19 50 68) 19]
Test Case: 220 | Input/Output: [(71 43 13 35) 13]
Test Case: 221 | Input/Output: [(63 73 73 46) 46]
Test Case: 222 | Input/Output: [(99 46 52 7) 7]
Test Case: 223 | Input/Output: [(8 100 95 15) 8]
Test Case: 224 | Input/Output: [(42 33 77 10) 10]
Test Case: 225 | Input/Output: [(79 41 53 15) 15]
Test Case: 226 | Input/Output: [(3 44 99 74) 3]
Test Case: 227 | Input/Output: [(90 99 5 76) 5]
Test Case: 228 | Input/Output: [(31 93 33 93) 31]
Test Case: 229 | Input/Output: [(44 32 7 93) 7]
Test Case: 230 | Input/Output: [(41 98 3 28) 3]
Test Case: 231 | Input/Output: [(78 93 76 57) 57]
Test Case: 232 | Input/Output: [(64 77 25 35) 25]
Test Case: 233 | Input/Output: [(45 10 80 86) 10]
Test Case: 234 | Input/Output: [(84 10 44 72) 10]
Test Case: 235 | Input/Output: [(18 22 37 91) 18]
Test Case: 236 | Input/Output: [(24 79 47 81) 24]
Test Case: 237 | Input/Output: [(52 29 61 60) 29]
Test Case: 238 | Input/Output: [(51 1 39 88) 1]
Test Case: 239 | Input/Output: [(53 66 6 53) 6]
Test Case: 240 | Input/Output: [(32 71 3 2) 2]
Test Case: 241 | Input/Output: [(98 47 99 83) 47]
Test Case: 242 | Input/Output: [(36 8 69 71) 8]
Test Case: 243 | Input/Output: [(33 11 71 87) 11]
Test Case: 244 | Input/Output: [(68 90 85 48) 48]
Test Case: 245 | Input/Output: [(47 34 27 44) 27]
Test Case: 246 | Input/Output: [(78 96 45 95) 45]
Test Case: 247 | Input/Output: [(6 12 61 83) 6]
Test Case: 248 | Input/Output: [(77 62 38 21) 21]
Test Case: 249 | Input/Output: [(96 94 61 80) 61]
Test Case: 250 | Input/Output: [(55 97 24 66) 24]
Test Case: 251 | Input/Output: [(35 76 18 56) 18]
Test Case: 252 | Input/Output: [(31 76 35 63) 31]
Test Case: 253 | Input/Output: [(58 27 80 47) 27]
Test Case: 254 | Input/Output: [(22 39 44 44) 22]
Test Case: 255 | Input/Output: [(74 6 13 95) 6]
Test Case: 256 | Input/Output: [(27 33 2 19) 2]
Test Case: 257 | Input/Output: [(36 14 72 16) 14]
Test Case: 258 | Input/Output: [(80 20 37 30) 20]
Test Case: 259 | Input/Output: [(16 49 14 62) 14]
Test Case: 260 | Input/Output: [(11 40 51 0) 0]
Test Case: 261 | Input/Output: [(25 25 56 81) 25]
Test Case: 262 | Input/Output: [(79 38 27 42) 27]
Test Case: 263 | Input/Output: [(29 45 100 22) 22]
Test Case: 264 | Input/Output: [(95 68 35 49) 35]
Test Case: 265 | Input/Output: [(95 18 27 45) 18]
Test Case: 266 | Input/Output: [(94 65 32 59) 32]
Test Case: 267 | Input/Output: [(38 93 53 72) 38]
Test Case: 268 | Input/Output: [(53 55 71 93) 53]
Test Case: 269 | Input/Output: [(76 39 82 67) 39]
Test Case: 270 | Input/Output: [(63 19 96 5) 5]
Test Case: 271 | Input/Output: [(0 25 27 66) 0]
Test Case: 272 | Input/Output: [(71 58 36 29) 29]
Test Case: 273 | Input/Output: [(1 79 65 99) 1]
Test Case: 274 | Input/Output: [(81 40 25 40) 25]
Test Case: 275 | Input/Output: [(29 98 54 6) 6]
Test Case: 276 | Input/Output: [(53 68 87 1) 1]
Test Case: 277 | Input/Output: [(62 62 38 74) 38]
Test Case: 278 | Input/Output: [(32 62 28 87) 28]
Test Case: 279 | Input/Output: [(12 60 30 11) 11]
Test Case: 280 | Input/Output: [(61 26 86 48) 26]
Test Case: 281 | Input/Output: [(0 27 32 77) 0]
Test Case: 282 | Input/Output: [(45 20 91 27) 20]
Test Case: 283 | Input/Output: [(85 75 25 61) 25]
Test Case: 284 | Input/Output: [(29 100 19 50) 19]
Test Case: 285 | Input/Output: [(72 16 81 75) 16]
Test Case: 286 | Input/Output: [(95 79 51 28) 28]
Test Case: 287 | Input/Output: [(15 58 68 7) 7]
Test Case: 288 | Input/Output: [(72 10 74 12) 10]
Test Case: 289 | Input/Output: [(91 16 89 37) 16]
Test Case: 290 | Input/Output: [(62 91 76 45) 45]
Test Case: 291 | Input/Output: [(6 100 31 90) 6]
Test Case: 292 | Input/Output: [(71 30 80 96) 30]
Test Case: 293 | Input/Output: [(89 88 99 79) 79]
Test Case: 294 | Input/Output: [(87 63 11 51) 11]
Test Case: 295 | Input/Output: [(30 37 97 50) 30]
Test Case: 296 | Input/Output: [(14 4 44 37) 4]
Test Case: 297 | Input/Output: [(99 59 84 30) 30]
Test Case: 298 | Input/Output: [(59 24 27 81) 24]
Test Case: 299 | Input/Output: [(73 75 30 100) 30]
Test Case: 300 | Input/Output: [(26 0 14 97) 0]
Test Case: 301 | Input/Output: [(95 69 59 60) 59]
Test Case: 302 | Input/Output: [(76 89 41 92) 41]
Test Case: 303 | Input/Output: [(22 15 93 98) 15]
Test Case: 304 | Input/Output: [(45 50 100 88) 45]
Test Case: 305 | Input/Output: [(45 3 62 96) 3]
Test Case: 306 | Input/Output: [(80 71 47 74) 47]
Test Case: 307 | Input/Output: [(19 90 2 35) 2]
Test Case: 308 | Input/Output: [(74 99 6 84) 6]
Test Case: 309 | Input/Output: [(21 73 23 12) 12]
Test Case: 310 | Input/Output: [(81 100 57 91) 57]
Test Case: 311 | Input/Output: [(17 71 51 77) 17]
Test Case: 312 | Input/Output: [(89 40 58 58) 40]
Test Case: 313 | Input/Output: [(89 43 45 54) 43]
Test Case: 314 | Input/Output: [(30 18 84 26) 18]
Test Case: 315 | Input/Output: [(72 79 49 24) 24]
Test Case: 316 | Input/Output: [(97 48 92 62) 48]
Test Case: 317 | Input/Output: [(40 88 38 17) 17]
Test Case: 318 | Input/Output: [(16 80 100 70) 16]
Test Case: 319 | Input/Output: [(20 42 64 83) 20]
Test Case: 320 | Input/Output: [(71 23 73 42) 23]
Test Case: 321 | Input/Output: [(97 36 68 10) 10]
Test Case: 322 | Input/Output: [(63 15 99 70) 15]
Test Case: 323 | Input/Output: [(83 91 96 8) 8]
Test Case: 324 | Input/Output: [(100 83 23 43) 23]
Test Case: 325 | Input/Output: [(15 39 40 93) 15]
Test Case: 326 | Input/Output: [(24 50 14 96) 14]
Test Case: 327 | Input/Output: [(76 55 85 94) 55]
Test Case: 328 | Input/Output: [(76 79 14 38) 14]
Test Case: 329 | Input/Output: [(40 78 82 13) 13]
Test Case: 330 | Input/Output: [(29 22 50 4) 4]
Test Case: 331 | Input/Output: [(82 97 72 72) 72]
Test Case: 332 | Input/Output: [(95 50 49 70) 49]
Test Case: 333 | Input/Output: [(3 68 82 95) 3]
Test Case: 334 | Input/Output: [(9 76 85 26) 9]
Test Case: 335 | Input/Output: [(86 18 63 24) 18]
Test Case: 336 | Input/Output: [(5 38 87 87) 5]
Test Case: 337 | Input/Output: [(10 42 45 66) 10]
Test Case: 338 | Input/Output: [(98 22 76 85) 22]
Test Case: 339 | Input/Output: [(93 42 15 88) 15]
Test Case: 340 | Input/Output: [(46 5 87 89) 5]
Test Case: 341 | Input/Output: [(88 85 12 22) 12]
Test Case: 342 | Input/Output: [(20 59 42 35) 20]
Test Case: 343 | Input/Output: [(29 94 32 24) 24]
Test Case: 344 | Input/Output: [(19 94 27 19) 19]
Test Case: 345 | Input/Output: [(83 77 57 54) 54]
Test Case: 346 | Input/Output: [(96 66 56 28) 28]
Test Case: 347 | Input/Output: [(56 74 76 72) 56]
Test Case: 348 | Input/Output: [(32 99 51 13) 13]
Test Case: 349 | Input/Output: [(73 16 16 12) 12]
Test Case: 350 | Input/Output: [(37 59 69 80) 37]
Test Case: 351 | Input/Output: [(0 66 65 41) 0]
Test Case: 352 | Input/Output: [(17 55 55 47) 17]
Test Case: 353 | Input/Output: [(4 26 96 17) 4]
Test Case: 354 | Input/Output: [(28 75 10 68) 10]
Test Case: 355 | Input/Output: [(35 85 78 53) 35]
Test Case: 356 | Input/Output: [(12 37 76 11) 11]
Test Case: 357 | Input/Output: [(37 87 99 61) 37]
Test Case: 358 | Input/Output: [(47 80 67 46) 46]
Test Case: 359 | Input/Output: [(3 28 85 82) 3]
Test Case: 360 | Input/Output: [(9 33 50 44) 9]
Test Case: 361 | Input/Output: [(95 37 27 37) 27]
Test Case: 362 | Input/Output: [(60 85 75 0) 0]
Test Case: 363 | Input/Output: [(25 31 89 40) 25]
Test Case: 364 | Input/Output: [(13 70 75 75) 13]
Test Case: 365 | Input/Output: [(78 99 48 79) 48]
Test Case: 366 | Input/Output: [(60 37 15 57) 15]
Test Case: 367 | Input/Output: [(95 91 4 38) 4]
Test Case: 368 | Input/Output: [(85 4 20 53) 4]
Test Case: 369 | Input/Output: [(88 100 54 98) 54]
Test Case: 370 | Input/Output: [(19 64 83 69) 19]
Test Case: 371 | Input/Output: [(73 65 59 58) 58]
Test Case: 372 | Input/Output: [(98 11 29 67) 11]
Test Case: 373 | Input/Output: [(76 72 65 68) 65]
Test Case: 374 | Input/Output: [(65 43 34 99) 34]
Test Case: 375 | Input/Output: [(30 80 67 34) 30]
Test Case: 376 | Input/Output: [(5 66 63 67) 5]
Test Case: 377 | Input/Output: [(69 61 52 68) 52]
Test Case: 378 | Input/Output: [(94 27 26 48) 26]
Test Case: 379 | Input/Output: [(48 76 9 36) 9]
Test Case: 380 | Input/Output: [(69 80 44 82) 44]
Test Case: 381 | Input/Output: [(12 37 28 72) 12]
Test Case: 382 | Input/Output: [(75 95 9 90) 9]
Test Case: 383 | Input/Output: [(3 7 10 4) 3]
Test Case: 384 | Input/Output: [(99 7 26 91) 7]
Test Case: 385 | Input/Output: [(72 94 50 93) 50]
Test Case: 386 | Input/Output: [(72 6 6 89) 6]
Test Case: 387 | Input/Output: [(37 55 96 42) 37]
Test Case: 388 | Input/Output: [(80 88 0 44) 0]
Test Case: 389 | Input/Output: [(3 59 33 51) 3]
Test Case: 390 | Input/Output: [(3 2 39 62) 2]
Test Case: 391 | Input/Output: [(35 1 21 100) 1]
Test Case: 392 | Input/Output: [(60 98 70 10) 10]
Test Case: 393 | Input/Output: [(99 80 30 73) 30]
Test Case: 394 | Input/Output: [(89 75 94 15) 15]
Test Case: 395 | Input/Output: [(78 43 40 12) 12]
Test Case: 396 | Input/Output: [(77 94 1 42) 1]
Test Case: 397 | Input/Output: [(66 13 14 36) 13]
Test Case: 398 | Input/Output: [(66 2 14 16) 2]
Test Case: 399 | Input/Output: [(55 55 52 52) 52]
Test Case: 400 | Input/Output: [(-10 99 98 79) -10]
Test Case: 401 | Input/Output: [(-43 -70 1 -16) -70]
Test Case: 402 | Input/Output: [(85 -77 17 -93) -93]
Test Case: 403 | Input/Output: [(50 72 -31 27) -31]
Test Case: 404 | Input/Output: [(87 -91 -52 -68) -91]
Test Case: 405 | Input/Output: [(-44 63 24 12) -44]
Test Case: 406 | Input/Output: [(-8 -25 -71 52) -71]
Test Case: 407 | Input/Output: [(7 -4 64 67) -4]
Test Case: 408 | Input/Output: [(-20 -35 -61 70) -61]
Test Case: 409 | Input/Output: [(93 -85 -39 56) -85]
Test Case: 410 | Input/Output: [(-39 91 -45 29) -45]
Test Case: 411 | Input/Output: [(-41 -15 8 -62) -62]
Test Case: 412 | Input/Output: [(-50 -95 -33 73) -95]
Test Case: 413 | Input/Output: [(-97 -8 -6 36) -97]
Test Case: 414 | Input/Output: [(40 -78 -83 -29) -83]
Test Case: 415 | Input/Output: [(-11 -40 37 35) -40]
Test Case: 416 | Input/Output: [(-11 -81 -83 76) -83]
Test Case: 417 | Input/Output: [(-89 -56 3 52) -89]
Test Case: 418 | Input/Output: [(-1 92 61 -55) -55]
Test Case: 419 | Input/Output: [(43 19 -48 50) -48]
Test Case: 420 | Input/Output: [(45 79 -30 -97) -97]
Test Case: 421 | Input/Output: [(71 7 76 -89) -89]
Test Case: 422 | Input/Output: [(19 56 -96 87) -96]
Test Case: 423 | Input/Output: [(-67 -92 -51 -73) -92]
Test Case: 424 | Input/Output: [(-43 -63 -86 73) -86]
Test Case: 425 | Input/Output: [(8 -56 -40 -82) -82]
Test Case: 426 | Input/Output: [(23 48 74 60) 23]
Test Case: 427 | Input/Output: [(16 33 -87 18) -87]
Test Case: 428 | Input/Output: [(-1 -44 2 48) -44]
Test Case: 429 | Input/Output: [(10 26 -88 -64) -88]
Test Case: 430 | Input/Output: [(-7 94 -12 14) -12]
Test Case: 431 | Input/Output: [(-43 -60 27 -17) -60]
Test Case: 432 | Input/Output: [(-48 -66 -82 57) -82]
Test Case: 433 | Input/Output: [(-67 -7 7 -46) -67]
Test Case: 434 | Input/Output: [(-26 13 2 33) -26]
Test Case: 435 | Input/Output: [(-4 45 58 -92) -92]
Test Case: 436 | Input/Output: [(39 -48 85 15) -48]
Test Case: 437 | Input/Output: [(59 93 -7 78) -7]
Test Case: 438 | Input/Output: [(61 54 11 -29) -29]
Test Case: 439 | Input/Output: [(-10 -22 55 -52) -52]
Test Case: 440 | Input/Output: [(-33 -61 22 11) -61]
Test Case: 441 | Input/Output: [(-25 -5 81 32) -25]
Test Case: 442 | Input/Output: [(21 63 -76 -45) -76]
Test Case: 443 | Input/Output: [(87 -3 -21 -63) -63]
Test Case: 444 | Input/Output: [(-10 34 -54 60) -54]
Test Case: 445 | Input/Output: [(-40 66 -68 93) -68]
Test Case: 446 | Input/Output: [(-51 4 25 13) -51]
Test Case: 447 | Input/Output: [(79 42 -74 91) -74]
Test Case: 448 | Input/Output: [(97 -17 -17 2) -17]
Test Case: 449 | Input/Output: [(17 -95 43 34) -95]
Test Case: 450 | Input/Output: [(-36 -97 -91 -32) -97]
Test Case: 451 | Input/Output: [(47 52 -14 -56) -56]
Test Case: 452 | Input/Output: [(-38 39 -68 54) -68]
Test Case: 453 | Input/Output: [(38 -86 -49 -72) -86]
Test Case: 454 | Input/Output: [(-63 78 -49 68) -63]
Test Case: 455 | Input/Output: [(-20 31 -28 45) -28]
Test Case: 456 | Input/Output: [(34 -6 85 100) -6]
Test Case: 457 | Input/Output: [(43 -5 49 60) -5]
Test Case: 458 | Input/Output: [(1 -89 93 -27) -89]
Test Case: 459 | Input/Output: [(-50 3 20 -70) -70]
Test Case: 460 | Input/Output: [(-18 0 13 5) -18]
Test Case: 461 | Input/Output: [(-94 47 -94 -21) -94]
Test Case: 462 | Input/Output: [(61 -43 -92 -56) -92]
Test Case: 463 | Input/Output: [(1 -16 3 89) -16]
Test Case: 464 | Input/Output: [(99 17 -79 85) -79]
Test Case: 465 | Input/Output: [(-78 35 90 23) -78]
Test Case: 466 | Input/Output: [(27 -3 77 -83) -83]
Test Case: 467 | Input/Output: [(14 -58 76 57) -58]
Test Case: 468 | Input/Output: [(46 -82 10 98) -82]
Test Case: 469 | Input/Output: [(92 56 88 -87) -87]
Test Case: 470 | Input/Output: [(0 25 -2 61) -2]
Test Case: 471 | Input/Output: [(67 -67 12 7) -67]
Test Case: 472 | Input/Output: [(99 -21 -15 39) -21]
Test Case: 473 | Input/Output: [(20 48 -12 -20) -20]
Test Case: 474 | Input/Output: [(-22 91 69 -64) -64]
Test Case: 475 | Input/Output: [(-28 92 -45 74) -45]
Test Case: 476 | Input/Output: [(27 -38 -83 33) -83]
Test Case: 477 | Input/Output: [(-42 94 22 3) -42]
Test Case: 478 | Input/Output: [(45 14 71 71) 14]
Test Case: 479 | Input/Output: [(-3 -30 -2 -14) -30]
Test Case: 480 | Input/Output: [(-33 -60 99 -89) -89]
Test Case: 481 | Input/Output: [(39 -77 46 -86) -86]
Test Case: 482 | Input/Output: [(-47 -56 -35 77) -56]
Test Case: 483 | Input/Output: [(-28 26 7 -24) -28]
Test Case: 484 | Input/Output: [(69 76 31 -63) -63]
Test Case: 485 | Input/Output: [(-7 40 26 51) -7]
Test Case: 486 | Input/Output: [(70 -71 -65 13) -71]
Test Case: 487 | Input/Output: [(-56 50 92 -3) -56]
Test Case: 488 | Input/Output: [(-70 14 50 -49) -70]
Test Case: 489 | Input/Output: [(-3 -35 98 -21) -35]
Test Case: 490 | Input/Output: [(-65 69 80 72) -65]
Test Case: 491 | Input/Output: [(63 100 52 -72) -72]
Test Case: 492 | Input/Output: [(75 73 50 -34) -34]
Test Case: 493 | Input/Output: [(28 81 91 100) 28]
Test Case: 494 | Input/Output: [(-22 -45 54 36) -45]
Test Case: 495 | Input/Output: [(87 -82 84 -95) -95]
Test Case: 496 | Input/Output: [(57 86 -57 -21) -57]
Test Case: 497 | Input/Output: [(-22 -9 83 75) -22]
Test Case: 498 | Input/Output: [(27 78 58 -40) -40]
Test Case: 499 | Input/Output: [(70 36 -89 -39) -89]
Test Case: 500 | Input/Output: [(-29 14 65 21) -29]
Test Case: 501 | Input/Output: [(-24 34 95 -94) -94]
Test Case: 502 | Input/Output: [(-34 -60 41 -41) -60]
Test Case: 503 | Input/Output: [(-67 96 3 52) -67]
Test Case: 504 | Input/Output: [(0 -26 -41 -78) -78]
Test Case: 505 | Input/Output: [(-85 -23 -57 -87) -87]
Test Case: 506 | Input/Output: [(14 -71 42 -96) -96]
Test Case: 507 | Input/Output: [(-78 -66 87 -34) -78]
Test Case: 508 | Input/Output: [(54 49 34 10) 10]
Test Case: 509 | Input/Output: [(90 59 -99 20) -99]
Test Case: 510 | Input/Output: [(81 47 23 33) 23]
Test Case: 511 | Input/Output: [(-70 -86 -12 86) -86]
Test Case: 512 | Input/Output: [(-29 49 -30 -40) -40]
Test Case: 513 | Input/Output: [(91 53 38 39) 38]
Test Case: 514 | Input/Output: [(56 -58 41 -59) -59]
Test Case: 515 | Input/Output: [(48 2 29 -71) -71]
Test Case: 516 | Input/Output: [(49 -11 56 92) -11]
Test Case: 517 | Input/Output: [(-80 3 -41 -80) -80]
Test Case: 518 | Input/Output: [(11 52 -16 49) -16]
Test Case: 519 | Input/Output: [(-90 -50 -100 -18) -100]
Test Case: 520 | Input/Output: [(-37 94 -7 -8) -37]
Test Case: 521 | Input/Output: [(-43 28 -21 -57) -57]
Test Case: 522 | Input/Output: [(69 42 41 30) 30]
Test Case: 523 | Input/Output: [(-31 96 -62 -61) -62]
Test Case: 524 | Input/Output: [(-94 -35 83 -57) -94]
Test Case: 525 | Input/Output: [(77 100 -52 -60) -60]
Test Case: 526 | Input/Output: [(-76 -64 -16 -31) -76]
Test Case: 527 | Input/Output: [(34 18 65 34) 18]
Test Case: 528 | Input/Output: [(45 -51 -12 -67) -67]
Test Case: 529 | Input/Output: [(-76 85 8 64) -76]
Test Case: 530 | Input/Output: [(-63 -53 16 -53) -63]
Test Case: 531 | Input/Output: [(-57 -48 -26 -71) -71]
Test Case: 532 | Input/Output: [(97 -5 43 47) -5]
Test Case: 533 | Input/Output: [(-8 45 49 -46) -46]
Test Case: 534 | Input/Output: [(-99 28 80 -88) -99]
Test Case: 535 | Input/Output: [(26 -57 89 30) -57]
Test Case: 536 | Input/Output: [(-51 13 -29 93) -51]
Test Case: 537 | Input/Output: [(-8 -90 -83 -32) -90]
Test Case: 538 | Input/Output: [(23 27 35 -55) -55]
Test Case: 539 | Input/Output: [(45 24 -50 -91) -91]
Test Case: 540 | Input/Output: [(47 74 71 -64) -64]
Test Case: 541 | Input/Output: [(0 -16 51 41) -16]
Test Case: 542 | Input/Output: [(-73 71 70 -86) -86]
Test Case: 543 | Input/Output: [(12 -52 -40 -77) -77]
Test Case: 544 | Input/Output: [(47 -81 0 -68) -81]
Test Case: 545 | Input/Output: [(-22 42 15 -72) -72]
Test Case: 546 | Input/Output: [(-25 50 49 32) -25]
Test Case: 547 | Input/Output: [(-55 26 100 -87) -87]
Test Case: 548 | Input/Output: [(28 44 8 72) 8]
Test Case: 549 | Input/Output: [(68 43 -54 -79) -79]
Test Case: 550 | Input/Output: [(74 -96 68 -84) -96]
Test Case: 551 | Input/Output: [(-75 98 73 -6) -75]
Test Case: 552 | Input/Output: [(-35 -48 61 -21) -48]
Test Case: 553 | Input/Output: [(-32 -79 -76 -90) -90]
Test Case: 554 | Input/Output: [(76 -25 86 -75) -75]
Test Case: 555 | Input/Output: [(86 -23 52 -67) -67]
Test Case: 556 | Input/Output: [(74 -34 -46 -70) -70]
Test Case: 557 | Input/Output: [(-91 -55 -47 65) -91]
Test Case: 558 | Input/Output: [(36 5 -9 -48) -48]
Test Case: 559 | Input/Output: [(84 43 -16 -65) -65]
Test Case: 560 | Input/Output: [(0 -93 -14 15) -93]
Test Case: 561 | Input/Output: [(46 75 -80 -50) -80]
Test Case: 562 | Input/Output: [(-44 -68 0 -27) -68]
Test Case: 563 | Input/Output: [(12 -60 78 85) -60]
Test Case: 564 | Input/Output: [(66 66 23 -41) -41]
Test Case: 565 | Input/Output: [(-49 98 43 -39) -49]
Test Case: 566 | Input/Output: [(-84 39 -41 99) -84]
Test Case: 567 | Input/Output: [(-10 -83 -11 -25) -83]
Test Case: 568 | Input/Output: [(63 95 58 21) 21]
Test Case: 569 | Input/Output: [(-49 46 -97 67) -97]
Test Case: 570 | Input/Output: [(76 -56 -100 26) -100]
Test Case: 571 | Input/Output: [(59 97 31 -95) -95]
Test Case: 572 | Input/Output: [(-34 -24 -37 99) -37]
Test Case: 573 | Input/Output: [(86 -7 51 74) -7]
Test Case: 574 | Input/Output: [(27 -75 -40 -38) -75]
Test Case: 575 | Input/Output: [(13 82 -90 19) -90]
Test Case: 576 | Input/Output: [(90 82 -50 -69) -69]
Test Case: 577 | Input/Output: [(-11 76 57 -100) -100]
Test Case: 578 | Input/Output: [(81 -6 40 32) -6]
Test Case: 579 | Input/Output: [(-11 31 -95 -45) -95]
Test Case: 580 | Input/Output: [(20 54 80 21) 20]
Test Case: 581 | Input/Output: [(-96 -91 -81 -38) -96]
Test Case: 582 | Input/Output: [(-24 -76 -88 95) -88]
Test Case: 583 | Input/Output: [(-28 34 62 -12) -28]
Test Case: 584 | Input/Output: [(58 -27 -26 -11) -27]
Test Case: 585 | Input/Output: [(-78 89 74 -88) -88]
Test Case: 586 | Input/Output: [(-62 -32 -55 89) -62]
Test Case: 587 | Input/Output: [(57 6 5 -36) -36]
Test Case: 588 | Input/Output: [(3 -79 -83 89) -83]
Test Case: 589 | Input/Output: [(82 71 -15 52) -15]
Test Case: 590 | Input/Output: [(-13 -25 8 51) -25]
Test Case: 591 | Input/Output: [(99 -91 97 -77) -91]
Test Case: 592 | Input/Output: [(-34 42 74 46) -34]
Test Case: 593 | Input/Output: [(27 32 93 51) 27]
Test Case: 594 | Input/Output: [(-55 -94 1 1) -94]
Test Case: 595 | Input/Output: [(47 63 4 52) 4]
Test Case: 596 | Input/Output: [(25 -24 -69 -52) -69]
Test Case: 597 | Input/Output: [(-34 32 -98 44) -98]
Test Case: 598 | Input/Output: [(-54 -48 53 -2) -54]
Test Case: 599 | Input/Output: [(12 -59 98 30) -59]
Test Case: 600 | Input/Output: [(20 -30 36 -3) -30]
Test Case: 601 | Input/Output: [(86 -97 -95 -66) -97]
Test Case: 602 | Input/Output: [(26 41 -79 -28) -79]
Test Case: 603 | Input/Output: [(95 65 -74 -51) -74]
Test Case: 604 | Input/Output: [(8 52 16 -85) -85]
Test Case: 605 | Input/Output: [(33 14 92 -28) -28]
Test Case: 606 | Input/Output: [(60 13 -9 -58) -58]
Test Case: 607 | Input/Output: [(77 90 -87 52) -87]
Test Case: 608 | Input/Output: [(-99 90 -22 27) -99]
Test Case: 609 | Input/Output: [(-84 -82 89 62) -84]
Test Case: 610 | Input/Output: [(80 62 93 -16) -16]
Test Case: 611 | Input/Output: [(-44 35 -10 -77) -77]
Test Case: 612 | Input/Output: [(84 61 29 -68) -68]
Test Case: 613 | Input/Output: [(10 41 70 71) 10]
Test Case: 614 | Input/Output: [(-62 33 14 5) -62]
Test Case: 615 | Input/Output: [(-90 55 67 -17) -90]
Test Case: 616 | Input/Output: [(-50 -31 67 -72) -72]
Test Case: 617 | Input/Output: [(61 36 -43 11) -43]
Test Case: 618 | Input/Output: [(58 13 -31 23) -31]
Test Case: 619 | Input/Output: [(18 -61 -65 3) -65]
Test Case: 620 | Input/Output: [(81 -65 -7 -86) -86]
Test Case: 621 | Input/Output: [(-57 59 -62 30) -62]
Test Case: 622 | Input/Output: [(-4 58 -90 20) -90]
Test Case: 623 | Input/Output: [(-18 90 83 35) -18]
Test Case: 624 | Input/Output: [(20 -21 -87 -92) -92]
Test Case: 625 | Input/Output: [(-56 28 70 90) -56]
Test Case: 626 | Input/Output: [(60 -30 -60 44) -60]
Test Case: 627 | Input/Output: [(-50 26 -78 -9) -78]
Test Case: 628 | Input/Output: [(-11 23 -76 31) -76]
Test Case: 629 | Input/Output: [(74 38 93 -65) -65]
Test Case: 630 | Input/Output: [(-61 -82 -65 -36) -82]
Test Case: 631 | Input/Output: [(26 11 41 75) 11]
Test Case: 632 | Input/Output: [(-80 -46 86 61) -80]
Test Case: 633 | Input/Output: [(96 -94 -54 94) -94]
Test Case: 634 | Input/Output: [(8 -59 -26 -77) -77]
Test Case: 635 | Input/Output: [(47 34 59 -49) -49]
Test Case: 636 | Input/Output: [(83 -1 39 -14) -14]
Test Case: 637 | Input/Output: [(55 -80 23 6) -80]
Test Case: 638 | Input/Output: [(24 -53 16 88) -53]
Test Case: 639 | Input/Output: [(62 -17 79 -34) -34]
Test Case: 640 | Input/Output: [(33 90 -2 86) -2]
Test Case: 641 | Input/Output: [(93 -82 -27 -61) -82]
Test Case: 642 | Input/Output: [(99 35 -1 -29) -29]
Test Case: 643 | Input/Output: [(-61 42 12 71) -61]
Test Case: 644 | Input/Output: [(-83 81 27 -69) -83]
Test Case: 645 | Input/Output: [(27 -96 29 41) -96]
Test Case: 646 | Input/Output: [(-73 39 100 -93) -93]
Test Case: 647 | Input/Output: [(22 32 -23 -40) -40]
Test Case: 648 | Input/Output: [(95 -71 -50 15) -71]
Test Case: 649 | Input/Output: [(74 -9 4 75) -9]
Test Case: 650 | Input/Output: [(47 -61 -24 -74) -74]
Test Case: 651 | Input/Output: [(-78 94 64 -32) -78]
Test Case: 652 | Input/Output: [(52 35 73 -41) -41]
Test Case: 653 | Input/Output: [(-100 15 -79 37) -100]
Test Case: 654 | Input/Output: [(22 66 -31 7) -31]
Test Case: 655 | Input/Output: [(23 -91 44 -97) -97]
Test Case: 656 | Input/Output: [(-11 -21 41 -10) -21]
Test Case: 657 | Input/Output: [(-82 23 -90 6) -90]
Test Case: 658 | Input/Output: [(-46 17 97 6) -46]
Test Case: 659 | Input/Output: [(-14 -5 95 88) -14]
Test Case: 660 | Input/Output: [(-53 -68 26 -48) -68]
Test Case: 661 | Input/Output: [(-51 -79 -88 80) -88]
Test Case: 662 | Input/Output: [(-40 29 -23 76) -40]
Test Case: 663 | Input/Output: [(66 7 -18 -22) -22]
Test Case: 664 | Input/Output: [(57 -85 5 67) -85]
Test Case: 665 | Input/Output: [(34 12 5 -9) -9]
Test Case: 666 | Input/Output: [(59 -5 -82 75) -82]
Test Case: 667 | Input/Output: [(26 -38 81 86) -38]
Test Case: 668 | Input/Output: [(3 -10 41 -24) -24]
Test Case: 669 | Input/Output: [(-11 66 4 -1) -11]
Test Case: 670 | Input/Output: [(69 -14 -52 -9) -52]
Test Case: 671 | Input/Output: [(-55 -98 -83 -5) -98]
Test Case: 672 | Input/Output: [(-41 -31 87 -58) -58]
Test Case: 673 | Input/Output: [(-32 -70 13 61) -70]
Test Case: 674 | Input/Output: [(-71 -33 60 -62) -71]
Test Case: 675 | Input/Output: [(-53 -75 -92 -48) -92]
Test Case: 676 | Input/Output: [(90 -80 -55 -47) -80]
Test Case: 677 | Input/Output: [(-54 -23 25 -45) -54]
Test Case: 678 | Input/Output: [(1 -81 -25 50) -81]
Test Case: 679 | Input/Output: [(50 21 66 -78) -78]
Test Case: 680 | Input/Output: [(-79 -91 -85 7) -91]
Test Case: 681 | Input/Output: [(30 29 29 -34) -34]
Test Case: 682 | Input/Output: [(27 100 33 11) 11]
Test Case: 683 | Input/Output: [(-99 9 -27 -1) -99]
Test Case: 684 | Input/Output: [(-65 -44 -49 -96) -96]
Test Case: 685 | Input/Output: [(-3 19 -11 22) -11]
Test Case: 686 | Input/Output: [(-76 -86 47 80) -86]
Test Case: 687 | Input/Output: [(-76 -74 37 96) -76]
Test Case: 688 | Input/Output: [(64 -54 -71 89) -71]
Test Case: 689 | Input/Output: [(61 -40 19 -33) -40]
Test Case: 690 | Input/Output: [(-79 24 -14 -42) -79]
Test Case: 691 | Input/Output: [(-1 33 86 -47) -47]
Test Case: 692 | Input/Output: [(16 84 -48 -93) -93]
Test Case: 693 | Input/Output: [(93 -50 -91 -67) -91]
Test Case: 694 | Input/Output: [(-4 -59 42 9) -59]
Test Case: 695 | Input/Output: [(-48 -32 -98 -96) -98]
Test Case: 696 | Input/Output: [(-96 -87 -41 -5) -96]
Test Case: 697 | Input/Output: [(33 41 61 -46) -46]
Test Case: 698 | Input/Output: [(-11 46 48 -70) -70]
Test Case: 699 | Input/Output: [(-69 -38 -16 -75) -75]
Test Case: 700 | Input/Output: [(-6 -74 -21 -50) -74]
Test Case: 701 | Input/Output: [(-27 -46 -38 78) -46]
Test Case: 702 | Input/Output: [(-16 81 -94 50) -94]
Test Case: 703 | Input/Output: [(-74 42 64 29) -74]
Test Case: 704 | Input/Output: [(-73 -23 -87 16) -87]
Test Case: 705 | Input/Output: [(-16 52 99 -6) -16]
Test Case: 706 | Input/Output: [(-84 -67 0 51) -84]
Test Case: 707 | Input/Output: [(-31 40 -3 -46) -46]
Test Case: 708 | Input/Output: [(-76 -6 -48 -61) -76]
Test Case: 709 | Input/Output: [(64 67 -94 71) -94]
Test Case: 710 | Input/Output: [(12 89 -12 51) -12]
Test Case: 711 | Input/Output: [(-57 44 71 59) -57]
Test Case: 712 | Input/Output: [(-77 -2 46 -62) -77]
Test Case: 713 | Input/Output: [(-79 41 29 -54) -79]
Test Case: 714 | Input/Output: [(51 -86 33 18) -86]
Test Case: 715 | Input/Output: [(-79 94 34 77) -79]
Test Case: 716 | Input/Output: [(73 24 -54 50) -54]
Test Case: 717 | Input/Output: [(28 -38 -57 42) -57]
Test Case: 718 | Input/Output: [(-27 -14 -66 -55) -66]
Test Case: 719 | Input/Output: [(94 31 -79 -72) -79]
Test Case: 720 | Input/Output: [(99 -76 15 -42) -76]
Test Case: 721 | Input/Output: [(-42 57 82 8) -42]
Test Case: 722 | Input/Output: [(-80 -6 68 -9) -80]
Test Case: 723 | Input/Output: [(-82 40 70 -25) -82]
Test Case: 724 | Input/Output: [(26 -33 -17 94) -33]
Test Case: 725 | Input/Output: [(32 19 31 39) 19]
Test Case: 726 | Input/Output: [(0 -73 -89 -77) -89]
Test Case: 727 | Input/Output: [(1 -11 -67 -86) -86]
Test Case: 728 | Input/Output: [(-85 28 -6 -69) -85]
Test Case: 729 | Input/Output: [(-25 -89 41 21) -89]
Test Case: 730 | Input/Output: [(-92 -95 -76 24) -95]
Test Case: 731 | Input/Output: [(41 -90 51 33) -90]
Test Case: 732 | Input/Output: [(-7 57 -50 32) -50]
Test Case: 733 | Input/Output: [(-30 -81 57 73) -81]
Test Case: 734 | Input/Output: [(-36 -67 -73 -81) -81]
Test Case: 735 | Input/Output: [(-95 -16 37 78) -95]
Test Case: 736 | Input/Output: [(65 21 42 66) 21]
Test Case: 737 | Input/Output: [(0 -18 92 -26) -26]
Test Case: 738 | Input/Output: [(12 -58 -21 25) -58]
Test Case: 739 | Input/Output: [(-58 79 -55 21) -58]
Test Case: 740 | Input/Output: [(2 -13 -60 59) -60]
Test Case: 741 | Input/Output: [(80 -31 25 -30) -31]
Test Case: 742 | Input/Output: [(47 33 55 -97) -97]
Test Case: 743 | Input/Output: [(61 79 -28 -20) -28]
Test Case: 744 | Input/Output: [(67 -48 -14 -71) -71]
Test Case: 745 | Input/Output: [(-45 -9 95 56) -45]
Test Case: 746 | Input/Output: [(0 -49 33 -49) -49]
Test Case: 747 | Input/Output: [(-3 86 19 -39) -39]
Test Case: 748 | Input/Output: [(-26 -90 15 -98) -98]
Test Case: 749 | Input/Output: [(76 -40 -100 27) -100]
Test Case: 750 | Input/Output: [(31 -32 59 46) -32]
Test Case: 751 | Input/Output: [(27 -84 -66 91) -84]
Test Case: 752 | Input/Output: [(-73 -73 -96 -11) -96]
Test Case: 753 | Input/Output: [(8 42 -36 4) -36]
Test Case: 754 | Input/Output: [(-26 83 89 55) -26]
Test Case: 755 | Input/Output: [(69 12 -57 -70) -70]
Test Case: 756 | Input/Output: [(-85 36 12 86) -85]
Test Case: 757 | Input/Output: [(69 52 6 -49) -49]
Test Case: 758 | Input/Output: [(60 -79 31 62) -79]
Test Case: 759 | Input/Output: [(7 9 65 -9) -9]
Test Case: 760 | Input/Output: [(-42 -15 -9 -3) -42]
Test Case: 761 | Input/Output: [(27 -21 28 -64) -64]
Test Case: 762 | Input/Output: [(99 -30 -21 99) -30]
Test Case: 763 | Input/Output: [(6 -48 -15 36) -48]
Test Case: 764 | Input/Output: [(-49 10 77 44) -49]
Test Case: 765 | Input/Output: [(-60 3 -26 -59) -60]
Test Case: 766 | Input/Output: [(10 -43 -47 -34) -47]
Test Case: 767 | Input/Output: [(91 69 -20 -7) -20]
Test Case: 768 | Input/Output: [(-1 60 42 -36) -36]
Test Case: 769 | Input/Output: [(0 -50 -44 67) -50]
Test Case: 770 | Input/Output: [(-24 49 -80 20) -80]
Test Case: 771 | Input/Output: [(-1 39 45 50) -1]
Test Case: 772 | Input/Output: [(-55 -28 5 -59) -59]
Test Case: 773 | Input/Output: [(98 72 -60 -4) -60]
Test Case: 774 | Input/Output: [(21 -81 74 13) -81]
Test Case: 775 | Input/Output: [(28 -47 -34 32) -47]
Test Case: 776 | Input/Output: [(67 60 -85 36) -85]
Test Case: 777 | Input/Output: [(75 -81 -32 -2) -81]
Test Case: 778 | Input/Output: [(13 -2 18 57) -2]
Test Case: 779 | Input/Output: [(-6 -9 -96 39) -96]
Test Case: 780 | Input/Output: [(-90 55 -6 -76) -90]
Test Case: 781 | Input/Output: [(-99 -23 -80 -51) -99]
Test Case: 782 | Input/Output: [(-1 94 97 -40) -40]
Test Case: 783 | Input/Output: [(54 86 43 -44) -44]
Test Case: 784 | Input/Output: [(71 22 94 -91) -91]
Test Case: 785 | Input/Output: [(71 -71 12 10) -71]
Test Case: 786 | Input/Output: [(-68 -3 -32 63) -68]
Test Case: 787 | Input/Output: [(-5 48 48 -67) -67]
Test Case: 788 | Input/Output: [(-18 22 60 76) -18]
Test Case: 789 | Input/Output: [(-44 -58 -60 25) -60]
Test Case: 790 | Input/Output: [(87 -53 -33 -13) -53]
Test Case: 791 | Input/Output: [(-80 -69 -65 -37) -80]
Test Case: 792 | Input/Output: [(-30 55 -34 16) -34]
Test Case: 793 | Input/Output: [(20 21 -39 65) -39]
Test Case: 794 | Input/Output: [(98 -47 2 94) -47]
Test Case: 795 | Input/Output: [(60 77 -75 -17) -75]
Test Case: 796 | Input/Output: [(0 32 31 -63) -63]
Test Case: 797 | Input/Output: [(63 -10 -84 29) -84]
Test Case: 798 | Input/Output: [(-75 -5 -72 -5) -75]
Test Case: 799 | Input/Output: [(19 59 -52 83) -52]
Test Case: 800 | Input/Output: [(64 -42 -80 91) -80]
Test Case: 801 | Input/Output: [(81 68 -45 51) -45]
Test Case: 802 | Input/Output: [(18 93 -73 -38) -73]
Test Case: 803 | Input/Output: [(95 -86 39 65) -86]
Test Case: 804 | Input/Output: [(-10 -54 34 -32) -54]
Test Case: 805 | Input/Output: [(-5 88 -59 -67) -67]
Test Case: 806 | Input/Output: [(78 -14 -13 -62) -62]
Test Case: 807 | Input/Output: [(78 74 1 61) 1]
Test Case: 808 | Input/Output: [(23 54 80 35) 23]
Test Case: 809 | Input/Output: [(-72 0 75 60) -72]
Test Case: 810 | Input/Output: [(82 -18 -48 -31) -48]
Test Case: 811 | Input/Output: [(67 -32 100 -7) -32]
Test Case: 812 | Input/Output: [(-93 72 -71 96) -93]
Test Case: 813 | Input/Output: [(23 87 -88 -25) -88]
Test Case: 814 | Input/Output: [(60 33 -36 -91) -91]
Test Case: 815 | Input/Output: [(88 64 83 20) 20]
Test Case: 816 | Input/Output: [(80 39 4 44) 4]
Test Case: 817 | Input/Output: [(-46 31 -69 -50) -69]
Test Case: 818 | Input/Output: [(5 -77 -30 -83) -83]
Test Case: 819 | Input/Output: [(-82 -78 -99 23) -99]
Test Case: 820 | Input/Output: [(27 -14 54 -23) -23]
Test Case: 821 | Input/Output: [(78 75 48 90) 48]
Test Case: 822 | Input/Output: [(-71 82 -85 -43) -85]
Test Case: 823 | Input/Output: [(44 39 -20 81) -20]
Test Case: 824 | Input/Output: [(0 -65 -51 -8) -65]
Test Case: 825 | Input/Output: [(9 5 51 7) 5]
Test Case: 826 | Input/Output: [(-59 -62 69 71) -62]
Test Case: 827 | Input/Output: [(90 -55 98 -22) -55]
Test Case: 828 | Input/Output: [(-73 -84 58 67) -84]
Test Case: 829 | Input/Output: [(-33 24 -86 -85) -86]
Test Case: 830 | Input/Output: [(-45 78 56 -31) -45]
Test Case: 831 | Input/Output: [(79 -5 29 -85) -85]
Test Case: 832 | Input/Output: [(-30 -61 76 2) -61]
Test Case: 833 | Input/Output: [(66 55 37 36) 36]
Test Case: 834 | Input/Output: [(-70 23 -18 23) -70]
Test Case: 835 | Input/Output: [(-85 -7 -11 -18) -85]
Test Case: 836 | Input/Output: [(-81 -26 -96 -90) -96]
Test Case: 837 | Input/Output: [(-5 67 85 -15) -15]
Test Case: 838 | Input/Output: [(-55 -90 -22 30) -90]
Test Case: 839 | Input/Output: [(71 65 -62 -26) -62]
Test Case: 840 | Input/Output: [(-3 -98 19 -52) -98]
Test Case: 841 | Input/Output: [(74 84 94 56) 56]
Test Case: 842 | Input/Output: [(-62 7 57 -18) -62]
Test Case: 843 | Input/Output: [(75 38 43 78) 38]
Test Case: 844 | Input/Output: [(-77 57 -43 -15) -77]
Test Case: 845 | Input/Output: [(28 -13 99 26) -13]
Test Case: 846 | Input/Output: [(-41 29 -4 -2) -41]
Test Case: 847 | Input/Output: [(-16 61 -70 94) -70]
Test Case: 848 | Input/Output: [(-96 34 -68 -76) -96]
Test Case: 849 | Input/Output: [(-32 -62 46 -81) -81]
Test Case: 850 | Input/Output: [(53 -69 -23 32) -69]
Test Case: 851 | Input/Output: [(-48 -5 -84 67) -84]
Test Case: 852 | Input/Output: [(100 -51 94 -94) -94]
Test Case: 853 | Input/Output: [(-25 -100 35 -86) -100]
Test Case: 854 | Input/Output: [(25 -28 -78 100) -78]
Test Case: 855 | Input/Output: [(-88 9 -18 24) -88]
Test Case: 856 | Input/Output: [(54 50 6 -80) -80]
Test Case: 857 | Input/Output: [(-47 -48 -52 -60) -60]
Test Case: 858 | Input/Output: [(-67 1 -7 -37) -67]
Test Case: 859 | Input/Output: [(-86 54 -50 0) -86]
Test Case: 860 | Input/Output: [(55 -70 -72 37) -72]
Test Case: 861 | Input/Output: [(-55 -80 -64 -88) -88]
Test Case: 862 | Input/Output: [(81 -83 -89 -93) -93]
Test Case: 863 | Input/Output: [(30 80 -83 -71) -83]
Test Case: 864 | Input/Output: [(-74 1 -97 49) -97]
Test Case: 865 | Input/Output: [(-94 -68 -76 56) -94]
Test Case: 866 | Input/Output: [(73 86 100 9) 9]
Test Case: 867 | Input/Output: [(63 81 1 -20) -20]
Test Case: 868 | Input/Output: [(-27 1 -94 57) -94]
Test Case: 869 | Input/Output: [(38 -43 69 8) -43]
Test Case: 870 | Input/Output: [(21 79 -84 57) -84]
Test Case: 871 | Input/Output: [(-97 4 -100 3) -100]
Test Case: 872 | Input/Output: [(-85 85 -50 84) -85]
Test Case: 873 | Input/Output: [(31 -5 -80 -56) -80]
Test Case: 874 | Input/Output: [(28 -83 -99 -5) -99]
Test Case: 875 | Input/Output: [(-55 53 -3 18) -55]
Test Case: 876 | Input/Output: [(59 -50 -89 31) -89]
Test Case: 877 | Input/Output: [(-91 -65 20 -99) -99]
Test Case: 878 | Input/Output: [(-56 32 -15 18) -56]
Test Case: 879 | Input/Output: [(29 35 -92 4) -92]
Test Case: 880 | Input/Output: [(-57 -72 -35 42) -72]
Test Case: 881 | Input/Output: [(73 89 -96 22) -96]
Test Case: 882 | Input/Output: [(-61 -2 -20 56) -61]
Test Case: 883 | Input/Output: [(30 12 -99 -59) -99]
Test Case: 884 | Input/Output: [(-100 -30 -79 25) -100]
Test Case: 885 | Input/Output: [(-24 49 2 -37) -37]
Test Case: 886 | Input/Output: [(-33 -67 -39 67) -67]
Test Case: 887 | Input/Output: [(-53 -95 73 -22) -95]
Test Case: 888 | Input/Output: [(-63 93 -68 10) -68]
Test Case: 889 | Input/Output: [(-2 32 -73 3) -73]
Test Case: 890 | Input/Output: [(76 -31 -55 -90) -90]
Test Case: 891 | Input/Output: [(45 28 -4 -25) -25]
Test Case: 892 | Input/Output: [(3 -62 -79 -65) -79]
Test Case: 893 | Input/Output: [(-46 -72 -4 -15) -72]
Test Case: 894 | Input/Output: [(23 61 -88 -3) -88]
Test Case: 895 | Input/Output: [(-36 17 -58 -65) -65]
Test Case: 896 | Input/Output: [(34 -39 -71 -15) -71]
Test Case: 897 | Input/Output: [(69 -9 -10 79) -10]
Test Case: 898 | Input/Output: [(60 40 -93 49) -93]
Test Case: 899 | Input/Output: [(-38 -97 -3 -61) -97]
Test Case: 900 | Input/Output: [(-77 91 24 18) -77]
Test Case: 901 | Input/Output: [(70 -88 57 -37) -88]
Test Case: 902 | Input/Output: [(46 -36 -60 63) -60]
Test Case: 903 | Input/Output: [(-27 14 81 -52) -52]
Test Case: 904 | Input/Output: [(-28 100 0 14) -28]
Test Case: 905 | Input/Output: [(38 -85 76 87) -85]
Test Case: 906 | Input/Output: [(-30 93 25 -75) -75]
Test Case: 907 | Input/Output: [(-11 -94 96 97) -94]
Test Case: 908 | Input/Output: [(-99 63 -24 -26) -99]
Test Case: 909 | Input/Output: [(-31 94 -85 -24) -85]
Test Case: 910 | Input/Output: [(96 -77 -27 -89) -89]
Test Case: 911 | Input/Output: [(36 -41 -40 44) -41]
Test Case: 912 | Input/Output: [(53 -42 49 31) -42]
Test Case: 913 | Input/Output: [(84 8 73 -38) -38]
Test Case: 914 | Input/Output: [(91 -68 -8 -43) -68]
Test Case: 915 | Input/Output: [(8 -51 83 49) -51]
Test Case: 916 | Input/Output: [(-33 37 -97 18) -97]
Test Case: 917 | Input/Output: [(-73 63 -55 30) -73]
Test Case: 918 | Input/Output: [(-58 34 20 -21) -58]
Test Case: 919 | Input/Output: [(-4 -4 87 23) -4]
Test Case: 920 | Input/Output: [(-50 -41 -32 80) -50]
Test Case: 921 | Input/Output: [(66 61 -60 25) -60]
Test Case: 922 | Input/Output: [(-36 92 -26 65) -36]
Test Case: 923 | Input/Output: [(-21 -73 -86 26) -86]
Test Case: 924 | Input/Output: [(-14 -87 85 5) -87]
Test Case: 925 | Input/Output: [(64 14 -4 -25) -25]
Test Case: 926 | Input/Output: [(-1 -20 -79 96) -79]
Test Case: 927 | Input/Output: [(25 -46 -100 -83) -100]
Test Case: 928 | Input/Output: [(11 15 -49 -87) -87]
Test Case: 929 | Input/Output: [(52 -10 96 27) -10]
Test Case: 930 | Input/Output: [(-79 14 97 2) -79]
Test Case: 931 | Input/Output: [(12 -40 31 -56) -56]
Test Case: 932 | Input/Output: [(38 -50 -46 -85) -85]
Test Case: 933 | Input/Output: [(-27 -78 42 -82) -82]
Test Case: 934 | Input/Output: [(-31 65 -85 -62) -85]
Test Case: 935 | Input/Output: [(-92 -9 73 -69) -92]
Test Case: 936 | Input/Output: [(60 -63 58 -31) -63]
Test Case: 937 | Input/Output: [(70 77 -53 -42) -53]
Test Case: 938 | Input/Output: [(50 -70 -84 19) -84]
Test Case: 939 | Input/Output: [(1 7 -60 11) -60]
Test Case: 940 | Input/Output: [(25 -68 72 -100) -100]
Test Case: 941 | Input/Output: [(-12 -55 38 23) -55]
Test Case: 942 | Input/Output: [(8 69 75 -82) -82]
Test Case: 943 | Input/Output: [(25 15 9 51) 9]
Test Case: 944 | Input/Output: [(33 -88 41 29) -88]
Test Case: 945 | Input/Output: [(-100 49 61 -78) -100]
Test Case: 946 | Input/Output: [(-57 37 -42 -38) -57]
Test Case: 947 | Input/Output: [(100 -74 -87 15) -87]
Test Case: 948 | Input/Output: [(23 66 63 90) 23]
Test Case: 949 | Input/Output: [(42 -62 61 7) -62]
Test Case: 950 | Input/Output: [(88 -18 68 77) -18]
Test Case: 951 | Input/Output: [(60 9 -99 89) -99]
Test Case: 952 | Input/Output: [(-65 74 -34 0) -65]
Test Case: 953 | Input/Output: [(-98 -28 -47 97) -98]
Test Case: 954 | Input/Output: [(-69 92 67 -74) -74]
Test Case: 955 | Input/Output: [(-63 -92 -78 43) -92]
Test Case: 956 | Input/Output: [(-14 41 -78 -19) -78]
Test Case: 957 | Input/Output: [(57 -70 -91 -1) -91]
Test Case: 958 | Input/Output: [(-73 -41 -15 91) -73]
Test Case: 959 | Input/Output: [(22 -43 14 -68) -68]
Test Case: 960 | Input/Output: [(56 -68 -66 -71) -71]
Test Case: 961 | Input/Output: [(86 99 -49 -13) -49]
Test Case: 962 | Input/Output: [(29 -73 -36 61) -73]
Test Case: 963 | Input/Output: [(97 -70 -17 43) -70]
Test Case: 964 | Input/Output: [(67 -89 97 -95) -95]
Test Case: 965 | Input/Output: [(-81 92 -46 77) -81]
Test Case: 966 | Input/Output: [(50 22 47 -66) -66]
Test Case: 967 | Input/Output: [(-45 -27 -71 38) -71]
Test Case: 968 | Input/Output: [(-2 97 77 -53) -53]
Test Case: 969 | Input/Output: [(17 26 -51 -60) -60]
Test Case: 970 | Input/Output: [(-10 13 40 -97) -97]
Test Case: 971 | Input/Output: [(-34 -92 -81 64) -92]
Test Case: 972 | Input/Output: [(99 74 -69 14) -69]
Test Case: 973 | Input/Output: [(-41 70 -22 92) -41]
Test Case: 974 | Input/Output: [(-68 -78 -48 57) -78]
Test Case: 975 | Input/Output: [(55 65 -46 26) -46]
Test Case: 976 | Input/Output: [(57 31 -2 18) -2]
Test Case: 977 | Input/Output: [(16 -83 36 -51) -83]
Test Case: 978 | Input/Output: [(-93 64 8 -41) -93]
Test Case: 979 | Input/Output: [(25 -14 75 84) -14]
Test Case: 980 | Input/Output: [(-39 39 -88 34) -88]
Test Case: 981 | Input/Output: [(69 -33 93 -15) -33]
Test Case: 982 | Input/Output: [(31 78 27 -2) -2]
Test Case: 983 | Input/Output: [(-73 -38 -83 -9) -83]
Test Case: 984 | Input/Output: [(83 -99 25 -55) -99]
Test Case: 985 | Input/Output: [(82 -88 99 -61) -88]
Test Case: 986 | Input/Output: [(-39 -21 28 -96) -96]
Test Case: 987 | Input/Output: [(-21 -62 64 67) -62]
Test Case: 988 | Input/Output: [(28 13 -76 -72) -76]
Test Case: 989 | Input/Output: [(-66 45 -10 -82) -82]
Test Case: 990 | Input/Output: [(37 92 -91 -40) -91]
Test Case: 991 | Input/Output: [(85 -58 67 46) -58]
Test Case: 992 | Input/Output: [(-48 -39 12 62) -48]
Test Case: 993 | Input/Output: [(-69 0 -73 -23) -73]
Test Case: 994 | Input/Output: [(41 -69 -94 -35) -94]
Test Case: 995 | Input/Output: [(-38 0 -57 43) -57]
Test Case: 996 | Input/Output: [(92 98 96 41) 41]
Test Case: 997 | Input/Output: [(-80 12 32 29) -80]
Test Case: 998 | Input/Output: [(-86 17 67 -97) -97]
Test Case: 999 | Input/Output: [(55 51 75 -97) -97]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 36d53ff379ce188ec967b36004fe50584f65112f
GitHub link = https://github.com/lspector/Clojush/commit/36d53ff379ce188ec967b36004fe50584f65112f
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7461 0x579dde54 clojush.problems.software.smallest$fn__7461@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7479@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 26 22 96 -104 -111 -10 12 103 -69 -121 -87 -7 -18 74 -24 -40
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-67 -67 -77 -67] -77] [[-30 -60 -60 -60] -60] [[-51 -51 -14 -51] -51] [[62 85 62 62] 62] [[93 93 93 -78] -78] [[24 -67 -67 -67] -67] [[88 88 88 -100] -100] [[66 66 66 35] 35] [[12 12 12 59] 12] [[96 -49 96 96] -49] [(-90 -90 -90 -90) -90] [(-11 -11 -11 -11) -11] [(-80 -80 -80 -80) -80] [(58 58 58 58) 58] [(-71 -71 -71 -71) -71] [(5 36 62 76) 5] [(3 72 52 96) 3] [(2 98 82 44) 2] [(60 27 25 48) 25] [(53 64 12 67) 12] [(75 77 64 19) 19] [(9 20 29 6) 6] [(15 56 47 48) 15] [(1 82 3 75) 1] [(0 18 99 66) 0] [(70 75 28 51) 28] [(23 89 56 95) 23] [(30 25 62 82) 25] [(39 53 6 18) 6] [(69 12 100 95) 12] [(90 46 90 98) 46] [(73 82 29 18) 18] [(35 39 74 54) 35] [(20 76 57 78) 20] [(10 83 64 10) 10] [(85 -31 36 71) -31] [(37 4 60 0) 0] [(37 -55 1 89) -55] [(-37 35 80 -54) -54] [(51 60 57 12) 12] [(-89 79 1 4) -89] [(-46 84 -70 63) -70] [(16 89 8 52) 8] [(12 -25 -38 11) -38] [(60 78 46 53) 46] [(-28 -73 83 55) -73] [(22 -68 35 -10) -68] [(-39 71 2 8) -39] [(60 48 34 75) 34] [(18 -20 82 -56) -56] [(-78 -1 56 86) -78] [(94 99 -45 -31) -45] [(25 -95 -80 -60) -95] [(-40 85 50 -54) -54] [(-70 55 22 39) -70] [(-87 -97 66 22) -97] [(10 -69 42 12) -69] [(-47 25 17 -93) -93] [(100 42 -54 -82) -82] [(-65 90 36 -44) -65] [(-48 -71 -99 -22) -99] [(65 37 -56 -33) -56] [(54 -64 32 27) -64] [(79 -96 -86 58) -96] [(-40 -34 42 37) -40] [(-65 81 26 79) -65] [(-90 41 -61 -94) -94] [(0 66 -80 -8) -80] [(10 3 88 -93) -93] [(35 9 0 24) 0] [(-46 96 61 -79) -79] [(32 -93 54 -13) -93] [(53 -44 11 -76) -76] [(-67 10 -93 30) -93] [(82 24 66 98) 24] [(76 -13 -74 -92) -92] [(61 84 69 -18) -18] [(77 -83 40 -73) -83] [(-71 46 -32 60) -71] [(12 -43 35 44) -43] [(-72 -46 59 97) -72] [(69 75 -97 79) -97] [(-58 97 77 6) -58] [(-34 -72 -28 -44) -72] [(55 -83 51 15) -83] [(-82 -61 -37 -49) -82] [(25 45 34 34) 25] [(-31 83 35 29) -31] [(29 -41 11 41) -41] [(-21 -51 -33 91) -51] [(-60 87 -82 -16) -82] [(21 -88 2 -94) -94] [(28 93 20 75) 20] [(-89 71 -66 -63) -89] [(42 -70 -23 94) -70])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Lexicase best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Lexicase best errors: [0 1 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 29
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Zero cases best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Zero cases best errors: [0 1 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 29
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 6 2 14 3 2 6 2 3 14)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (2 6 2 14 3 2 6 2 3 14)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove exec_stackdepth integer_lte boolean_not) integer_inc) () integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq) ())))
Errors: [0 1 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 85
Percent parens: 0.259
--- Population Statistics ---
Average total errors in population: 9.946
Median total errors in population: 10
Error averages by case: (0.998 0.994 0.998 0.986 0.997 0.998 0.994 0.998 0.997 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.192
Average program size in population (points): 69.084
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.277
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 481463
--- Timings ---
Current time: 1559583599677 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.7 seconds, 26.9%
Fitness Testing:      1.8 seconds, 69.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: 24                 
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 85                 
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: 37                 
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: 12                 
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -28                
Correct output: -68                 | Program output: 22                 
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: 25                 
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -87                
Correct output: -69                 | Program output: 10                 
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -48                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: 54                 
Correct output: -96                 | Program output: 79                 
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -76                 | Program output: 53                 
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: 76                 
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: 77                 
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -34                
Correct output: -83                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 29                 
Correct output: -51                 | Program output: -21                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: 21                 
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) (integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))))
Lexicase best errors: [0 0 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 84
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) (integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))))
Zero cases best errors: [0 0 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 84
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 354 114 1 457 459 1 354 354)
Population mean number of elite cases: 2.10
Count of perfect (error zero) individuals by case: (1 1 354 114 1 457 459 1 354 354)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) (integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))))
Errors: [0 0 1 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.904
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.646 0.886 0.999 0.543 0.541 0.999 0.646 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.372
Average program size in population (points): 59.22
Average percent parens in population: 0.290
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.535
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.486
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.472
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 951374
--- Timings ---
Current time: 1559583602336 milliseconds
Total Time:           5.8 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.3 seconds, 39.9%
Fitness Testing:      2.5 seconds, 42.8%
Report:               0.9 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: 24                 
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 85                 
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: 37                 
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: 12                 
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -28                
Correct output: -68                 | Program output: 22                 
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: 25                 
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -87                
Correct output: -69                 | Program output: 10                 
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -48                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: 54                 
Correct output: -96                 | Program output: 79                 
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -76                 | Program output: 53                 
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: 76                 
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: 77                 
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -34                
Correct output: -83                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 29                 
Correct output: -51                 | Program output: -21                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: 21                 
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq in4) boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times print_integer exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq)
Lexicase best errors: [1 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 81
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction in4} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq in4) boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times print_integer exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq)
Zero cases best errors: [1 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 81
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (81 452 370 373 538 269 188 639 370 538)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (81 452 370 373 538 269 188 639 370 538)
Population mean number of perfect (error zero) cases: 3.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (integer_yankdup integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) (integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))))
Errors: [1 0 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 63
Size: 84
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.182
Median total errors in population: 6
Error averages by case: (0.919 0.548 0.63 0.627 0.462 0.731 0.812 0.361 0.63 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.441
Average program size in population (points): 67.734
Average percent parens in population: 0.265
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.237
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 172
Genome diversity (% unique genomes):	 0.625
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 172
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1408005
--- Timings ---
Current time: 1559583605262 milliseconds
Total Time:           8.7 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.3 seconds, 48.9%
Fitness Testing:      3.1 seconds, 35.4%
Report:               1.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing (boolean_shove exec_stackdepth integer_lte boolean_not) (integer_inc)) (integer_fromboolean exec_do*times (exec_swap (integer_mod) (integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))) ())))
Lexicase best errors: [0 1 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 85
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing (boolean_shove exec_stackdepth integer_lte boolean_not) (integer_inc)) (integer_fromboolean exec_do*times (exec_swap (integer_mod) (integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq))) ())))
Zero cases best errors: [0 1 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 85
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (154 336 561 207 200 697 154 154 154 154)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (154 336 561 207 200 697 154 154 154 154)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ())))) ())
Errors: [0 1 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 16
Size: 29
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 7.229
Median total errors in population: 8
Error averages by case: (0.846 0.664 0.439 0.793 0.8 0.303 0.846 0.846 0.846 0.846)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.818
Average program size in population (points): 67.302
Average percent parens in population: 0.269
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.727
Median age in population: 4.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1951775
--- Timings ---
Current time: 1559583608516 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.7 seconds, 55.1%
Fitness Testing:      3.7 seconds, 30.7%
Report:               1.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Lexicase best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Lexicase best errors: [0 1 1 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Zero cases best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Zero cases best errors: [0 1 1 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (581 104 117 583 582 104 104 583 807 108)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (581 104 117 583 582 104 104 583 807 108)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Best program: (integer_stackdepth in2 print_integer integer_dup_times exec_do*while (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))))
Errors: [0 1 1 0 0 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 16
Size: 28
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.327
Median total errors in population: 5
Error averages by case: (0.419 0.896 0.883 0.417 0.418 0.896 0.896 0.417 0.193 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.109
Average program size in population (points): 54.965
Average percent parens in population: 0.317
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.133625
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.623
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2467274
--- Timings ---
Current time: 1559583611733 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 59.7%
Fitness Testing:      4.3 seconds, 27.8%
Report:               1.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_yank print_integer boolean_yank boolean_flush exec_y (boolean_eq in1) boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer boolean_stackdepth integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty integer_lte integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_sub tag_exec_999 () boolean_shove exec_stackdepth integer_eq)
Lexicase best errors: [0 1 0 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 80
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_sub} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in1 boolean_xor boolean_empty boolean_yank print_integer boolean_yank boolean_flush exec_y (boolean_eq in1) boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (integer_inc boolean_dup_items) integer_dec print_integer boolean_stackdepth integer_add) (exec_k_when_autoconstructing () (boolean_shove integer_empty integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty integer_lte integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_sub tag_exec_999 () boolean_shove exec_stackdepth integer_eq)
Zero cases best errors: [0 1 0 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 80
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (430 259 809 429 259 259 429 429 105 429)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (430 259 809 429 259 259 429 429 105 429)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_inc} {:close 1, :instruction tag_exec_999} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_eq})
Best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer integer_dup_items integer_add) (exec_k_when_autoconstructing () (exec_shove (exec_stackdepth integer_lte boolean_not) integer_inc)) (integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop exec_do*while (integer_empty exec_shove (integer_div exec_noop) integer_dup_times boolean_eq exec_flush boolean_dup_times integer_mult integer_inc tag_exec_999 () boolean_shove) exec_stackdepth integer_eq)) ())))
Errors: [0 1 0 0 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 63
Size: 86
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.163
Median total errors in population: 6
Error averages by case: (0.57 0.741 0.191 0.571 0.741 0.741 0.571 0.571 0.895 0.571)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.038
Average program size in population (points): 53.811
Average percent parens in population: 0.295
Minimum age in population: 5.0
Maximum age in population: 9.625
Average age in population: 7.6250625
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2954621
--- Timings ---
Current time: 1559583614672 milliseconds
Total Time:          18.1 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.2 seconds, 62.0%
Fitness Testing:      4.8 seconds, 26.5%
Report:               2.0 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Lexicase best program: (exec_do*while (integer_shove boolean_yank integer_stackdepth) in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 33
Percent parens: 0.424
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction integer_eq} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Zero cases best program: (exec_do*while (integer_shove boolean_yank integer_stackdepth) in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (integer_eq) exec_pop () boolean_shove exec_rot () () ()))) ())
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 33
Percent parens: 0.424
--- Lexicase Population Statistics ---
Count of elite individuals by case: (105 492 1000 492 325 595 492 1000 1000 1000)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (105 492 0 492 325 595 492 0 0 0)
Population mean number of perfect (error zero) cases: 2.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction integer_lte} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_and} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_rot})
Best program: (integer_stackdepth in2 print_integer integer_dup_times exec_swap (exec_while (integer_lte) exec_k_when_autoconstructing () (exec_while () integer_min exec_pop (exec_y (boolean_and) exec_pop () boolean_shove exec_rot () () ()))) ())
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 16
Size: 29
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 7.499
Median total errors in population: 8
Error averages by case: (0.895 0.508 1.0 0.508 0.675 0.405 0.508 1.0 1.0 1.0)
Error minima by case: (0 0 1 0 0 0 0 1 1 1)
Average genome size in population (length): 36.771
Average program size in population (points): 51.353
Average percent parens in population: 0.305
Minimum age in population: 6.25
Maximum age in population: 11.1875
Average age in population: 9.13834375
Median age in population: 9.21875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3421881
--- Timings ---
Current time: 1559583617830 milliseconds
Total Time:          21.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.7 seconds, 63.7%
Fitness Testing:      5.3 seconds, 24.7%
Report:               2.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 85                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 72                 
Correct output: 2                   | Program output: 98                 
Correct output: 25                  | Program output: 27                 
Correct output: 12                  | Program output: 64                 
Correct output: 19                  | Program output: 77                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 56                 
Correct output: 1                   | Program output: 82                 
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 75                 
Correct output: 23                  | Program output: 89                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 53                 
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 82                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 76                 
Correct output: 10                  | Program output: 83                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 60                 
Correct output: -89                 | Program output: 79                 
Correct output: -70                 | Program output: 84                 
Correct output: 8                   | Program output: 89                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 78                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 71                 
Correct output: 34                  | Program output: 48                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 99                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 55                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: 42                 
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 37                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 81                 
Correct output: -94                 | Program output: 41                 
Correct output: -80                 | Program output: 66                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 9                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: 10                 
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 46                 
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 75                 
Correct output: -58                 | Program output: 97                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 45                 
Correct output: -31                 | Program output: 83                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: 87                 
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 93                 
Correct output: -89                 | Program output: 71                 
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger integer_swap boolean_flush integer_swap in2 boolean_dup in2 exec_do*range () in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_lt boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove exec_stackdepth integer_lte boolean_not) integer_inc) () integer_fromboolean exec_do*times (exec_eq) integer_mod) (integer_yank) tag_exec_115 ()))
Lexicase best errors: [1 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 61
Percent parens: 0.246
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger integer_swap boolean_flush integer_swap in2 boolean_dup in2 exec_do*range () in2 boolean_xor boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup exec_dup () exec_dup (integer_lt boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing () (boolean_shove exec_stackdepth integer_lte boolean_not) integer_inc) () integer_fromboolean exec_do*times (exec_eq) integer_mod) (integer_yank) tag_exec_115 ()))
Zero cases best errors: [1 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 61
Percent parens: 0.246
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 589 1 181 589 590 181 5 161 161)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (181 589 1 181 589 590 181 5 161 161)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_shove} {:close 1, :instruction -79} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_do*range} {:close 1, :instruction boolean_xor} {:close 1, :instruction integer_dup_times} {:close 1, :instruction print_exec} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 1, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_y} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup})
Best program: (boolean_flush integer_swap in2 boolean_dup print_integer integer_gt integer_shove -79 exec_flush exec_flush integer_pop exec_do*times (exec_flush boolean_not exec_do*range () boolean_xor) integer_dup_times print_exec () integer_sub boolean_rot boolean_swap integer_pop in3 integer_lt in2 boolean_not boolean_yank integer_swap exec_y () print_boolean boolean_stackdepth integer_dup)
Errors: [1 0 1 1 0 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 32
Size: 37
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 7.361
Median total errors in population: 7
Error averages by case: (0.819 0.411 0.999 0.819 0.411 0.41 0.819 0.995 0.839 0.839)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.599
Average program size in population (points): 49.433
Average percent parens in population: 0.321
Minimum age in population: 7.25
Maximum age in population: 12.625
Average age in population: 10.61709375
Median age in population: 10.671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3985789
--- Timings ---
Current time: 1559583620456 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.5 seconds, 64.4%
Fitness Testing:      5.9 seconds, 24.6%
Report:               2.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: 24                 
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 85                 
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: 37                 
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: 12                 
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -28                
Correct output: -68                 | Program output: 22                 
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: 25                 
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -87                
Correct output: -69                 | Program output: 10                 
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -48                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: 54                 
Correct output: -96                 | Program output: 79                 
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -76                 | Program output: 53                 
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: 76                 
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: 77                 
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -34                
Correct output: -83                 | Program output: 55                 
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 29                 
Correct output: -51                 | Program output: -21                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: 21                 
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: 42                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Lexicase best program: (integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (boolean_shove boolean_yank exec_s (exec_yankdup boolean_eq exec_dup (integer_inc boolean_dup_items)) () ())) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 42
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items})
Zero cases best program: (integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank exec_s (exec_yankdup boolean_eq) (exec_dup (boolean_shove boolean_yank exec_s (exec_yankdup boolean_eq exec_dup (integer_inc boolean_dup_items)) () ())) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 42
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 167 6 298 167 167 191 299 165 157)
Population mean number of elite cases: 1.62
Count of perfect (error zero) individuals by case: (6 167 6 298 167 167 191 299 165 157)
Population mean number of perfect (error zero) cases: 1.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_add} {:close 0, :instruction tagged_55} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_and} {:close 2, :instruction in2} {:close 0, :instruction integer_div} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap exec_when (boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank boolean_yankdup integer_mod exec_do*while (integer_gte in4 integer_add) integer_empty boolean_dup integer_yankdup boolean_swap boolean_or) (integer_flush integer_add tagged_55 exec_yank) boolean_swap boolean_invert_second_then_and) integer_dec exec_stackdepth boolean_xor boolean_and) in2) integer_div exec_rot () (integer_yankdup) (boolean_frominteger))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 63
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 8.377
Median total errors in population: 9
Error averages by case: (0.994 0.833 0.994 0.702 0.833 0.833 0.809 0.701 0.835 0.843)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.661
Average program size in population (points): 49.155
Average percent parens in population: 0.286
Minimum age in population: 9.0625
Maximum age in population: 14.0625
Average age in population: 12.042796875
Median age in population: 12.1328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4515622
--- Timings ---
Current time: 1559583623913 milliseconds
Total Time:          26.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.6 seconds, 65.4%
Fitness Testing:      6.5 seconds, 24.2%
Report:               2.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 35                  | Program output: 35                 
Correct output: 12                  | Program output: 59                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 76                 
Correct output: 3                   | Program output: 96                 
Correct output: 2                   | Program output: 44                 
Correct output: 25                  | Program output: 48                 
Correct output: 12                  | Program output: 67                 
Correct output: 19                  | Program output: 19                 
Correct output: 6                   | Program output: 6                  
Correct output: 15                  | Program output: 48                 
Correct output: 1                   | Program output: 75                 
Correct output: 0                   | Program output: 66                 
Correct output: 28                  | Program output: 51                 
Correct output: 23                  | Program output: 95                 
Correct output: 25                  | Program output: 82                 
Correct output: 6                   | Program output: 18                 
Correct output: 12                  | Program output: 95                 
Correct output: 46                  | Program output: 98                 
Correct output: 18                  | Program output: 18                 
Correct output: 35                  | Program output: 54                 
Correct output: 20                  | Program output: 78                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 71                 
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: 89                 
Correct output: -54                 | Program output: -54                
Correct output: 12                  | Program output: 12                 
Correct output: -89                 | Program output: 4                  
Correct output: -70                 | Program output: 63                 
Correct output: 8                   | Program output: 52                 
Correct output: -38                 | Program output: 11                 
Correct output: 46                  | Program output: 53                 
Correct output: -73                 | Program output: 55                 
Correct output: -68                 | Program output: -10                
Correct output: -39                 | Program output: 8                  
Correct output: 34                  | Program output: 75                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 86                 
Correct output: -45                 | Program output: -31                
Correct output: -95                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: 39                 
Correct output: -97                 | Program output: 22                 
Correct output: -69                 | Program output: 12                 
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -44                
Correct output: -99                 | Program output: -22                
Correct output: -56                 | Program output: -33                
Correct output: -64                 | Program output: 27                 
Correct output: -96                 | Program output: 58                 
Correct output: -40                 | Program output: 37                 
Correct output: -65                 | Program output: 79                 
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 30                 
Correct output: 24                  | Program output: 98                 
Correct output: -92                 | Program output: -92                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -73                
Correct output: -71                 | Program output: 60                 
Correct output: -43                 | Program output: 44                 
Correct output: -72                 | Program output: 97                 
Correct output: -97                 | Program output: 79                 
Correct output: -58                 | Program output: 6                  
Correct output: -72                 | Program output: -44                
Correct output: -83                 | Program output: 15                 
Correct output: -82                 | Program output: -49                
Correct output: 25                  | Program output: 34                 
Correct output: -31                 | Program output: 29                 
Correct output: -41                 | Program output: 41                 
Correct output: -51                 | Program output: 91                 
Correct output: -82                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: 20                  | Program output: 75                 
Correct output: -89                 | Program output: -63                
Correct output: -70                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth})
Lexicase best program: (boolean_stackdepth integer_rot integer_mult integer_add exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty in4 print_integer boolean_yank boolean_flush integer_max boolean_eq exec_rot () (boolean_frominteger integer_yankdup boolean_yank integer_empty exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing (boolean_shove exec_stackdepth) ())))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 48
Percent parens: 0.229
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth})
Zero cases best program: (boolean_stackdepth integer_rot integer_mult integer_add exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty in4 print_integer boolean_yank boolean_flush integer_max boolean_eq exec_rot () (boolean_frominteger integer_yankdup boolean_yank integer_empty exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing (boolean_shove exec_stackdepth) ())))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 48
Percent parens: 0.229
--- Lexicase Population Statistics ---
Count of elite individuals by case: (89 3 170 88 784 88 3 54 788 935)
Population mean number of elite cases: 3.00
Count of perfect (error zero) individuals by case: (89 3 170 88 784 88 3 54 788 935)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in2} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_empty} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth})
Best program: (boolean_stackdepth integer_rot integer_mult boolean_frominteger exec_k_when_autoconstructing (boolean_flush integer_swap in2 boolean_dup integer_yank exec_do*range ()) (in2 boolean_xor boolean_empty in4 print_integer boolean_yank boolean_flush integer_max) boolean_eq exec_rot () (boolean_frominteger integer_yankdup boolean_yank integer_empty exec_yankdup exec_dup () exec_dup (integer_inc boolean_dup_items) integer_dec print_integer exec_yankdup integer_add) (exec_k_when_autoconstructing (boolean_shove exec_stackdepth) ()))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 48
Percent parens: 0.229
--- Population Statistics ---
Average total errors in population: 6.998
Median total errors in population: 7
Error averages by case: (0.911 0.997 0.83 0.912 0.216 0.912 0.997 0.946 0.212 0.065)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.69
Average program size in population (points): 54.488
Average percent parens in population: 0.310
Minimum age in population: 11.3671875
Maximum age in population: 15.296875
Average age in population: 13.81240625
Median age in population: 13.8515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.476
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5615017
--- Timings ---
Current time: 1559583627323 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 63.7%
Fitness Testing:      7.6 seconds, 24.6%
Report:               3.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Lexicase best errors: [0 1 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Zero cases best errors: [0 1 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 353 271 350 352 271 350 17 887 266)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (350 353 271 350 352 271 350 17 887 266)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Errors: [0 1 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 6.533
Median total errors in population: 7
Error averages by case: (0.65 0.647 0.729 0.65 0.648 0.729 0.65 0.983 0.113 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.542
Average program size in population (points): 53.038
Average percent parens in population: 0.253
Minimum age in population: 12.421875
Maximum age in population: 17.296875
Average age in population: 15.576828125
Median age in population: 15.630859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 148
Genome diversity (% unique genomes):	 0.5
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 152
Syntactic diversity (% unique Push programs):	 0.491
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6648722
--- Timings ---
Current time: 1559583631162 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.7 seconds, 63.5%
Fitness Testing:      8.6 seconds, 25.2%
Report:               3.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove (in3) exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove (in3) exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (517 695 694 686 936 516 206 729 517 533)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (517 695 694 686 936 516 206 729 517 533)
Population mean number of perfect (error zero) cases: 6.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod)))))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 3.971
Median total errors in population: 4
Error averages by case: (0.483 0.305 0.306 0.314 0.064 0.484 0.794 0.271 0.483 0.467)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.606
Average program size in population (points): 56.421
Average percent parens in population: 0.261
Minimum age in population: 14.28125
Maximum age in population: 18.6220703125
Average age in population: 16.90041796875
Median age in population: 16.9765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 170
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.01
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7806833
--- Timings ---
Current time: 1559583635238 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.9 seconds, 62.4%
Fitness Testing:      9.8 seconds, 25.5%
Report:               4.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 560
Test mean error for best: 0.56000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_s_when_autoconstructing (integer_lte boolean_not) (integer_swap) () integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_s_when_autoconstructing (integer_lte boolean_not) (integer_swap) () integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 772 36 879 49 771 938 771 757 9)
Population mean number of elite cases: 4.99
Count of perfect (error zero) individuals by case: (8 772 36 879 49 771 938 771 757 9)
Population mean number of perfect (error zero) cases: 4.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 1, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction -76} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq -76) boolean_yank integer_dup_items exec_yankdup integer_add) exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)
Errors: [1 0 1 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 5.01
Median total errors in population: 4
Error averages by case: (0.992 0.228 0.964 0.121 0.951 0.229 0.062 0.229 0.243 0.991)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.471
Average program size in population (points): 57.805
Average percent parens in population: 0.264
Minimum age in population: 15.40625
Maximum age in population: 20.22705078125
Average age in population: 18.415013671875
Median age in population: 18.50537109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 159
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 9059286
--- Timings ---
Current time: 1559583638974 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.8 seconds, 61.2%
Fitness Testing:     11.0 seconds, 26.0%
Report:               5.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_and boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (integer_add) exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte exec_rot () () (integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))))
Lexicase best errors: [0 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 67
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction exec_rot} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_and boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (integer_add) exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte exec_rot () () (integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))))
Zero cases best errors: [0 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 67
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (771 211 447 1000 559 447 448 565 1000 933)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (771 211 447 0 559 447 448 565 0 933)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (print_integer boolean_and print_integer integer_flush boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Errors: [0 1 0 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 60
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.619
Median total errors in population: 6
Error averages by case: (0.229 0.789 0.553 1.0 0.441 0.553 0.552 0.435 1.0 0.067)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 42.902
Average program size in population (points): 58.709
Average percent parens in population: 0.269
Minimum age in population: 17.77734375
Maximum age in population: 21.828857421875
Average age in population: 19.84802905273438
Median age in population: 19.921142578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 10406853
--- Timings ---
Current time: 1559583642940 milliseconds
Total Time:          46.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 60.2%
Fitness Testing:     12.3 seconds, 26.8%
Report:               5.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: 94                 
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: 100                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: 65                 
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: 0                  
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer exec_noop boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean integer_mod) integer_yank))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer exec_noop boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean integer_mod) integer_yank))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (529 863 863 374 1000 1000 947 365 1000 715)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (529 863 863 374 0 0 947 365 0 715)
Population mean number of perfect (error zero) cases: 4.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (integer_swap in2 boolean_dup exec_shove (integer_swap in2 boolean_dup integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (exec_empty boolean_dup_items exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc) () integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 5.344
Median total errors in population: 5
Error averages by case: (0.471 0.137 0.137 0.626 1.0 1.0 0.053 0.635 1.0 0.285)
Error minima by case: (0 0 0 0 1 1 0 0 1 0)
Average genome size in population (length): 44.885
Average program size in population (points): 60.902
Average percent parens in population: 0.263
Minimum age in population: 18.77734375
Maximum age in population: 23.1387939453125
Average age in population: 21.41545361328125
Median age in population: 21.5419921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 11798585
--- Timings ---
Current time: 1559583647047 milliseconds
Total Time:          50.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.6 seconds, 59.2%
Fitness Testing:     13.6 seconds, 27.3%
Report:               6.7 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 842 30 1000 863 846 853 22 843 1000)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (313 842 30 0 863 846 853 22 843 0)
Population mean number of perfect (error zero) cases: 4.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean print_boolean exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Errors: [0 0 1 1 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 47
Size: 62
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.388
Median total errors in population: 5
Error averages by case: (0.687 0.158 0.97 1.0 0.137 0.154 0.147 0.978 0.157 1.0)
Error minima by case: (0 0 0 1 0 0 0 0 0 1)
Average genome size in population (length): 48.986
Average program size in population (points): 66.15
Average percent parens in population: 0.260
Minimum age in population: 20.22705078125
Maximum age in population: 24.600341796875
Average age in population: 23.35876318359375
Median age in population: 23.166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.633
Total error diversity:				 0.007
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13210441
--- Timings ---
Current time: 1559583651041 milliseconds
Total Time:          54.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.5 seconds, 58.2%
Fitness Testing:     15.0 seconds, 27.7%
Report:               7.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () () (integer_gt boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 2, :instruction exec_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () () (integer_gt boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (597 205 620 832 832 644 666 1000 205 645)
Population mean number of elite cases: 6.25
Count of perfect (error zero) individuals by case: (597 205 620 832 832 644 666 0 205 645)
Population mean number of perfect (error zero) cases: 5.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 4.754
Median total errors in population: 4
Error averages by case: (0.403 0.795 0.38 0.168 0.168 0.356 0.334 1.0 0.795 0.355)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 46.852
Average program size in population (points): 62.933
Average percent parens in population: 0.256
Minimum age in population: 23.1573486328125
Maximum age in population: 26.42657470703125
Average age in population: 25.04190841674805
Median age in population: 25.15663146972656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14647497
--- Timings ---
Current time: 1559583655082 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.4 seconds, 57.5%
Fitness Testing:     16.4 seconds, 28.1%
Report:               8.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -14                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 85                 
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: 37                 
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -28                
Correct output: -68                 | Program output: 22                 
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: 18                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -80                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -87                
Correct output: -69                 | Program output: 10                 
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: 54                 
Correct output: -96                 | Program output: -86                
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: 32                 
Correct output: -76                 | Program output: 53                 
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: 77                 
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: 12                 
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -28                
Correct output: -83                 | Program output: 55                 
Correct output: -82                 | Program output: -37                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 29                 
Correct output: -51                 | Program output: -33                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: 21                 
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -23                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap boolean_stackdepth boolean_dup exec_shove (integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth exec_flush boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.262
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap boolean_stackdepth boolean_dup exec_shove (integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth exec_flush boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.262
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 686 16 574 1000 685 1000 1000 590 931)
Population mean number of elite cases: 6.50
Count of perfect (error zero) individuals by case: (17 686 16 574 0 685 0 0 590 931)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 45
Size: 63
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.501
Median total errors in population: 7
Error averages by case: (0.983 0.314 0.984 0.426 1.0 0.315 1.0 1.0 0.41 0.069)
Error minima by case: (0 0 0 0 1 0 1 1 0 0)
Average genome size in population (length): 48.827
Average program size in population (points): 65.356
Average percent parens in population: 0.253
Minimum age in population: 24.94842529296875
Maximum age in population: 28.40191650390625
Average age in population: 26.72692518615723
Median age in population: 26.74459838867188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16098414
--- Timings ---
Current time: 1559583659072 milliseconds
Total Time:          62.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.3 seconds, 56.8%
Fitness Testing:     17.7 seconds, 28.5%
Report:               9.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction -63} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () exec_k_when_autoconstructing () (integer_mult 37 exec_shove () in3) exec_do*times (integer_swap in2 exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank -63 exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) () exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not)) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () boolean_invert_second_then_and integer_pop)
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 69
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction -63} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 2, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 2, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () exec_k_when_autoconstructing () (integer_mult 37 exec_shove () in3) exec_do*times (integer_swap in2 exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank -63 exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) () exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not)) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () boolean_invert_second_then_and integer_pop)
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 69
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 927 234 2 579 576 853 319 232 920)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (232 927 234 2 579 576 853 319 232 920)
Population mean number of perfect (error zero) cases: 4.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap boolean_not in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop)))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 48
Size: 64
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.126
Median total errors in population: 5
Error averages by case: (0.768 0.073 0.766 0.998 0.421 0.424 0.147 0.681 0.768 0.08)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.984
Average program size in population (points): 63.155
Average percent parens in population: 0.256
Minimum age in population: 26.59140014648438
Maximum age in population: 30.12684631347656
Average age in population: 28.4613830871582
Median age in population: 28.51984405517578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.01
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17446593
--- Timings ---
Current time: 1559583663065 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.2 seconds, 56.3%
Fitness Testing:     19.0 seconds, 28.7%
Report:               9.8 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 489
Test mean error for best: 0.48900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 52                 
Correct output: 2                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 64                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 47                 
Correct output: 1                   | Program output: 3                  
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 56                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 29                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 57                 
Correct output: 10                  | Program output: 64                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 57                 
Correct output: -89                 | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 8                  
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 46                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 2                  
Correct output: 34                  | Program output: 34                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 50                 
Correct output: -70                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 17                 
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: 36                 
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 26                 
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: 61                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -13                
Correct output: -18                 | Program output: 69                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 34                 
Correct output: -31                 | Program output: 35                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove (in3) exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add exec_k_when_autoconstructing (exec_dup_items exec_stackdepth) (integer_lte boolean_not integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))))
Lexicase best errors: [0 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove (in3) exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add exec_k_when_autoconstructing (exec_dup_items exec_stackdepth) (integer_lte boolean_not integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))))
Zero cases best errors: [0 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 121 776 18 17 747 14 732 8 835)
Population mean number of elite cases: 3.28
Count of perfect (error zero) individuals by case: (9 121 776 18 17 747 14 732 8 835)
Population mean number of perfect (error zero) cases: 3.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove (in3) exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min in2 boolean_dup exec_shove (integer_swap boolean_not in2 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Errors: [0 1 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 54
Size: 71
Percent parens: 0.239
--- Population Statistics ---
Average total errors in population: 6.723
Median total errors in population: 6
Error averages by case: (0.991 0.879 0.224 0.982 0.983 0.253 0.986 0.268 0.992 0.165)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.439
Average program size in population (points): 64.978
Average percent parens in population: 0.254
Minimum age in population: 28.15249633789062
Maximum age in population: 32.12684631347656
Average age in population: 29.66119223403931
Median age in population: 29.68566131591797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 18895298
--- Timings ---
Current time: 1559583667092 milliseconds
Total Time:          70.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.1 seconds, 55.8%
Fitness Testing:     20.3 seconds, 29.0%
Report:              10.6 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 650
Test mean error for best: 0.65000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: 96                 
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: 71                 
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: 89                 
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: 63                 
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: 11                 
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: 55                 
Correct output: -68                 | Program output: -10                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: 86                 
Correct output: -45                 | Program output: -31                
Correct output: -95                 | Program output: -60                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: 22                 
Correct output: -69                 | Program output: 12                 
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -22                
Correct output: -56                 | Program output: -33                
Correct output: -64                 | Program output: 27                 
Correct output: -96                 | Program output: 58                 
Correct output: -40                 | Program output: 37                 
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -8                 
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 24                 
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: 30                 
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -92                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -73                
Correct output: -71                 | Program output: 60                 
Correct output: -43                 | Program output: 44                 
Correct output: -72                 | Program output: 97                 
Correct output: -97                 | Program output: 79                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -44                
Correct output: -83                 | Program output: 15                 
Correct output: -82                 | Program output: -49                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: 41                 
Correct output: -51                 | Program output: 91                 
Correct output: -82                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -63                
Correct output: -70                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 in1 exec_do*range (in4 integer_rot exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 in1 exec_do*range (in4 integer_rot exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (948 200 119 157 357 876 8 411 14 176)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (948 200 119 157 357 876 8 411 14 176)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 in1 exec_do*range (in4 integer_rot exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.734
Median total errors in population: 7
Error averages by case: (0.052 0.8 0.881 0.843 0.643 0.124 0.992 0.589 0.986 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.315
Average program size in population (points): 68.69
Average percent parens in population: 0.253
Minimum age in population: 29.15249633789062
Maximum age in population: 33.40625381469727
Average age in population: 31.57938192176819
Median age in population: 31.65273857116699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 20333694
--- Timings ---
Current time: 1559583671072 milliseconds
Total Time:          74.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.9 seconds, 55.2%
Fitness Testing:     21.7 seconds, 29.2%
Report:              11.4 seconds, 15.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 421
Test mean error for best: 0.42100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 37                 
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 boolean_and exec_do*range (in4 integer_rot exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Lexicase best errors: [0 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in4} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) in1 boolean_and exec_do*range (in4 integer_rot exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Zero cases best errors: [0 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 528 125 564 187 327 127 87 566 787)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (21 528 125 564 187 327 127 87 566 787)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank boolean_flush integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank boolean_eq exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items integer_shove integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Errors: [0 1 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 52
Size: 69
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.681
Median total errors in population: 6
Error averages by case: (0.979 0.472 0.875 0.436 0.813 0.673 0.873 0.913 0.434 0.213)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.723
Average program size in population (points): 65.015
Average percent parens in population: 0.251
Minimum age in population: 31.51525497436523
Maximum age in population: 35.17014598846436
Average age in population: 33.67479575061798
Median age in population: 33.65273857116699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.007
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 21799802
--- Timings ---
Current time: 1559583675039 milliseconds
Total Time:          78.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.8 seconds, 54.8%
Fitness Testing:     23.0 seconds, 29.4%
Report:              12.2 seconds, 15.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 36                 
Correct output: 3                   | Program output: 52                 
Correct output: 2                   | Program output: 82                 
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 64                 
Correct output: 6                   | Program output: 20                 
Correct output: 15                  | Program output: 47                 
Correct output: 1                   | Program output: 3                  
Correct output: 0                   | Program output: 18                 
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 56                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 29                 
Correct output: 35                  | Program output: 39                 
Correct output: 20                  | Program output: 57                 
Correct output: 10                  | Program output: 64                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: 35                 
Correct output: 12                  | Program output: 57                 
Correct output: -89                 | Program output: 1                  
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 8                  
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 46                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: 2                  
Correct output: 34                  | Program output: 34                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: 85                 
Correct output: -70                 | Program output: 22                 
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: 25                 
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: 90                 
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: 26                 
Correct output: -94                 | Program output: -61                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: 96                 
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 84                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -32                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: 77                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 34                 
Correct output: -31                 | Program output: 35                 
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -66                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in3 exec_shove (in3) exec_do*times (integer_swap in4 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap (integer_mod) (integer_yank) tag_exec_115 () print_boolean integer_pop)))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in3 exec_shove (in3) exec_do*times (integer_swap in4 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap (integer_mod) (integer_yank) tag_exec_115 () print_boolean integer_pop)))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (794 219 601 318 71 914 292 939 765 298)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (794 219 601 318 71 914 292 939 765 298)
Population mean number of perfect (error zero) cases: 5.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_shove (in3) exec_do*times (integer_swap in4 boolean_dup exec_shove (integer_swap in2 integer_min integer_yank exec_do*range () in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth integer_lte boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap (integer_mod) (integer_yank) tag_exec_115 () print_boolean integer_pop)))))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 49
Size: 66
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 4.789
Median total errors in population: 5
Error averages by case: (0.206 0.781 0.399 0.682 0.929 0.086 0.708 0.061 0.235 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.792
Average program size in population (points): 64.882
Average percent parens in population: 0.248
Minimum age in population: 33.39160060882568
Maximum age in population: 36.51759719848633
Average age in population: 35.39668647241592
Median age in population: 35.43309211730957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.009
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 23263015
--- Timings ---
Current time: 1559583679048 milliseconds
Total Time:          82.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.7 seconds, 54.5%
Fitness Testing:     24.3 seconds, 29.6%
Report:              12.9 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output:                    
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 60                 
Correct output: 12                  | Program output: 53                 
Correct output: 19                  | Program output: 75                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 70                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 30                 
Correct output: 6                   | Program output: 39                 
Correct output: 12                  | Program output: 69                 
Correct output: 46                  | Program output: 90                 
Correct output: 18                  | Program output: 73                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -46                
Correct output: 8                   | Program output: 16                 
Correct output: -38                 | Program output: -25                
Correct output: 46                  | Program output: 60                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 60                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -1                 
Correct output: -45                 | Program output: -31                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -44                
Correct output: -99                 | Program output: -71                
Correct output: -56                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -34                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -8                 
Correct output: -93                 | Program output: 10                 
Correct output: 0                   | Program output: 35                 
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -67                
Correct output: 24                  | Program output: 82                 
Correct output: -92                 | Program output: -92                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -46                
Correct output: -97                 | Program output: 69                 
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -61                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -16                
Correct output: -94                 | Program output: -94                
Correct output: 20                  | Program output: 28                 
Correct output: -89                 | Program output: -63                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () exec_yank 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap in2 exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) exec_do*range ()) in1 exec_do*range (boolean_not integer_rot print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 64
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction exec_yank} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () exec_yank 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap in2 exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) exec_do*range ()) in1 exec_do*range (boolean_not integer_rot print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 64
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (791 333 218 223 225 161 770 151 223 218)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (791 333 218 223 225 161 770 151 223 218)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times})
Best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap in2 exec_shove (integer_swap in2 integer_min integer_yank exec_do*range ()) exec_do*range ()) in1 exec_do*range (boolean_not integer_rot print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank exec_yankdup integer_add) (exec_k_when_autoconstructing () (exec_dup_items exec_stackdepth boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times ())))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 42
Size: 57
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 6.687
Median total errors in population: 8
Error averages by case: (0.209 0.667 0.782 0.777 0.775 0.839 0.23 0.849 0.777 0.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.737
Average program size in population (points): 63.772
Average percent parens in population: 0.251
Minimum age in population: 34.96034240722656
Maximum age in population: 38.38585615158081
Average age in population: 36.8580465464592
Median age in population: 36.93592810630798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 24719971
--- Timings ---
Current time: 1559583683046 milliseconds
Total Time:          86.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.6 seconds, 54.1%
Fitness Testing:     25.7 seconds, 29.8%
Report:              13.7 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 225
Test mean error for best: 0.22500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -77                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: 93                 
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: 88                 
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 64                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 29                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 4                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -37                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 8                  
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 46                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -68                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 34                 
Correct output: -56                 | Program output: -20                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -95                 | Program output: -95                
Correct output: -54                 | Program output: -40                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -47                
Correct output: -82                 | Program output: -54                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -56                 | Program output: -56                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -90                
Correct output: -80                 | Program output: -80                
Correct output: -93                 | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -46                
Correct output: -93                 | Program output: -93                
Correct output: -76                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -74                
Correct output: -18                 | Program output: 61                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -82                
Correct output: -94                 | Program output: -88                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (boolean_xor in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer exec_do*while (boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 70
Percent parens: 0.257
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (integer_swap in2 boolean_dup exec_shove (boolean_xor in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer exec_do*while (boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 70
Percent parens: 0.257
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 741 740 764 868 596 740 775 3 937)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (287 741 740 764 868 596 740 775 3 937)
Population mean number of perfect (error zero) cases: 6.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in3 exec_do*times (integer_swap exec_do*times (integer_swap integer_dup_times boolean_dup exec_shove (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 3.549
Median total errors in population: 2
Error averages by case: (0.713 0.259 0.26 0.236 0.132 0.404 0.26 0.225 0.997 0.063)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.613
Average program size in population (points): 60.222
Average percent parens in population: 0.259
Minimum age in population: 36.54427576065063
Maximum age in population: 39.83137857913971
Average age in population: 38.29720152628422
Median age in population: 38.39152812957764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 26161384
--- Timings ---
Current time: 1559583687020 milliseconds
Total Time:          90.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 53.9%
Fitness Testing:     27.0 seconds, 30.0%
Report:              14.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 174
Test mean error for best: 0.17400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 64                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 29                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 8                  
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 46                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -10                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 34                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -31                
Correct output: -95                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -48                
Correct output: -56                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Lexicase best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (integer_swap in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Zero cases best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (integer_swap in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (439 437 390 931 883 387 465 872 465 465)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (439 437 390 931 883 387 465 872 465 465)
Population mean number of perfect (error zero) cases: 5.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction 37} {:close 1, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_do*times} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_yank} {:close 2, :instruction exec_do*range} {:close 0, :instruction in1} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_not} {:close 2, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*times} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_mod} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_exec_115} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop})
Best program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 45
Size: 61
Percent parens: 0.262
--- Population Statistics ---
Average total errors in population: 4.266
Median total errors in population: 4
Error averages by case: (0.561 0.563 0.61 0.069 0.117 0.613 0.535 0.128 0.535 0.535)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.366
Average program size in population (points): 66.119
Average percent parens in population: 0.253
Minimum age in population: 39.61414432525635
Maximum age in population: 41.10321640968323
Average age in population: 40.21158252871037
Median age in population: 40.10321640968323
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 223
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 27620865
--- Timings ---
Current time: 1559583690953 milliseconds
Total Time:          94.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.4 seconds, 53.6%
Fitness Testing:     28.3 seconds, 30.1%
Report:              15.2 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 25
Successful program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 61


Auto-simplifying with starting size: 61
step: 0
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 500
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1000
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 1500
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2000
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 2500
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3000
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 3500
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4000
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 4500
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

step: 5000
program: (integer_mult 37 exec_shove () in4 exec_do*times (integer_swap exec_do*times (integer_swap exec_do*times (in3 in2 integer_min integer_yank exec_do*range ()) in1 integer_min integer_yank exec_do*range ()) in1 exec_do*range (boolean_empty boolean_and print_integer boolean_yank boolean_flush exec_y (boolean_eq exec_rot () (boolean_frominteger boolean_dup_items boolean_yank integer_dup_items exec_yankdup integer_add) (boolean_not boolean_not) integer_inc)) integer_fromboolean exec_do*times (exec_swap () (integer_mod) integer_yank) tag_exec_115 () print_boolean integer_pop))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 61

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 174
Test mean error for best: 0.17400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 1
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 1
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 1
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 1
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 1
Test Case  344 | Error: 0
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 1
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 1
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 1
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -77                 | Program output: -67                
Correct output: -60                 | Program output: -60                
Correct output: -51                 | Program output: -51                
Correct output: 62                  | Program output: 62                 
Correct output: -78                 | Program output: -78                
Correct output: -67                 | Program output: -67                
Correct output: -100                | Program output: -100               
Correct output: 35                  | Program output: 66                 
Correct output: 12                  | Program output: 12                 
Correct output: -49                 | Program output: -49                
Correct output: -90                 | Program output: -90                
Correct output: -11                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: 58                  | Program output: 58                 
Correct output: -71                 | Program output: -71                
Correct output: 5                   | Program output: 5                  
Correct output: 3                   | Program output: 3                  
Correct output: 2                   | Program output: 2                  
Correct output: 25                  | Program output: 25                 
Correct output: 12                  | Program output: 12                 
Correct output: 19                  | Program output: 64                 
Correct output: 6                   | Program output: 9                  
Correct output: 15                  | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 0                   | Program output: 0                  
Correct output: 28                  | Program output: 28                 
Correct output: 23                  | Program output: 23                 
Correct output: 25                  | Program output: 25                 
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 46                  | Program output: 46                 
Correct output: 18                  | Program output: 29                 
Correct output: 35                  | Program output: 35                 
Correct output: 20                  | Program output: 20                 
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: 0                   | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -54                 | Program output: -54                
Correct output: 12                  | Program output: 51                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
Correct output: 8                   | Program output: 8                  
Correct output: -38                 | Program output: -38                
Correct output: 46                  | Program output: 46                 
Correct output: -73                 | Program output: -73                
Correct output: -68                 | Program output: -10                
Correct output: -39                 | Program output: -39                
Correct output: 34                  | Program output: 34                 
Correct output: -56                 | Program output: -56                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -31                
Correct output: -95                 | Program output: -60                
Correct output: -54                 | Program output: -54                
Correct output: -70                 | Program output: -70                
Correct output: -97                 | Program output: -97                
Correct output: -69                 | Program output: -69                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -48                
Correct output: -56                 | Program output: -33                
Correct output: -64                 | Program output: -64                
Correct output: -96                 | Program output: -96                
Correct output: -40                 | Program output: -40                
Correct output: -65                 | Program output: -65                
Correct output: -94                 | Program output: -94                
Correct output: -80                 | Program output: -8                 
Correct output: -93                 | Program output: -93                
Correct output: 0                   | Program output: 0                  
Correct output: -79                 | Program output: -79                
Correct output: -93                 | Program output: -13                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: 24                  | Program output: 24                 
Correct output: -92                 | Program output: -92                
Correct output: -18                 | Program output: -18                
Correct output: -83                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -43                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -72                 | Program output: -44                
Correct output: -83                 | Program output: -83                
Correct output: -82                 | Program output: -82                
Correct output: 25                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -41                 | Program output: -41                
Correct output: -51                 | Program output: -51                
Correct output: -82                 | Program output: -60                
Correct output: -94                 | Program output: -94                
Correct output: 20                  | Program output: 20                 
Correct output: -89                 | Program output: -89                
Correct output: -70                 | Program output: -70                
;;******************************
